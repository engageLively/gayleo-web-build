System.register(['./__rootModule___commonjs-entry-8713db55.js', './path-af16b01c.js', './index-7973fef2.js', './npm_functional-red-black-tree@1.0-f732f545.js', './app-0e67f1cf.js'], (function (exports, module) {
  var __contextModule__ = typeof module !== 'undefined' ? module : arguments[1];
;
  var fs$b, Dir, Dirent, F_OK, FileReadStream, FileWriteStream, R_OK, ReadStream, Stats, W_OK, WriteStream, X_OK, _toUnixTimestamp, access, accessSync, appendFile, appendFileSync, chmod, chmodSync, chown, chownSync, close, closeSync, constants$1, copyFile, copyFileSync, cp, cpSync, createReadStream, createWriteStream, exists, existsSync, fchmod, fchmodSync, fchown, fchownSync, fdatasync, fdatasyncSync, fstat, fstatSync, fsync, fsyncSync, ftruncate, ftruncateSync, futimes, futimesSync, lchmod, lchmodSync, lchown, lchownSync, link, linkSync, lstat, lstatSync, mkdir, mkdirSync, mkdtemp, mkdtempSync, open, openSync, opendir, opendirSync, promises, read, readFile$1, readFileSync, readSync, readdir, readdirSync, readlink, readlinkSync, readv, readvSync, realpath$1, realpathSync$1, rename, renameSync, rm, rmSync, rmdir$1, rmdirSync$1, stat, statSync, symlink, symlinkSync, truncate$1, truncateSync, unlink, unlinkSync, unwatchFile, utimes, utimesSync, watch, watchFile, write, writeFile$1, writeFileSync, writeSync, writev, writevSync, X, TextDecoder, TextEncoder, _extend, callbackify, debuglog, deprecate, format, inherits, inspect, isArray$3, isBoolean$1, isBuffer$1, isDate, isError, isFunction$4, isNull$1, isNullOrUndefined$1, isNumber, isObject$3, isPrimitive, isRegExp$1, isString$1, isSymbol, isUndefined$1, log$1, promisify$1, types, et, AssertionError, deepEqual, deepStrictEqual, doesNotReject, doesNotThrow, equal$2, fail, ifError, notDeepEqual, notDeepStrictEqual, notEqual, notStrictEqual, ok$1, rejects, strict$1, strictEqual, throws, uptime, _objectSpread2, process$g, exports$5S, _createClass, _slicedToArray, _createForOfIteratorHelper, _classCallCheck, _toConsumableArray, _inherits$1, _createSuper, _get, _getPrototypeOf, _wrapNativeSuper, _objectWithoutProperties, _typeof, _construct, _defineProperty, exports$5T, y$2, exports$1$_, _path2, exports$5R, Node, Parser, Position, SourceLocation, TokContext, Token$1, TokenType, defaultOptions$2, getLineInfo, isIdentifierChar, isIdentifierStart, isNewLine, keywordTypes, lineBreak, lineBreakG, nonASCIIwhitespace, parse$8, parseExpressionAt, tokContexts, tokTypes, tokenizer, version$6, exports$2$n, ast$1, code, keyword, exports$1$Z, _events2, _inherits2, exports$5U;
  return {
    setters: [function (module) {
      fs$b = module.e4;
      Dir = module.e5;
      Dirent = module.e6;
      F_OK = module.e7;
      FileReadStream = module.e8;
      FileWriteStream = module.e9;
      R_OK = module.ea;
      ReadStream = module.eb;
      Stats = module.ec;
      W_OK = module.ed;
      WriteStream = module.ee;
      X_OK = module.ef;
      _toUnixTimestamp = module.eg;
      access = module.eh;
      accessSync = module.ei;
      appendFile = module.ej;
      appendFileSync = module.ek;
      chmod = module.el;
      chmodSync = module.em;
      chown = module.en;
      chownSync = module.eo;
      close = module.ep;
      closeSync = module.eq;
      constants$1 = module.er;
      copyFile = module.es;
      copyFileSync = module.et;
      cp = module.eu;
      cpSync = module.ev;
      createReadStream = module.ew;
      createWriteStream = module.ex;
      exists = module.ey;
      existsSync = module.ez;
      fchmod = module.eA;
      fchmodSync = module.eB;
      fchown = module.eC;
      fchownSync = module.eD;
      fdatasync = module.eE;
      fdatasyncSync = module.eF;
      fstat = module.eG;
      fstatSync = module.eH;
      fsync = module.eI;
      fsyncSync = module.eJ;
      ftruncate = module.eK;
      ftruncateSync = module.eL;
      futimes = module.eM;
      futimesSync = module.eN;
      lchmod = module.eO;
      lchmodSync = module.eP;
      lchown = module.eQ;
      lchownSync = module.eR;
      link = module.eS;
      linkSync = module.eT;
      lstat = module.eU;
      lstatSync = module.eV;
      mkdir = module.eW;
      mkdirSync = module.eX;
      mkdtemp = module.eY;
      mkdtempSync = module.eZ;
      open = module.e_;
      openSync = module.e$;
      opendir = module.f0;
      opendirSync = module.f1;
      promises = module.f2;
      read = module.f3;
      readFile$1 = module.f4;
      readFileSync = module.f5;
      readSync = module.f6;
      readdir = module.f7;
      readdirSync = module.f8;
      readlink = module.f9;
      readlinkSync = module.fa;
      readv = module.fb;
      readvSync = module.fc;
      realpath$1 = module.fd;
      realpathSync$1 = module.fe;
      rename = module.ff;
      renameSync = module.fg;
      rm = module.fh;
      rmSync = module.fi;
      rmdir$1 = module.fj;
      rmdirSync$1 = module.fk;
      stat = module.fl;
      statSync = module.fm;
      symlink = module.fn;
      symlinkSync = module.fo;
      truncate$1 = module.fp;
      truncateSync = module.fq;
      unlink = module.fr;
      unlinkSync = module.fs;
      unwatchFile = module.ft;
      utimes = module.fu;
      utimesSync = module.fv;
      watch = module.fw;
      watchFile = module.fx;
      write = module.fy;
      writeFile$1 = module.fz;
      writeFileSync = module.fA;
      writeSync = module.fB;
      writev = module.fC;
      writevSync = module.fD;
      X = module.X;
      TextDecoder = module.fE;
      TextEncoder = module.fF;
      _extend = module.fG;
      callbackify = module.fH;
      debuglog = module.fI;
      deprecate = module.fJ;
      format = module.fK;
      inherits = module.fL;
      inspect = module.fM;
      isArray$3 = module.fN;
      isBoolean$1 = module.fO;
      isBuffer$1 = module.fP;
      isDate = module.fQ;
      isError = module.fR;
      isFunction$4 = module.fS;
      isNull$1 = module.fT;
      isNullOrUndefined$1 = module.fU;
      isNumber = module.fV;
      isObject$3 = module.fW;
      isPrimitive = module.fX;
      isRegExp$1 = module.fY;
      isString$1 = module.fZ;
      isSymbol = module.f_;
      isUndefined$1 = module.f$;
      log$1 = module.g0;
      promisify$1 = module.g1;
      types = module.g2;
      et = module.dM;
      AssertionError = module.g3;
      deepEqual = module.g4;
      deepStrictEqual = module.g5;
      doesNotReject = module.g6;
      doesNotThrow = module.g7;
      equal$2 = module.g8;
      fail = module.g9;
      ifError = module.ga;
      notDeepEqual = module.gb;
      notDeepStrictEqual = module.gc;
      notEqual = module.gd;
      notStrictEqual = module.ge;
      ok$1 = module.gf;
      rejects = module.gg;
      strict$1 = module.gh;
      strictEqual = module.gi;
      throws = module.gj;
      uptime = module.gk;
      _objectSpread2 = module.gl;
      process$g = module.a4;
      exports$5S = module.gm;
      _createClass = module.g;
      _slicedToArray = module.o;
      _createForOfIteratorHelper = module.a6;
      _classCallCheck = module.f;
      _toConsumableArray = module.r;
      _inherits$1 = module.d;
      _createSuper = module.e;
      _get = module.bG;
      _getPrototypeOf = module.bH;
      _wrapNativeSuper = module.gn;
      _objectWithoutProperties = module.go;
      _typeof = module.a5;
      _construct = module.gp;
      _defineProperty = module.ah;
      exports$5T = module.a3;
      y$2 = module.Q;
      exports$1$_ = module.dL;
    }, function (module) {
      _path2 = module._;
    }, function (module) {
      exports$5R = module._;
      Node = module.$;
      Parser = module.a0;
      Position = module.a1;
      SourceLocation = module.a2;
      TokContext = module.a3;
      Token$1 = module.a4;
      TokenType = module.a5;
      defaultOptions$2 = module.a6;
      getLineInfo = module.a7;
      isIdentifierChar = module.a8;
      isIdentifierStart = module.a9;
      isNewLine = module.aa;
      keywordTypes = module.ab;
      lineBreak = module.ac;
      lineBreakG = module.ad;
      nonASCIIwhitespace = module.ae;
      parse$8 = module.af;
      parseExpressionAt = module.ag;
      tokContexts = module.ah;
      tokTypes = module.ai;
      tokenizer = module.aj;
      version$6 = module.ak;
      exports$2$n = module.al;
      ast$1 = module.am;
      code = module.an;
      keyword = module.ao;
    }, function (module) {
      exports$1$Z = module.e;
      _events2 = module.a;
      _inherits2 = module._;
    }, function (module) {
      exports$5U = module.a;
    }],
    execute: (function () {

      var _fs2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': fs$b,
        Dir: Dir,
        Dirent: Dirent,
        F_OK: F_OK,
        FileReadStream: FileReadStream,
        FileWriteStream: FileWriteStream,
        R_OK: R_OK,
        ReadStream: ReadStream,
        Stats: Stats,
        W_OK: W_OK,
        WriteStream: WriteStream,
        X_OK: X_OK,
        _toUnixTimestamp: _toUnixTimestamp,
        access: access,
        accessSync: accessSync,
        appendFile: appendFile,
        appendFileSync: appendFileSync,
        chmod: chmod,
        chmodSync: chmodSync,
        chown: chown,
        chownSync: chownSync,
        close: close,
        closeSync: closeSync,
        constants: constants$1,
        copyFile: copyFile,
        copyFileSync: copyFileSync,
        cp: cp,
        cpSync: cpSync,
        createReadStream: createReadStream,
        createWriteStream: createWriteStream,
        exists: exists,
        existsSync: existsSync,
        fchmod: fchmod,
        fchmodSync: fchmodSync,
        fchown: fchown,
        fchownSync: fchownSync,
        fdatasync: fdatasync,
        fdatasyncSync: fdatasyncSync,
        fstat: fstat,
        fstatSync: fstatSync,
        fsync: fsync,
        fsyncSync: fsyncSync,
        ftruncate: ftruncate,
        ftruncateSync: ftruncateSync,
        futimes: futimes,
        futimesSync: futimesSync,
        lchmod: lchmod,
        lchmodSync: lchmodSync,
        lchown: lchown,
        lchownSync: lchownSync,
        link: link,
        linkSync: linkSync,
        lstat: lstat,
        lstatSync: lstatSync,
        mkdir: mkdir,
        mkdirSync: mkdirSync,
        mkdtemp: mkdtemp,
        mkdtempSync: mkdtempSync,
        open: open,
        openSync: openSync,
        opendir: opendir,
        opendirSync: opendirSync,
        promises: promises,
        read: read,
        readFile: readFile$1,
        readFileSync: readFileSync,
        readSync: readSync,
        readdir: readdir,
        readdirSync: readdirSync,
        readlink: readlink,
        readlinkSync: readlinkSync,
        readv: readv,
        readvSync: readvSync,
        realpath: realpath$1,
        realpathSync: realpathSync$1,
        rename: rename,
        renameSync: renameSync,
        rm: rm,
        rmSync: rmSync,
        rmdir: rmdir$1,
        rmdirSync: rmdirSync$1,
        stat: stat,
        statSync: statSync,
        symlink: symlink,
        symlinkSync: symlinkSync,
        truncate: truncate$1,
        truncateSync: truncateSync,
        unlink: unlink,
        unlinkSync: unlinkSync,
        unwatchFile: unwatchFile,
        utimes: utimes,
        utimesSync: utimesSync,
        watch: watch,
        watchFile: watchFile,
        write: write,
        writeFile: writeFile$1,
        writeFileSync: writeFileSync,
        writeSync: writeSync,
        writev: writev,
        writevSync: writevSync
      });

      var _acorn2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$5R,
        Node: Node,
        Parser: Parser,
        Position: Position,
        SourceLocation: SourceLocation,
        TokContext: TokContext,
        Token: Token$1,
        TokenType: TokenType,
        defaultOptions: defaultOptions$2,
        getLineInfo: getLineInfo,
        isIdentifierChar: isIdentifierChar,
        isIdentifierStart: isIdentifierStart,
        isNewLine: isNewLine,
        keywordTypes: keywordTypes,
        lineBreak: lineBreak,
        lineBreakG: lineBreakG,
        nonASCIIwhitespace: nonASCIIwhitespace,
        parse: parse$8,
        parseExpressionAt: parseExpressionAt,
        tokContexts: tokContexts,
        tokTypes: tokTypes,
        tokenizer: tokenizer,
        version: version$6
      });

      var _util2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': X,
        TextDecoder: TextDecoder,
        TextEncoder: TextEncoder,
        _extend: _extend,
        callbackify: callbackify,
        debuglog: debuglog,
        deprecate: deprecate,
        format: format,
        inherits: inherits,
        inspect: inspect,
        isArray: isArray$3,
        isBoolean: isBoolean$1,
        isBuffer: isBuffer$1,
        isDate: isDate,
        isError: isError,
        isFunction: isFunction$4,
        isNull: isNull$1,
        isNullOrUndefined: isNullOrUndefined$1,
        isNumber: isNumber,
        isObject: isObject$3,
        isPrimitive: isPrimitive,
        isRegExp: isRegExp$1,
        isString: isString$1,
        isSymbol: isSymbol,
        isUndefined: isUndefined$1,
        log: log$1,
        promisify: promisify$1,
        types: types
      });

      var _assert2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': et,
        AssertionError: AssertionError,
        deepEqual: deepEqual,
        deepStrictEqual: deepStrictEqual,
        doesNotReject: doesNotReject,
        doesNotThrow: doesNotThrow,
        equal: equal$2,
        fail: fail,
        ifError: ifError,
        notDeepEqual: notDeepEqual,
        notDeepStrictEqual: notDeepStrictEqual,
        notEqual: notEqual,
        notStrictEqual: notStrictEqual,
        ok: ok$1,
        rejects: rejects,
        strict: strict$1,
        strictEqual: strictEqual,
        throws: throws
      });

      var _functionalRedBlackTree2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$Z
      });

      var eslintrc = {
        "parserOptions": {
          "ecmaVersion": 2021,
          "ecmaFeatures": { "jsx": true },
          "sourceType": "module"
        },
        "env": {
          "es2021": true,
          "node": true
        },
        "plugins": [
          "import",
          "node",
          "promise"
        ],
        "globals": {
          "document": "readonly",
          "navigator": "readonly",
          "window": "readonly"
        },
        "rules": {
          "no-var": "warn",
          "accessor-pairs": [
            "error",
            {
              "setWithoutGet": true,
              "enforceForClassMembers": true
            }
          ],
          "array-bracket-spacing": [
            "error",
            "never"
          ],
          "array-callback-return": [
            "error",
            {
              "allowImplicit": false,
              "checkForEach": false
            }
          ],
          "arrow-spacing": [
            "error",
            {
              "before": true,
              "after": true
            }
          ],
          "block-spacing": [
            "error",
            "always"
          ],
          "brace-style": [
            "error",
            "1tbs",
            { "allowSingleLine": true }
          ],
          "camelcase": [
            "error",
            {
              "allow": ["^UNSAFE_"],
              "properties": "never",
              "ignoreGlobals": true
            }
          ],
          "comma-dangle": [
            "error",
            {
              "arrays": "never",
              "objects": "never",
              "imports": "never",
              "exports": "never",
              "functions": "never"
            }
          ],
          "comma-spacing": [
            "error",
            {
              "before": false,
              "after": true
            }
          ],
          "comma-style": [
            "error",
            "last"
          ],
          "computed-property-spacing": [
            "error",
            "never",
            { "enforceForClassMembers": true }
          ],
          "constructor-super": "error",
          "curly": [
            "error",
            "multi-line"
          ],
          "default-case-last": "error",
          "dot-location": [
            "error",
            "property"
          ],
          "dot-notation": [
            "error",
            { "allowKeywords": true }
          ],
          "eol-last": "error",
          "eqeqeq": [
            "error",
            "always",
            { "null": "ignore" }
          ],
          "func-call-spacing": [
            "error",
            "never"
          ],
          "generator-star-spacing": [
            "error",
            {
              "before": true,
              "after": true
            }
          ],
          "indent": [
            "error",
            2,
            {
              "SwitchCase": 1,
              "VariableDeclarator": 1,
              "outerIIFEBody": 1,
              "MemberExpression": 1,
              "FunctionDeclaration": {
                "parameters": 1,
                "body": 1
              },
              "FunctionExpression": {
                "parameters": 1,
                "body": 1
              },
              "CallExpression": { "arguments": 1 },
              "ArrayExpression": 1,
              "ObjectExpression": 1,
              "ImportDeclaration": 1,
              "flatTernaryExpressions": false,
              "ignoreComments": false,
              "ignoredNodes": [
                "TemplateLiteral *",
                "JSXElement",
                "JSXElement > *",
                "JSXAttribute",
                "JSXIdentifier",
                "JSXNamespacedName",
                "JSXMemberExpression",
                "JSXSpreadAttribute",
                "JSXExpressionContainer",
                "JSXOpeningElement",
                "JSXClosingElement",
                "JSXFragment",
                "JSXOpeningFragment",
                "JSXClosingFragment",
                "JSXText",
                "JSXEmptyExpression",
                "JSXSpreadChild"
              ],
              "offsetTernaryExpressions": true
            }
          ],
          "key-spacing": [
            "error",
            {
              "beforeColon": false,
              "afterColon": true
            }
          ],
          "keyword-spacing": [
            "error",
            {
              "before": true,
              "after": true
            }
          ],
          "lines-between-class-members": [
            "error",
            "always",
            { "exceptAfterSingleLine": true }
          ],
          "multiline-ternary": [
            "error",
            "always-multiline"
          ],
          "new-cap": [
            "error",
            {
              "newIsCap": true,
              "capIsNew": false,
              "properties": true
            }
          ],
          "new-parens": "error",
          "no-array-constructor": "error",
          "no-async-promise-executor": "error",
          "no-caller": "error",
          "no-case-declarations": "error",
          "no-class-assign": "error",
          "no-compare-neg-zero": "error",
          "no-cond-assign": "error",
          "no-const-assign": "error",
          "no-constant-condition": [
            "error",
            { "checkLoops": false }
          ],
          "no-control-regex": "error",
          "no-debugger": "error",
          "no-delete-var": "error",
          "no-dupe-args": "error",
          "no-dupe-class-members": "error",
          "no-dupe-keys": "error",
          "no-duplicate-case": "error",
          "no-useless-backreference": "error",
          "no-empty": [
            "error",
            { "allowEmptyCatch": true }
          ],
          "no-empty-character-class": "error",
          "no-empty-pattern": "error",
          "no-eval": "error",
          "no-ex-assign": "error",
          "no-extend-native": "error",
          "no-extra-bind": "error",
          "no-extra-boolean-cast": "error",
          "no-extra-parens": [
            "error",
            "functions"
          ],
          "no-fallthrough": "error",
          "no-floating-decimal": "error",
          "no-func-assign": "error",
          "no-global-assign": "error",
          "no-implied-eval": "error",
          "no-import-assign": "error",
          "no-invalid-regexp": "error",
          "no-irregular-whitespace": "error",
          "no-iterator": "error",
          "no-labels": [
            "error",
            {
              "allowLoop": false,
              "allowSwitch": false
            }
          ],
          "no-lone-blocks": "error",
          "no-loss-of-precision": "error",
          "no-misleading-character-class": "error",
          "no-prototype-builtins": "error",
          "no-useless-catch": "error",
          "no-mixed-operators": [
            "error",
            {
              "groups": [
                [
                  "==",
                  "!=",
                  "===",
                  "!==",
                  ">",
                  ">=",
                  "<",
                  "<="
                ],
                [
                  "&&",
                  "||"
                ],
                [
                  "in",
                  "instanceof"
                ]
              ],
              "allowSamePrecedence": true
            }
          ],
          "no-mixed-spaces-and-tabs": "error",
          "no-multi-spaces": "error",
          "no-multi-str": "error",
          "no-multiple-empty-lines": [
            "error",
            {
              "max": 1,
              "maxEOF": 0
            }
          ],
          "no-new": "error",
          "no-new-func": "error",
          "no-new-object": "error",
          "no-new-symbol": "error",
          "no-new-wrappers": "error",
          "no-obj-calls": "error",
          "no-octal": "error",
          "no-octal-escape": "error",
          "no-proto": "error",
          "no-redeclare": [
            "error",
            { "builtinGlobals": false }
          ],
          "no-regex-spaces": "error",
          "no-return-assign": [
            "error",
            "except-parens"
          ],
          "no-self-assign": [
            "error",
            { "props": true }
          ],
          "no-self-compare": "error",
          "no-sequences": "error",
          "no-shadow-restricted-names": "error",
          "no-sparse-arrays": "error",
          "no-tabs": "error",
          "no-template-curly-in-string": "error",
          "no-this-before-super": "error",
          "no-throw-literal": "error",
          "no-trailing-spaces": "error",
          "no-undef": "error",
          "no-undef-init": "error",
          "no-unexpected-multiline": "error",
          "no-unmodified-loop-condition": "error",
          "no-unneeded-ternary": [
            "error",
            { "defaultAssignment": false }
          ],
          "no-unreachable": "error",
          "no-unreachable-loop": "error",
          "no-unsafe-finally": "error",
          "no-unsafe-negation": "error",
          "no-unused-expressions": [
            "error",
            {
              "allowShortCircuit": true,
              "allowTernary": true,
              "allowTaggedTemplates": true
            }
          ],
          "no-unused-vars": [
            "error",
            {
              "args": "none",
              "caughtErrors": "none",
              "ignoreRestSiblings": true,
              "vars": "all"
            }
          ],
          "no-use-before-define": [
            "error",
            {
              "functions": false,
              "classes": false,
              "variables": false
            }
          ],
          "no-useless-call": "error",
          "no-useless-computed-key": "error",
          "no-useless-constructor": "error",
          "no-useless-escape": "error",
          "no-useless-rename": "error",
          "no-useless-return": "error",
          "no-void": "error",
          "no-whitespace-before-property": "error",
          "no-with": "error",
          "object-curly-newline": [
            "error",
            {
              "multiline": true,
              "consistent": true
            }
          ],
          "object-curly-spacing": [
            "error",
            "always"
          ],
          "object-property-newline": [
            "error",
            { "allowMultiplePropertiesPerLine": true }
          ],
          "one-var": [
            "error",
            { "initialized": "never" }
          ],
          "operator-linebreak": [
            "error",
            "after",
            {
              "overrides": {
                "?": "before",
                ":": "before",
                "|>": "before"
              }
            }
          ],
          "padded-blocks": [
            "error",
            {
              "blocks": "never",
              "switches": "never",
              "classes": "never"
            }
          ],
          "prefer-const": [
            "error",
            { "destructuring": "all" }
          ],
          "prefer-promise-reject-errors": "error",
          "prefer-regex-literals": [
            "error",
            { "disallowRedundantWrapping": true }
          ],
          "quote-props": [
            "error",
            "as-needed"
          ],
          "quotes": [
            "error",
            "single",
            {
              "avoidEscape": true,
              "allowTemplateLiterals": false
            }
          ],
          "rest-spread-spacing": [
            "error",
            "never"
          ],
          "semi": [
            "error",
            "never"
          ],
          "semi-spacing": [
            "error",
            {
              "before": false,
              "after": true
            }
          ],
          "space-before-blocks": [
            "error",
            "always"
          ],
          "space-before-function-paren": [
            "error",
            "always"
          ],
          "space-in-parens": [
            "error",
            "never"
          ],
          "space-infix-ops": "error",
          "space-unary-ops": [
            "error",
            {
              "words": true,
              "nonwords": false
            }
          ],
          "spaced-comment": [
            "error",
            "always",
            {
              "line": {
                "markers": [
                  "*package",
                  "!",
                  "/",
                  ",",
                  "="
                ]
              },
              "block": {
                "balanced": true,
                "markers": [
                  "*package",
                  "!",
                  ",",
                  ":",
                  "::",
                  "flow-include"
                ],
                "exceptions": ["*"]
              }
            }
          ],
          "symbol-description": "error",
          "template-curly-spacing": [
            "error",
            "never"
          ],
          "template-tag-spacing": [
            "error",
            "never"
          ],
          "unicode-bom": [
            "error",
            "never"
          ],
          "use-isnan": [
            "error",
            {
              "enforceForSwitchCase": true,
              "enforceForIndexOf": true
            }
          ],
          "valid-typeof": [
            "error",
            { "requireStringLiterals": true }
          ],
          "wrap-iife": [
            "error",
            "any",
            { "functionPrototypeMethods": true }
          ],
          "yield-star-spacing": [
            "error",
            "both"
          ],
          "yoda": [
            "error",
            "never"
          ],
          "import/export": "error",
          "import/first": "error",
          "import/no-absolute-path": [
            "error",
            {
              "esmodule": true,
              "commonjs": true,
              "amd": false
            }
          ],
          "import/no-duplicates": "error",
          "import/no-named-default": "error",
          "import/no-webpack-loader-syntax": "error",
          "node/handle-callback-err": [
            "error",
            "^(err|error)$"
          ],
          "node/no-callback-literal": "error",
          "node/no-deprecated-api": "error",
          "node/no-exports-assign": "error",
          "node/no-new-require": "error",
          "node/no-path-concat": "error",
          "node/process-exit-as-throw": "error",
          "promise/param-names": "error"
        }
      };

      var _package$5 = {
        "name": "eslint",
        "version": "7.32.0",
        "author": "Nicholas C. Zakas <nicholas+npm@nczconsulting.com>",
        "description": "An AST-based pattern checker for JavaScript.",
        "bin": { "eslint": "./bin/eslint.js" },
        "main": "./lib/api.js",
        "scripts": {
          "test": "node Makefile.js test",
          "test:cli": "mocha",
          "lint": "node Makefile.js lint",
          "fix": "node Makefile.js lint -- fix",
          "fuzz": "node Makefile.js fuzz",
          "generate-release": "node Makefile.js generateRelease",
          "generate-alpharelease": "node Makefile.js generatePrerelease -- alpha",
          "generate-betarelease": "node Makefile.js generatePrerelease -- beta",
          "generate-rcrelease": "node Makefile.js generatePrerelease -- rc",
          "publish-release": "node Makefile.js publishRelease",
          "docs": "node Makefile.js docs",
          "gensite": "node Makefile.js gensite",
          "webpack": "node Makefile.js webpack",
          "perf": "node Makefile.js perf"
        },
        "gitHooks": { "pre-commit": "lint-staged" },
        "lint-staged": {
          "*.js": "eslint --fix",
          "*.md": "markdownlint"
        },
        "files": [
          "LICENSE",
          "README.md",
          "bin",
          "conf",
          "lib",
          "messages"
        ],
        "repository": "eslint/eslint",
        "funding": "https://opencollective.com/eslint",
        "homepage": "https://eslint.org",
        "bugs": "https://github.com/eslint/eslint/issues/",
        "dependencies": {
          "@babel/code-frame": "7.12.11",
          "@eslint/eslintrc": "^0.4.3",
          "@humanwhocodes/config-array": "^0.5.0",
          "ajv": "^6.10.0",
          "chalk": "^4.0.0",
          "cross-spawn": "^7.0.2",
          "debug": "^4.0.1",
          "doctrine": "^3.0.0",
          "enquirer": "^2.3.5",
          "escape-string-regexp": "^4.0.0",
          "eslint-scope": "^5.1.1",
          "eslint-utils": "^2.1.0",
          "eslint-visitor-keys": "^2.0.0",
          "espree": "^7.3.1",
          "esquery": "^1.4.0",
          "esutils": "^2.0.2",
          "fast-deep-equal": "^3.1.3",
          "file-entry-cache": "^6.0.1",
          "functional-red-black-tree": "^1.0.1",
          "glob-parent": "^5.1.2",
          "globals": "^13.6.0",
          "ignore": "^4.0.6",
          "import-fresh": "^3.0.0",
          "imurmurhash": "^0.1.4",
          "is-glob": "^4.0.0",
          "js-yaml": "^3.13.1",
          "json-stable-stringify-without-jsonify": "^1.0.1",
          "levn": "^0.4.1",
          "lodash.merge": "^4.6.2",
          "minimatch": "^3.0.4",
          "natural-compare": "^1.4.0",
          "optionator": "^0.9.1",
          "progress": "^2.0.0",
          "regexpp": "^3.1.0",
          "semver": "^7.2.1",
          "strip-ansi": "^6.0.0",
          "strip-json-comments": "^3.1.0",
          "table": "^6.0.9",
          "text-table": "^0.2.0",
          "v8-compile-cache": "^2.0.3"
        },
        "devDependencies": {
          "@babel/core": "^7.4.3",
          "@babel/preset-env": "^7.4.3",
          "babel-loader": "^8.0.5",
          "chai": "^4.0.1",
          "cheerio": "^0.22.0",
          "common-tags": "^1.8.0",
          "core-js": "^3.1.3",
          "dateformat": "^3.0.3",
          "ejs": "^3.0.2",
          "eslint": "file:.",
          "eslint-config-eslint": "file:packages/eslint-config-eslint",
          "eslint-plugin-eslint-plugin": "^3.5.3",
          "eslint-plugin-internal-rules": "file:tools/internal-rules",
          "eslint-plugin-jsdoc": "^25.4.3",
          "eslint-plugin-node": "^11.1.0",
          "eslint-release": "^2.0.0",
          "eslump": "^3.0.0",
          "esprima": "^4.0.1",
          "fs-teardown": "0.1.1",
          "glob": "^7.1.6",
          "jsdoc": "^3.5.5",
          "karma": "^6.1.1",
          "karma-chrome-launcher": "^3.1.0",
          "karma-mocha": "^2.0.1",
          "karma-mocha-reporter": "^2.2.5",
          "karma-webpack": "^5.0.0",
          "lint-staged": "^10.1.2",
          "load-perf": "^0.2.0",
          "markdownlint": "^0.19.0",
          "markdownlint-cli": "^0.22.0",
          "memfs": "^3.0.1",
          "mocha": "^8.3.2",
          "mocha-junit-reporter": "^2.0.0",
          "node-polyfill-webpack-plugin": "^1.0.3",
          "npm-license": "^0.3.3",
          "nyc": "^15.0.1",
          "proxyquire": "^2.0.1",
          "puppeteer": "^7.1.0",
          "recast": "^0.19.0",
          "regenerator-runtime": "^0.13.2",
          "shelljs": "^0.8.2",
          "sinon": "^9.0.1",
          "temp": "^0.9.0",
          "webpack": "^5.23.0",
          "webpack-cli": "^4.5.0",
          "yorkie": "^2.0.0"
        },
        "keywords": [
          "ast",
          "lint",
          "javascript",
          "ecmascript",
          "espree"
        ],
        "license": "MIT",
        "engines": { "node": "^10.12.0 || >=12.0.0" }
      };

      var exports$1$Y = {}, _dewExec$3 = false;
      function dew$3() {
        if (_dewExec$3)
          return exports$1$Y;
        _dewExec$3 = true;
        exports$1$Y.endianness = function () {
          return "LE";
        };
        exports$1$Y.hostname = function () {
          if (typeof location !== "undefined") {
            return location.hostname;
          } else
            return "";
        };
        exports$1$Y.loadavg = function () {
          return [];
        };
        exports$1$Y.uptime = function () {
          return 0;
        };
        exports$1$Y.freemem = function () {
          return Number.MAX_VALUE;
        };
        exports$1$Y.totalmem = function () {
          return Number.MAX_VALUE;
        };
        exports$1$Y.cpus = function () {
          return [];
        };
        exports$1$Y.type = function () {
          return "Browser";
        };
        exports$1$Y.release = function () {
          if (typeof navigator !== "undefined") {
            return navigator.appVersion;
          }
          return "";
        };
        exports$1$Y.networkInterfaces = exports$1$Y.getNetworkInterfaces = function () {
          return {};
        };
        exports$1$Y.arch = function () {
          return "javascript";
        };
        exports$1$Y.platform = function () {
          return "browser";
        };
        exports$1$Y.tmpdir = exports$1$Y.tmpDir = function () {
          return "/tmp";
        };
        exports$1$Y.EOL = "\n";
        exports$1$Y.homedir = function () {
          return "/";
        };
        return exports$1$Y;
      }
      const exports$5Q = dew$3();
      exports$5Q["endianness"];
      exports$5Q["hostname"];
      exports$5Q["loadavg"];
      exports$5Q["uptime"];
      exports$5Q["freemem"];
      exports$5Q["totalmem"];
      exports$5Q["cpus"];
      exports$5Q["type"];
      exports$5Q["release"];
      exports$5Q["networkInterfaces"];
      exports$5Q["getNetworkInterfaces"];
      exports$5Q["arch"];
      exports$5Q["platform"];
      exports$5Q["tmpdir"];
      exports$5Q["tmpDir"];
      exports$5Q["EOL"];
      exports$5Q["homedir"];
      var _endianness = new Uint8Array(new Uint16Array([1]).buffer)[0] === 1 ? "LE" : "BE";
      exports$5Q.endianness = function () {
        return _endianness;
      };
      exports$5Q.homedir = function () {
        return "/home";
      };
      exports$5Q.version = function () {
        return "";
      };
      exports$5Q.arch = function () {
        return "x64";
      };
      exports$5Q.totalmem = function () {
        return navigator.deviceMemory !== undefined ? navigator.deviceMemory * (1 << 30) : 2 * (1 << 30);
      };
      exports$5Q.cpus = function () {
        return Array(navigator.hardwareConcurrency || 0).fill({
          model: "",
          times: {}
        });
      };
      exports$5Q.uptime = uptime;
      exports$5Q.constants = {};
      var version$5 = exports$5Q.version;
      var constants = exports$5Q.constants;
      var EOL = exports$5Q.EOL;
      var arch = exports$5Q.arch;
      var cpus = exports$5Q.cpus;
      var endianness = exports$5Q.endianness;
      var freemem = exports$5Q.freemem;
      var getNetworkInterfaces = exports$5Q.getNetworkInterfaces;
      var homedir = exports$5Q.homedir;
      var hostname = exports$5Q.hostname;
      var loadavg = exports$5Q.loadavg;
      var networkInterfaces = exports$5Q.networkInterfaces;
      var platform = exports$5Q.platform;
      var release = exports$5Q.release;
      var tmpDir = exports$5Q.tmpDir;
      var tmpdir = exports$5Q.tmpdir;
      var totalmem = exports$5Q.totalmem;
      var type$1 = exports$5Q.type;

      var _os2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$5Q,
        uptime: uptime,
        EOL: EOL,
        arch: arch,
        constants: constants,
        cpus: cpus,
        endianness: endianness,
        freemem: freemem,
        getNetworkInterfaces: getNetworkInterfaces,
        homedir: homedir,
        hostname: hostname,
        loadavg: loadavg,
        networkInterfaces: networkInterfaces,
        platform: platform,
        release: release,
        tmpDir: tmpDir,
        tmpdir: tmpdir,
        totalmem: totalmem,
        type: type$1,
        version: version$5
      });

      var globals$2 = {
        "builtin": {
          "AggregateError": false,
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "constructor": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "FinalizationRegistry": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "hasOwnProperty": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "isFinite": false,
          "isNaN": false,
          "isPrototypeOf": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "propertyIsEnumerable": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "toLocaleString": false,
          "toString": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "valueOf": false,
          "WeakMap": false,
          "WeakRef": false,
          "WeakSet": false
        },
        "es5": {
          "Array": false,
          "Boolean": false,
          "constructor": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "Function": false,
          "hasOwnProperty": false,
          "Infinity": false,
          "isFinite": false,
          "isNaN": false,
          "isPrototypeOf": false,
          "JSON": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "propertyIsEnumerable": false,
          "RangeError": false,
          "ReferenceError": false,
          "RegExp": false,
          "String": false,
          "SyntaxError": false,
          "toLocaleString": false,
          "toString": false,
          "TypeError": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "valueOf": false
        },
        "es2015": {
          "Array": false,
          "ArrayBuffer": false,
          "Boolean": false,
          "constructor": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "hasOwnProperty": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "isFinite": false,
          "isNaN": false,
          "isPrototypeOf": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "propertyIsEnumerable": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "toLocaleString": false,
          "toString": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "valueOf": false,
          "WeakMap": false,
          "WeakSet": false
        },
        "es2017": {
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "Boolean": false,
          "constructor": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "hasOwnProperty": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "isFinite": false,
          "isNaN": false,
          "isPrototypeOf": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "propertyIsEnumerable": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "toLocaleString": false,
          "toString": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "valueOf": false,
          "WeakMap": false,
          "WeakSet": false
        },
        "es2020": {
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "constructor": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "hasOwnProperty": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "isFinite": false,
          "isNaN": false,
          "isPrototypeOf": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "propertyIsEnumerable": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "toLocaleString": false,
          "toString": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "valueOf": false,
          "WeakMap": false,
          "WeakSet": false
        },
        "es2021": {
          "AggregateError": false,
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "constructor": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "FinalizationRegistry": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "hasOwnProperty": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "isFinite": false,
          "isNaN": false,
          "isPrototypeOf": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "propertyIsEnumerable": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "toLocaleString": false,
          "toString": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "valueOf": false,
          "WeakMap": false,
          "WeakRef": false,
          "WeakSet": false
        },
        "browser": {
          "AbortController": false,
          "AbortSignal": false,
          "addEventListener": false,
          "alert": false,
          "AnalyserNode": false,
          "Animation": false,
          "AnimationEffectReadOnly": false,
          "AnimationEffectTiming": false,
          "AnimationEffectTimingReadOnly": false,
          "AnimationEvent": false,
          "AnimationPlaybackEvent": false,
          "AnimationTimeline": false,
          "applicationCache": false,
          "ApplicationCache": false,
          "ApplicationCacheErrorEvent": false,
          "atob": false,
          "Attr": false,
          "Audio": false,
          "AudioBuffer": false,
          "AudioBufferSourceNode": false,
          "AudioContext": false,
          "AudioDestinationNode": false,
          "AudioListener": false,
          "AudioNode": false,
          "AudioParam": false,
          "AudioProcessingEvent": false,
          "AudioScheduledSourceNode": false,
          "AudioWorkletGlobalScope": false,
          "AudioWorkletNode": false,
          "AudioWorkletProcessor": false,
          "BarProp": false,
          "BaseAudioContext": false,
          "BatteryManager": false,
          "BeforeUnloadEvent": false,
          "BiquadFilterNode": false,
          "Blob": false,
          "BlobEvent": false,
          "blur": false,
          "BroadcastChannel": false,
          "btoa": false,
          "BudgetService": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "CacheStorage": false,
          "cancelAnimationFrame": false,
          "cancelIdleCallback": false,
          "CanvasCaptureMediaStreamTrack": false,
          "CanvasGradient": false,
          "CanvasPattern": false,
          "CanvasRenderingContext2D": false,
          "ChannelMergerNode": false,
          "ChannelSplitterNode": false,
          "CharacterData": false,
          "clearInterval": false,
          "clearTimeout": false,
          "clientInformation": false,
          "ClipboardEvent": false,
          "ClipboardItem": false,
          "close": false,
          "closed": false,
          "CloseEvent": false,
          "Comment": false,
          "CompositionEvent": false,
          "CompressionStream": false,
          "confirm": false,
          "console": false,
          "ConstantSourceNode": false,
          "ConvolverNode": false,
          "CountQueuingStrategy": false,
          "createImageBitmap": false,
          "Credential": false,
          "CredentialsContainer": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CSS": false,
          "CSSConditionRule": false,
          "CSSFontFaceRule": false,
          "CSSGroupingRule": false,
          "CSSImportRule": false,
          "CSSKeyframeRule": false,
          "CSSKeyframesRule": false,
          "CSSMatrixComponent": false,
          "CSSMediaRule": false,
          "CSSNamespaceRule": false,
          "CSSPageRule": false,
          "CSSPerspective": false,
          "CSSRotate": false,
          "CSSRule": false,
          "CSSRuleList": false,
          "CSSScale": false,
          "CSSSkew": false,
          "CSSSkewX": false,
          "CSSSkewY": false,
          "CSSStyleDeclaration": false,
          "CSSStyleRule": false,
          "CSSStyleSheet": false,
          "CSSSupportsRule": false,
          "CSSTransformValue": false,
          "CSSTranslate": false,
          "CustomElementRegistry": false,
          "customElements": false,
          "CustomEvent": false,
          "DataTransfer": false,
          "DataTransferItem": false,
          "DataTransferItemList": false,
          "DecompressionStream": false,
          "defaultstatus": false,
          "defaultStatus": false,
          "DelayNode": false,
          "DeviceMotionEvent": false,
          "DeviceOrientationEvent": false,
          "devicePixelRatio": false,
          "dispatchEvent": false,
          "document": false,
          "Document": false,
          "DocumentFragment": false,
          "DocumentType": false,
          "DOMError": false,
          "DOMException": false,
          "DOMImplementation": false,
          "DOMMatrix": false,
          "DOMMatrixReadOnly": false,
          "DOMParser": false,
          "DOMPoint": false,
          "DOMPointReadOnly": false,
          "DOMQuad": false,
          "DOMRect": false,
          "DOMRectList": false,
          "DOMRectReadOnly": false,
          "DOMStringList": false,
          "DOMStringMap": false,
          "DOMTokenList": false,
          "DragEvent": false,
          "DynamicsCompressorNode": false,
          "Element": false,
          "ErrorEvent": false,
          "event": false,
          "Event": false,
          "EventSource": false,
          "EventTarget": false,
          "external": false,
          "fetch": false,
          "File": false,
          "FileList": false,
          "FileReader": false,
          "find": false,
          "focus": false,
          "FocusEvent": false,
          "FontFace": false,
          "FontFaceSetLoadEvent": false,
          "FormData": false,
          "FormDataEvent": false,
          "frameElement": false,
          "frames": false,
          "GainNode": false,
          "Gamepad": false,
          "GamepadButton": false,
          "GamepadEvent": false,
          "getComputedStyle": false,
          "getSelection": false,
          "HashChangeEvent": false,
          "Headers": false,
          "history": false,
          "History": false,
          "HTMLAllCollection": false,
          "HTMLAnchorElement": false,
          "HTMLAreaElement": false,
          "HTMLAudioElement": false,
          "HTMLBaseElement": false,
          "HTMLBodyElement": false,
          "HTMLBRElement": false,
          "HTMLButtonElement": false,
          "HTMLCanvasElement": false,
          "HTMLCollection": false,
          "HTMLContentElement": false,
          "HTMLDataElement": false,
          "HTMLDataListElement": false,
          "HTMLDetailsElement": false,
          "HTMLDialogElement": false,
          "HTMLDirectoryElement": false,
          "HTMLDivElement": false,
          "HTMLDListElement": false,
          "HTMLDocument": false,
          "HTMLElement": false,
          "HTMLEmbedElement": false,
          "HTMLFieldSetElement": false,
          "HTMLFontElement": false,
          "HTMLFormControlsCollection": false,
          "HTMLFormElement": false,
          "HTMLFrameElement": false,
          "HTMLFrameSetElement": false,
          "HTMLHeadElement": false,
          "HTMLHeadingElement": false,
          "HTMLHRElement": false,
          "HTMLHtmlElement": false,
          "HTMLIFrameElement": false,
          "HTMLImageElement": false,
          "HTMLInputElement": false,
          "HTMLLabelElement": false,
          "HTMLLegendElement": false,
          "HTMLLIElement": false,
          "HTMLLinkElement": false,
          "HTMLMapElement": false,
          "HTMLMarqueeElement": false,
          "HTMLMediaElement": false,
          "HTMLMenuElement": false,
          "HTMLMetaElement": false,
          "HTMLMeterElement": false,
          "HTMLModElement": false,
          "HTMLObjectElement": false,
          "HTMLOListElement": false,
          "HTMLOptGroupElement": false,
          "HTMLOptionElement": false,
          "HTMLOptionsCollection": false,
          "HTMLOutputElement": false,
          "HTMLParagraphElement": false,
          "HTMLParamElement": false,
          "HTMLPictureElement": false,
          "HTMLPreElement": false,
          "HTMLProgressElement": false,
          "HTMLQuoteElement": false,
          "HTMLScriptElement": false,
          "HTMLSelectElement": false,
          "HTMLShadowElement": false,
          "HTMLSlotElement": false,
          "HTMLSourceElement": false,
          "HTMLSpanElement": false,
          "HTMLStyleElement": false,
          "HTMLTableCaptionElement": false,
          "HTMLTableCellElement": false,
          "HTMLTableColElement": false,
          "HTMLTableElement": false,
          "HTMLTableRowElement": false,
          "HTMLTableSectionElement": false,
          "HTMLTemplateElement": false,
          "HTMLTextAreaElement": false,
          "HTMLTimeElement": false,
          "HTMLTitleElement": false,
          "HTMLTrackElement": false,
          "HTMLUListElement": false,
          "HTMLUnknownElement": false,
          "HTMLVideoElement": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "IdleDeadline": false,
          "IIRFilterNode": false,
          "Image": false,
          "ImageBitmap": false,
          "ImageBitmapRenderingContext": false,
          "ImageCapture": false,
          "ImageData": false,
          "indexedDB": false,
          "innerHeight": false,
          "innerWidth": false,
          "InputEvent": false,
          "IntersectionObserver": false,
          "IntersectionObserverEntry": false,
          "Intl": false,
          "isSecureContext": false,
          "KeyboardEvent": false,
          "KeyframeEffect": false,
          "KeyframeEffectReadOnly": false,
          "length": false,
          "localStorage": false,
          "location": true,
          "Location": false,
          "locationbar": false,
          "matchMedia": false,
          "MediaDeviceInfo": false,
          "MediaDevices": false,
          "MediaElementAudioSourceNode": false,
          "MediaEncryptedEvent": false,
          "MediaError": false,
          "MediaKeyMessageEvent": false,
          "MediaKeySession": false,
          "MediaKeyStatusMap": false,
          "MediaKeySystemAccess": false,
          "MediaList": false,
          "MediaMetadata": false,
          "MediaQueryList": false,
          "MediaQueryListEvent": false,
          "MediaRecorder": false,
          "MediaSettingsRange": false,
          "MediaSource": false,
          "MediaStream": false,
          "MediaStreamAudioDestinationNode": false,
          "MediaStreamAudioSourceNode": false,
          "MediaStreamConstraints": false,
          "MediaStreamEvent": false,
          "MediaStreamTrack": false,
          "MediaStreamTrackEvent": false,
          "menubar": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "MIDIAccess": false,
          "MIDIConnectionEvent": false,
          "MIDIInput": false,
          "MIDIInputMap": false,
          "MIDIMessageEvent": false,
          "MIDIOutput": false,
          "MIDIOutputMap": false,
          "MIDIPort": false,
          "MimeType": false,
          "MimeTypeArray": false,
          "MouseEvent": false,
          "moveBy": false,
          "moveTo": false,
          "MutationEvent": false,
          "MutationObserver": false,
          "MutationRecord": false,
          "name": false,
          "NamedNodeMap": false,
          "NavigationPreloadManager": false,
          "navigator": false,
          "Navigator": false,
          "NavigatorUAData": false,
          "NetworkInformation": false,
          "Node": false,
          "NodeFilter": false,
          "NodeIterator": false,
          "NodeList": false,
          "Notification": false,
          "OfflineAudioCompletionEvent": false,
          "OfflineAudioContext": false,
          "offscreenBuffering": false,
          "OffscreenCanvas": true,
          "OffscreenCanvasRenderingContext2D": false,
          "onabort": true,
          "onafterprint": true,
          "onanimationend": true,
          "onanimationiteration": true,
          "onanimationstart": true,
          "onappinstalled": true,
          "onauxclick": true,
          "onbeforeinstallprompt": true,
          "onbeforeprint": true,
          "onbeforeunload": true,
          "onblur": true,
          "oncancel": true,
          "oncanplay": true,
          "oncanplaythrough": true,
          "onchange": true,
          "onclick": true,
          "onclose": true,
          "oncontextmenu": true,
          "oncuechange": true,
          "ondblclick": true,
          "ondevicemotion": true,
          "ondeviceorientation": true,
          "ondeviceorientationabsolute": true,
          "ondrag": true,
          "ondragend": true,
          "ondragenter": true,
          "ondragleave": true,
          "ondragover": true,
          "ondragstart": true,
          "ondrop": true,
          "ondurationchange": true,
          "onemptied": true,
          "onended": true,
          "onerror": true,
          "onfocus": true,
          "ongotpointercapture": true,
          "onhashchange": true,
          "oninput": true,
          "oninvalid": true,
          "onkeydown": true,
          "onkeypress": true,
          "onkeyup": true,
          "onlanguagechange": true,
          "onload": true,
          "onloadeddata": true,
          "onloadedmetadata": true,
          "onloadstart": true,
          "onlostpointercapture": true,
          "onmessage": true,
          "onmessageerror": true,
          "onmousedown": true,
          "onmouseenter": true,
          "onmouseleave": true,
          "onmousemove": true,
          "onmouseout": true,
          "onmouseover": true,
          "onmouseup": true,
          "onmousewheel": true,
          "onoffline": true,
          "ononline": true,
          "onpagehide": true,
          "onpageshow": true,
          "onpause": true,
          "onplay": true,
          "onplaying": true,
          "onpointercancel": true,
          "onpointerdown": true,
          "onpointerenter": true,
          "onpointerleave": true,
          "onpointermove": true,
          "onpointerout": true,
          "onpointerover": true,
          "onpointerup": true,
          "onpopstate": true,
          "onprogress": true,
          "onratechange": true,
          "onrejectionhandled": true,
          "onreset": true,
          "onresize": true,
          "onscroll": true,
          "onsearch": true,
          "onseeked": true,
          "onseeking": true,
          "onselect": true,
          "onstalled": true,
          "onstorage": true,
          "onsubmit": true,
          "onsuspend": true,
          "ontimeupdate": true,
          "ontoggle": true,
          "ontransitionend": true,
          "onunhandledrejection": true,
          "onunload": true,
          "onvolumechange": true,
          "onwaiting": true,
          "onwheel": true,
          "open": false,
          "openDatabase": false,
          "opener": false,
          "Option": false,
          "origin": false,
          "OscillatorNode": false,
          "outerHeight": false,
          "outerWidth": false,
          "OverconstrainedError": false,
          "PageTransitionEvent": false,
          "pageXOffset": false,
          "pageYOffset": false,
          "PannerNode": false,
          "parent": false,
          "Path2D": false,
          "PaymentAddress": false,
          "PaymentRequest": false,
          "PaymentRequestUpdateEvent": false,
          "PaymentResponse": false,
          "performance": false,
          "Performance": false,
          "PerformanceEntry": false,
          "PerformanceLongTaskTiming": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceNavigationTiming": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformancePaintTiming": false,
          "PerformanceResourceTiming": false,
          "PerformanceTiming": false,
          "PeriodicWave": false,
          "Permissions": false,
          "PermissionStatus": false,
          "personalbar": false,
          "PhotoCapabilities": false,
          "Plugin": false,
          "PluginArray": false,
          "PointerEvent": false,
          "PopStateEvent": false,
          "postMessage": false,
          "Presentation": false,
          "PresentationAvailability": false,
          "PresentationConnection": false,
          "PresentationConnectionAvailableEvent": false,
          "PresentationConnectionCloseEvent": false,
          "PresentationConnectionList": false,
          "PresentationReceiver": false,
          "PresentationRequest": false,
          "print": false,
          "ProcessingInstruction": false,
          "ProgressEvent": false,
          "PromiseRejectionEvent": false,
          "prompt": false,
          "PushManager": false,
          "PushSubscription": false,
          "PushSubscriptionOptions": false,
          "queueMicrotask": false,
          "RadioNodeList": false,
          "Range": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "registerProcessor": false,
          "RemotePlayback": false,
          "removeEventListener": false,
          "reportError": false,
          "Request": false,
          "requestAnimationFrame": false,
          "requestIdleCallback": false,
          "resizeBy": false,
          "ResizeObserver": false,
          "ResizeObserverEntry": false,
          "resizeTo": false,
          "Response": false,
          "RTCCertificate": false,
          "RTCDataChannel": false,
          "RTCDataChannelEvent": false,
          "RTCDtlsTransport": false,
          "RTCIceCandidate": false,
          "RTCIceGatherer": false,
          "RTCIceTransport": false,
          "RTCPeerConnection": false,
          "RTCPeerConnectionIceEvent": false,
          "RTCRtpContributingSource": false,
          "RTCRtpReceiver": false,
          "RTCRtpSender": false,
          "RTCSctpTransport": false,
          "RTCSessionDescription": false,
          "RTCStatsReport": false,
          "RTCTrackEvent": false,
          "screen": false,
          "Screen": false,
          "screenLeft": false,
          "ScreenOrientation": false,
          "screenTop": false,
          "screenX": false,
          "screenY": false,
          "ScriptProcessorNode": false,
          "scroll": false,
          "scrollbars": false,
          "scrollBy": false,
          "scrollTo": false,
          "scrollX": false,
          "scrollY": false,
          "SecurityPolicyViolationEvent": false,
          "Selection": false,
          "self": false,
          "ServiceWorker": false,
          "ServiceWorkerContainer": false,
          "ServiceWorkerRegistration": false,
          "sessionStorage": false,
          "setInterval": false,
          "setTimeout": false,
          "ShadowRoot": false,
          "SharedWorker": false,
          "SourceBuffer": false,
          "SourceBufferList": false,
          "speechSynthesis": false,
          "SpeechSynthesisEvent": false,
          "SpeechSynthesisUtterance": false,
          "StaticRange": false,
          "status": false,
          "statusbar": false,
          "StereoPannerNode": false,
          "stop": false,
          "Storage": false,
          "StorageEvent": false,
          "StorageManager": false,
          "structuredClone": false,
          "styleMedia": false,
          "StyleSheet": false,
          "StyleSheetList": false,
          "SubmitEvent": false,
          "SubtleCrypto": false,
          "SVGAElement": false,
          "SVGAngle": false,
          "SVGAnimatedAngle": false,
          "SVGAnimatedBoolean": false,
          "SVGAnimatedEnumeration": false,
          "SVGAnimatedInteger": false,
          "SVGAnimatedLength": false,
          "SVGAnimatedLengthList": false,
          "SVGAnimatedNumber": false,
          "SVGAnimatedNumberList": false,
          "SVGAnimatedPreserveAspectRatio": false,
          "SVGAnimatedRect": false,
          "SVGAnimatedString": false,
          "SVGAnimatedTransformList": false,
          "SVGAnimateElement": false,
          "SVGAnimateMotionElement": false,
          "SVGAnimateTransformElement": false,
          "SVGAnimationElement": false,
          "SVGCircleElement": false,
          "SVGClipPathElement": false,
          "SVGComponentTransferFunctionElement": false,
          "SVGDefsElement": false,
          "SVGDescElement": false,
          "SVGDiscardElement": false,
          "SVGElement": false,
          "SVGEllipseElement": false,
          "SVGFEBlendElement": false,
          "SVGFEColorMatrixElement": false,
          "SVGFEComponentTransferElement": false,
          "SVGFECompositeElement": false,
          "SVGFEConvolveMatrixElement": false,
          "SVGFEDiffuseLightingElement": false,
          "SVGFEDisplacementMapElement": false,
          "SVGFEDistantLightElement": false,
          "SVGFEDropShadowElement": false,
          "SVGFEFloodElement": false,
          "SVGFEFuncAElement": false,
          "SVGFEFuncBElement": false,
          "SVGFEFuncGElement": false,
          "SVGFEFuncRElement": false,
          "SVGFEGaussianBlurElement": false,
          "SVGFEImageElement": false,
          "SVGFEMergeElement": false,
          "SVGFEMergeNodeElement": false,
          "SVGFEMorphologyElement": false,
          "SVGFEOffsetElement": false,
          "SVGFEPointLightElement": false,
          "SVGFESpecularLightingElement": false,
          "SVGFESpotLightElement": false,
          "SVGFETileElement": false,
          "SVGFETurbulenceElement": false,
          "SVGFilterElement": false,
          "SVGForeignObjectElement": false,
          "SVGGElement": false,
          "SVGGeometryElement": false,
          "SVGGradientElement": false,
          "SVGGraphicsElement": false,
          "SVGImageElement": false,
          "SVGLength": false,
          "SVGLengthList": false,
          "SVGLinearGradientElement": false,
          "SVGLineElement": false,
          "SVGMarkerElement": false,
          "SVGMaskElement": false,
          "SVGMatrix": false,
          "SVGMetadataElement": false,
          "SVGMPathElement": false,
          "SVGNumber": false,
          "SVGNumberList": false,
          "SVGPathElement": false,
          "SVGPatternElement": false,
          "SVGPoint": false,
          "SVGPointList": false,
          "SVGPolygonElement": false,
          "SVGPolylineElement": false,
          "SVGPreserveAspectRatio": false,
          "SVGRadialGradientElement": false,
          "SVGRect": false,
          "SVGRectElement": false,
          "SVGScriptElement": false,
          "SVGSetElement": false,
          "SVGStopElement": false,
          "SVGStringList": false,
          "SVGStyleElement": false,
          "SVGSVGElement": false,
          "SVGSwitchElement": false,
          "SVGSymbolElement": false,
          "SVGTextContentElement": false,
          "SVGTextElement": false,
          "SVGTextPathElement": false,
          "SVGTextPositioningElement": false,
          "SVGTitleElement": false,
          "SVGTransform": false,
          "SVGTransformList": false,
          "SVGTSpanElement": false,
          "SVGUnitTypes": false,
          "SVGUseElement": false,
          "SVGViewElement": false,
          "TaskAttributionTiming": false,
          "Text": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TextEvent": false,
          "TextMetrics": false,
          "TextTrack": false,
          "TextTrackCue": false,
          "TextTrackCueList": false,
          "TextTrackList": false,
          "TimeRanges": false,
          "ToggleEvent": false,
          "toolbar": false,
          "top": false,
          "Touch": false,
          "TouchEvent": false,
          "TouchList": false,
          "TrackEvent": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "TransitionEvent": false,
          "TreeWalker": false,
          "UIEvent": false,
          "URL": false,
          "URLSearchParams": false,
          "ValidityState": false,
          "visualViewport": false,
          "VisualViewport": false,
          "VTTCue": false,
          "WaveShaperNode": false,
          "WebAssembly": false,
          "WebGL2RenderingContext": false,
          "WebGLActiveInfo": false,
          "WebGLBuffer": false,
          "WebGLContextEvent": false,
          "WebGLFramebuffer": false,
          "WebGLProgram": false,
          "WebGLQuery": false,
          "WebGLRenderbuffer": false,
          "WebGLRenderingContext": false,
          "WebGLSampler": false,
          "WebGLShader": false,
          "WebGLShaderPrecisionFormat": false,
          "WebGLSync": false,
          "WebGLTexture": false,
          "WebGLTransformFeedback": false,
          "WebGLUniformLocation": false,
          "WebGLVertexArrayObject": false,
          "WebSocket": false,
          "WheelEvent": false,
          "window": false,
          "Window": false,
          "Worker": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLDocument": false,
          "XMLHttpRequest": false,
          "XMLHttpRequestEventTarget": false,
          "XMLHttpRequestUpload": false,
          "XMLSerializer": false,
          "XPathEvaluator": false,
          "XPathExpression": false,
          "XPathResult": false,
          "XSLTProcessor": false
        },
        "worker": {
          "addEventListener": false,
          "applicationCache": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "clearInterval": false,
          "clearTimeout": false,
          "close": true,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "ErrorEvent": false,
          "Event": false,
          "fetch": false,
          "File": false,
          "FileReaderSync": false,
          "FormData": false,
          "Headers": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "ImageData": false,
          "importScripts": true,
          "indexedDB": false,
          "location": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "name": false,
          "navigator": false,
          "Notification": false,
          "onclose": true,
          "onconnect": true,
          "onerror": true,
          "onlanguagechange": true,
          "onmessage": true,
          "onoffline": true,
          "ononline": true,
          "onrejectionhandled": true,
          "onunhandledrejection": true,
          "performance": false,
          "Performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "PerformanceTiming": false,
          "postMessage": true,
          "Promise": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "removeEventListener": false,
          "reportError": false,
          "Request": false,
          "Response": false,
          "self": true,
          "ServiceWorkerRegistration": false,
          "setInterval": false,
          "setTimeout": false,
          "SubtleCrypto": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WebSocket": false,
          "Worker": false,
          "WorkerGlobalScope": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLHttpRequest": false
        },
        "node": {
          "__dirname": false,
          "__filename": false,
          "AbortController": false,
          "AbortSignal": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "Buffer": false,
          "ByteLengthQueuingStrategy": false,
          "clearImmediate": false,
          "clearInterval": false,
          "clearTimeout": false,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "DOMException": false,
          "Event": false,
          "EventTarget": false,
          "exports": true,
          "fetch": false,
          "File": false,
          "FormData": false,
          "global": false,
          "Headers": false,
          "Intl": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "module": false,
          "performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "process": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "Request": false,
          "require": false,
          "Response": false,
          "setImmediate": false,
          "setInterval": false,
          "setTimeout": false,
          "structuredClone": false,
          "SubtleCrypto": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false
        },
        "nodeBuiltin": {
          "AbortController": false,
          "AbortSignal": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "Buffer": false,
          "ByteLengthQueuingStrategy": false,
          "clearImmediate": false,
          "clearInterval": false,
          "clearTimeout": false,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "DOMException": false,
          "Event": false,
          "EventTarget": false,
          "fetch": false,
          "File": false,
          "FormData": false,
          "global": false,
          "Headers": false,
          "Intl": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "process": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "Request": false,
          "Response": false,
          "setImmediate": false,
          "setInterval": false,
          "setTimeout": false,
          "structuredClone": false,
          "SubtleCrypto": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false
        },
        "commonjs": {
          "exports": true,
          "global": false,
          "module": false,
          "require": false
        },
        "amd": {
          "define": false,
          "require": false
        },
        "mocha": {
          "after": false,
          "afterEach": false,
          "before": false,
          "beforeEach": false,
          "context": false,
          "describe": false,
          "it": false,
          "mocha": false,
          "run": false,
          "setup": false,
          "specify": false,
          "suite": false,
          "suiteSetup": false,
          "suiteTeardown": false,
          "teardown": false,
          "test": false,
          "xcontext": false,
          "xdescribe": false,
          "xit": false,
          "xspecify": false
        },
        "jasmine": {
          "afterAll": false,
          "afterEach": false,
          "beforeAll": false,
          "beforeEach": false,
          "describe": false,
          "expect": false,
          "expectAsync": false,
          "fail": false,
          "fdescribe": false,
          "fit": false,
          "it": false,
          "jasmine": false,
          "pending": false,
          "runs": false,
          "spyOn": false,
          "spyOnAllFunctions": false,
          "spyOnProperty": false,
          "waits": false,
          "waitsFor": false,
          "xdescribe": false,
          "xit": false
        },
        "jest": {
          "afterAll": false,
          "afterEach": false,
          "beforeAll": false,
          "beforeEach": false,
          "describe": false,
          "expect": false,
          "fdescribe": false,
          "fit": false,
          "it": false,
          "jest": false,
          "pit": false,
          "require": false,
          "test": false,
          "xdescribe": false,
          "xit": false,
          "xtest": false
        },
        "qunit": {
          "asyncTest": false,
          "deepEqual": false,
          "equal": false,
          "expect": false,
          "module": false,
          "notDeepEqual": false,
          "notEqual": false,
          "notOk": false,
          "notPropEqual": false,
          "notStrictEqual": false,
          "ok": false,
          "propEqual": false,
          "QUnit": false,
          "raises": false,
          "start": false,
          "stop": false,
          "strictEqual": false,
          "test": false,
          "throws": false
        },
        "phantomjs": {
          "console": true,
          "exports": true,
          "phantom": true,
          "require": true,
          "WebPage": true
        },
        "couch": {
          "emit": false,
          "exports": false,
          "getRow": false,
          "log": false,
          "module": false,
          "provides": false,
          "require": false,
          "respond": false,
          "send": false,
          "start": false,
          "sum": false
        },
        "rhino": {
          "defineClass": false,
          "deserialize": false,
          "gc": false,
          "help": false,
          "importClass": false,
          "importPackage": false,
          "java": false,
          "load": false,
          "loadClass": false,
          "Packages": false,
          "print": false,
          "quit": false,
          "readFile": false,
          "readUrl": false,
          "runCommand": false,
          "seal": false,
          "serialize": false,
          "spawn": false,
          "sync": false,
          "toint32": false,
          "version": false
        },
        "nashorn": {
          "__DIR__": false,
          "__FILE__": false,
          "__LINE__": false,
          "com": false,
          "edu": false,
          "exit": false,
          "java": false,
          "Java": false,
          "javafx": false,
          "JavaImporter": false,
          "javax": false,
          "JSAdapter": false,
          "load": false,
          "loadWithNewGlobal": false,
          "org": false,
          "Packages": false,
          "print": false,
          "quit": false
        },
        "wsh": {
          "ActiveXObject": false,
          "CollectGarbage": false,
          "Debug": false,
          "Enumerator": false,
          "GetObject": false,
          "RuntimeObject": false,
          "ScriptEngine": false,
          "ScriptEngineBuildVersion": false,
          "ScriptEngineMajorVersion": false,
          "ScriptEngineMinorVersion": false,
          "VBArray": false,
          "WScript": false,
          "WSH": false
        },
        "jquery": {
          "$": false,
          "jQuery": false
        },
        "yui": {
          "YAHOO": false,
          "YAHOO_config": false,
          "YUI": false,
          "YUI_config": false
        },
        "shelljs": {
          "cat": false,
          "cd": false,
          "chmod": false,
          "config": false,
          "cp": false,
          "dirs": false,
          "echo": false,
          "env": false,
          "error": false,
          "exec": false,
          "exit": false,
          "find": false,
          "grep": false,
          "ln": false,
          "ls": false,
          "mkdir": false,
          "mv": false,
          "popd": false,
          "pushd": false,
          "pwd": false,
          "rm": false,
          "sed": false,
          "set": false,
          "target": false,
          "tempdir": false,
          "test": false,
          "touch": false,
          "which": false
        },
        "prototypejs": {
          "$": false,
          "$$": false,
          "$A": false,
          "$break": false,
          "$continue": false,
          "$F": false,
          "$H": false,
          "$R": false,
          "$w": false,
          "Abstract": false,
          "Ajax": false,
          "Autocompleter": false,
          "Builder": false,
          "Class": false,
          "Control": false,
          "Draggable": false,
          "Draggables": false,
          "Droppables": false,
          "Effect": false,
          "Element": false,
          "Enumerable": false,
          "Event": false,
          "Field": false,
          "Form": false,
          "Hash": false,
          "Insertion": false,
          "ObjectRange": false,
          "PeriodicalExecuter": false,
          "Position": false,
          "Prototype": false,
          "Scriptaculous": false,
          "Selector": false,
          "Sortable": false,
          "SortableObserver": false,
          "Sound": false,
          "Template": false,
          "Toggle": false,
          "Try": false
        },
        "meteor": {
          "$": false,
          "Accounts": false,
          "AccountsClient": false,
          "AccountsCommon": false,
          "AccountsServer": false,
          "App": false,
          "Assets": false,
          "Blaze": false,
          "check": false,
          "Cordova": false,
          "DDP": false,
          "DDPRateLimiter": false,
          "DDPServer": false,
          "Deps": false,
          "EJSON": false,
          "Email": false,
          "HTTP": false,
          "Log": false,
          "Match": false,
          "Meteor": false,
          "Mongo": false,
          "MongoInternals": false,
          "Npm": false,
          "Package": false,
          "Plugin": false,
          "process": false,
          "Random": false,
          "ReactiveDict": false,
          "ReactiveVar": false,
          "Router": false,
          "ServiceConfiguration": false,
          "Session": false,
          "share": false,
          "Spacebars": false,
          "Template": false,
          "Tinytest": false,
          "Tracker": false,
          "UI": false,
          "Utils": false,
          "WebApp": false,
          "WebAppInternals": false
        },
        "mongo": {
          "_isWindows": false,
          "_rand": false,
          "BulkWriteResult": false,
          "cat": false,
          "cd": false,
          "connect": false,
          "db": false,
          "getHostName": false,
          "getMemInfo": false,
          "hostname": false,
          "ISODate": false,
          "listFiles": false,
          "load": false,
          "ls": false,
          "md5sumFile": false,
          "mkdir": false,
          "Mongo": false,
          "NumberInt": false,
          "NumberLong": false,
          "ObjectId": false,
          "PlanCache": false,
          "print": false,
          "printjson": false,
          "pwd": false,
          "quit": false,
          "removeFile": false,
          "rs": false,
          "sh": false,
          "UUID": false,
          "version": false,
          "WriteResult": false
        },
        "applescript": {
          "$": false,
          "Application": false,
          "Automation": false,
          "console": false,
          "delay": false,
          "Library": false,
          "ObjC": false,
          "ObjectSpecifier": false,
          "Path": false,
          "Progress": false,
          "Ref": false
        },
        "serviceworker": {
          "addEventListener": false,
          "applicationCache": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "CacheStorage": false,
          "clearInterval": false,
          "clearTimeout": false,
          "Client": false,
          "clients": false,
          "Clients": false,
          "close": true,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "ErrorEvent": false,
          "Event": false,
          "ExtendableEvent": false,
          "ExtendableMessageEvent": false,
          "fetch": false,
          "FetchEvent": false,
          "File": false,
          "FileReaderSync": false,
          "FormData": false,
          "Headers": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "ImageData": false,
          "importScripts": false,
          "indexedDB": false,
          "location": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "name": false,
          "navigator": false,
          "Notification": false,
          "onclose": true,
          "onconnect": true,
          "onerror": true,
          "onfetch": true,
          "oninstall": true,
          "onlanguagechange": true,
          "onmessage": true,
          "onmessageerror": true,
          "onnotificationclick": true,
          "onnotificationclose": true,
          "onoffline": true,
          "ononline": true,
          "onpush": true,
          "onpushsubscriptionchange": true,
          "onrejectionhandled": true,
          "onsync": true,
          "onunhandledrejection": true,
          "performance": false,
          "Performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "PerformanceTiming": false,
          "postMessage": true,
          "Promise": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "registration": false,
          "removeEventListener": false,
          "Request": false,
          "Response": false,
          "self": false,
          "ServiceWorker": false,
          "ServiceWorkerContainer": false,
          "ServiceWorkerGlobalScope": false,
          "ServiceWorkerMessageEvent": false,
          "ServiceWorkerRegistration": false,
          "setInterval": false,
          "setTimeout": false,
          "skipWaiting": false,
          "SubtleCrypto": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WebSocket": false,
          "WindowClient": false,
          "Worker": false,
          "WorkerGlobalScope": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLHttpRequest": false
        },
        "atomtest": {
          "advanceClock": false,
          "atom": false,
          "fakeClearInterval": false,
          "fakeClearTimeout": false,
          "fakeSetInterval": false,
          "fakeSetTimeout": false,
          "resetTimeouts": false,
          "waitsForPromise": false
        },
        "embertest": {
          "andThen": false,
          "click": false,
          "currentPath": false,
          "currentRouteName": false,
          "currentURL": false,
          "fillIn": false,
          "find": false,
          "findAll": false,
          "findWithAssert": false,
          "keyEvent": false,
          "pauseTest": false,
          "resumeTest": false,
          "triggerEvent": false,
          "visit": false,
          "wait": false
        },
        "protractor": {
          "$": false,
          "$$": false,
          "browser": false,
          "by": false,
          "By": false,
          "DartObject": false,
          "element": false,
          "protractor": false
        },
        "shared-node-browser": {
          "AbortController": false,
          "AbortSignal": false,
          "atob": false,
          "Blob": false,
          "BroadcastChannel": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "clearInterval": false,
          "clearTimeout": false,
          "CompressionStream": false,
          "console": false,
          "CountQueuingStrategy": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CustomEvent": false,
          "DecompressionStream": false,
          "DOMException": false,
          "Event": false,
          "EventTarget": false,
          "fetch": false,
          "File": false,
          "FormData": false,
          "Headers": false,
          "Intl": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "performance": false,
          "PerformanceEntry": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformanceResourceTiming": false,
          "queueMicrotask": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "Request": false,
          "Response": false,
          "setInterval": false,
          "setTimeout": false,
          "structuredClone": false,
          "SubtleCrypto": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "URL": false,
          "URLSearchParams": false,
          "WebAssembly": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false
        },
        "webextensions": {
          "browser": false,
          "chrome": false,
          "opr": false
        },
        "greasemonkey": {
          "cloneInto": false,
          "createObjectIn": false,
          "exportFunction": false,
          "GM": false,
          "GM_addElement": false,
          "GM_addStyle": false,
          "GM_addValueChangeListener": false,
          "GM_deleteValue": false,
          "GM_download": false,
          "GM_getResourceText": false,
          "GM_getResourceURL": false,
          "GM_getTab": false,
          "GM_getTabs": false,
          "GM_getValue": false,
          "GM_info": false,
          "GM_listValues": false,
          "GM_log": false,
          "GM_notification": false,
          "GM_openInTab": false,
          "GM_registerMenuCommand": false,
          "GM_removeValueChangeListener": false,
          "GM_saveTab": false,
          "GM_setClipboard": false,
          "GM_setValue": false,
          "GM_unregisterMenuCommand": false,
          "GM_xmlhttpRequest": false,
          "unsafeWindow": false
        },
        "devtools": {
          "$": false,
          "$_": false,
          "$$": false,
          "$0": false,
          "$1": false,
          "$2": false,
          "$3": false,
          "$4": false,
          "$x": false,
          "chrome": false,
          "clear": false,
          "copy": false,
          "debug": false,
          "dir": false,
          "dirxml": false,
          "getEventListeners": false,
          "inspect": false,
          "keys": false,
          "monitor": false,
          "monitorEvents": false,
          "profile": false,
          "profileEnd": false,
          "queryObjects": false,
          "table": false,
          "undebug": false,
          "unmonitor": false,
          "unmonitorEvents": false,
          "values": false
        }
      };

      var _globals2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': globals$2
      });

      var _globals$1 = "default" in _globals2 ? globals$2 : _globals2;
      var exports$5P = {};
      const globals$1 = _globals$1;
      function getDiff(current, prev) {
        const retv = {};
        for (const [key, value] of Object.entries(current)) {
          if (!Object.hasOwnProperty.call(prev, key)) {
            retv[key] = value;
          }
        }
        return retv;
      }
      const newGlobals2015 = getDiff(globals$1.es2015, globals$1.es5);
      const newGlobals2017 = {
        Atomics: false,
        SharedArrayBuffer: false
      };
      const newGlobals2020 = {
        BigInt: false,
        BigInt64Array: false,
        BigUint64Array: false,
        globalThis: false
      };
      const newGlobals2021 = {
        AggregateError: false,
        FinalizationRegistry: false,
        WeakRef: false
      };
      exports$5P = new Map(Object.entries({
        builtin: { globals: globals$1.es5 },
        es6: {
          globals: newGlobals2015,
          parserOptions: { ecmaVersion: 6 }
        },
        es2015: {
          globals: newGlobals2015,
          parserOptions: { ecmaVersion: 6 }
        },
        es2017: {
          globals: {
            ...newGlobals2015,
            ...newGlobals2017
          },
          parserOptions: { ecmaVersion: 8 }
        },
        es2020: {
          globals: {
            ...newGlobals2015,
            ...newGlobals2017,
            ...newGlobals2020
          },
          parserOptions: { ecmaVersion: 11 }
        },
        es2021: {
          globals: {
            ...newGlobals2015,
            ...newGlobals2017,
            ...newGlobals2020,
            ...newGlobals2021
          },
          parserOptions: { ecmaVersion: 12 }
        },
        browser: { globals: globals$1.browser },
        node: {
          globals: globals$1.node,
          parserOptions: { ecmaFeatures: { globalReturn: true } }
        },
        "shared-node-browser": { globals: globals$1["shared-node-browser"] },
        worker: { globals: globals$1.worker },
        serviceworker: { globals: globals$1.serviceworker },
        commonjs: {
          globals: globals$1.commonjs,
          parserOptions: { ecmaFeatures: { globalReturn: true } }
        },
        amd: { globals: globals$1.amd },
        mocha: { globals: globals$1.mocha },
        jasmine: { globals: globals$1.jasmine },
        jest: { globals: globals$1.jest },
        phantomjs: { globals: globals$1.phantomjs },
        jquery: { globals: globals$1.jquery },
        qunit: { globals: globals$1.qunit },
        prototypejs: { globals: globals$1.prototypejs },
        shelljs: { globals: globals$1.shelljs },
        meteor: { globals: globals$1.meteor },
        mongo: { globals: globals$1.mongo },
        protractor: { globals: globals$1.protractor },
        applescript: { globals: globals$1.applescript },
        nashorn: { globals: globals$1.nashorn },
        atomtest: { globals: globals$1.atomtest },
        embertest: { globals: globals$1.embertest },
        webextensions: { globals: globals$1.webextensions },
        greasemonkey: { globals: globals$1.greasemonkey }
      }));
      var _environments$2 = exports$5P;

      var exports$5O = {};
      const RULE_SEVERITY_STRINGS = [
          "off",
          "warn",
          "error"
        ], RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {
          map[value] = index;
          return map;
        }, {}), VALID_SEVERITIES = [
          0,
          1,
          2,
          "off",
          "warn",
          "error"
        ];
      exports$5O = {
        getRuleSeverity(ruleConfig) {
          const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;
          if (severityValue === 0 || severityValue === 1 || severityValue === 2) {
            return severityValue;
          }
          if (typeof severityValue === "string") {
            return RULE_SEVERITY[severityValue.toLowerCase()] || 0;
          }
          return 0;
        },
        normalizeToStrings(config) {
          if (config.rules) {
            Object.keys(config.rules).forEach(ruleId => {
              const ruleConfig = config.rules[ruleId];
              if (typeof ruleConfig === "number") {
                config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];
              } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === "number") {
                ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];
              }
            });
          }
        },
        isErrorSeverity(ruleConfig) {
          return exports$5O.getRuleSeverity(ruleConfig) === 2;
        },
        isValidSeverity(ruleConfig) {
          let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;
          if (typeof severity === "string") {
            severity = severity.toLowerCase();
          }
          return VALID_SEVERITIES.indexOf(severity) !== -1;
        },
        isEverySeverityValid(config) {
          return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));
        },
        normalizeConfigGlobal(configuredValue) {
          switch (configuredValue) {
          case "off":
            return "off";
          case true:
          case "true":
          case "writeable":
          case "writable":
            return "writable";
          case null:
          case false:
          case "false":
          case "readable":
          case "readonly":
            return "readonly";
          default:
            throw new Error(`'${ configuredValue }' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);
          }
        }
      };
      var _configOps$3 = exports$5O;
      const getRuleSeverity$1 = exports$5O.getRuleSeverity;

      var exports$5N = {};
      (function (global, factory) {
        factory(exports$5N);
      }(exports$5N, function (exports) {
        function merge() {
          for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
            sets[_key] = arguments[_key];
          }
          if (sets.length > 1) {
            sets[0] = sets[0].slice(0, -1);
            var xl = sets.length - 1;
            for (var x = 1; x < xl; ++x) {
              sets[x] = sets[x].slice(1, -1);
            }
            sets[xl] = sets[xl].slice(1);
            return sets.join("");
          } else {
            return sets[0];
          }
        }
        function subexp(str) {
          return "(?:" + str + ")";
        }
        function typeOf(o) {
          return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
        }
        function toUpperCase(str) {
          return str.toUpperCase();
        }
        function toArray(obj) {
          return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
        }
        function assign(target, source) {
          var obj = target;
          if (source) {
            for (var key in source) {
              obj[key] = source[key];
            }
          }
          return obj;
        }
        function buildExps(isIRI) {
          var ALPHA$$ = "[A-Za-z]", DIGIT$$ = "[0-9]", HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"), PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$); subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"); subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"); var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$ + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([
              IPV6ADDRESS1$,
              IPV6ADDRESS2$,
              IPV6ADDRESS3$,
              IPV6ADDRESS4$,
              IPV6ADDRESS5$,
              IPV6ADDRESS6$,
              IPV6ADDRESS7$,
              IPV6ADDRESS8$,
              IPV6ADDRESS9$
            ].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"); subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"); subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"); var PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")); subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"); subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
          return {
            NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
            NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
            NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
            ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
            UNRESERVED: new RegExp(UNRESERVED$$, "g"),
            OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
            PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
            IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
            IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
          };
        }
        var URI_PROTOCOL = buildExps(false);
        var IRI_PROTOCOL = buildExps(true);
        var slicedToArray = (function () {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = undefined;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function (arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }());
        var toConsumableArray = function (arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++)
              arr2[i] = arr[i];
            return arr2;
          } else {
            return Array.from(arr);
          }
        };
        var maxInt = 2147483647;
        var base = 36;
        var tMin = 1;
        var tMax = 26;
        var skew = 38;
        var damp = 700;
        var initialBias = 72;
        var initialN = 128;
        var delimiter = "-";
        var regexPunycode = /^xn--/;
        var regexNonASCII = /[^\0-\x7E]/;
        var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
        var errors = {
          "overflow": "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        };
        var baseMinusTMin = base - tMin;
        var floor = Math.floor;
        var stringFromCharCode = String.fromCharCode;
        function error$1(type) {
          throw new RangeError(errors[type]);
        }
        function map(array, fn) {
          var result = [];
          var length = array.length;
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }
        function mapDomain(string, fn) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            result = parts[0] + "@";
            string = parts[1];
          }
          string = string.replace(regexSeparators, ".");
          var labels = string.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }
        function ucs2decode(string) {
          var output = [];
          var counter = 0;
          var length = string.length;
          while (counter < length) {
            var value = string.charCodeAt(counter++);
            if (value >= 55296 && value <= 56319 && counter < length) {
              var extra = string.charCodeAt(counter++);
              if ((extra & 64512) == 56320) {
                output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
              } else {
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }
        var ucs2encode = function ucs2encode(array) {
          return String.fromCodePoint.apply(String, toConsumableArray(array));
        };
        var basicToDigit = function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        };
        var digitToBasic = function digitToBasic(digit, flag) {
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        };
        var adapt = function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; delta > baseMinusTMin * tMax >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
        };
        var decode = function decode(input) {
          var output = [];
          var inputLength = input.length;
          var i = 0;
          var n = initialN;
          var bias = initialBias;
          var basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }
          for (var j = 0; j < basic; ++j) {
            if (input.charCodeAt(j) >= 128) {
              error$1("not-basic");
            }
            output.push(input.charCodeAt(j));
          }
          for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
            var oldi = i;
            for (var w = 1, k = base;; k += base) {
              if (index >= inputLength) {
                error$1("invalid-input");
              }
              var digit = basicToDigit(input.charCodeAt(index++));
              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error$1("overflow");
              }
              i += digit * w;
              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (digit < t) {
                break;
              }
              var baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error$1("overflow");
              }
              w *= baseMinusT;
            }
            var out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            if (floor(i / out) > maxInt - n) {
              error$1("overflow");
            }
            n += floor(i / out);
            i %= out;
            output.splice(i++, 0, n);
          }
          return String.fromCodePoint.apply(String, output);
        };
        var encode = function encode(input) {
          var output = [];
          input = ucs2decode(input);
          var inputLength = input.length;
          var n = initialN;
          var delta = 0;
          var bias = initialBias;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;
          try {
            for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _currentValue2 = _step.value;
              if (_currentValue2 < 128) {
                output.push(stringFromCharCode(_currentValue2));
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          var basicLength = output.length;
          var handledCPCount = basicLength;
          if (basicLength) {
            output.push(delimiter);
          }
          while (handledCPCount < inputLength) {
            var m = maxInt;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;
            try {
              for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var currentValue = _step2.value;
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
            var handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error$1("overflow");
            }
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;
            try {
              for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var _currentValue = _step3.value;
                if (_currentValue < n && ++delta > maxInt) {
                  error$1("overflow");
                }
                if (_currentValue == n) {
                  var q = delta;
                  for (var k = base;; k += base) {
                    var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                    if (q < t) {
                      break;
                    }
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }
                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
            ++delta;
            ++n;
          }
          return output.join("");
        };
        var toUnicode = function toUnicode(input) {
          return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        };
        var toASCII = function toASCII(input) {
          return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        };
        var punycode = {
          "version": "2.1.0",
          "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
          },
          "decode": decode,
          "encode": encode,
          "toASCII": toASCII,
          "toUnicode": toUnicode
        };
        var SCHEMES = {};
        function pctEncChar(chr) {
          var c = chr.charCodeAt(0);
          var e = void 0;
          if (c < 16)
            e = "%0" + c.toString(16).toUpperCase();
          else if (c < 128)
            e = "%" + c.toString(16).toUpperCase();
          else if (c < 2048)
            e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          else
            e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
          return e;
        }
        function pctDecChars(str) {
          var newStr = "";
          var i = 0;
          var il = str.length;
          while (i < il) {
            var c = parseInt(str.substr(i + 1, 2), 16);
            if (c < 128) {
              newStr += String.fromCharCode(c);
              i += 3;
            } else if (c >= 194 && c < 224) {
              if (il - i >= 6) {
                var c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
              } else {
                newStr += str.substr(i, 6);
              }
              i += 6;
            } else if (c >= 224) {
              if (il - i >= 9) {
                var _c = parseInt(str.substr(i + 4, 2), 16);
                var c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
              } else {
                newStr += str.substr(i, 9);
              }
              i += 9;
            } else {
              newStr += str.substr(i, 3);
              i += 3;
            }
          }
          return newStr;
        }
        function _normalizeComponentEncoding(components, protocol) {
          function decodeUnreserved(str) {
            var decStr = pctDecChars(str);
            return !decStr.match(protocol.UNRESERVED) ? str : decStr;
          }
          if (components.scheme)
            components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
          if (components.userinfo !== undefined)
            components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.host !== undefined)
            components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.path !== undefined)
            components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.query !== undefined)
            components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          if (components.fragment !== undefined)
            components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
          return components;
        }
        function _stripLeadingZeros(str) {
          return str.replace(/^0*(.*)/, "$1") || "0";
        }
        function _normalizeIPv4(host, protocol) {
          var matches = host.match(protocol.IPV4ADDRESS) || [];
          var _matches = slicedToArray(matches, 2), address = _matches[1];
          if (address) {
            return address.split(".").map(_stripLeadingZeros).join(".");
          } else {
            return host;
          }
        }
        function _normalizeIPv6(host, protocol) {
          var matches = host.match(protocol.IPV6ADDRESS) || [];
          var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
          if (address) {
            var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
            var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
            var lastFields = last.split(":").map(_stripLeadingZeros);
            var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
            var fieldCount = isLastFieldIPv4Address ? 7 : 8;
            var lastFieldsStart = lastFields.length - fieldCount;
            var fields = Array(fieldCount);
            for (var x = 0; x < fieldCount; ++x) {
              fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
            }
            if (isLastFieldIPv4Address) {
              fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
            }
            var allZeroFields = fields.reduce(function (acc, field, index) {
              if (!field || field === "0") {
                var lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                  lastLongest.length++;
                } else {
                  acc.push({
                    index: index,
                    length: 1
                  });
                }
              }
              return acc;
            }, []);
            var longestZeroFields = allZeroFields.sort(function (a, b) {
              return b.length - a.length;
            })[0];
            var newHost = void 0;
            if (longestZeroFields && longestZeroFields.length > 1) {
              var newFirst = fields.slice(0, longestZeroFields.index);
              var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
              newHost = newFirst.join(":") + "::" + newLast.join(":");
            } else {
              newHost = fields.join(":");
            }
            if (zone) {
              newHost += "%" + zone;
            }
            return newHost;
          } else {
            return host;
          }
        }
        var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
        var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
        function parse(uriString) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var components = {};
          var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          if (options.reference === "suffix")
            uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
          var matches = uriString.match(URI_PARSE);
          if (matches) {
            if (NO_MATCH_IS_UNDEFINED) {
              components.scheme = matches[1];
              components.userinfo = matches[3];
              components.host = matches[4];
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = matches[7];
              components.fragment = matches[8];
              if (isNaN(components.port)) {
                components.port = matches[5];
              }
            } else {
              components.scheme = matches[1] || undefined;
              components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
              components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
              components.port = parseInt(matches[5], 10);
              components.path = matches[6] || "";
              components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
              components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
              if (isNaN(components.port)) {
                components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
              }
            }
            if (components.host) {
              components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
            }
            if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
              components.reference = "same-document";
            } else if (components.scheme === undefined) {
              components.reference = "relative";
            } else if (components.fragment === undefined) {
              components.reference = "absolute";
            } else {
              components.reference = "uri";
            }
            if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
              components.error = components.error || "URI is not a " + options.reference + " reference.";
            }
            var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
            if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
              if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                try {
                  components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                } catch (e) {
                  components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                }
              }
              _normalizeComponentEncoding(components, URI_PROTOCOL);
            } else {
              _normalizeComponentEncoding(components, protocol);
            }
            if (schemeHandler && schemeHandler.parse) {
              schemeHandler.parse(components, options);
            }
          } else {
            components.error = components.error || "URI can not be parsed.";
          }
          return components;
        }
        function _recomposeAuthority(components, options) {
          var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          if (components.userinfo !== undefined) {
            uriTokens.push(components.userinfo);
            uriTokens.push("@");
          }
          if (components.host !== undefined) {
            uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
              return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
            }));
          }
          if (typeof components.port === "number" || typeof components.port === "string") {
            uriTokens.push(":");
            uriTokens.push(String(components.port));
          }
          return uriTokens.length ? uriTokens.join("") : undefined;
        }
        var RDS1 = /^\.\.?\//;
        var RDS2 = /^\/\.(\/|$)/;
        var RDS3 = /^\/\.\.(\/|$)/;
        var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
        function removeDotSegments(input) {
          var output = [];
          while (input.length) {
            if (input.match(RDS1)) {
              input = input.replace(RDS1, "");
            } else if (input.match(RDS2)) {
              input = input.replace(RDS2, "/");
            } else if (input.match(RDS3)) {
              input = input.replace(RDS3, "/");
              output.pop();
            } else if (input === "." || input === "..") {
              input = "";
            } else {
              var im = input.match(RDS5);
              if (im) {
                var s = im[0];
                input = input.slice(s.length);
                output.push(s);
              } else {
                throw new Error("Unexpected dot segment condition");
              }
            }
          }
          return output.join("");
        }
        function serialize(components) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
          var uriTokens = [];
          var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
          if (schemeHandler && schemeHandler.serialize)
            schemeHandler.serialize(components, options);
          if (components.host) {
            if (protocol.IPV6ADDRESS.test(components.host)) ; else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
              try {
                components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
              } catch (e) {
                components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
              }
            }
          }
          _normalizeComponentEncoding(components, protocol);
          if (options.reference !== "suffix" && components.scheme) {
            uriTokens.push(components.scheme);
            uriTokens.push(":");
          }
          var authority = _recomposeAuthority(components, options);
          if (authority !== undefined) {
            if (options.reference !== "suffix") {
              uriTokens.push("//");
            }
            uriTokens.push(authority);
            if (components.path && components.path.charAt(0) !== "/") {
              uriTokens.push("/");
            }
          }
          if (components.path !== undefined) {
            var s = components.path;
            if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
              s = removeDotSegments(s);
            }
            if (authority === undefined) {
              s = s.replace(/^\/\//, "/%2F");
            }
            uriTokens.push(s);
          }
          if (components.query !== undefined) {
            uriTokens.push("?");
            uriTokens.push(components.query);
          }
          if (components.fragment !== undefined) {
            uriTokens.push("#");
            uriTokens.push(components.fragment);
          }
          return uriTokens.join("");
        }
        function resolveComponents(base, relative) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var skipNormalization = arguments[3];
          var target = {};
          if (!skipNormalization) {
            base = parse(serialize(base, options), options);
            relative = parse(serialize(relative, options), options);
          }
          options = options || {};
          if (!options.tolerant && relative.scheme) {
            target.scheme = relative.scheme;
            target.userinfo = relative.userinfo;
            target.host = relative.host;
            target.port = relative.port;
            target.path = removeDotSegments(relative.path || "");
            target.query = relative.query;
          } else {
            if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
              target.userinfo = relative.userinfo;
              target.host = relative.host;
              target.port = relative.port;
              target.path = removeDotSegments(relative.path || "");
              target.query = relative.query;
            } else {
              if (!relative.path) {
                target.path = base.path;
                if (relative.query !== undefined) {
                  target.query = relative.query;
                } else {
                  target.query = base.query;
                }
              } else {
                if (relative.path.charAt(0) === "/") {
                  target.path = removeDotSegments(relative.path);
                } else {
                  if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                    target.path = "/" + relative.path;
                  } else if (!base.path) {
                    target.path = relative.path;
                  } else {
                    target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                  }
                  target.path = removeDotSegments(target.path);
                }
                target.query = relative.query;
              }
              target.userinfo = base.userinfo;
              target.host = base.host;
              target.port = base.port;
            }
            target.scheme = base.scheme;
          }
          target.fragment = relative.fragment;
          return target;
        }
        function resolve(baseURI, relativeURI, options) {
          var schemelessOptions = assign({ scheme: "null" }, options);
          return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
        }
        function normalize(uri, options) {
          if (typeof uri === "string") {
            uri = serialize(parse(uri, options), options);
          } else if (typeOf(uri) === "object") {
            uri = parse(serialize(uri, options), options);
          }
          return uri;
        }
        function equal(uriA, uriB, options) {
          if (typeof uriA === "string") {
            uriA = serialize(parse(uriA, options), options);
          } else if (typeOf(uriA) === "object") {
            uriA = serialize(uriA, options);
          }
          if (typeof uriB === "string") {
            uriB = serialize(parse(uriB, options), options);
          } else if (typeOf(uriB) === "object") {
            uriB = serialize(uriB, options);
          }
          return uriA === uriB;
        }
        function escapeComponent(str, options) {
          return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
        }
        function unescapeComponent(str, options) {
          return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
        }
        var handler = {
          scheme: "http",
          domainHost: true,
          parse: function parse(components, options) {
            if (!components.host) {
              components.error = components.error || "HTTP URIs must have a host.";
            }
            return components;
          },
          serialize: function serialize(components, options) {
            var secure = String(components.scheme).toLowerCase() === "https";
            if (components.port === (secure ? 443 : 80) || components.port === "") {
              components.port = undefined;
            }
            if (!components.path) {
              components.path = "/";
            }
            return components;
          }
        };
        var handler$1 = {
          scheme: "https",
          domainHost: handler.domainHost,
          parse: handler.parse,
          serialize: handler.serialize
        };
        function isSecure(wsComponents) {
          return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
        }
        var handler$2 = {
          scheme: "ws",
          domainHost: true,
          parse: function parse(components, options) {
            var wsComponents = components;
            wsComponents.secure = isSecure(wsComponents);
            wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
            wsComponents.path = undefined;
            wsComponents.query = undefined;
            return wsComponents;
          },
          serialize: function serialize(wsComponents, options) {
            if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
              wsComponents.port = undefined;
            }
            if (typeof wsComponents.secure === "boolean") {
              wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
              wsComponents.secure = undefined;
            }
            if (wsComponents.resourceName) {
              var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
              wsComponents.path = path && path !== "/" ? path : undefined;
              wsComponents.query = query;
              wsComponents.resourceName = undefined;
            }
            wsComponents.fragment = undefined;
            return wsComponents;
          }
        };
        var handler$3 = {
          scheme: "wss",
          domainHost: handler$2.domainHost,
          parse: handler$2.parse,
          serialize: handler$2.serialize
        };
        var O = {};
        var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ("\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
        var HEXDIG$$ = "[0-9A-Fa-f]";
        var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
        var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
        var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
        var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
        var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
        var UNRESERVED = new RegExp(UNRESERVED$$, "g");
        var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
        var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", "[\\\"]", VCHAR$$), "g");
        var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
        var NOT_HFVALUE = NOT_HFNAME;
        function decodeUnreserved(str) {
          var decStr = pctDecChars(str);
          return !decStr.match(UNRESERVED) ? str : decStr;
        }
        var handler$4 = {
          scheme: "mailto",
          parse: function parse$$1(components, options) {
            var mailtoComponents = components;
            var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
            mailtoComponents.path = undefined;
            if (mailtoComponents.query) {
              var unknownHeaders = false;
              var headers = {};
              var hfields = mailtoComponents.query.split("&");
              for (var x = 0, xl = hfields.length; x < xl; ++x) {
                var hfield = hfields[x].split("=");
                switch (hfield[0]) {
                case "to":
                  var toAddrs = hfield[1].split(",");
                  for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                    to.push(toAddrs[_x]);
                  }
                  break;
                case "subject":
                  mailtoComponents.subject = unescapeComponent(hfield[1], options);
                  break;
                case "body":
                  mailtoComponents.body = unescapeComponent(hfield[1], options);
                  break;
                default:
                  unknownHeaders = true;
                  headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                  break;
                }
              }
              if (unknownHeaders)
                mailtoComponents.headers = headers;
            }
            mailtoComponents.query = undefined;
            for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
              var addr = to[_x2].split("@");
              addr[0] = unescapeComponent(addr[0]);
              if (!options.unicodeSupport) {
                try {
                  addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                } catch (e) {
                  mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
              } else {
                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
              }
              to[_x2] = addr.join("@");
            }
            return mailtoComponents;
          },
          serialize: function serialize$$1(mailtoComponents, options) {
            var components = mailtoComponents;
            var to = toArray(mailtoComponents.to);
            if (to) {
              for (var x = 0, xl = to.length; x < xl; ++x) {
                var toAddr = String(to[x]);
                var atIdx = toAddr.lastIndexOf("@");
                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                var domain = toAddr.slice(atIdx + 1);
                try {
                  domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                } catch (e) {
                  components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[x] = localPart + "@" + domain;
              }
              components.path = to.join(",");
            }
            var headers = mailtoComponents.headers = mailtoComponents.headers || {};
            if (mailtoComponents.subject)
              headers["subject"] = mailtoComponents.subject;
            if (mailtoComponents.body)
              headers["body"] = mailtoComponents.body;
            var fields = [];
            for (var name in headers) {
              if (headers[name] !== O[name]) {
                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
              }
            }
            if (fields.length) {
              components.query = fields.join("&");
            }
            return components;
          }
        };
        var URN_PARSE = /^([^\:]+)\:(.*)/;
        var handler$5 = {
          scheme: "urn",
          parse: function parse$$1(components, options) {
            var matches = components.path && components.path.match(URN_PARSE);
            var urnComponents = components;
            if (matches) {
              var scheme = options.scheme || urnComponents.scheme || "urn";
              var nid = matches[1].toLowerCase();
              var nss = matches[2];
              var urnScheme = scheme + ":" + (options.nid || nid);
              var schemeHandler = SCHEMES[urnScheme];
              urnComponents.nid = nid;
              urnComponents.nss = nss;
              urnComponents.path = undefined;
              if (schemeHandler) {
                urnComponents = schemeHandler.parse(urnComponents, options);
              }
            } else {
              urnComponents.error = urnComponents.error || "URN can not be parsed.";
            }
            return urnComponents;
          },
          serialize: function serialize$$1(urnComponents, options) {
            var scheme = options.scheme || urnComponents.scheme || "urn";
            var nid = urnComponents.nid;
            var urnScheme = scheme + ":" + (options.nid || nid);
            var schemeHandler = SCHEMES[urnScheme];
            if (schemeHandler) {
              urnComponents = schemeHandler.serialize(urnComponents, options);
            }
            var uriComponents = urnComponents;
            var nss = urnComponents.nss;
            uriComponents.path = (nid || options.nid) + ":" + nss;
            return uriComponents;
          }
        };
        var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
        var handler$6 = {
          scheme: "urn:uuid",
          parse: function parse(urnComponents, options) {
            var uuidComponents = urnComponents;
            uuidComponents.uuid = uuidComponents.nss;
            uuidComponents.nss = undefined;
            if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
              uuidComponents.error = uuidComponents.error || "UUID is not valid.";
            }
            return uuidComponents;
          },
          serialize: function serialize(uuidComponents, options) {
            var urnComponents = uuidComponents;
            urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
            return urnComponents;
          }
        };
        SCHEMES[handler.scheme] = handler;
        SCHEMES[handler$1.scheme] = handler$1;
        SCHEMES[handler$2.scheme] = handler$2;
        SCHEMES[handler$3.scheme] = handler$3;
        SCHEMES[handler$4.scheme] = handler$4;
        SCHEMES[handler$5.scheme] = handler$5;
        SCHEMES[handler$6.scheme] = handler$6;
        exports.SCHEMES = SCHEMES;
        exports.pctEncChar = pctEncChar;
        exports.pctDecChars = pctDecChars;
        exports.parse = parse;
        exports.removeDotSegments = removeDotSegments;
        exports.serialize = serialize;
        exports.resolveComponents = resolveComponents;
        exports.resolve = resolve;
        exports.normalize = normalize;
        exports.equal = equal;
        exports.escapeComponent = escapeComponent;
        exports.unescapeComponent = unescapeComponent;
        Object.defineProperty(exports, "__esModule", { value: true });
      }));
      exports$5N.SCHEMES; exports$5N.pctEncChar; exports$5N.pctDecChars; exports$5N.parse; exports$5N.removeDotSegments; exports$5N.serialize; exports$5N.resolveComponents; exports$5N.resolve; exports$5N.normalize; exports$5N.equal; exports$5N.escapeComponent; exports$5N.unescapeComponent; exports$5N.__esModule;

      var exports$5M = {};
      exports$5M = function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i, keys;
          if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i = length; i-- !== 0;)
              if (!equal(a[i], b[i]))
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys = Object.keys(a);
          length = keys.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i = length; i-- !== 0;)
            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
              return false;
          for (i = length; i-- !== 0;) {
            var key = keys[i];
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      };
      var exports$1$X = exports$5M;

      var _fastDeepEqual2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$X
      });

      var exports$5L = {};
      exports$5L = function ucs2length(str) {
        var length = 0, len = str.length, pos = 0, value;
        while (pos < len) {
          length++;
          value = str.charCodeAt(pos++);
          if (value >= 55296 && value <= 56319 && pos < len) {
            value = str.charCodeAt(pos);
            if ((value & 64512) == 56320)
              pos++;
          }
        }
        return length;
      };
      var _ucs2length = exports$5L;

      var exports$5K = {};
      exports$5K = {
        copy: copy,
        checkDataType: checkDataType,
        checkDataTypes: checkDataTypes,
        coerceToTypes: coerceToTypes,
        toHash: toHash$1,
        getProperty: getProperty,
        escapeQuotes: escapeQuotes,
        equal: exports$1$X,
        ucs2length: _ucs2length,
        varOccurences: varOccurences,
        varReplace: varReplace,
        schemaHasRules: schemaHasRules,
        schemaHasRulesExcept: schemaHasRulesExcept,
        schemaUnknownRules: schemaUnknownRules,
        toQuotedString: toQuotedString,
        getPathExpr: getPathExpr,
        getPath: getPath,
        getData: getData,
        unescapeFragment: unescapeFragment,
        unescapeJsonPointer: unescapeJsonPointer,
        escapeFragment: escapeFragment,
        escapeJsonPointer: escapeJsonPointer
      };

      function copy(o, to) {
        to = to || {};

        for (var key in o) {
          to[key] = o[key];
        }

        return to;
      }

      function checkDataType(dataType, data, strictNumbers, negate) {
        var EQUAL = negate ? " !== " : " === ",
            AND = negate ? " || " : " && ",
            OK = negate ? "!" : "",
            NOT = negate ? "" : "!";

        switch (dataType) {
          case "null":
            return data + EQUAL + "null";

          case "array":
            return OK + "Array.isArray(" + data + ")";

          case "object":
            return "(" + OK + data + AND + "typeof " + data + EQUAL + "\"object\"" + AND + NOT + "Array.isArray(" + data + "))";

          case "integer":
            return "(typeof " + data + EQUAL + "\"number\"" + AND + NOT + "(" + data + " % 1)" + AND + data + EQUAL + data + (strictNumbers ? AND + OK + "isFinite(" + data + ")" : "") + ")";

          case "number":
            return "(typeof " + data + EQUAL + "\"" + dataType + "\"" + (strictNumbers ? AND + OK + "isFinite(" + data + ")" : "") + ")";

          default:
            return "typeof " + data + EQUAL + "\"" + dataType + "\"";
        }
      }

      function checkDataTypes(dataTypes, data, strictNumbers) {
        switch (dataTypes.length) {
          case 1:
            return checkDataType(dataTypes[0], data, strictNumbers, true);

          default:
            var code = "";
            var types = toHash$1(dataTypes);

            if (types.array && types.object) {
              code = types["null"] ? "(" : "(!" + data + " || ";
              code += "typeof " + data + " !== \"object\")";
              delete types["null"];
              delete types.array;
              delete types.object;
            }

            if (types.number) delete types.integer;

            for (var t in types) {
              code += (code ? " && " : "") + checkDataType(t, data, strictNumbers, true);
            }

            return code;
        }
      }

      var COERCE_TO_TYPES = toHash$1(["string", "number", "integer", "boolean", "null"]);

      function coerceToTypes(optionCoerceTypes, dataTypes) {
        if (Array.isArray(dataTypes)) {
          var types = [];

          for (var i = 0; i < dataTypes.length; i++) {
            var t = dataTypes[i];
            if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === "array" && t === "array") types[types.length] = t;
          }

          if (types.length) return types;
        } else if (COERCE_TO_TYPES[dataTypes]) {
          return [dataTypes];
        } else if (optionCoerceTypes === "array" && dataTypes === "array") {
          return ["array"];
        }
      }

      function toHash$1(arr) {
        var hash = {};

        for (var i = 0; i < arr.length; i++) {
          hash[arr[i]] = true;
        }

        return hash;
      }

      var IDENTIFIER$1 = /^[a-z$_][a-z$_0-9]*$/i;
      var SINGLE_QUOTE = /'|\\/g;

      function getProperty(key) {
        return typeof key == "number" ? "[" + key + "]" : IDENTIFIER$1.test(key) ? "." + key : "['" + escapeQuotes(key) + "']";
      }

      function escapeQuotes(str) {
        return str.replace(SINGLE_QUOTE, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
      }

      function varOccurences(str, dataVar) {
        dataVar += "[^0-9]";
        var matches = str.match(new RegExp(dataVar, "g"));
        return matches ? matches.length : 0;
      }

      function varReplace(str, dataVar, expr) {
        dataVar += "([^0-9])";
        expr = expr.replace(/\$/g, "$$$$");
        return str.replace(new RegExp(dataVar, "g"), expr + "$1");
      }

      function schemaHasRules(schema, rules) {
        if (typeof schema == "boolean") return !schema;

        for (var key in schema) {
          if (rules[key]) return true;
        }
      }

      function schemaHasRulesExcept(schema, rules, exceptKeyword) {
        if (typeof schema == "boolean") return !schema && exceptKeyword != "not";

        for (var key in schema) {
          if (key != exceptKeyword && rules[key]) return true;
        }
      }

      function schemaUnknownRules(schema, rules) {
        if (typeof schema == "boolean") return;

        for (var key in schema) {
          if (!rules[key]) return key;
        }
      }

      function toQuotedString(str) {
        return "'" + escapeQuotes(str) + "'";
      }

      function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
        var path = jsonPointers ? "'/' + " + expr + (isNumber ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : isNumber ? "'[' + " + expr + " + ']'" : "'[\\'' + " + expr + " + '\\']'";
        return joinPaths(currentPath, path);
      }

      function getPath(currentPath, prop, jsonPointers) {
        var path = jsonPointers ? toQuotedString("/" + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
        return joinPaths(currentPath, path);
      }

      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;

      function getData($data, lvl, paths) {
        var up, jsonPointer, data, matches;
        if ($data === "") return "rootData";

        if ($data[0] == "/") {
          if (!JSON_POINTER.test($data)) throw new Error("Invalid JSON-pointer: " + $data);
          jsonPointer = $data;
          data = "rootData";
        } else {
          matches = $data.match(RELATIVE_JSON_POINTER);
          if (!matches) throw new Error("Invalid JSON-pointer: " + $data);
          up = +matches[1];
          jsonPointer = matches[2];

          if (jsonPointer == "#") {
            if (up >= lvl) throw new Error("Cannot access property/index " + up + " levels up, current level is " + lvl);
            return paths[lvl - up];
          }

          if (up > lvl) throw new Error("Cannot access data " + up + " levels up, current level is " + lvl);
          data = "data" + (lvl - up || "");
          if (!jsonPointer) return data;
        }

        var expr = data;
        var segments = jsonPointer.split("/");

        for (var i = 0; i < segments.length; i++) {
          var segment = segments[i];

          if (segment) {
            data += getProperty(unescapeJsonPointer(segment));
            expr += " && " + data;
          }
        }

        return expr;
      }

      function joinPaths(a, b) {
        if (a == "\"\"") return b;
        return (a + " + " + b).replace(/([^\\])' \+ '/g, "$1");
      }

      function unescapeFragment(str) {
        return unescapeJsonPointer(decodeURIComponent(str));
      }

      function escapeFragment(str) {
        return encodeURIComponent(escapeJsonPointer(str));
      }

      function escapeJsonPointer(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }

      function unescapeJsonPointer(str) {
        return str.replace(/~1/g, "/").replace(/~0/g, "~");
      }

      var _util$5 = exports$5K;
      var exports$1$W = {};
      var util$6 = _util$5;
      var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
      var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
      var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
      var URI$1 = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
      var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
      var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
      var URL$1 = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
      var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
      var JSON_POINTER$1 = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
      var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
      var RELATIVE_JSON_POINTER$1 = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
      exports$1$W = formats$1;

      function formats$1(mode) {
        mode = mode == "full" ? "full" : "fast";
        return util$6.copy(formats$1[mode]);
      }

      formats$1.fast = {
        date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
        time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
        "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
        uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
        "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
        "uri-template": URITEMPLATE,
        url: URL$1,
        email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
        hostname: HOSTNAME,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex: regex$1,
        uuid: UUID,
        "json-pointer": JSON_POINTER$1,
        "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
        "relative-json-pointer": RELATIVE_JSON_POINTER$1
      };
      formats$1.full = {
        date: date,
        time: time,
        "date-time": date_time,
        uri: uri,
        "uri-reference": URIREF,
        "uri-template": URITEMPLATE,
        url: URL$1,
        email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
        hostname: HOSTNAME,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex: regex$1,
        uuid: UUID,
        "json-pointer": JSON_POINTER$1,
        "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
        "relative-json-pointer": RELATIVE_JSON_POINTER$1
      };

      function isLeapYear(year) {
        return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
      }

      function date(str) {
        var matches = str.match(DATE);
        if (!matches) return false;
        var year = +matches[1];
        var month = +matches[2];
        var day = +matches[3];
        return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
      }

      function time(str, full) {
        var matches = str.match(TIME);
        if (!matches) return false;
        var hour = matches[1];
        var minute = matches[2];
        var second = matches[3];
        var timeZone = matches[5];
        return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
      }

      var DATE_TIME_SEPARATOR = /t|\s/i;

      function date_time(str) {
        var dateTime = str.split(DATE_TIME_SEPARATOR);
        return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
      }

      var NOT_URI_FRAGMENT = /\/|:/;

      function uri(str) {
        return NOT_URI_FRAGMENT.test(str) && URI$1.test(str);
      }

      var Z_ANCHOR = /[^\\]\\Z/;

      function regex$1(str) {
        if (Z_ANCHOR.test(str)) return false;

        try {
          new RegExp(str);
          return true;
        } catch (e) {
          return false;
        }
      }

      var _formats = exports$1$W;

      var exports$5J = {};
      var traverse$1 = exports$5J = function (schema, opts, cb) {
        if (typeof opts == "function") {
          cb = opts;
          opts = {};
        }
        cb = opts.cb || cb;
        var pre = typeof cb == "function" ? cb : cb.pre || function () {
        };
        var post = cb.post || function () {
        };
        _traverse(opts, pre, post, schema, "", schema);
      };
      traverse$1.keywords = {
        additionalItems: true,
        items: true,
        contains: true,
        additionalProperties: true,
        propertyNames: true,
        not: true
      };
      traverse$1.arrayKeywords = {
        items: true,
        allOf: true,
        anyOf: true,
        oneOf: true
      };
      traverse$1.propsKeywords = {
        definitions: true,
        properties: true,
        patternProperties: true,
        dependencies: true
      };
      traverse$1.skipKeywords = {
        default: true,
        enum: true,
        const: true,
        required: true,
        maximum: true,
        minimum: true,
        exclusiveMaximum: true,
        exclusiveMinimum: true,
        multipleOf: true,
        maxLength: true,
        minLength: true,
        pattern: true,
        format: true,
        maxItems: true,
        minItems: true,
        uniqueItems: true,
        maxProperties: true,
        minProperties: true
      };
      function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
        if (schema && typeof schema == "object" && !Array.isArray(schema)) {
          pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
          for (var key in schema) {
            var sch = schema[key];
            if (Array.isArray(sch)) {
              if (key in traverse$1.arrayKeywords) {
                for (var i = 0; i < sch.length; i++)
                  _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
              }
            } else if (key in traverse$1.propsKeywords) {
              if (sch && typeof sch == "object") {
                for (var prop in sch)
                  _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
              }
            } else if (key in traverse$1.keywords || opts.allKeys && !(key in traverse$1.skipKeywords)) {
              _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
            }
          }
          post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
        }
      }
      function escapeJsonPtr(str) {
        return str.replace(/~/g, "~0").replace(/\//g, "~1");
      }
      var exports$1$V = exports$5J;

      var exports$5I = {};
      exports$5I = function (data, opts) {
        if (!opts)
          opts = {};
        if (typeof opts === "function")
          opts = { cmp: opts };
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
        var cmp = opts.cmp && function (f) {
          return function (node) {
            return function (a, b) {
              var aobj = {
                key: a,
                value: node[a]
              };
              var bobj = {
                key: b,
                value: node[b]
              };
              return f(aobj, bobj);
            };
          };
        }(opts.cmp);
        var seen = [];
        return function stringify(node) {
          if (node && node.toJSON && typeof node.toJSON === "function") {
            node = node.toJSON();
          }
          if (node === undefined)
            return;
          if (typeof node == "number")
            return isFinite(node) ? "" + node : "null";
          if (typeof node !== "object")
            return JSON.stringify(node);
          var i, out;
          if (Array.isArray(node)) {
            out = "[";
            for (i = 0; i < node.length; i++) {
              if (i)
                out += ",";
              out += stringify(node[i]) || "null";
            }
            return out + "]";
          }
          if (node === null)
            return "null";
          if (seen.indexOf(node) !== -1) {
            if (cycles)
              return JSON.stringify("__cycle__");
            throw new TypeError("Converting circular structure to JSON");
          }
          var seenIndex = seen.push(node) - 1;
          var keys = Object.keys(node).sort(cmp && cmp(node));
          out = "";
          for (i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = stringify(node[key]);
            if (!value)
              continue;
            if (out)
              out += ",";
            out += JSON.stringify(key) + ":" + value;
          }
          seen.splice(seenIndex, 1);
          return "{" + out + "}";
        }(data);
      };
      var exports$1$U = exports$5I;

      var _jsonSchemaDraft$2 = {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "$id": "http://json-schema.org/draft-07/schema#",
          "title": "Core schema meta-schema",
          "definitions": {
              "schemaArray": {
                  "type": "array",
                  "minItems": 1,
                  "items": { "$ref": "#" }
              },
              "nonNegativeInteger": {
                  "type": "integer",
                  "minimum": 0
              },
              "nonNegativeIntegerDefault0": {
                  "allOf": [
                      { "$ref": "#/definitions/nonNegativeInteger" },
                      { "default": 0 }
                  ]
              },
              "simpleTypes": {
                  "enum": [
                      "array",
                      "boolean",
                      "integer",
                      "null",
                      "number",
                      "object",
                      "string"
                  ]
              },
              "stringArray": {
                  "type": "array",
                  "items": { "type": "string" },
                  "uniqueItems": true,
                  "default": []
              }
          },
          "type": ["object", "boolean"],
          "properties": {
              "$id": {
                  "type": "string",
                  "format": "uri-reference"
              },
              "$schema": {
                  "type": "string",
                  "format": "uri"
              },
              "$ref": {
                  "type": "string",
                  "format": "uri-reference"
              },
              "$comment": {
                  "type": "string"
              },
              "title": {
                  "type": "string"
              },
              "description": {
                  "type": "string"
              },
              "default": true,
              "readOnly": {
                  "type": "boolean",
                  "default": false
              },
              "examples": {
                  "type": "array",
                  "items": true
              },
              "multipleOf": {
                  "type": "number",
                  "exclusiveMinimum": 0
              },
              "maximum": {
                  "type": "number"
              },
              "exclusiveMaximum": {
                  "type": "number"
              },
              "minimum": {
                  "type": "number"
              },
              "exclusiveMinimum": {
                  "type": "number"
              },
              "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
              "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
              "pattern": {
                  "type": "string",
                  "format": "regex"
              },
              "additionalItems": { "$ref": "#" },
              "items": {
                  "anyOf": [
                      { "$ref": "#" },
                      { "$ref": "#/definitions/schemaArray" }
                  ],
                  "default": true
              },
              "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
              "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
              "uniqueItems": {
                  "type": "boolean",
                  "default": false
              },
              "contains": { "$ref": "#" },
              "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
              "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
              "required": { "$ref": "#/definitions/stringArray" },
              "additionalProperties": { "$ref": "#" },
              "definitions": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "properties": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "patternProperties": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "propertyNames": { "format": "regex" },
                  "default": {}
              },
              "dependencies": {
                  "type": "object",
                  "additionalProperties": {
                      "anyOf": [
                          { "$ref": "#" },
                          { "$ref": "#/definitions/stringArray" }
                      ]
                  }
              },
              "propertyNames": { "$ref": "#" },
              "const": true,
              "enum": {
                  "type": "array",
                  "items": true,
                  "minItems": 1,
                  "uniqueItems": true
              },
              "type": {
                  "anyOf": [
                      { "$ref": "#/definitions/simpleTypes" },
                      {
                          "type": "array",
                          "items": { "$ref": "#/definitions/simpleTypes" },
                          "minItems": 1,
                          "uniqueItems": true
                      }
                  ]
              },
              "format": { "type": "string" },
              "contentMediaType": { "type": "string" },
              "contentEncoding": { "type": "string" },
              "if": {"$ref": "#"},
              "then": {"$ref": "#"},
              "else": {"$ref": "#"},
              "allOf": { "$ref": "#/definitions/schemaArray" },
              "anyOf": { "$ref": "#/definitions/schemaArray" },
              "oneOf": { "$ref": "#/definitions/schemaArray" },
              "not": { "$ref": "#" }
          },
          "default": true
      }
      ;

      var exports$5H = {};
      var util$5 = _util$5;
      exports$5H = SchemaObject;
      function SchemaObject(obj) {
        util$5.copy(obj, this);
      }
      var _schema_obj = exports$5H;
      var exports$1$T = {};
      var URI = exports$5N, equal$1 = exports$1$X, util$1$2 = _util$5, SchemaObject$1 = _schema_obj, traverse = exports$1$V;
      exports$1$T = resolve;
      resolve.normalizeId = normalizeId;
      resolve.fullPath = getFullPath;
      resolve.url = resolveUrl;
      resolve.ids = resolveIds;
      resolve.inlineRef = inlineRef;
      resolve.schema = resolveSchema;
      function resolve(compile, root, ref) {
        var refVal = this._refs[ref];
        if (typeof refVal == "string") {
          if (this._refs[refVal])
            refVal = this._refs[refVal];
          else
            return resolve.call(this, compile, root, refVal);
        }
        refVal = refVal || this._schemas[ref];
        if (refVal instanceof SchemaObject$1) {
          return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
        }
        var res = resolveSchema.call(this, root, ref);
        var schema, v, baseId;
        if (res) {
          schema = res.schema;
          root = res.root;
          baseId = res.baseId;
        }
        if (schema instanceof SchemaObject$1) {
          v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
        } else if (schema !== undefined) {
          v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
        }
        return v;
      }
      function resolveSchema(root, ref) {
        var p = URI.parse(ref), refPath = _getFullPath(p), baseId = getFullPath(this._getId(root.schema));
        if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
          var id = normalizeId(refPath);
          var refVal = this._refs[id];
          if (typeof refVal == "string") {
            return resolveRecursive.call(this, root, refVal, p);
          } else if (refVal instanceof SchemaObject$1) {
            if (!refVal.validate)
              this._compile(refVal);
            root = refVal;
          } else {
            refVal = this._schemas[id];
            if (refVal instanceof SchemaObject$1) {
              if (!refVal.validate)
                this._compile(refVal);
              if (id == normalizeId(ref))
                return {
                  schema: refVal,
                  root: root,
                  baseId: baseId
                };
              root = refVal;
            } else {
              return;
            }
          }
          if (!root.schema)
            return;
          baseId = getFullPath(this._getId(root.schema));
        }
        return getJsonPointer.call(this, p, baseId, root.schema, root);
      }
      function resolveRecursive(root, ref, parsedRef) {
        var res = resolveSchema.call(this, root, ref);
        if (res) {
          var schema = res.schema;
          var baseId = res.baseId;
          root = res.root;
          var id = this._getId(schema);
          if (id)
            baseId = resolveUrl(baseId, id);
          return getJsonPointer.call(this, parsedRef, baseId, schema, root);
        }
      }
      var PREVENT_SCOPE_CHANGE = util$1$2.toHash([
        "properties",
        "patternProperties",
        "enum",
        "dependencies",
        "definitions"
      ]);
      function getJsonPointer(parsedRef, baseId, schema, root) {
        parsedRef.fragment = parsedRef.fragment || "";
        if (parsedRef.fragment.slice(0, 1) != "/")
          return;
        var parts = parsedRef.fragment.split("/");
        for (var i = 1; i < parts.length; i++) {
          var part = parts[i];
          if (part) {
            part = util$1$2.unescapeFragment(part);
            schema = schema[part];
            if (schema === undefined)
              break;
            var id;
            if (!PREVENT_SCOPE_CHANGE[part]) {
              id = this._getId(schema);
              if (id)
                baseId = resolveUrl(baseId, id);
              if (schema.$ref) {
                var $ref = resolveUrl(baseId, schema.$ref);
                var res = resolveSchema.call(this, root, $ref);
                if (res) {
                  schema = res.schema;
                  root = res.root;
                  baseId = res.baseId;
                }
              }
            }
          }
        }
        if (schema !== undefined && schema !== root.schema)
          return {
            schema: schema,
            root: root,
            baseId: baseId
          };
      }
      var SIMPLE_INLINED = util$1$2.toHash([
        "type",
        "format",
        "pattern",
        "maxLength",
        "minLength",
        "maxProperties",
        "minProperties",
        "maxItems",
        "minItems",
        "maximum",
        "minimum",
        "uniqueItems",
        "multipleOf",
        "required",
        "enum"
      ]);
      function inlineRef(schema, limit) {
        if (limit === false)
          return false;
        if (limit === undefined || limit === true)
          return checkNoRef(schema);
        else if (limit)
          return countKeys(schema) <= limit;
      }
      function checkNoRef(schema) {
        var item;
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++) {
            item = schema[i];
            if (typeof item == "object" && !checkNoRef(item))
              return false;
          }
        } else {
          for (var key in schema) {
            if (key == "$ref")
              return false;
            item = schema[key];
            if (typeof item == "object" && !checkNoRef(item))
              return false;
          }
        }
        return true;
      }
      function countKeys(schema) {
        var count = 0, item;
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++) {
            item = schema[i];
            if (typeof item == "object")
              count += countKeys(item);
            if (count == Infinity)
              return Infinity;
          }
        } else {
          for (var key in schema) {
            if (key == "$ref")
              return Infinity;
            if (SIMPLE_INLINED[key]) {
              count++;
            } else {
              item = schema[key];
              if (typeof item == "object")
                count += countKeys(item) + 1;
              if (count == Infinity)
                return Infinity;
            }
          }
        }
        return count;
      }
      function getFullPath(id, normalize) {
        if (normalize !== false)
          id = normalizeId(id);
        var p = URI.parse(id);
        return _getFullPath(p);
      }
      function _getFullPath(p) {
        return URI.serialize(p).split("#")[0] + "#";
      }
      var TRAILING_SLASH_HASH = /#\/?$/;
      function normalizeId(id) {
        return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
      }
      function resolveUrl(baseId, id) {
        id = normalizeId(id);
        return URI.resolve(baseId, id);
      }
      function resolveIds(schema) {
        var schemaId = normalizeId(this._getId(schema));
        var baseIds = { "": schemaId };
        var fullPaths = { "": getFullPath(schemaId, false) };
        var localRefs = {};
        var self = this;
        traverse(schema, { allKeys: true }, function (sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
          if (jsonPtr === "")
            return;
          var id = self._getId(sch);
          var baseId = baseIds[parentJsonPtr];
          var fullPath = fullPaths[parentJsonPtr] + "/" + parentKeyword;
          if (keyIndex !== undefined)
            fullPath += "/" + (typeof keyIndex == "number" ? keyIndex : util$1$2.escapeFragment(keyIndex));
          if (typeof id == "string") {
            id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);
            var refVal = self._refs[id];
            if (typeof refVal == "string")
              refVal = self._refs[refVal];
            if (refVal && refVal.schema) {
              if (!equal$1(sch, refVal.schema))
                throw new Error("id \"" + id + "\" resolves to more than one schema");
            } else if (id != normalizeId(fullPath)) {
              if (id[0] == "#") {
                if (localRefs[id] && !equal$1(sch, localRefs[id]))
                  throw new Error("id \"" + id + "\" resolves to more than one schema");
                localRefs[id] = sch;
              } else {
                self._refs[id] = fullPath;
              }
            }
          }
          baseIds[jsonPtr] = baseId;
          fullPaths[jsonPtr] = fullPath;
        });
        return localRefs;
      }
      var _resolve = exports$1$T;
      var exports$2$m = {};
      var resolve$1 = _resolve;
      exports$2$m = {
        Validation: errorSubclass(ValidationError),
        MissingRef: errorSubclass(MissingRefError)
      };
      function ValidationError(errors) {
        this.message = "validation failed";
        this.errors = errors;
        this.ajv = this.validation = true;
      }
      MissingRefError.message = function (baseId, ref) {
        return "can't resolve reference " + ref + " from id " + baseId;
      };
      function MissingRefError(baseId, ref, message) {
        this.message = message || MissingRefError.message(baseId, ref);
        this.missingRef = resolve$1.url(baseId, ref);
        this.missingSchema = resolve$1.normalizeId(resolve$1.fullPath(this.missingRef));
      }
      function errorSubclass(Subclass) {
        Subclass.prototype = Object.create(Error.prototype);
        Subclass.prototype.constructor = Subclass;
        return Subclass;
      }
      var _error_classes = exports$2$m;
      var exports$3$i = {};
      exports$3$i = function generate_validate(it, $keyword, $ruleType) {
        var out = "";
        var $async = it.schema.$async === true, $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, "$ref"), $id = it.self._getId(it.schema);
        if (it.opts.strictKeywords) {
          var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
          if ($unknownKwd) {
            var $keywordsMsg = "unknown keyword: " + $unknownKwd;
            if (it.opts.strictKeywords === "log")
              it.logger.warn($keywordsMsg);
            else
              throw new Error($keywordsMsg);
          }
        }
        if (it.isTop) {
          out += " var validate = ";
          if ($async) {
            it.async = true;
            out += "async ";
          }
          out += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ";
          if ($id && (it.opts.sourceCode || it.opts.processCode)) {
            out += " " + ("/*# sourceURL=" + $id + " */") + " ";
          }
        }
        if (typeof it.schema == "boolean" || !($refKeywords || it.schema.$ref)) {
          var $keyword = "false schema";
          var $lvl = it.level;
          var $dataLvl = it.dataLevel;
          var $schema = it.schema[$keyword];
          var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
          var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
          var $breakOnError = !it.opts.allErrors;
          var $errorKeyword;
          var $data = "data" + ($dataLvl || "");
          var $valid = "valid" + $lvl;
          if (it.schema === false) {
            if (it.isTop) {
              $breakOnError = true;
            } else {
              out += " var " + $valid + " = false; ";
            }
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = "";
            if (it.createErrors !== false) {
              out += " { keyword: '" + ($errorKeyword || "false schema") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
              if (it.opts.messages !== false) {
                out += " , message: 'boolean schema is false' ";
              }
              if (it.opts.verbose) {
                out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); ";
              } else {
                out += " validate.errors = [" + __err + "]; return false; ";
              }
            } else {
              out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            }
          } else {
            if (it.isTop) {
              if ($async) {
                out += " return data; ";
              } else {
                out += " validate.errors = null; return true; ";
              }
            } else {
              out += " var " + $valid + " = true; ";
            }
          }
          if (it.isTop) {
            out += " }; return validate; ";
          }
          return out;
        }
        if (it.isTop) {
          var $top = it.isTop, $lvl = it.level = 0, $dataLvl = it.dataLevel = 0, $data = "data";
          it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
          it.baseId = it.baseId || it.rootId;
          delete it.isTop;
          it.dataPathArr = [""];
          if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
            var $defaultMsg = "default is ignored in the schema root";
            if (it.opts.strictDefaults === "log")
              it.logger.warn($defaultMsg);
            else
              throw new Error($defaultMsg);
          }
          out += " var vErrors = null; ";
          out += " var errors = 0;     ";
          out += " if (rootData === undefined) rootData = data; ";
        } else {
          var $lvl = it.level, $dataLvl = it.dataLevel, $data = "data" + ($dataLvl || "");
          if ($id)
            it.baseId = it.resolve.url(it.baseId, $id);
          if ($async && !it.async)
            throw new Error("async schema in sync schema");
          out += " var errs_" + $lvl + " = errors;";
        }
        var $valid = "valid" + $lvl, $breakOnError = !it.opts.allErrors, $closingBraces1 = "", $closingBraces2 = "";
        var $errorKeyword;
        var $typeSchema = it.schema.type, $typeIsArray = Array.isArray($typeSchema);
        if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
          if ($typeIsArray) {
            if ($typeSchema.indexOf("null") == -1)
              $typeSchema = $typeSchema.concat("null");
          } else if ($typeSchema != "null") {
            $typeSchema = [
              $typeSchema,
              "null"
            ];
            $typeIsArray = true;
          }
        }
        if ($typeIsArray && $typeSchema.length == 1) {
          $typeSchema = $typeSchema[0];
          $typeIsArray = false;
        }
        if (it.schema.$ref && $refKeywords) {
          if (it.opts.extendRefs == "fail") {
            throw new Error("$ref: validation keywords used in schema at path \"" + it.errSchemaPath + "\" (see option extendRefs)");
          } else if (it.opts.extendRefs !== true) {
            $refKeywords = false;
            it.logger.warn("$ref: keywords ignored in schema at path \"" + it.errSchemaPath + "\"");
          }
        }
        if (it.schema.$comment && it.opts.$comment) {
          out += " " + it.RULES.all.$comment.code(it, "$comment");
        }
        if ($typeSchema) {
          if (it.opts.coerceTypes) {
            var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
          }
          var $rulesGroup = it.RULES.types[$typeSchema];
          if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
            var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
            var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type", $method = $typeIsArray ? "checkDataTypes" : "checkDataType";
            out += " if (" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ") { ";
            if ($coerceToTypes) {
              var $dataType = "dataType" + $lvl, $coerced = "coerced" + $lvl;
              out += " var " + $dataType + " = typeof " + $data + "; var " + $coerced + " = undefined; ";
              if (it.opts.coerceTypes == "array") {
                out += " if (" + $dataType + " == 'object' && Array.isArray(" + $data + ") && " + $data + ".length == 1) { " + $data + " = " + $data + "[0]; " + $dataType + " = typeof " + $data + "; if (" + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ") " + $coerced + " = " + $data + "; } ";
              }
              out += " if (" + $coerced + " !== undefined) ; ";
              var arr1 = $coerceToTypes;
              if (arr1) {
                var $type, $i = -1, l1 = arr1.length - 1;
                while ($i < l1) {
                  $type = arr1[$i += 1];
                  if ($type == "string") {
                    out += " else if (" + $dataType + " == 'number' || " + $dataType + " == 'boolean') " + $coerced + " = '' + " + $data + "; else if (" + $data + " === null) " + $coerced + " = ''; ";
                  } else if ($type == "number" || $type == "integer") {
                    out += " else if (" + $dataType + " == 'boolean' || " + $data + " === null || (" + $dataType + " == 'string' && " + $data + " && " + $data + " == +" + $data + " ";
                    if ($type == "integer") {
                      out += " && !(" + $data + " % 1)";
                    }
                    out += ")) " + $coerced + " = +" + $data + "; ";
                  } else if ($type == "boolean") {
                    out += " else if (" + $data + " === 'false' || " + $data + " === 0 || " + $data + " === null) " + $coerced + " = false; else if (" + $data + " === 'true' || " + $data + " === 1) " + $coerced + " = true; ";
                  } else if ($type == "null") {
                    out += " else if (" + $data + " === '' || " + $data + " === 0 || " + $data + " === false) " + $coerced + " = null; ";
                  } else if (it.opts.coerceTypes == "array" && $type == "array") {
                    out += " else if (" + $dataType + " == 'string' || " + $dataType + " == 'number' || " + $dataType + " == 'boolean' || " + $data + " == null) " + $coerced + " = [" + $data + "]; ";
                  }
                }
              }
              out += " else {   ";
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",");
                } else {
                  out += "" + $typeSchema;
                }
                out += "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should be ";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } if (" + $coerced + " !== undefined) {  ";
              var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
              out += " " + $data + " = " + $coerced + "; ";
              if (!$dataLvl) {
                out += "if (" + $parentData + " !== undefined)";
              }
              out += " " + $parentData + "[" + $parentDataProperty + "] = " + $coerced + "; } ";
            } else {
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                if ($typeIsArray) {
                  out += "" + $typeSchema.join(",");
                } else {
                  out += "" + $typeSchema;
                }
                out += "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should be ";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
            }
            out += " } ";
          }
        }
        if (it.schema.$ref && !$refKeywords) {
          out += " " + it.RULES.all.$ref.code(it, "$ref") + " ";
          if ($breakOnError) {
            out += " } if (errors === ";
            if ($top) {
              out += "0";
            } else {
              out += "errs_" + $lvl;
            }
            out += ") { ";
            $closingBraces2 += "}";
          }
        } else {
          var arr2 = it.RULES;
          if (arr2) {
            var $rulesGroup, i2 = -1, l2 = arr2.length - 1;
            while (i2 < l2) {
              $rulesGroup = arr2[i2 += 1];
              if ($shouldUseGroup($rulesGroup)) {
                if ($rulesGroup.type) {
                  out += " if (" + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ") { ";
                }
                if (it.opts.useDefaults) {
                  if ($rulesGroup.type == "object" && it.schema.properties) {
                    var $schema = it.schema.properties, $schemaKeys = Object.keys($schema);
                    var arr3 = $schemaKeys;
                    if (arr3) {
                      var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                      while (i3 < l3) {
                        $propertyKey = arr3[i3 += 1];
                        var $sch = $schema[$propertyKey];
                        if ($sch.default !== undefined) {
                          var $passData = $data + it.util.getProperty($propertyKey);
                          if (it.compositeRule) {
                            if (it.opts.strictDefaults) {
                              var $defaultMsg = "default is ignored for: " + $passData;
                              if (it.opts.strictDefaults === "log")
                                it.logger.warn($defaultMsg);
                              else
                                throw new Error($defaultMsg);
                            }
                          } else {
                            out += " if (" + $passData + " === undefined ";
                            if (it.opts.useDefaults == "empty") {
                              out += " || " + $passData + " === null || " + $passData + " === '' ";
                            }
                            out += " ) " + $passData + " = ";
                            if (it.opts.useDefaults == "shared") {
                              out += " " + it.useDefault($sch.default) + " ";
                            } else {
                              out += " " + JSON.stringify($sch.default) + " ";
                            }
                            out += "; ";
                          }
                        }
                      }
                    }
                  } else if ($rulesGroup.type == "array" && Array.isArray(it.schema.items)) {
                    var arr4 = it.schema.items;
                    if (arr4) {
                      var $sch, $i = -1, l4 = arr4.length - 1;
                      while ($i < l4) {
                        $sch = arr4[$i += 1];
                        if ($sch.default !== undefined) {
                          var $passData = $data + "[" + $i + "]";
                          if (it.compositeRule) {
                            if (it.opts.strictDefaults) {
                              var $defaultMsg = "default is ignored for: " + $passData;
                              if (it.opts.strictDefaults === "log")
                                it.logger.warn($defaultMsg);
                              else
                                throw new Error($defaultMsg);
                            }
                          } else {
                            out += " if (" + $passData + " === undefined ";
                            if (it.opts.useDefaults == "empty") {
                              out += " || " + $passData + " === null || " + $passData + " === '' ";
                            }
                            out += " ) " + $passData + " = ";
                            if (it.opts.useDefaults == "shared") {
                              out += " " + it.useDefault($sch.default) + " ";
                            } else {
                              out += " " + JSON.stringify($sch.default) + " ";
                            }
                            out += "; ";
                          }
                        }
                      }
                    }
                  }
                }
                var arr5 = $rulesGroup.rules;
                if (arr5) {
                  var $rule, i5 = -1, l5 = arr5.length - 1;
                  while (i5 < l5) {
                    $rule = arr5[i5 += 1];
                    if ($shouldUseRule($rule)) {
                      var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                      if ($code) {
                        out += " " + $code + " ";
                        if ($breakOnError) {
                          $closingBraces1 += "}";
                        }
                      }
                    }
                  }
                }
                if ($breakOnError) {
                  out += " " + $closingBraces1 + " ";
                  $closingBraces1 = "";
                }
                if ($rulesGroup.type) {
                  out += " } ";
                  if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                    out += " else { ";
                    var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = "";
                    if (it.createErrors !== false) {
                      out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                      if ($typeIsArray) {
                        out += "" + $typeSchema.join(",");
                      } else {
                        out += "" + $typeSchema;
                      }
                      out += "' } ";
                      if (it.opts.messages !== false) {
                        out += " , message: 'should be ";
                        if ($typeIsArray) {
                          out += "" + $typeSchema.join(",");
                        } else {
                          out += "" + $typeSchema;
                        }
                        out += "' ";
                      }
                      if (it.opts.verbose) {
                        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                      }
                      out += " } ";
                    } else {
                      out += " {} ";
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      if (it.async) {
                        out += " throw new ValidationError([" + __err + "]); ";
                      } else {
                        out += " validate.errors = [" + __err + "]; return false; ";
                      }
                    } else {
                      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                    }
                    out += " } ";
                  }
                }
                if ($breakOnError) {
                  out += " if (errors === ";
                  if ($top) {
                    out += "0";
                  } else {
                    out += "errs_" + $lvl;
                  }
                  out += ") { ";
                  $closingBraces2 += "}";
                }
              }
            }
          }
        }
        if ($breakOnError) {
          out += " " + $closingBraces2 + " ";
        }
        if ($top) {
          if ($async) {
            out += " if (errors === 0) return data;           ";
            out += " else throw new ValidationError(vErrors); ";
          } else {
            out += " validate.errors = vErrors; ";
            out += " return errors === 0;       ";
          }
          out += " }; return validate;";
        } else {
          out += " var " + $valid + " = errors === errs_" + $lvl + ";";
        }
        function $shouldUseGroup($rulesGroup) {
          var rules = $rulesGroup.rules;
          for (var i = 0; i < rules.length; i++)
            if ($shouldUseRule(rules[i]))
              return true;
        }
        function $shouldUseRule($rule) {
          return it.schema[$rule.keyword] !== undefined || $rule.implements && $ruleImplementsSomeKeyword($rule);
        }
        function $ruleImplementsSomeKeyword($rule) {
          var impl = $rule.implements;
          for (var i = 0; i < impl.length; i++)
            if (it.schema[impl[i]] !== undefined)
              return true;
        }
        return out;
      };
      var _validate = exports$3$i;
      var exports$4$a = {};
      var resolve$2 = _resolve, util$2$1 = _util$5, errorClasses = _error_classes, stableStringify = exports$1$U;
      var validateGenerator = _validate;
      var ucs2length = util$2$1.ucs2length;
      var equal$1$1 = exports$1$X;
      var ValidationError$1 = errorClasses.Validation;
      exports$4$a = compile;
      function compile(schema, root, localRefs, baseId) {
        var self = this, opts = this._opts, refVal = [undefined], refs = {}, patterns = [], patternsHash = {}, defaults = [], defaultsHash = {}, customRules = [];
        root = root || {
          schema: schema,
          refVal: refVal,
          refs: refs
        };
        var c = checkCompiling.call(this, schema, root, baseId);
        var compilation = this._compilations[c.index];
        if (c.compiling)
          return compilation.callValidate = callValidate;
        var formats = this._formats;
        var RULES = this.RULES;
        try {
          var v = localCompile(schema, root, localRefs, baseId);
          compilation.validate = v;
          var cv = compilation.callValidate;
          if (cv) {
            cv.schema = v.schema;
            cv.errors = null;
            cv.refs = v.refs;
            cv.refVal = v.refVal;
            cv.root = v.root;
            cv.$async = v.$async;
            if (opts.sourceCode)
              cv.source = v.source;
          }
          return v;
        } finally {
          endCompiling.call(this, schema, root, baseId);
        }
        function callValidate() {
          var validate = compilation.validate;
          var result = validate.apply(this, arguments);
          callValidate.errors = validate.errors;
          return result;
        }
        function localCompile(_schema, _root, localRefs, baseId) {
          var isRoot = !_root || _root && _root.schema == _schema;
          if (_root.schema != root.schema)
            return compile.call(self, _schema, _root, localRefs, baseId);
          var $async = _schema.$async === true;
          var sourceCode = validateGenerator({
            isTop: true,
            schema: _schema,
            isRoot: isRoot,
            baseId: baseId,
            root: _root,
            schemaPath: "",
            errSchemaPath: "#",
            errorPath: "\"\"",
            MissingRefError: errorClasses.MissingRef,
            RULES: RULES,
            validate: validateGenerator,
            util: util$2$1,
            resolve: resolve$2,
            resolveRef: resolveRef,
            usePattern: usePattern,
            useDefault: useDefault,
            useCustomRule: useCustomRule,
            opts: opts,
            formats: formats,
            logger: self.logger,
            self: self
          });
          sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;
          if (opts.processCode)
            sourceCode = opts.processCode(sourceCode, _schema);
          var validate;
          try {
            var makeValidate = new Function("self", "RULES", "formats", "root", "refVal", "defaults", "customRules", "equal", "ucs2length", "ValidationError", sourceCode);
            validate = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, equal$1$1, ucs2length, ValidationError$1);
            refVal[0] = validate;
          } catch (e) {
            self.logger.error("Error compiling schema, function code:", sourceCode);
            throw e;
          }
          validate.schema = _schema;
          validate.errors = null;
          validate.refs = refs;
          validate.refVal = refVal;
          validate.root = isRoot ? validate : _root;
          if ($async)
            validate.$async = true;
          if (opts.sourceCode === true) {
            validate.source = {
              code: sourceCode,
              patterns: patterns,
              defaults: defaults
            };
          }
          return validate;
        }
        function resolveRef(baseId, ref, isRoot) {
          ref = resolve$2.url(baseId, ref);
          var refIndex = refs[ref];
          var _refVal, refCode;
          if (refIndex !== undefined) {
            _refVal = refVal[refIndex];
            refCode = "refVal[" + refIndex + "]";
            return resolvedRef(_refVal, refCode);
          }
          if (!isRoot && root.refs) {
            var rootRefId = root.refs[ref];
            if (rootRefId !== undefined) {
              _refVal = root.refVal[rootRefId];
              refCode = addLocalRef(ref, _refVal);
              return resolvedRef(_refVal, refCode);
            }
          }
          refCode = addLocalRef(ref);
          var v = resolve$2.call(self, localCompile, root, ref);
          if (v === undefined) {
            var localSchema = localRefs && localRefs[ref];
            if (localSchema) {
              v = resolve$2.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self, localSchema, root, localRefs, baseId);
            }
          }
          if (v === undefined) {
            removeLocalRef(ref);
          } else {
            replaceLocalRef(ref, v);
            return resolvedRef(v, refCode);
          }
        }
        function addLocalRef(ref, v) {
          var refId = refVal.length;
          refVal[refId] = v;
          refs[ref] = refId;
          return "refVal" + refId;
        }
        function removeLocalRef(ref) {
          delete refs[ref];
        }
        function replaceLocalRef(ref, v) {
          var refId = refs[ref];
          refVal[refId] = v;
        }
        function resolvedRef(refVal, code) {
          return typeof refVal == "object" || typeof refVal == "boolean" ? {
            code: code,
            schema: refVal,
            inline: true
          } : {
            code: code,
            $async: refVal && !!refVal.$async
          };
        }
        function usePattern(regexStr) {
          var index = patternsHash[regexStr];
          if (index === undefined) {
            index = patternsHash[regexStr] = patterns.length;
            patterns[index] = regexStr;
          }
          return "pattern" + index;
        }
        function useDefault(value) {
          switch (typeof value) {
          case "boolean":
          case "number":
            return "" + value;
          case "string":
            return util$2$1.toQuotedString(value);
          case "object":
            if (value === null)
              return "null";
            var valueStr = stableStringify(value);
            var index = defaultsHash[valueStr];
            if (index === undefined) {
              index = defaultsHash[valueStr] = defaults.length;
              defaults[index] = value;
            }
            return "default" + index;
          }
        }
        function useCustomRule(rule, schema, parentSchema, it) {
          if (self._opts.validateSchema !== false) {
            var deps = rule.definition.dependencies;
            if (deps && !deps.every(function (keyword) {
                return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
              }))
              throw new Error("parent schema must have all required keywords: " + deps.join(","));
            var validateSchema = rule.definition.validateSchema;
            if (validateSchema) {
              var valid = validateSchema(schema);
              if (!valid) {
                var message = "keyword schema is invalid: " + self.errorsText(validateSchema.errors);
                if (self._opts.validateSchema == "log")
                  self.logger.error(message);
                else
                  throw new Error(message);
              }
            }
          }
          var compile = rule.definition.compile, inline = rule.definition.inline, macro = rule.definition.macro;
          var validate;
          if (compile) {
            validate = compile.call(self, schema, parentSchema, it);
          } else if (macro) {
            validate = macro.call(self, schema, parentSchema, it);
            if (opts.validateSchema !== false)
              self.validateSchema(validate, true);
          } else if (inline) {
            validate = inline.call(self, it, rule.keyword, schema, parentSchema);
          } else {
            validate = rule.definition.validate;
            if (!validate)
              return;
          }
          if (validate === undefined)
            throw new Error("custom keyword \"" + rule.keyword + "\"failed to compile");
          var index = customRules.length;
          customRules[index] = validate;
          return {
            code: "customRule" + index,
            validate: validate
          };
        }
      }
      function checkCompiling(schema, root, baseId) {
        var index = compIndex.call(this, schema, root, baseId);
        if (index >= 0)
          return {
            index: index,
            compiling: true
          };
        index = this._compilations.length;
        this._compilations[index] = {
          schema: schema,
          root: root,
          baseId: baseId
        };
        return {
          index: index,
          compiling: false
        };
      }
      function endCompiling(schema, root, baseId) {
        var i = compIndex.call(this, schema, root, baseId);
        if (i >= 0)
          this._compilations.splice(i, 1);
      }
      function compIndex(schema, root, baseId) {
        for (var i = 0; i < this._compilations.length; i++) {
          var c = this._compilations[i];
          if (c.schema == schema && c.root == root && c.baseId == baseId)
            return i;
        }
        return -1;
      }
      function patternCode(i, patterns) {
        return "var pattern" + i + " = new RegExp(" + util$2$1.toQuotedString(patterns[i]) + ");";
      }
      function defaultCode(i) {
        return "var default" + i + " = defaults[" + i + "];";
      }
      function refValCode(i, refVal) {
        return refVal[i] === undefined ? "" : "var refVal" + i + " = refVal[" + i + "];";
      }
      function customRuleCode(i) {
        return "var customRule" + i + " = customRules[" + i + "];";
      }
      function vars(arr, statement) {
        if (!arr.length)
          return "";
        var code = "";
        for (var i = 0; i < arr.length; i++)
          code += statement(i, arr);
        return code;
      }
      var _compile2 = exports$4$a;
      var exports$5$8 = {};
      var Cache = exports$5$8 = function Cache() {
        this._cache = {};
      };
      Cache.prototype.put = function Cache_put(key, value) {
        this._cache[key] = value;
      };
      Cache.prototype.get = function Cache_get(key) {
        return this._cache[key];
      };
      Cache.prototype.del = function Cache_del(key) {
        delete this._cache[key];
      };
      Cache.prototype.clear = function Cache_clear() {
        this._cache = {};
      };
      var _cache$1 = exports$5$8;
      var exports$6$6 = {};
      exports$6$6 = function generate_ref(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $async, $refCode;
        if ($schema == "#" || $schema == "#/") {
          if (it.isRoot) {
            $async = it.async;
            $refCode = "validate";
          } else {
            $async = it.root.schema.$async === true;
            $refCode = "root.refVal[0]";
          }
        } else {
          var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
          if ($refVal === undefined) {
            var $message = it.MissingRefError.message(it.baseId, $schema);
            if (it.opts.missingRefs == "fail") {
              it.logger.error($message);
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "$ref" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { ref: '" + it.util.escapeQuotes($schema) + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema) + "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: " + it.util.toQuotedString($schema) + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              if ($breakOnError) {
                out += " if (false) { ";
              }
            } else if (it.opts.missingRefs == "ignore") {
              it.logger.warn($message);
              if ($breakOnError) {
                out += " if (true) { ";
              }
            } else {
              throw new it.MissingRefError(it.baseId, $schema, $message);
            }
          } else if ($refVal.inline) {
            var $it = it.util.copy(it);
            $it.level++;
            var $nextValid = "valid" + $it.level;
            $it.schema = $refVal.schema;
            $it.schemaPath = "";
            $it.errSchemaPath = $schema;
            var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
            out += " " + $code + " ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
            }
          } else {
            $async = $refVal.$async === true || it.async && $refVal.$async !== false;
            $refCode = $refVal.code;
          }
        }
        if ($refCode) {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.opts.passContext) {
            out += " " + $refCode + ".call(this, ";
          } else {
            out += " " + $refCode + "( ";
          }
          out += " " + $data + ", (dataPath || '')";
          if (it.errorPath != "\"\"") {
            out += " + " + it.errorPath;
          }
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
          out += " , " + $parentData + " , " + $parentDataProperty + ", rootData)  ";
          var __callValidate = out;
          out = $$outStack.pop();
          if ($async) {
            if (!it.async)
              throw new Error("async schema referenced by sync schema");
            if ($breakOnError) {
              out += " var " + $valid + "; ";
            }
            out += " try { await " + __callValidate + "; ";
            if ($breakOnError) {
              out += " " + $valid + " = true; ";
            }
            out += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ";
            if ($breakOnError) {
              out += " " + $valid + " = false; ";
            }
            out += " } ";
            if ($breakOnError) {
              out += " if (" + $valid + ") { ";
            }
          } else {
            out += " if (!" + __callValidate + ") { if (vErrors === null) vErrors = " + $refCode + ".errors; else vErrors = vErrors.concat(" + $refCode + ".errors); errors = vErrors.length; } ";
            if ($breakOnError) {
              out += " else { ";
            }
          }
        }
        return out;
      };
      var _ref = exports$6$6;
      var exports$7$4 = {};
      exports$7$4 = function generate_allOf(it, $keyword, $ruleType) {
        var out = " ";
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $currentBaseId = $it.baseId, $allSchemasEmpty = true;
        var arr1 = $schema;
        if (arr1) {
          var $sch, $i = -1, l1 = arr1.length - 1;
          while ($i < l1) {
            $sch = arr1[$i += 1];
            if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
              $allSchemasEmpty = false;
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + "[" + $i + "]";
              $it.errSchemaPath = $errSchemaPath + "/" + $i;
              out += "  " + it.validate($it) + " ";
              $it.baseId = $currentBaseId;
              if ($breakOnError) {
                out += " if (" + $nextValid + ") { ";
                $closingBraces += "}";
              }
            }
          }
        }
        if ($breakOnError) {
          if ($allSchemasEmpty) {
            out += " if (true) { ";
          } else {
            out += " " + $closingBraces.slice(0, -1) + " ";
          }
        }
        return out;
      };
      var _allOf = exports$7$4;
      var exports$8$4 = {};
      exports$8$4 = function generate_anyOf(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $noEmptySchema = $schema.every(function ($sch) {
          return it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all);
        });
        if ($noEmptySchema) {
          var $currentBaseId = $it.baseId;
          out += " var " + $errs + " = errors; var " + $valid + " = false;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          var arr1 = $schema;
          if (arr1) {
            var $sch, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $sch = arr1[$i += 1];
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + "[" + $i + "]";
              $it.errSchemaPath = $errSchemaPath + "/" + $i;
              out += "  " + it.validate($it) + " ";
              $it.baseId = $currentBaseId;
              out += " " + $valid + " = " + $valid + " || " + $nextValid + "; if (!" + $valid + ") { ";
              $closingBraces += "}";
            }
          }
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " " + $closingBraces + " if (!" + $valid + ") {   var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "anyOf" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: 'should match some schema in anyOf' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError(vErrors); ";
            } else {
              out += " validate.errors = vErrors; return false; ";
            }
          }
          out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
          if (it.opts.allErrors) {
            out += " } ";
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        }
        return out;
      };
      var _anyOf = exports$8$4;
      var exports$9$4 = {};
      exports$9$4 = function generate_comment(it, $keyword, $ruleType) {
        var out = " ";
        var $schema = it.schema[$keyword];
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        !it.opts.allErrors;
        var $comment = it.util.toQuotedString($schema);
        if (it.opts.$comment === true) {
          out += " console.log(" + $comment + ");";
        } else if (typeof it.opts.$comment == "function") {
          out += " self._opts.$comment(" + $comment + ", " + it.util.toQuotedString($errSchemaPath) + ", validate.root.schema);";
        }
        return out;
      };
      var _comment = exports$9$4;
      var exports$a$3 = {};
      exports$a$3 = function generate_const(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
        }
        if (!$isData) {
          out += " var schema" + $lvl + " = validate.schema" + $schemaPath + ";";
        }
        out += "var " + $valid + " = equal(" + $data + ", schema" + $lvl + "); if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "const" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValue: schema" + $lvl + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be equal to constant' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " }";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _const = exports$a$3;
      var exports$b$3 = {};
      exports$b$3 = function generate_contains(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId, $nonEmptySchema = it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all);
        out += "var " + $errs + " = errors;var " + $valid + ";";
        if ($nonEmptySchema) {
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += " var " + $nextValid + " = false; for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
          var $passData = $data + "[" + $idx + "]";
          $it.dataPathArr[$dataNxt] = $idx;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          out += " if (" + $nextValid + ") break; }  ";
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " " + $closingBraces + " if (!" + $nextValid + ") {";
        } else {
          out += " if (" + $data + ".length == 0) {";
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "contains" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
          if (it.opts.messages !== false) {
            out += " , message: 'should contain a valid item' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } else { ";
        if ($nonEmptySchema) {
          out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
        }
        if (it.opts.allErrors) {
          out += " } ";
        }
        return out;
      };
      var _contains = exports$b$3;
      var exports$c$3 = {};
      exports$c$3 = function generate_dependencies(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $schemaDeps = {}, $propertyDeps = {}, $ownProperties = it.opts.ownProperties;
        for ($property in $schema) {
          if ($property == "__proto__")
            continue;
          var $sch = $schema[$property];
          var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
          $deps[$property] = $sch;
        }
        out += "var " + $errs + " = errors;";
        var $currentErrorPath = it.errorPath;
        out += "var missing" + $lvl + ";";
        for (var $property in $propertyDeps) {
          $deps = $propertyDeps[$property];
          if ($deps.length) {
            out += " if ( " + $data + it.util.getProperty($property) + " !== undefined ";
            if ($ownProperties) {
              out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
            }
            if ($breakOnError) {
              out += " && ( ";
              var arr1 = $deps;
              if (arr1) {
                var $propertyKey, $i = -1, l1 = arr1.length - 1;
                while ($i < l1) {
                  $propertyKey = arr1[$i += 1];
                  if ($i) {
                    out += " || ";
                  }
                  var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
                  out += " ( ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
                }
              }
              out += ")) {  ";
              var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
              }
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "dependencies" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should have ";
                  if ($deps.length == 1) {
                    out += "property " + it.util.escapeQuotes($deps[0]);
                  } else {
                    out += "properties " + it.util.escapeQuotes($deps.join(", "));
                  }
                  out += " when property " + it.util.escapeQuotes($property) + " is present' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
            } else {
              out += " ) { ";
              var arr2 = $deps;
              if (arr2) {
                var $propertyKey, i2 = -1, l2 = arr2.length - 1;
                while (i2 < l2) {
                  $propertyKey = arr2[i2 += 1];
                  var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                  }
                  out += " if ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") {  var err =   ";
                  if (it.createErrors !== false) {
                    out += " { keyword: '" + "dependencies" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
                    if (it.opts.messages !== false) {
                      out += " , message: 'should have ";
                      if ($deps.length == 1) {
                        out += "property " + it.util.escapeQuotes($deps[0]);
                      } else {
                        out += "properties " + it.util.escapeQuotes($deps.join(", "));
                      }
                      out += " when property " + it.util.escapeQuotes($property) + " is present' ";
                    }
                    if (it.opts.verbose) {
                      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                    }
                    out += " } ";
                  } else {
                    out += " {} ";
                  }
                  out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
                }
              }
            }
            out += " }   ";
            if ($breakOnError) {
              $closingBraces += "}";
              out += " else { ";
            }
          }
        }
        it.errorPath = $currentErrorPath;
        var $currentBaseId = $it.baseId;
        for (var $property in $schemaDeps) {
          var $sch = $schemaDeps[$property];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            out += " " + $nextValid + " = true; if ( " + $data + it.util.getProperty($property) + " !== undefined ";
            if ($ownProperties) {
              out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
            }
            out += ") { ";
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + it.util.getProperty($property);
            $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($property);
            out += "  " + it.validate($it) + " ";
            $it.baseId = $currentBaseId;
            out += " }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        }
        if ($breakOnError) {
          out += "   " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
      var _dependencies = exports$c$3;
      var exports$d$3 = {};
      exports$d$3 = function generate_enum(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
        }
        var $i = "i" + $lvl, $vSchema = "schema" + $lvl;
        if (!$isData) {
          out += " var " + $vSchema + " = validate.schema" + $schemaPath + ";";
        }
        out += "var " + $valid + ";";
        if ($isData) {
          out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
        }
        out += "" + $valid + " = false;for (var " + $i + "=0; " + $i + "<" + $vSchema + ".length; " + $i + "++) if (equal(" + $data + ", " + $vSchema + "[" + $i + "])) { " + $valid + " = true; break; }";
        if ($isData) {
          out += "  }  ";
        }
        out += " if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "enum" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValues: schema" + $lvl + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be equal to one of the allowed values' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " }";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _enum = exports$d$3;
      var exports$e$2 = {};
      exports$e$2 = function generate_format(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        if (it.opts.format === false) {
          if ($breakOnError) {
            out += " if (true) { ";
          }
          return out;
        }
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $unknownFormats = it.opts.unknownFormats, $allowUnknown = Array.isArray($unknownFormats);
        if ($isData) {
          var $format = "format" + $lvl, $isObject = "isObject" + $lvl, $formatType = "formatType" + $lvl;
          out += " var " + $format + " = formats[" + $schemaValue + "]; var " + $isObject + " = typeof " + $format + " == 'object' && !(" + $format + " instanceof RegExp) && " + $format + ".validate; var " + $formatType + " = " + $isObject + " && " + $format + ".type || 'string'; if (" + $isObject + ") { ";
          if (it.async) {
            out += " var async" + $lvl + " = " + $format + ".async; ";
          }
          out += " " + $format + " = " + $format + ".validate; } if (  ";
          if ($isData) {
            out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
          }
          out += " (";
          if ($unknownFormats != "ignore") {
            out += " (" + $schemaValue + " && !" + $format + " ";
            if ($allowUnknown) {
              out += " && self._opts.unknownFormats.indexOf(" + $schemaValue + ") == -1 ";
            }
            out += ") || ";
          }
          out += " (" + $format + " && " + $formatType + " == '" + $ruleType + "' && !(typeof " + $format + " == 'function' ? ";
          if (it.async) {
            out += " (async" + $lvl + " ? await " + $format + "(" + $data + ") : " + $format + "(" + $data + ")) ";
          } else {
            out += " " + $format + "(" + $data + ") ";
          }
          out += " : " + $format + ".test(" + $data + "))))) {";
        } else {
          var $format = it.formats[$schema];
          if (!$format) {
            if ($unknownFormats == "ignore") {
              it.logger.warn("unknown format \"" + $schema + "\" ignored in schema at path \"" + it.errSchemaPath + "\"");
              if ($breakOnError) {
                out += " if (true) { ";
              }
              return out;
            } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
              if ($breakOnError) {
                out += " if (true) { ";
              }
              return out;
            } else {
              throw new Error("unknown format \"" + $schema + "\" is used in schema at path \"" + it.errSchemaPath + "\"");
            }
          }
          var $isObject = typeof $format == "object" && !($format instanceof RegExp) && $format.validate;
          var $formatType = $isObject && $format.type || "string";
          if ($isObject) {
            var $async = $format.async === true;
            $format = $format.validate;
          }
          if ($formatType != $ruleType) {
            if ($breakOnError) {
              out += " if (true) { ";
            }
            return out;
          }
          if ($async) {
            if (!it.async)
              throw new Error("async format in sync schema");
            var $formatRef = "formats" + it.util.getProperty($schema) + ".validate";
            out += " if (!(await " + $formatRef + "(" + $data + "))) { ";
          } else {
            out += " if (! ";
            var $formatRef = "formats" + it.util.getProperty($schema);
            if ($isObject)
              $formatRef += ".validate";
            if (typeof $format == "function") {
              out += " " + $formatRef + "(" + $data + ") ";
            } else {
              out += " " + $formatRef + ".test(" + $data + ") ";
            }
            out += ") { ";
          }
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "format" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { format:  ";
          if ($isData) {
            out += "" + $schemaValue;
          } else {
            out += "" + it.util.toQuotedString($schema);
          }
          out += "  } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should match format \"";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + it.util.escapeQuotes($schema);
            }
            out += "\"' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + it.util.toQuotedString($schema);
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _format = exports$e$2;
      var exports$f$2 = {};
      exports$f$2 = function generate_if(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $thenSch = it.schema["then"], $elseSch = it.schema["else"], $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == "object" && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)), $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == "object" && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)), $currentBaseId = $it.baseId;
        if ($thenPresent || $elsePresent) {
          var $ifClause;
          $it.createErrors = false;
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += " var " + $errs + " = errors; var " + $valid + " = true;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
          $it.createErrors = true;
          out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }  ";
          it.compositeRule = $it.compositeRule = $wasComposite;
          if ($thenPresent) {
            out += " if (" + $nextValid + ") {  ";
            $it.schema = it.schema["then"];
            $it.schemaPath = it.schemaPath + ".then";
            $it.errSchemaPath = it.errSchemaPath + "/then";
            out += "  " + it.validate($it) + " ";
            $it.baseId = $currentBaseId;
            out += " " + $valid + " = " + $nextValid + "; ";
            if ($thenPresent && $elsePresent) {
              $ifClause = "ifClause" + $lvl;
              out += " var " + $ifClause + " = 'then'; ";
            } else {
              $ifClause = "'then'";
            }
            out += " } ";
            if ($elsePresent) {
              out += " else { ";
            }
          } else {
            out += " if (!" + $nextValid + ") { ";
          }
          if ($elsePresent) {
            $it.schema = it.schema["else"];
            $it.schemaPath = it.schemaPath + ".else";
            $it.errSchemaPath = it.errSchemaPath + "/else";
            out += "  " + it.validate($it) + " ";
            $it.baseId = $currentBaseId;
            out += " " + $valid + " = " + $nextValid + "; ";
            if ($thenPresent && $elsePresent) {
              $ifClause = "ifClause" + $lvl;
              out += " var " + $ifClause + " = 'else'; ";
            } else {
              $ifClause = "'else'";
            }
            out += " } ";
          }
          out += " if (!" + $valid + ") {   var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "if" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { failingKeyword: " + $ifClause + " } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should match \"' + " + $ifClause + " + '\" schema' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError(vErrors); ";
            } else {
              out += " validate.errors = vErrors; return false; ";
            }
          }
          out += " }   ";
          if ($breakOnError) {
            out += " else { ";
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        }
        return out;
      };
      var _if = exports$f$2;
      var exports$g$2 = {};
      exports$g$2 = function generate_items(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId;
        out += "var " + $errs + " = errors;var " + $valid + ";";
        if (Array.isArray($schema)) {
          var $additionalItems = it.schema.additionalItems;
          if ($additionalItems === false) {
            out += " " + $valid + " = " + $data + ".length <= " + $schema.length + "; ";
            var $currErrSchemaPath = $errSchemaPath;
            $errSchemaPath = it.errSchemaPath + "/additionalItems";
            out += "  if (!" + $valid + ") {   ";
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = "";
            if (it.createErrors !== false) {
              out += " { keyword: '" + "additionalItems" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schema.length + " } ";
              if (it.opts.messages !== false) {
                out += " , message: 'should NOT have more than " + $schema.length + " items' ";
              }
              if (it.opts.verbose) {
                out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); ";
              } else {
                out += " validate.errors = [" + __err + "]; return false; ";
              }
            } else {
              out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            }
            out += " } ";
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              $closingBraces += "}";
              out += " else { ";
            }
          }
          var arr1 = $schema;
          if (arr1) {
            var $sch, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $sch = arr1[$i += 1];
              if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
                out += " " + $nextValid + " = true; if (" + $data + ".length > " + $i + ") { ";
                var $passData = $data + "[" + $i + "]";
                $it.schema = $sch;
                $it.schemaPath = $schemaPath + "[" + $i + "]";
                $it.errSchemaPath = $errSchemaPath + "/" + $i;
                $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
                $it.dataPathArr[$dataNxt] = $i;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                out += " }  ";
                if ($breakOnError) {
                  out += " if (" + $nextValid + ") { ";
                  $closingBraces += "}";
                }
              }
            }
          }
          if (typeof $additionalItems == "object" && (it.opts.strictKeywords ? typeof $additionalItems == "object" && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
            $it.schema = $additionalItems;
            $it.schemaPath = it.schemaPath + ".additionalItems";
            $it.errSchemaPath = it.errSchemaPath + "/additionalItems";
            out += " " + $nextValid + " = true; if (" + $data + ".length > " + $schema.length + ") {  for (var " + $idx + " = " + $schema.length + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
            $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
            var $passData = $data + "[" + $idx + "]";
            $it.dataPathArr[$dataNxt] = $idx;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; ";
            }
            out += " } }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        } else if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += "  for (var " + $idx + " = " + 0 + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
          var $passData = $data + "[" + $idx + "]";
          $it.dataPathArr[$dataNxt] = $idx;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          if ($breakOnError) {
            out += " if (!" + $nextValid + ") break; ";
          }
          out += " }";
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
      var _items = exports$g$2;
      var exports$h$2 = {};
      exports$h$2 = function generate__limit(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $isMax = $keyword == "maximum", $exclusiveKeyword = $isMax ? "exclusiveMaximum" : "exclusiveMinimum", $schemaExcl = it.schema[$exclusiveKeyword], $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data, $op = $isMax ? "<" : ">", $notOp = $isMax ? ">" : "<", $errorKeyword = undefined;
        if (!($isData || typeof $schema == "number" || $schema === undefined)) {
          throw new Error($keyword + " must be number");
        }
        if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == "number" || typeof $schemaExcl == "boolean")) {
          throw new Error($exclusiveKeyword + " must be number or boolean");
        }
        if ($isDataExcl) {
          var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr), $exclusive = "exclusive" + $lvl, $exclType = "exclType" + $lvl, $exclIsNumber = "exclIsNumber" + $lvl, $opExpr = "op" + $lvl, $opStr = "' + " + $opExpr + " + '";
          out += " var schemaExcl" + $lvl + " = " + $schemaValueExcl + "; ";
          $schemaValueExcl = "schemaExcl" + $lvl;
          out += " var " + $exclusive + "; var " + $exclType + " = typeof " + $schemaValueExcl + "; if (" + $exclType + " != 'boolean' && " + $exclType + " != 'undefined' && " + $exclType + " != 'number') { ";
          var $errorKeyword = $exclusiveKeyword;
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: '" + $exclusiveKeyword + " should be boolean' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else if ( ";
          if ($isData) {
            out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
          }
          out += " " + $exclType + " == 'number' ? ( (" + $exclusive + " = " + $schemaValue + " === undefined || " + $schemaValueExcl + " " + $op + "= " + $schemaValue + ") ? " + $data + " " + $notOp + "= " + $schemaValueExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) : ( (" + $exclusive + " = " + $schemaValueExcl + " === true) ? " + $data + " " + $notOp + "= " + $schemaValue + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { var op" + $lvl + " = " + $exclusive + " ? '" + $op + "' : '" + $op + "='; ";
          if ($schema === undefined) {
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
            $schemaValue = $schemaValueExcl;
            $isData = $isDataExcl;
          }
        } else {
          var $exclIsNumber = typeof $schemaExcl == "number", $opStr = $op;
          if ($exclIsNumber && $isData) {
            var $opExpr = "'" + $opStr + "'";
            out += " if ( ";
            if ($isData) {
              out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
            }
            out += " ( " + $schemaValue + " === undefined || " + $schemaExcl + " " + $op + "= " + $schemaValue + " ? " + $data + " " + $notOp + "= " + $schemaExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { ";
          } else {
            if ($exclIsNumber && $schema === undefined) {
              $exclusive = true;
              $errorKeyword = $exclusiveKeyword;
              $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
              $schemaValue = $schemaExcl;
              $notOp += "=";
            } else {
              if ($exclIsNumber)
                $schemaValue = Math[$isMax ? "min" : "max"]($schemaExcl, $schema);
              if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
                $exclusive = true;
                $errorKeyword = $exclusiveKeyword;
                $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
                $notOp += "=";
              } else {
                $exclusive = false;
                $opStr += "=";
              }
            }
            var $opExpr = "'" + $opStr + "'";
            out += " if ( ";
            if ($isData) {
              out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
            }
            out += " " + $data + " " + $notOp + " " + $schemaValue + " || " + $data + " !== " + $data + ") { ";
          }
        }
        $errorKeyword = $errorKeyword || $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { comparison: " + $opExpr + ", limit: " + $schemaValue + ", exclusive: " + $exclusive + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be " + $opStr + " ";
            if ($isData) {
              out += "' + " + $schemaValue;
            } else {
              out += "" + $schemaValue + "'";
            }
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _limit = exports$h$2;
      var exports$i$2 = {};
      exports$i$2 = function generate__limitItems(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        var $op = $keyword == "maxItems" ? ">" : "<";
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " " + $data + ".length " + $op + " " + $schemaValue + ") { ";
        var $errorKeyword = $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limitItems") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have ";
            if ($keyword == "maxItems") {
              out += "more";
            } else {
              out += "fewer";
            }
            out += " than ";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + $schema;
            }
            out += " items' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _limitItems = exports$i$2;
      var exports$j$2 = {};
      exports$j$2 = function generate__limitLength(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        var $op = $keyword == "maxLength" ? ">" : "<";
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        if (it.opts.unicode === false) {
          out += " " + $data + ".length ";
        } else {
          out += " ucs2length(" + $data + ") ";
        }
        out += " " + $op + " " + $schemaValue + ") { ";
        var $errorKeyword = $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limitLength") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT be ";
            if ($keyword == "maxLength") {
              out += "longer";
            } else {
              out += "shorter";
            }
            out += " than ";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + $schema;
            }
            out += " characters' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _limitLength = exports$j$2;
      var exports$k$2 = {};
      exports$k$2 = function generate__limitProperties(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        var $op = $keyword == "maxProperties" ? ">" : "<";
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " Object.keys(" + $data + ").length " + $op + " " + $schemaValue + ") { ";
        var $errorKeyword = $keyword;
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "_limitProperties") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have ";
            if ($keyword == "maxProperties") {
              out += "more";
            } else {
              out += "fewer";
            }
            out += " than ";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + $schema;
            }
            out += " properties' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _limitProperties = exports$k$2;
      var exports$l$2 = {};
      exports$l$2 = function generate_multipleOf(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (!($isData || typeof $schema == "number")) {
          throw new Error($keyword + " must be number");
        }
        out += "var division" + $lvl + ";if (";
        if ($isData) {
          out += " " + $schemaValue + " !== undefined && ( typeof " + $schemaValue + " != 'number' || ";
        }
        out += " (division" + $lvl + " = " + $data + " / " + $schemaValue + ", ";
        if (it.opts.multipleOfPrecision) {
          out += " Math.abs(Math.round(division" + $lvl + ") - division" + $lvl + ") > 1e-" + it.opts.multipleOfPrecision + " ";
        } else {
          out += " division" + $lvl + " !== parseInt(division" + $lvl + ") ";
        }
        out += " ) ";
        if ($isData) {
          out += "  )  ";
        }
        out += " ) {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "multipleOf" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { multipleOf: " + $schemaValue + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should be multiple of ";
            if ($isData) {
              out += "' + " + $schemaValue;
            } else {
              out += "" + $schemaValue + "'";
            }
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + $schema;
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _multipleOf = exports$l$2;
      var exports$m$2 = {};
      exports$m$2 = function generate_not(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = "valid" + $it.level;
        if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          out += " var " + $errs + " = errors;  ";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          $it.createErrors = false;
          var $allErrorsOption;
          if ($it.opts.allErrors) {
            $allErrorsOption = $it.opts.allErrors;
            $it.opts.allErrors = false;
          }
          out += " " + it.validate($it) + " ";
          $it.createErrors = true;
          if ($allErrorsOption)
            $it.opts.allErrors = $allErrorsOption;
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " if (" + $nextValid + ") {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "not" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT be valid' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
          if (it.opts.allErrors) {
            out += " } ";
          }
        } else {
          out += "  var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "not" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT be valid' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if ($breakOnError) {
            out += " if (false) { ";
          }
        }
        return out;
      };
      var _not = exports$m$2;
      var exports$n$2 = {};
      exports$n$2 = function generate_oneOf(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $currentBaseId = $it.baseId, $prevValid = "prevValid" + $lvl, $passingSchemas = "passingSchemas" + $lvl;
        out += "var " + $errs + " = errors , " + $prevValid + " = false , " + $valid + " = false , " + $passingSchemas + " = null; ";
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        var arr1 = $schema;
        if (arr1) {
          var $sch, $i = -1, l1 = arr1.length - 1;
          while ($i < l1) {
            $sch = arr1[$i += 1];
            if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
              $it.schema = $sch;
              $it.schemaPath = $schemaPath + "[" + $i + "]";
              $it.errSchemaPath = $errSchemaPath + "/" + $i;
              out += "  " + it.validate($it) + " ";
              $it.baseId = $currentBaseId;
            } else {
              out += " var " + $nextValid + " = true; ";
            }
            if ($i) {
              out += " if (" + $nextValid + " && " + $prevValid + ") { " + $valid + " = false; " + $passingSchemas + " = [" + $passingSchemas + ", " + $i + "]; } else { ";
              $closingBraces += "}";
            }
            out += " if (" + $nextValid + ") { " + $valid + " = " + $prevValid + " = true; " + $passingSchemas + " = " + $i + "; }";
          }
        }
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += "" + $closingBraces + "if (!" + $valid + ") {   var err =   ";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "oneOf" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { passingSchemas: " + $passingSchemas + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should match exactly one schema in oneOf' ";
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError(vErrors); ";
          } else {
            out += " validate.errors = vErrors; return false; ";
          }
        }
        out += "} else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }";
        if (it.opts.allErrors) {
          out += " } ";
        }
        return out;
      };
      var _oneOf = exports$n$2;
      var exports$o$2 = {};
      exports$o$2 = function generate_pattern(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $regexp = $isData ? "(new RegExp(" + $schemaValue + "))" : it.usePattern($schema);
        out += "if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
        }
        out += " !" + $regexp + ".test(" + $data + ") ) {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "pattern" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { pattern:  ";
          if ($isData) {
            out += "" + $schemaValue;
          } else {
            out += "" + it.util.toQuotedString($schema);
          }
          out += "  } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should match pattern \"";
            if ($isData) {
              out += "' + " + $schemaValue + " + '";
            } else {
              out += "" + it.util.escapeQuotes($schema);
            }
            out += "\"' ";
          }
          if (it.opts.verbose) {
            out += " , schema:  ";
            if ($isData) {
              out += "validate.schema" + $schemaPath;
            } else {
              out += "" + it.util.toQuotedString($schema);
            }
            out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += "} ";
        if ($breakOnError) {
          out += " else { ";
        }
        return out;
      };
      var _pattern = exports$o$2;
      var exports$p$2 = {};
      exports$p$2 = function generate_properties(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        var $key = "key" + $lvl, $idx = "idx" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl;
        var $schemaKeys = Object.keys($schema || {}).filter(notProto), $pProperties = it.schema.patternProperties || {}, $pPropertyKeys = Object.keys($pProperties).filter(notProto), $aProperties = it.schema.additionalProperties, $someProperties = $schemaKeys.length || $pPropertyKeys.length, $noAdditional = $aProperties === false, $additionalIsSchema = typeof $aProperties == "object" && Object.keys($aProperties).length, $removeAdditional = it.opts.removeAdditional, $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
        var $required = it.schema.required;
        if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
          var $requiredHash = it.util.toHash($required);
        }
        function notProto(p) {
          return p !== "__proto__";
        }
        out += "var " + $errs + " = errors;var " + $nextValid + " = true;";
        if ($ownProperties) {
          out += " var " + $dataProperties + " = undefined;";
        }
        if ($checkAdditional) {
          if ($ownProperties) {
            out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
          } else {
            out += " for (var " + $key + " in " + $data + ") { ";
          }
          if ($someProperties) {
            out += " var isAdditional" + $lvl + " = !(false ";
            if ($schemaKeys.length) {
              if ($schemaKeys.length > 8) {
                out += " || validate.schema" + $schemaPath + ".hasOwnProperty(" + $key + ") ";
              } else {
                var arr1 = $schemaKeys;
                if (arr1) {
                  var $propertyKey, i1 = -1, l1 = arr1.length - 1;
                  while (i1 < l1) {
                    $propertyKey = arr1[i1 += 1];
                    out += " || " + $key + " == " + it.util.toQuotedString($propertyKey) + " ";
                  }
                }
              }
            }
            if ($pPropertyKeys.length) {
              var arr2 = $pPropertyKeys;
              if (arr2) {
                var $pProperty, $i = -1, l2 = arr2.length - 1;
                while ($i < l2) {
                  $pProperty = arr2[$i += 1];
                  out += " || " + it.usePattern($pProperty) + ".test(" + $key + ") ";
                }
              }
            }
            out += " ); if (isAdditional" + $lvl + ") { ";
          }
          if ($removeAdditional == "all") {
            out += " delete " + $data + "[" + $key + "]; ";
          } else {
            var $currentErrorPath = it.errorPath;
            var $additionalProperty = "' + " + $key + " + '";
            if (it.opts._errorDataPathProperty) {
              it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            }
            if ($noAdditional) {
              if ($removeAdditional) {
                out += " delete " + $data + "[" + $key + "]; ";
              } else {
                out += " " + $nextValid + " = false; ";
                var $currErrSchemaPath = $errSchemaPath;
                $errSchemaPath = it.errSchemaPath + "/additionalProperties";
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = "";
                if (it.createErrors !== false) {
                  out += " { keyword: '" + "additionalProperties" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { additionalProperty: '" + $additionalProperty + "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: '";
                    if (it.opts._errorDataPathProperty) {
                      out += "is an invalid additional property";
                    } else {
                      out += "should NOT have additional properties";
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); ";
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; ";
                  }
                } else {
                  out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                $errSchemaPath = $currErrSchemaPath;
                if ($breakOnError) {
                  out += " break; ";
                }
              }
            } else if ($additionalIsSchema) {
              if ($removeAdditional == "failing") {
                out += " var " + $errs + " = errors;  ";
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                $it.schema = $aProperties;
                $it.schemaPath = it.schemaPath + ".additionalProperties";
                $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
                $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                var $passData = $data + "[" + $key + "]";
                $it.dataPathArr[$dataNxt] = $key;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                out += " if (!" + $nextValid + ") { errors = " + $errs + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + $data + "[" + $key + "]; }  ";
                it.compositeRule = $it.compositeRule = $wasComposite;
              } else {
                $it.schema = $aProperties;
                $it.schemaPath = it.schemaPath + ".additionalProperties";
                $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
                $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                var $passData = $data + "[" + $key + "]";
                $it.dataPathArr[$dataNxt] = $key;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                if ($breakOnError) {
                  out += " if (!" + $nextValid + ") break; ";
                }
              }
            }
            it.errorPath = $currentErrorPath;
          }
          if ($someProperties) {
            out += " } ";
          }
          out += " }  ";
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
        var $useDefaults = it.opts.useDefaults && !it.compositeRule;
        if ($schemaKeys.length) {
          var arr3 = $schemaKeys;
          if (arr3) {
            var $propertyKey, i3 = -1, l3 = arr3.length - 1;
            while (i3 < l3) {
              $propertyKey = arr3[i3 += 1];
              var $sch = $schema[$propertyKey];
              if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
                var $prop = it.util.getProperty($propertyKey), $passData = $data + $prop, $hasDefault = $useDefaults && $sch.default !== undefined;
                $it.schema = $sch;
                $it.schemaPath = $schemaPath + $prop;
                $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($propertyKey);
                $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
                $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  $code = it.util.varReplace($code, $nextData, $passData);
                  var $useData = $passData;
                } else {
                  var $useData = $nextData;
                  out += " var " + $nextData + " = " + $passData + "; ";
                }
                if ($hasDefault) {
                  out += " " + $code + " ";
                } else {
                  if ($requiredHash && $requiredHash[$propertyKey]) {
                    out += " if ( " + $useData + " === undefined ";
                    if ($ownProperties) {
                      out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                    }
                    out += ") { " + $nextValid + " = false; ";
                    var $currentErrorPath = it.errorPath, $currErrSchemaPath = $errSchemaPath, $missingProperty = it.util.escapeQuotes($propertyKey);
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                    }
                    $errSchemaPath = it.errSchemaPath + "/required";
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = "";
                    if (it.createErrors !== false) {
                      out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                      if (it.opts.messages !== false) {
                        out += " , message: '";
                        if (it.opts._errorDataPathProperty) {
                          out += "is a required property";
                        } else {
                          out += "should have required property \\'" + $missingProperty + "\\'";
                        }
                        out += "' ";
                      }
                      if (it.opts.verbose) {
                        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                      }
                      out += " } ";
                    } else {
                      out += " {} ";
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      if (it.async) {
                        out += " throw new ValidationError([" + __err + "]); ";
                      } else {
                        out += " validate.errors = [" + __err + "]; return false; ";
                      }
                    } else {
                      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                    }
                    $errSchemaPath = $currErrSchemaPath;
                    it.errorPath = $currentErrorPath;
                    out += " } else { ";
                  } else {
                    if ($breakOnError) {
                      out += " if ( " + $useData + " === undefined ";
                      if ($ownProperties) {
                        out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                      }
                      out += ") { " + $nextValid + " = true; } else { ";
                    } else {
                      out += " if (" + $useData + " !== undefined ";
                      if ($ownProperties) {
                        out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                      }
                      out += " ) { ";
                    }
                  }
                  out += " " + $code + " } ";
                }
              }
              if ($breakOnError) {
                out += " if (" + $nextValid + ") { ";
                $closingBraces += "}";
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr4 = $pPropertyKeys;
          if (arr4) {
            var $pProperty, i4 = -1, l4 = arr4.length - 1;
            while (i4 < l4) {
              $pProperty = arr4[i4 += 1];
              var $sch = $pProperties[$pProperty];
              if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
                $it.schema = $sch;
                $it.schemaPath = it.schemaPath + ".patternProperties" + it.util.getProperty($pProperty);
                $it.errSchemaPath = it.errSchemaPath + "/patternProperties/" + it.util.escapeFragment($pProperty);
                if ($ownProperties) {
                  out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
                } else {
                  out += " for (var " + $key + " in " + $data + ") { ";
                }
                out += " if (" + it.usePattern($pProperty) + ".test(" + $key + ")) { ";
                $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                var $passData = $data + "[" + $key + "]";
                $it.dataPathArr[$dataNxt] = $key;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
                } else {
                  out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
                }
                if ($breakOnError) {
                  out += " if (!" + $nextValid + ") break; ";
                }
                out += " } ";
                if ($breakOnError) {
                  out += " else " + $nextValid + " = true; ";
                }
                out += " }  ";
                if ($breakOnError) {
                  out += " if (" + $nextValid + ") { ";
                  $closingBraces += "}";
                }
              }
            }
          }
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
      var _properties = exports$p$2;
      var exports$q$2 = {};
      exports$q$2 = function generate_propertyNames(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $errs = "errs__" + $lvl;
        var $it = it.util.copy(it);
        var $closingBraces = "";
        $it.level++;
        var $nextValid = "valid" + $it.level;
        out += "var " + $errs + " = errors;";
        if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
          $it.schema = $schema;
          $it.schemaPath = $schemaPath;
          $it.errSchemaPath = $errSchemaPath;
          var $key = "key" + $lvl, $idx = "idx" + $lvl, $i = "i" + $lvl, $invalidName = "' + " + $key + " + '", $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
          if ($ownProperties) {
            out += " var " + $dataProperties + " = undefined; ";
          }
          if ($ownProperties) {
            out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
          } else {
            out += " for (var " + $key + " in " + $data + ") { ";
          }
          out += " var startErrs" + $lvl + " = errors; ";
          var $passData = $key;
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          var $code = it.validate($it);
          $it.baseId = $currentBaseId;
          if (it.util.varOccurences($code, $nextData) < 2) {
            out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
          } else {
            out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
          }
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " if (!" + $nextValid + ") { for (var " + $i + "=startErrs" + $lvl + "; " + $i + "<errors; " + $i + "++) { vErrors[" + $i + "].propertyName = " + $key + "; }   var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "propertyNames" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { propertyName: '" + $invalidName + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError(vErrors); ";
            } else {
              out += " validate.errors = vErrors; return false; ";
            }
          }
          if ($breakOnError) {
            out += " break; ";
          }
          out += " } }";
        }
        if ($breakOnError) {
          out += " " + $closingBraces + " if (" + $errs + " == errors) {";
        }
        return out;
      };
      var _propertyNames = exports$q$2;
      var exports$r$2 = {};
      exports$r$2 = function generate_required(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
        }
        var $vSchema = "schema" + $lvl;
        if (!$isData) {
          if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
            var $required = [];
            var arr1 = $schema;
            if (arr1) {
              var $property, i1 = -1, l1 = arr1.length - 1;
              while (i1 < l1) {
                $property = arr1[i1 += 1];
                var $propertySch = it.schema.properties[$property];
                if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == "object" && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
                  $required[$required.length] = $property;
                }
              }
            }
          } else {
            var $required = $schema;
          }
        }
        if ($isData || $required.length) {
          var $currentErrorPath = it.errorPath, $loopRequired = $isData || $required.length >= it.opts.loopRequired, $ownProperties = it.opts.ownProperties;
          if ($breakOnError) {
            out += " var missing" + $lvl + "; ";
            if ($loopRequired) {
              if (!$isData) {
                out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
              }
              var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
              }
              out += " var " + $valid + " = true; ";
              if ($isData) {
                out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
              }
              out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { " + $valid + " = " + $data + "[" + $vSchema + "[" + $i + "]] !== undefined ";
              if ($ownProperties) {
                out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
              }
              out += "; if (!" + $valid + ") break; } ";
              if ($isData) {
                out += "  }  ";
              }
              out += "  if (!" + $valid + ") {   ";
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } else { ";
            } else {
              out += " if ( ";
              var arr2 = $required;
              if (arr2) {
                var $propertyKey, $i = -1, l2 = arr2.length - 1;
                while ($i < l2) {
                  $propertyKey = arr2[$i += 1];
                  if ($i) {
                    out += " || ";
                  }
                  var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
                  out += " ( ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
                }
              }
              out += ") {  ";
              var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
              }
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = "";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                if (it.async) {
                  out += " throw new ValidationError([" + __err + "]); ";
                } else {
                  out += " validate.errors = [" + __err + "]; return false; ";
                }
              } else {
                out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
              }
              out += " } else { ";
            }
          } else {
            if ($loopRequired) {
              if (!$isData) {
                out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
              }
              var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
              }
              if ($isData) {
                out += " if (" + $vSchema + " && !Array.isArray(" + $vSchema + ")) {  var err =   ";
                if (it.createErrors !== false) {
                  out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: '";
                    if (it.opts._errorDataPathProperty) {
                      out += "is a required property";
                    } else {
                      out += "should have required property \\'" + $missingProperty + "\\'";
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + $vSchema + " !== undefined) { ";
              }
              out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { if (" + $data + "[" + $vSchema + "[" + $i + "]] === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
              }
              out += ") {  var err =   ";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ";
              if ($isData) {
                out += "  }  ";
              }
            } else {
              var arr3 = $required;
              if (arr3) {
                var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                while (i3 < l3) {
                  $propertyKey = arr3[i3 += 1];
                  var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                  }
                  out += " if ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") {  var err =   ";
                  if (it.createErrors !== false) {
                    out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                    if (it.opts.messages !== false) {
                      out += " , message: '";
                      if (it.opts._errorDataPathProperty) {
                        out += "is a required property";
                      } else {
                        out += "should have required property \\'" + $missingProperty + "\\'";
                      }
                      out += "' ";
                    }
                    if (it.opts.verbose) {
                      out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                    }
                    out += " } ";
                  } else {
                    out += " {} ";
                  }
                  out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
                }
              }
            }
          }
          it.errorPath = $currentErrorPath;
        } else if ($breakOnError) {
          out += " if (true) {";
        }
        return out;
      };
      var _required = exports$r$2;
      var exports$s$1 = {};
      exports$s$1 = function generate_uniqueItems(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        if (($schema || $isData) && it.opts.uniqueItems !== false) {
          if ($isData) {
            out += " var " + $valid + "; if (" + $schemaValue + " === false || " + $schemaValue + " === undefined) " + $valid + " = true; else if (typeof " + $schemaValue + " != 'boolean') " + $valid + " = false; else { ";
          }
          out += " var i = " + $data + ".length , " + $valid + " = true , j; if (i > 1) { ";
          var $itemType = it.schema.items && it.schema.items.type, $typeIsArray = Array.isArray($itemType);
          if (!$itemType || $itemType == "object" || $itemType == "array" || $typeIsArray && ($itemType.indexOf("object") >= 0 || $itemType.indexOf("array") >= 0)) {
            out += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + $data + "[i], " + $data + "[j])) { " + $valid + " = false; break outer; } } } ";
          } else {
            out += " var itemIndices = {}, item; for (;i--;) { var item = " + $data + "[i]; ";
            var $method = "checkDataType" + ($typeIsArray ? "s" : "");
            out += " if (" + it.util[$method]($itemType, "item", it.opts.strictNumbers, true) + ") continue; ";
            if ($typeIsArray) {
              out += " if (typeof item == 'string') item = '\"' + item; ";
            }
            out += " if (typeof itemIndices[item] == 'number') { " + $valid + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
          }
          out += " } ";
          if ($isData) {
            out += "  }  ";
          }
          out += " if (!" + $valid + ") {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "uniqueItems" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { i: i, j: j } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' ";
            }
            if (it.opts.verbose) {
              out += " , schema:  ";
              if ($isData) {
                out += "validate.schema" + $schemaPath;
              } else {
                out += "" + $schema;
              }
              out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } ";
          if ($breakOnError) {
            out += " else { ";
          }
        } else {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        }
        return out;
      };
      var _uniqueItems = exports$s$1;
      var exports$t$1 = {};
      exports$t$1 = {
        "$ref": _ref,
        allOf: _allOf,
        anyOf: _anyOf,
        "$comment": _comment,
        const: _const,
        contains: _contains,
        dependencies: _dependencies,
        "enum": _enum,
        format: _format,
        "if": _if,
        items: _items,
        maximum: _limit,
        minimum: _limit,
        maxItems: _limitItems,
        minItems: _limitItems,
        maxLength: _limitLength,
        minLength: _limitLength,
        maxProperties: _limitProperties,
        minProperties: _limitProperties,
        multipleOf: _multipleOf,
        not: _not,
        oneOf: _oneOf,
        pattern: _pattern,
        properties: _properties,
        propertyNames: _propertyNames,
        required: _required,
        uniqueItems: _uniqueItems,
        validate: _validate
      };
      var _dotjs = exports$t$1;
      var exports$u$1 = {};
      var ruleModules = _dotjs, toHash = _util$5.toHash;
      exports$u$1 = function rules() {
        var RULES = [
          {
            type: "number",
            rules: [
              { "maximum": ["exclusiveMaximum"] },
              { "minimum": ["exclusiveMinimum"] },
              "multipleOf",
              "format"
            ]
          },
          {
            type: "string",
            rules: [
              "maxLength",
              "minLength",
              "pattern",
              "format"
            ]
          },
          {
            type: "array",
            rules: [
              "maxItems",
              "minItems",
              "items",
              "contains",
              "uniqueItems"
            ]
          },
          {
            type: "object",
            rules: [
              "maxProperties",
              "minProperties",
              "required",
              "dependencies",
              "propertyNames",
              {
                "properties": [
                  "additionalProperties",
                  "patternProperties"
                ]
              }
            ]
          },
          {
            rules: [
              "$ref",
              "const",
              "enum",
              "not",
              "anyOf",
              "oneOf",
              "allOf",
              "if"
            ]
          }
        ];
        var ALL = [
          "type",
          "$comment"
        ];
        var KEYWORDS = [
          "$schema",
          "$id",
          "id",
          "$data",
          "$async",
          "title",
          "description",
          "default",
          "definitions",
          "examples",
          "readOnly",
          "writeOnly",
          "contentMediaType",
          "contentEncoding",
          "additionalItems",
          "then",
          "else"
        ];
        var TYPES = [
          "number",
          "integer",
          "string",
          "array",
          "object",
          "boolean",
          "null"
        ];
        RULES.all = toHash(ALL);
        RULES.types = toHash(TYPES);
        RULES.forEach(function (group) {
          group.rules = group.rules.map(function (keyword) {
            var implKeywords;
            if (typeof keyword == "object") {
              var key = Object.keys(keyword)[0];
              implKeywords = keyword[key];
              keyword = key;
              implKeywords.forEach(function (k) {
                ALL.push(k);
                RULES.all[k] = true;
              });
            }
            ALL.push(keyword);
            var rule = RULES.all[keyword] = {
              keyword: keyword,
              code: ruleModules[keyword],
              implements: implKeywords
            };
            return rule;
          });
          RULES.all.$comment = {
            keyword: "$comment",
            code: ruleModules.$comment
          };
          if (group.type)
            RULES.types[group.type] = group;
        });
        RULES.keywords = toHash(ALL.concat(KEYWORDS));
        RULES.custom = {};
        return RULES;
      };
      var _rules$2 = exports$u$1;
      var exports$v$1 = {};
      var KEYWORDS = [
        "multipleOf",
        "maximum",
        "exclusiveMaximum",
        "minimum",
        "exclusiveMinimum",
        "maxLength",
        "minLength",
        "pattern",
        "additionalItems",
        "maxItems",
        "minItems",
        "uniqueItems",
        "maxProperties",
        "minProperties",
        "required",
        "additionalProperties",
        "enum",
        "format",
        "const"
      ];
      exports$v$1 = function (metaSchema, keywordsJsonPointers) {
        for (var i = 0; i < keywordsJsonPointers.length; i++) {
          metaSchema = JSON.parse(JSON.stringify(metaSchema));
          var segments = keywordsJsonPointers[i].split("/");
          var keywords = metaSchema;
          var j;
          for (j = 1; j < segments.length; j++)
            keywords = keywords[segments[j]];
          for (j = 0; j < KEYWORDS.length; j++) {
            var key = KEYWORDS[j];
            var schema = keywords[key];
            if (schema) {
              keywords[key] = {
                anyOf: [
                  schema,
                  { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
                ]
              };
            }
          }
        }
        return metaSchema;
      };
      var _data = exports$v$1;
      var exports$w$1 = {};
      var MissingRefError$1 = _error_classes.MissingRef;
      exports$w$1 = compileAsync;
      function compileAsync(schema, meta, callback) {
        var self = this;
        if (typeof this._opts.loadSchema != "function")
          throw new Error("options.loadSchema should be a function");
        if (typeof meta == "function") {
          callback = meta;
          meta = undefined;
        }
        var p = loadMetaSchemaOf(schema).then(function () {
          var schemaObj = self._addSchema(schema, undefined, meta);
          return schemaObj.validate || _compileAsync(schemaObj);
        });
        if (callback) {
          p.then(function (v) {
            callback(null, v);
          }, callback);
        }
        return p;
        function loadMetaSchemaOf(sch) {
          var $schema = sch.$schema;
          return $schema && !self.getSchema($schema) ? compileAsync.call(self, { $ref: $schema }, true) : Promise.resolve();
        }
        function _compileAsync(schemaObj) {
          try {
            return self._compile(schemaObj);
          } catch (e) {
            if (e instanceof MissingRefError$1)
              return loadMissingSchema(e);
            throw e;
          }
          function loadMissingSchema(e) {
            var ref = e.missingSchema;
            if (added(ref))
              throw new Error("Schema " + ref + " is loaded but " + e.missingRef + " cannot be resolved");
            var schemaPromise = self._loadingSchemas[ref];
            if (!schemaPromise) {
              schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
              schemaPromise.then(removePromise, removePromise);
            }
            return schemaPromise.then(function (sch) {
              if (!added(ref)) {
                return loadMetaSchemaOf(sch).then(function () {
                  if (!added(ref))
                    self.addSchema(sch, ref, undefined, meta);
                });
              }
            }).then(function () {
              return _compileAsync(schemaObj);
            });
            function removePromise() {
              delete self._loadingSchemas[ref];
            }
            function added(ref) {
              return self._refs[ref] || self._schemas[ref];
            }
          }
        }
      }
      var _async = exports$w$1;
      var exports$x$1 = {};
      exports$x$1 = function generate_custom(it, $keyword, $ruleType) {
        var out = " ";
        var $lvl = it.level;
        var $dataLvl = it.dataLevel;
        var $schema = it.schema[$keyword];
        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
        var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
        var $breakOnError = !it.opts.allErrors;
        var $errorKeyword;
        var $data = "data" + ($dataLvl || "");
        var $valid = "valid" + $lvl;
        var $errs = "errs__" + $lvl;
        var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
        if ($isData) {
          out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
          $schemaValue = "schema" + $lvl;
        } else {
          $schemaValue = $schema;
        }
        var $rule = this, $definition = "definition" + $lvl, $rDef = $rule.definition, $closingBraces = "";
        var $compile, $inline, $macro, $ruleValidate, $validateCode;
        if ($isData && $rDef.$data) {
          $validateCode = "keywordValidate" + $lvl;
          var $validateSchema = $rDef.validateSchema;
          out += " var " + $definition + " = RULES.custom['" + $keyword + "'].definition; var " + $validateCode + " = " + $definition + ".validate;";
        } else {
          $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
          if (!$ruleValidate)
            return;
          $schemaValue = "validate.schema" + $schemaPath;
          $validateCode = $ruleValidate.code;
          $compile = $rDef.compile;
          $inline = $rDef.inline;
          $macro = $rDef.macro;
        }
        var $ruleErrs = $validateCode + ".errors", $i = "i" + $lvl, $ruleErr = "ruleErr" + $lvl, $asyncKeyword = $rDef.async;
        if ($asyncKeyword && !it.async)
          throw new Error("async keyword in sync schema");
        if (!($inline || $macro)) {
          out += "" + $ruleErrs + " = null;";
        }
        out += "var " + $errs + " = errors;var " + $valid + ";";
        if ($isData && $rDef.$data) {
          $closingBraces += "}";
          out += " if (" + $schemaValue + " === undefined) { " + $valid + " = true; } else { ";
          if ($validateSchema) {
            $closingBraces += "}";
            out += " " + $valid + " = " + $definition + ".validateSchema(" + $schemaValue + "); if (" + $valid + ") { ";
          }
        }
        if ($inline) {
          if ($rDef.statements) {
            out += " " + $ruleValidate.validate + " ";
          } else {
            out += " " + $valid + " = " + $ruleValidate.validate + "; ";
          }
        } else if ($macro) {
          var $it = it.util.copy(it);
          var $closingBraces = "";
          $it.level++;
          var $nextValid = "valid" + $it.level;
          $it.schema = $ruleValidate.validate;
          $it.schemaPath = "";
          var $wasComposite = it.compositeRule;
          it.compositeRule = $it.compositeRule = true;
          var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
          it.compositeRule = $it.compositeRule = $wasComposite;
          out += " " + $code;
        } else {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          out += "  " + $validateCode + ".call( ";
          if (it.opts.passContext) {
            out += "this";
          } else {
            out += "self";
          }
          if ($compile || $rDef.schema === false) {
            out += " , " + $data + " ";
          } else {
            out += " , " + $schemaValue + " , " + $data + " , validate.schema" + it.schemaPath + " ";
          }
          out += " , (dataPath || '')";
          if (it.errorPath != "\"\"") {
            out += " + " + it.errorPath;
          }
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
          out += " , " + $parentData + " , " + $parentDataProperty + " , rootData )  ";
          var def_callRuleValidate = out;
          out = $$outStack.pop();
          if ($rDef.errors === false) {
            out += " " + $valid + " = ";
            if ($asyncKeyword) {
              out += "await ";
            }
            out += "" + def_callRuleValidate + "; ";
          } else {
            if ($asyncKeyword) {
              $ruleErrs = "customErrors" + $lvl;
              out += " var " + $ruleErrs + " = null; try { " + $valid + " = await " + def_callRuleValidate + "; } catch (e) { " + $valid + " = false; if (e instanceof ValidationError) " + $ruleErrs + " = e.errors; else throw e; } ";
            } else {
              out += " " + $ruleErrs + " = null; " + $valid + " = " + def_callRuleValidate + "; ";
            }
          }
        }
        if ($rDef.modifying) {
          out += " if (" + $parentData + ") " + $data + " = " + $parentData + "[" + $parentDataProperty + "];";
        }
        out += "" + $closingBraces;
        if ($rDef.valid) {
          if ($breakOnError) {
            out += " if (true) { ";
          }
        } else {
          out += " if ( ";
          if ($rDef.valid === undefined) {
            out += " !";
            if ($macro) {
              out += "" + $nextValid;
            } else {
              out += "" + $valid;
            }
          } else {
            out += " " + !$rDef.valid + " ";
          }
          out += ") { ";
          $errorKeyword = $rule.keyword;
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should pass \"" + $rule.keyword + "\" keyword validation' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          var def_customError = out;
          out = $$outStack.pop();
          if ($inline) {
            if ($rDef.errors) {
              if ($rDef.errors != "full") {
                out += "  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + ".schemaPath = \"" + $errSchemaPath + "\"; } ";
                if (it.opts.verbose) {
                  out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
                }
                out += " } ";
              }
            } else {
              if ($rDef.errors === false) {
                out += " " + def_customError + " ";
              } else {
                out += " if (" + $errs + " == errors) { " + def_customError + " } else {  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + ".schemaPath = \"" + $errSchemaPath + "\"; } ";
                if (it.opts.verbose) {
                  out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
                }
                out += " } } ";
              }
            }
          } else if ($macro) {
            out += "   var err =   ";
            if (it.createErrors !== false) {
              out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: 'should pass \"" + $rule.keyword + "\" keyword validation' ";
              }
              if (it.opts.verbose) {
                out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError(vErrors); ";
              } else {
                out += " validate.errors = vErrors; return false; ";
              }
            }
          } else {
            if ($rDef.errors === false) {
              out += " " + def_customError + " ";
            } else {
              out += " if (Array.isArray(" + $ruleErrs + ")) { if (vErrors === null) vErrors = " + $ruleErrs + "; else vErrors = vErrors.concat(" + $ruleErrs + "); errors = vErrors.length;  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + ";  " + $ruleErr + ".schemaPath = \"" + $errSchemaPath + "\";  ";
              if (it.opts.verbose) {
                out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
              }
              out += " } } else { " + def_customError + " } ";
            }
          }
          out += " } ";
          if ($breakOnError) {
            out += " else { ";
          }
        }
        return out;
      };
      var _custom = exports$x$1;
      var exports$y$1 = {};
      var metaSchema$2 = _jsonSchemaDraft$2;
      exports$y$1 = {
        $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
        definitions: { simpleTypes: metaSchema$2.definitions.simpleTypes },
        type: "object",
        dependencies: {
          schema: ["validate"],
          $data: ["validate"],
          statements: ["inline"],
          valid: { not: { required: ["macro"] } }
        },
        properties: {
          type: metaSchema$2.properties.type,
          schema: { type: "boolean" },
          statements: { type: "boolean" },
          dependencies: {
            type: "array",
            items: { type: "string" }
          },
          metaSchema: { type: "object" },
          modifying: { type: "boolean" },
          valid: { type: "boolean" },
          $data: { type: "boolean" },
          async: { type: "boolean" },
          errors: {
            anyOf: [
              { type: "boolean" },
              { const: "full" }
            ]
          }
        }
      };
      var _definition_schema = exports$y$1;
      var exports$z$1 = {};
      var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
      var customRuleCode$1 = _custom;
      var definitionSchema = _definition_schema;
      exports$z$1 = {
        add: addKeyword,
        get: getKeyword,
        remove: removeKeyword,
        validate: validateKeyword
      };
      function addKeyword(keyword, definition) {
        var RULES = this.RULES;
        if (RULES.keywords[keyword])
          throw new Error("Keyword " + keyword + " is already defined");
        if (!IDENTIFIER.test(keyword))
          throw new Error("Keyword " + keyword + " is not a valid identifier");
        if (definition) {
          this.validateKeyword(definition, true);
          var dataType = definition.type;
          if (Array.isArray(dataType)) {
            for (var i = 0; i < dataType.length; i++)
              _addRule(keyword, dataType[i], definition);
          } else {
            _addRule(keyword, dataType, definition);
          }
          var metaSchema = definition.metaSchema;
          if (metaSchema) {
            if (definition.$data && this._opts.$data) {
              metaSchema = {
                anyOf: [
                  metaSchema,
                  { "$ref": "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
                ]
              };
            }
            definition.validateSchema = this.compile(metaSchema, true);
          }
        }
        RULES.keywords[keyword] = RULES.all[keyword] = true;
        function _addRule(keyword, dataType, definition) {
          var ruleGroup;
          for (var i = 0; i < RULES.length; i++) {
            var rg = RULES[i];
            if (rg.type == dataType) {
              ruleGroup = rg;
              break;
            }
          }
          if (!ruleGroup) {
            ruleGroup = {
              type: dataType,
              rules: []
            };
            RULES.push(ruleGroup);
          }
          var rule = {
            keyword: keyword,
            definition: definition,
            custom: true,
            code: customRuleCode$1,
            implements: definition.implements
          };
          ruleGroup.rules.push(rule);
          RULES.custom[keyword] = rule;
        }
        return this;
      }
      function getKeyword(keyword) {
        var rule = this.RULES.custom[keyword];
        return rule ? rule.definition : this.RULES.keywords[keyword] || false;
      }
      function removeKeyword(keyword) {
        var RULES = this.RULES;
        delete RULES.keywords[keyword];
        delete RULES.all[keyword];
        delete RULES.custom[keyword];
        for (var i = 0; i < RULES.length; i++) {
          var rules = RULES[i].rules;
          for (var j = 0; j < rules.length; j++) {
            if (rules[j].keyword == keyword) {
              rules.splice(j, 1);
              break;
            }
          }
        }
        return this;
      }
      function validateKeyword(definition, throwError) {
        validateKeyword.errors = null;
        var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);
        if (v(definition))
          return true;
        validateKeyword.errors = v.errors;
        if (throwError)
          throw new Error("custom keyword definition is invalid: " + this.errorsText(v.errors));
        else
          return false;
      }
      var _keyword = exports$z$1;
      var _data2 = {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "$id": "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
        "description": "Meta-schema for $data reference (JSON Schema extension proposal)",
        "type": "object",
        "required": ["$data"],
        "properties": {
          "$data": {
            "type": "string",
            "anyOf": [
              { "format": "relative-json-pointer" },
              { "format": "json-pointer" }
            ]
          }
        },
        "additionalProperties": false
      };
      var exports$A$1 = {};
      var compileSchema = _compile2, resolve$3 = _resolve, Cache$1 = _cache$1, SchemaObject$2 = _schema_obj, stableStringify$1 = exports$1$U, formats = _formats, rules = _rules$2, $dataMetaSchema = _data, util$3$1 = _util$5;
      exports$A$1 = Ajv$2;
      Ajv$2.prototype.validate = validate$3;
      Ajv$2.prototype.compile = compile$1;
      Ajv$2.prototype.addSchema = addSchema;
      Ajv$2.prototype.addMetaSchema = addMetaSchema;
      Ajv$2.prototype.validateSchema = validateSchema$2;
      Ajv$2.prototype.getSchema = getSchema;
      Ajv$2.prototype.removeSchema = removeSchema;
      Ajv$2.prototype.addFormat = addFormat;
      Ajv$2.prototype.errorsText = errorsText;
      Ajv$2.prototype._addSchema = _addSchema;
      Ajv$2.prototype._compile = _compile;
      Ajv$2.prototype.compileAsync = _async;
      var customKeyword = _keyword;
      Ajv$2.prototype.addKeyword = customKeyword.add;
      Ajv$2.prototype.getKeyword = customKeyword.get;
      Ajv$2.prototype.removeKeyword = customKeyword.remove;
      Ajv$2.prototype.validateKeyword = customKeyword.validate;
      var errorClasses$1 = _error_classes;
      Ajv$2.ValidationError = errorClasses$1.Validation;
      Ajv$2.MissingRefError = errorClasses$1.MissingRef;
      Ajv$2.$dataMetaSchema = $dataMetaSchema;
      var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
      var META_IGNORE_OPTIONS = [
        "removeAdditional",
        "useDefaults",
        "coerceTypes",
        "strictDefaults"
      ];
      var META_SUPPORT_DATA = ["/properties"];
      function Ajv$2(opts) {
        if (!(this instanceof Ajv$2))
          return new Ajv$2(opts);
        opts = this._opts = util$3$1.copy(opts) || {};
        setLogger(this);
        this._schemas = {};
        this._refs = {};
        this._fragments = {};
        this._formats = formats(opts.format);
        this._cache = opts.cache || new Cache$1();
        this._loadingSchemas = {};
        this._compilations = [];
        this.RULES = rules();
        this._getId = chooseGetId(opts);
        opts.loopRequired = opts.loopRequired || Infinity;
        if (opts.errorDataPath == "property")
          opts._errorDataPathProperty = true;
        if (opts.serialize === undefined)
          opts.serialize = stableStringify$1;
        this._metaOpts = getMetaSchemaOptions(this);
        if (opts.formats)
          addInitialFormats(this);
        if (opts.keywords)
          addInitialKeywords(this);
        addDefaultMetaSchema(this);
        if (typeof opts.meta == "object")
          this.addMetaSchema(opts.meta);
        if (opts.nullable)
          this.addKeyword("nullable", { metaSchema: { type: "boolean" } });
        addInitialSchemas(this);
      }
      function validate$3(schemaKeyRef, data) {
        var v;
        if (typeof schemaKeyRef == "string") {
          v = this.getSchema(schemaKeyRef);
          if (!v)
            throw new Error("no schema with key or ref \"" + schemaKeyRef + "\"");
        } else {
          var schemaObj = this._addSchema(schemaKeyRef);
          v = schemaObj.validate || this._compile(schemaObj);
        }
        var valid = v(data);
        if (v.$async !== true)
          this.errors = v.errors;
        return valid;
      }
      function compile$1(schema, _meta) {
        var schemaObj = this._addSchema(schema, undefined, _meta);
        return schemaObj.validate || this._compile(schemaObj);
      }
      function addSchema(schema, key, _skipValidation, _meta) {
        if (Array.isArray(schema)) {
          for (var i = 0; i < schema.length; i++)
            this.addSchema(schema[i], undefined, _skipValidation, _meta);
          return this;
        }
        var id = this._getId(schema);
        if (id !== undefined && typeof id != "string")
          throw new Error("schema id must be string");
        key = resolve$3.normalizeId(key || id);
        checkUnique(this, key);
        this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
        return this;
      }
      function addMetaSchema(schema, key, skipValidation) {
        this.addSchema(schema, key, skipValidation, true);
        return this;
      }
      function validateSchema$2(schema, throwOrLogError) {
        var $schema = schema.$schema;
        if ($schema !== undefined && typeof $schema != "string")
          throw new Error("$schema must be a string");
        $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
        if (!$schema) {
          this.logger.warn("meta-schema not available");
          this.errors = null;
          return true;
        }
        var valid = this.validate($schema, schema);
        if (!valid && throwOrLogError) {
          var message = "schema is invalid: " + this.errorsText();
          if (this._opts.validateSchema == "log")
            this.logger.error(message);
          else
            throw new Error(message);
        }
        return valid;
      }
      function defaultMeta(self) {
        var meta = self._opts.meta;
        self._opts.defaultMeta = typeof meta == "object" ? self._getId(meta) || meta : self.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;
        return self._opts.defaultMeta;
      }
      function getSchema(keyRef) {
        var schemaObj = _getSchemaObj(this, keyRef);
        switch (typeof schemaObj) {
        case "object":
          return schemaObj.validate || this._compile(schemaObj);
        case "string":
          return this.getSchema(schemaObj);
        case "undefined":
          return _getSchemaFragment(this, keyRef);
        }
      }
      function _getSchemaFragment(self, ref) {
        var res = resolve$3.schema.call(self, { schema: {} }, ref);
        if (res) {
          var schema = res.schema, root = res.root, baseId = res.baseId;
          var v = compileSchema.call(self, schema, root, undefined, baseId);
          self._fragments[ref] = new SchemaObject$2({
            ref: ref,
            fragment: true,
            schema: schema,
            root: root,
            baseId: baseId,
            validate: v
          });
          return v;
        }
      }
      function _getSchemaObj(self, keyRef) {
        keyRef = resolve$3.normalizeId(keyRef);
        return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
      }
      function removeSchema(schemaKeyRef) {
        if (schemaKeyRef instanceof RegExp) {
          _removeAllSchemas(this, this._schemas, schemaKeyRef);
          _removeAllSchemas(this, this._refs, schemaKeyRef);
          return this;
        }
        switch (typeof schemaKeyRef) {
        case "undefined":
          _removeAllSchemas(this, this._schemas);
          _removeAllSchemas(this, this._refs);
          this._cache.clear();
          return this;
        case "string":
          var schemaObj = _getSchemaObj(this, schemaKeyRef);
          if (schemaObj)
            this._cache.del(schemaObj.cacheKey);
          delete this._schemas[schemaKeyRef];
          delete this._refs[schemaKeyRef];
          return this;
        case "object":
          var serialize = this._opts.serialize;
          var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
          this._cache.del(cacheKey);
          var id = this._getId(schemaKeyRef);
          if (id) {
            id = resolve$3.normalizeId(id);
            delete this._schemas[id];
            delete this._refs[id];
          }
        }
        return this;
      }
      function _removeAllSchemas(self, schemas, regex) {
        for (var keyRef in schemas) {
          var schemaObj = schemas[keyRef];
          if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
            self._cache.del(schemaObj.cacheKey);
            delete schemas[keyRef];
          }
        }
      }
      function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
        if (typeof schema != "object" && typeof schema != "boolean")
          throw new Error("schema should be object or boolean");
        var serialize = this._opts.serialize;
        var cacheKey = serialize ? serialize(schema) : schema;
        var cached = this._cache.get(cacheKey);
        if (cached)
          return cached;
        shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
        var id = resolve$3.normalizeId(this._getId(schema));
        if (id && shouldAddSchema)
          checkUnique(this, id);
        var willValidate = this._opts.validateSchema !== false && !skipValidation;
        var recursiveMeta;
        if (willValidate && !(recursiveMeta = id && id == resolve$3.normalizeId(schema.$schema)))
          this.validateSchema(schema, true);
        var localRefs = resolve$3.ids.call(this, schema);
        var schemaObj = new SchemaObject$2({
          id: id,
          schema: schema,
          localRefs: localRefs,
          cacheKey: cacheKey,
          meta: meta
        });
        if (id[0] != "#" && shouldAddSchema)
          this._refs[id] = schemaObj;
        this._cache.put(cacheKey, schemaObj);
        if (willValidate && recursiveMeta)
          this.validateSchema(schema, true);
        return schemaObj;
      }
      function _compile(schemaObj, root) {
        if (schemaObj.compiling) {
          schemaObj.validate = callValidate;
          callValidate.schema = schemaObj.schema;
          callValidate.errors = null;
          callValidate.root = root ? root : callValidate;
          if (schemaObj.schema.$async === true)
            callValidate.$async = true;
          return callValidate;
        }
        schemaObj.compiling = true;
        var currentOpts;
        if (schemaObj.meta) {
          currentOpts = this._opts;
          this._opts = this._metaOpts;
        }
        var v;
        try {
          v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
        } catch (e) {
          delete schemaObj.validate;
          throw e;
        } finally {
          schemaObj.compiling = false;
          if (schemaObj.meta)
            this._opts = currentOpts;
        }
        schemaObj.validate = v;
        schemaObj.refs = v.refs;
        schemaObj.refVal = v.refVal;
        schemaObj.root = v.root;
        return v;
        function callValidate() {
          var _validate = schemaObj.validate;
          var result = _validate.apply(this, arguments);
          callValidate.errors = _validate.errors;
          return result;
        }
      }
      function chooseGetId(opts) {
        switch (opts.schemaId) {
        case "auto":
          return _get$IdOrId;
        case "id":
          return _getId;
        default:
          return _get$Id;
        }
      }
      function _getId(schema) {
        if (schema.$id)
          this.logger.warn("schema $id ignored", schema.$id);
        return schema.id;
      }
      function _get$Id(schema) {
        if (schema.id)
          this.logger.warn("schema id ignored", schema.id);
        return schema.$id;
      }
      function _get$IdOrId(schema) {
        if (schema.$id && schema.id && schema.$id != schema.id)
          throw new Error("schema $id is different from id");
        return schema.$id || schema.id;
      }
      function errorsText(errors, options) {
        errors = errors || this.errors;
        if (!errors)
          return "No errors";
        options = options || {};
        var separator = options.separator === undefined ? ", " : options.separator;
        var dataVar = options.dataVar === undefined ? "data" : options.dataVar;
        var text = "";
        for (var i = 0; i < errors.length; i++) {
          var e = errors[i];
          if (e)
            text += dataVar + e.dataPath + " " + e.message + separator;
        }
        return text.slice(0, -separator.length);
      }
      function addFormat(name, format) {
        if (typeof format == "string")
          format = new RegExp(format);
        this._formats[name] = format;
        return this;
      }
      function addDefaultMetaSchema(self) {
        var $dataSchema;
        if (self._opts.$data) {
          $dataSchema = _data2;
          self.addMetaSchema($dataSchema, $dataSchema.$id, true);
        }
        if (self._opts.meta === false)
          return;
        var metaSchema = _jsonSchemaDraft$2;
        if (self._opts.$data)
          metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
        self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
        self._refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
      }
      function addInitialSchemas(self) {
        var optsSchemas = self._opts.schemas;
        if (!optsSchemas)
          return;
        if (Array.isArray(optsSchemas))
          self.addSchema(optsSchemas);
        else
          for (var key in optsSchemas)
            self.addSchema(optsSchemas[key], key);
      }
      function addInitialFormats(self) {
        for (var name in self._opts.formats) {
          var format = self._opts.formats[name];
          self.addFormat(name, format);
        }
      }
      function addInitialKeywords(self) {
        for (var name in self._opts.keywords) {
          var keyword = self._opts.keywords[name];
          self.addKeyword(name, keyword);
        }
      }
      function checkUnique(self, id) {
        if (self._schemas[id] || self._refs[id])
          throw new Error("schema with key or id \"" + id + "\" already exists");
      }
      function getMetaSchemaOptions(self) {
        var metaOpts = util$3$1.copy(self._opts);
        for (var i = 0; i < META_IGNORE_OPTIONS.length; i++)
          delete metaOpts[META_IGNORE_OPTIONS[i]];
        return metaOpts;
      }
      function setLogger(self) {
        var logger = self._opts.logger;
        if (logger === false) {
          self.logger = {
            log: noop$4,
            warn: noop$4,
            error: noop$4
          };
        } else {
          if (logger === undefined)
            logger = console;
          if (!(typeof logger == "object" && logger.log && logger.warn && logger.error))
            throw new Error("logger must implement log, warn and error methods");
          self.logger = logger;
        }
      }
      function noop$4() {
      }
      var exports$B$1 = exports$A$1;

      var _ajv2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$B$1
      });

      var jsonSchemaDraft04 = {
          "id": "http://json-schema.org/draft-04/schema#",
          "$schema": "http://json-schema.org/draft-04/schema#",
          "description": "Core schema meta-schema",
          "definitions": {
              "schemaArray": {
                  "type": "array",
                  "minItems": 1,
                  "items": { "$ref": "#" }
              },
              "positiveInteger": {
                  "type": "integer",
                  "minimum": 0
              },
              "positiveIntegerDefault0": {
                  "allOf": [ { "$ref": "#/definitions/positiveInteger" }, { "default": 0 } ]
              },
              "simpleTypes": {
                  "enum": [ "array", "boolean", "integer", "null", "number", "object", "string" ]
              },
              "stringArray": {
                  "type": "array",
                  "items": { "type": "string" },
                  "minItems": 1,
                  "uniqueItems": true
              }
          },
          "type": "object",
          "properties": {
              "id": {
                  "type": "string"
              },
              "$schema": {
                  "type": "string"
              },
              "title": {
                  "type": "string"
              },
              "description": {
                  "type": "string"
              },
              "default": {},
              "multipleOf": {
                  "type": "number",
                  "minimum": 0,
                  "exclusiveMinimum": true
              },
              "maximum": {
                  "type": "number"
              },
              "exclusiveMaximum": {
                  "type": "boolean",
                  "default": false
              },
              "minimum": {
                  "type": "number"
              },
              "exclusiveMinimum": {
                  "type": "boolean",
                  "default": false
              },
              "maxLength": { "$ref": "#/definitions/positiveInteger" },
              "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },
              "pattern": {
                  "type": "string",
                  "format": "regex"
              },
              "additionalItems": {
                  "anyOf": [
                      { "type": "boolean" },
                      { "$ref": "#" }
                  ],
                  "default": {}
              },
              "items": {
                  "anyOf": [
                      { "$ref": "#" },
                      { "$ref": "#/definitions/schemaArray" }
                  ],
                  "default": {}
              },
              "maxItems": { "$ref": "#/definitions/positiveInteger" },
              "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },
              "uniqueItems": {
                  "type": "boolean",
                  "default": false
              },
              "maxProperties": { "$ref": "#/definitions/positiveInteger" },
              "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },
              "required": { "$ref": "#/definitions/stringArray" },
              "additionalProperties": {
                  "anyOf": [
                      { "type": "boolean" },
                      { "$ref": "#" }
                  ],
                  "default": {}
              },
              "definitions": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "properties": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "patternProperties": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "dependencies": {
                  "type": "object",
                  "additionalProperties": {
                      "anyOf": [
                          { "$ref": "#" },
                          { "$ref": "#/definitions/stringArray" }
                      ]
                  }
              },
              "enum": {
                  "type": "array",
                  "minItems": 1,
                  "uniqueItems": true
              },
              "type": {
                  "anyOf": [
                      { "$ref": "#/definitions/simpleTypes" },
                      {
                          "type": "array",
                          "items": { "$ref": "#/definitions/simpleTypes" },
                          "minItems": 1,
                          "uniqueItems": true
                      }
                  ]
              },
              "format": { "type": "string" },
              "allOf": { "$ref": "#/definitions/schemaArray" },
              "anyOf": { "$ref": "#/definitions/schemaArray" },
              "oneOf": { "$ref": "#/definitions/schemaArray" },
              "not": { "$ref": "#" }
          },
          "dependencies": {
              "exclusiveMaximum": [ "maximum" ],
              "exclusiveMinimum": [ "minimum" ]
          },
          "default": {}
      }
      ;

      var _jsonSchemaDraft2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': jsonSchemaDraft04
      });

      var exports$3$h = {};
      var baseConfigProperties$1 = {
        $schema: {
          type: "string"
        },
        env: {
          type: "object"
        },
        "extends": {
          $ref: "#/definitions/stringOrStrings"
        },
        globals: {
          type: "object"
        },
        overrides: {
          type: "array",
          items: {
            $ref: "#/definitions/overrideConfig"
          },
          additionalItems: false
        },
        parser: {
          type: ["string", "null"]
        },
        parserOptions: {
          type: "object"
        },
        plugins: {
          type: "array"
        },
        processor: {
          type: "string"
        },
        rules: {
          type: "object"
        },
        settings: {
          type: "object"
        },
        noInlineConfig: {
          type: "boolean"
        },
        reportUnusedDisableDirectives: {
          type: "boolean"
        },
        ecmaFeatures: {
          type: "object"
        }
      };
      var configSchema$1$1 = {
        definitions: {
          stringOrStrings: {
            oneOf: [{
              type: "string"
            }, {
              type: "array",
              items: {
                type: "string"
              },
              additionalItems: false
            }]
          },
          stringOrStringsRequired: {
            oneOf: [{
              type: "string"
            }, {
              type: "array",
              items: {
                type: "string"
              },
              additionalItems: false,
              minItems: 1
            }]
          },
          objectConfig: {
            type: "object",
            properties: _objectSpread2({
              root: {
                type: "boolean"
              },
              ignorePatterns: {
                $ref: "#/definitions/stringOrStrings"
              }
            }, baseConfigProperties$1),
            additionalProperties: false
          },
          overrideConfig: {
            type: "object",
            properties: _objectSpread2({
              excludedFiles: {
                $ref: "#/definitions/stringOrStrings"
              },
              files: {
                $ref: "#/definitions/stringOrStringsRequired"
              }
            }, baseConfigProperties$1),
            required: ["files"],
            additionalProperties: false
          }
        },
        $ref: "#/definitions/objectConfig"
      };
      exports$3$h = configSchema$1$1;
      var _configSchema$1 = exports$3$h;

      var _path$d = "default" in _path2 ? exports$5S : _path2;

      var exports$2$l = {};
      var process$f = process$g;
      var path$g = _path$d;
      var deprecationWarningMessages$1 = {
        ESLINT_LEGACY_ECMAFEATURES: "The 'ecmaFeatures' config file property is deprecated and has no effect.",
        ESLINT_PERSONAL_CONFIG_LOAD: "'~/.eslintrc.*' config files have been deprecated. " + "Please use a config file per project or the '--config' option.",
        ESLINT_PERSONAL_CONFIG_SUPPRESS: "'~/.eslintrc.*' config files have been deprecated. " + "Please remove it or add 'root:true' to the config files in your " + "projects in order to avoid loading '~/.eslintrc.*' accidentally."
      };
      var sourceFileErrorCache$1 = new Set();

      function emitDeprecationWarning$1$1(source, errorCode) {
        var cacheKey = JSON.stringify({
          source: source,
          errorCode: errorCode
        });

        if (sourceFileErrorCache$1.has(cacheKey)) {
          return;
        }

        sourceFileErrorCache$1.add(cacheKey);
        var rel = path$g.relative(process$f.cwd(), source);
        var message = deprecationWarningMessages$1[errorCode];
        process$f.emitWarning("".concat(message, " (found in \"").concat(rel, "\")"), "DeprecationWarning", errorCode);
      }

      exports$2$l = {
        emitDeprecationWarning: emitDeprecationWarning$1$1
      };
      var _deprecationWarnings$1 = exports$2$l;

      var _ajv$2 = "default" in _ajv2 ? exports$B$1 : _ajv2;

      var _jsonSchemaDraft$1 = "default" in _jsonSchemaDraft2 ? jsonSchemaDraft04 : _jsonSchemaDraft2;

      var exports$1$S = {};
      var Ajv$1 = _ajv$2,
          metaSchema$1 = _jsonSchemaDraft$1;

      exports$1$S = function exports$1() {
        var additionalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var ajv = new Ajv$1(_objectSpread2({
          meta: false,
          useDefaults: true,
          validateSchema: false,
          missingRefs: "ignore",
          verbose: true,
          schemaId: "auto"
        }, additionalOptions));
        ajv.addMetaSchema(metaSchema$1);
        ajv._opts.defaultMeta = metaSchema$1.id;
        return ajv;
      };

      var _ajv$1$1 = exports$1$S;

      var _util$4 = "default" in _util2 ? X : _util2;

      var exports$5G = {};
      var util$4 = _util$4,
          configSchema$2 = _configSchema$1,
          BuiltInEnvironments$2 = _environments$2,
          ConfigOps$4 = _configOps$3,
          emitDeprecationWarning$3 = _deprecationWarnings$1.emitDeprecationWarning;

      var ajv$2 = _ajv$1$1();

      var ruleValidators$1 = new WeakMap();
      var noop$3 = Function.prototype;
      var validateSchema$1;
      var severityMap$1 = {
        error: 2,
        warn: 1,
        off: 0
      };
      var validated$1 = new WeakSet();

      exports$5G = /*#__PURE__*/function () {
        function ConfigValidator() {
          var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref$builtInRules = _ref.builtInRules,
              builtInRules = _ref$builtInRules === void 0 ? new Map() : _ref$builtInRules;

          _classCallCheck(this, ConfigValidator);

          this.builtInRules = builtInRules;
        }

        _createClass(ConfigValidator, [{
          key: "getRuleOptionsSchema",
          value: function getRuleOptionsSchema(rule) {
            if (!rule) {
              return null;
            }

            var schema = rule.schema || rule.meta && rule.meta.schema;

            if (Array.isArray(schema)) {
              if (schema.length) {
                return {
                  type: "array",
                  items: schema,
                  minItems: 0,
                  maxItems: schema.length
                };
              }

              return {
                type: "array",
                minItems: 0,
                maxItems: 0
              };
            }

            return schema || null;
          }
        }, {
          key: "validateRuleSeverity",
          value: function validateRuleSeverity(options) {
            var severity = Array.isArray(options) ? options[0] : options;
            var normSeverity = typeof severity === "string" ? severityMap$1[severity.toLowerCase()] : severity;

            if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {
              return normSeverity;
            }

            throw new Error("\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '".concat(util$4.inspect(severity).replace(/'/g, "\"").replace(/\n/g, ""), "').\n"));
          }
        }, {
          key: "validateRuleSchema",
          value: function validateRuleSchema(rule, localOptions) {
            if (!ruleValidators$1.has(rule)) {
              var schema = this.getRuleOptionsSchema(rule);

              if (schema) {
                ruleValidators$1.set(rule, ajv$2.compile(schema));
              }
            }

            var validateRule = ruleValidators$1.get(rule);

            if (validateRule) {
              validateRule(localOptions);

              if (validateRule.errors) {
                throw new Error(validateRule.errors.map(function (error) {
                  return "\tValue ".concat(JSON.stringify(error.data), " ").concat(error.message, ".\n");
                }).join(""));
              }
            }
          }
        }, {
          key: "validateRuleOptions",
          value: function validateRuleOptions(rule, ruleId, options) {
            var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

            try {
              var severity = this.validateRuleSeverity(options);

              if (severity !== 0) {
                this.validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);
              }
            } catch (err) {
              var enhancedMessage = "Configuration for rule \"".concat(ruleId, "\" is invalid:\n").concat(err.message);

              if (typeof source === "string") {
                throw new Error("".concat(source, ":\n\t").concat(enhancedMessage));
              } else {
                throw new Error(enhancedMessage);
              }
            }
          }
        }, {
          key: "validateEnvironment",
          value: function validateEnvironment(environment, source) {
            var getAdditionalEnv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop$3;

            if (!environment) {
              return;
            }

            Object.keys(environment).forEach(function (id) {
              var env = getAdditionalEnv(id) || BuiltInEnvironments$2.get(id) || null;

              if (!env) {
                var message = "".concat(source, ":\n\tEnvironment key \"").concat(id, "\" is unknown\n");
                throw new Error(message);
              }
            });
          }
        }, {
          key: "validateRules",
          value: function validateRules(rulesConfig, source) {
            var _this = this;

            var getAdditionalRule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop$3;

            if (!rulesConfig) {
              return;
            }

            Object.keys(rulesConfig).forEach(function (id) {
              var rule = getAdditionalRule(id) || _this.builtInRules.get(id) || null;

              _this.validateRuleOptions(rule, id, rulesConfig[id], source);
            });
          }
        }, {
          key: "validateGlobals",
          value: function validateGlobals(globalsConfig) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (!globalsConfig) {
              return;
            }

            Object.entries(globalsConfig).forEach(function (_ref2) {
              var _ref3 = _slicedToArray(_ref2, 2),
                  configuredGlobal = _ref3[0],
                  configuredValue = _ref3[1];

              try {
                ConfigOps$4.normalizeConfigGlobal(configuredValue);
              } catch (err) {
                throw new Error("ESLint configuration of global '".concat(configuredGlobal, "' in ").concat(source, " is invalid:\n").concat(err.message));
              }
            });
          }
        }, {
          key: "validateProcessor",
          value: function validateProcessor(processorName, source, getProcessor) {
            if (processorName && !getProcessor(processorName)) {
              throw new Error("ESLint configuration of processor in '".concat(source, "' is invalid: '").concat(processorName, "' was not found."));
            }
          }
        }, {
          key: "formatErrors",
          value: function formatErrors(errors) {
            return errors.map(function (error) {
              if (error.keyword === "additionalProperties") {
                var formattedPropertyPath = error.dataPath.length ? "".concat(error.dataPath.slice(1), ".").concat(error.params.additionalProperty) : error.params.additionalProperty;
                return "Unexpected top-level property \"".concat(formattedPropertyPath, "\"");
              }

              if (error.keyword === "type") {
                var formattedField = error.dataPath.slice(1);
                var formattedExpectedType = Array.isArray(error.schema) ? error.schema.join("/") : error.schema;
                var formattedValue = JSON.stringify(error.data);
                return "Property \"".concat(formattedField, "\" is the wrong type (expected ").concat(formattedExpectedType, " but got `").concat(formattedValue, "`)");
              }

              var field = error.dataPath[0] === "." ? error.dataPath.slice(1) : error.dataPath;
              return "\"".concat(field, "\" ").concat(error.message, ". Value: ").concat(JSON.stringify(error.data));
            }).map(function (message) {
              return "\t- ".concat(message, ".\n");
            }).join("");
          }
        }, {
          key: "validateConfigSchema",
          value: function validateConfigSchema(config) {
            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            validateSchema$1 = validateSchema$1 || ajv$2.compile(configSchema$2);

            if (!validateSchema$1(config)) {
              throw new Error("ESLint configuration in ".concat(source, " is invalid:\n").concat(this.formatErrors(validateSchema$1.errors)));
            }

            if (Object.hasOwnProperty.call(config, "ecmaFeatures")) {
              emitDeprecationWarning$3(source, "ESLINT_LEGACY_ECMAFEATURES");
            }
          }
        }, {
          key: "validate",
          value: function validate(config, source, getAdditionalRule, getAdditionalEnv) {
            this.validateConfigSchema(config, source);
            this.validateRules(config.rules, source, getAdditionalRule);
            this.validateEnvironment(config.env, source, getAdditionalEnv);
            this.validateGlobals(config.globals, source);

            var _iterator = _createForOfIteratorHelper(config.overrides || []),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var override = _step.value;
                this.validateRules(override.rules, source, getAdditionalRule);
                this.validateEnvironment(override.env, source, getAdditionalEnv);
                this.validateGlobals(config.globals, source);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }, {
          key: "validateConfigArray",
          value: function validateConfigArray(configArray) {
            var getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);
            var getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);
            var getPluginRule = Map.prototype.get.bind(configArray.pluginRules);

            var _iterator2 = _createForOfIteratorHelper(configArray),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var element = _step2.value;

                if (validated$1.has(element)) {
                  continue;
                }

                validated$1.add(element);
                this.validateEnvironment(element.env, element.name, getPluginEnv);
                this.validateGlobals(element.globals, element.name);
                this.validateProcessor(element.processor, element.name, getPluginProcessor);
                this.validateRules(element.rules, element.name, getPluginRule);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        }]);

        return ConfigValidator;
      }();

      var _configValidator$2 = exports$5G;

      function unimplemented() {
        throw new Error("Node.js module module is not supported by JSPM core in the browser");
      }
      var builtinModules = [
        "_http_agent",
        "_http_client",
        "_http_common",
        "_http_incoming",
        "_http_outgoing",
        "_http_server",
        "_stream_duplex",
        "_stream_passthrough",
        "_stream_readable",
        "_stream_transform",
        "_stream_wrap",
        "_stream_writable",
        "_tls_common",
        "_tls_wrap",
        "assert",
        "assert/strict",
        "async_hooks",
        "buffer",
        "child_process",
        "cluster",
        "console",
        "constants",
        "crypto",
        "dgram",
        "diagnostics_channel",
        "dns",
        "dns/promises",
        "domain",
        "events",
        "fs",
        "fs/promises",
        "http",
        "http2",
        "https",
        "inspector",
        "module",
        "net",
        "os",
        "path",
        "path/posix",
        "path/win32",
        "perf_hooks",
        "process",
        "punycode",
        "querystring",
        "readline",
        "repl",
        "stream",
        "stream/consumers",
        "stream/promises",
        "stream/web",
        "string_decoder",
        "sys",
        "timers",
        "timers/promises",
        "tls",
        "trace_events",
        "tty",
        "url",
        "util",
        "util/types",
        "v8",
        "vm",
        "worker_threads",
        "zlib"
      ];
      var module$2 = {
        builtinModules: builtinModules,
        _cache: null,
        _pathCache: null,
        _extensions: null,
        globalPaths: null,
        _debug: unimplemented,
        _findPath: unimplemented,
        _nodeModulePaths: unimplemented,
        _resolveLookupPaths: unimplemented,
        _load: unimplemented,
        _resolveFilename: unimplemented,
        createRequireFromPath: unimplemented,
        createRequire: unimplemented,
        _initPaths: unimplemented,
        _preloadModules: unimplemented,
        syncBuiltinESMExports: unimplemented,
        Module: unimplemented,
        runMain: unimplemented,
        findSourceMap: unimplemented,
        SourceMap: unimplemented
      };
      var _cache = null, _pathCache = null, _extensions = null, globalPaths = null;

      var _module2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': module$2,
        Module: unimplemented,
        SourceMap: unimplemented,
        _cache: _cache,
        _debug: unimplemented,
        _extensions: _extensions,
        _findPath: unimplemented,
        _initPaths: unimplemented,
        _load: unimplemented,
        _nodeModulePaths: unimplemented,
        _pathCache: _pathCache,
        _preloadModules: unimplemented,
        _resolveFilename: unimplemented,
        _resolveLookupPaths: unimplemented,
        builtinModules: builtinModules,
        createRequire: unimplemented,
        createRequireFromPath: unimplemented,
        findSourceMap: unimplemented,
        globalPaths: globalPaths,
        runMain: unimplemented,
        syncBuiltinESMExports: unimplemented
      });

      var exports$5F = {};
      const path$f = exports$5S;
      const Module$1 = module$2;
      const fs$a = fs$b;
      const resolveFrom$1 = (fromDir, moduleId, silent) => {
        if (typeof fromDir !== "string") {
          throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${ typeof fromDir }\``);
        }
        if (typeof moduleId !== "string") {
          throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${ typeof moduleId }\``);
        }
        try {
          fromDir = fs$a.realpathSync(fromDir);
        } catch (err) {
          if (err.code === "ENOENT") {
            fromDir = path$f.resolve(fromDir);
          } else if (silent) {
            return null;
          } else {
            throw err;
          }
        }
        const fromFile = path$f.join(fromDir, "noop.js");
        const resolveFileName = () => Module$1._resolveFilename(moduleId, {
          id: fromFile,
          filename: fromFile,
          paths: Module$1._nodeModulePaths(fromDir)
        });
        if (silent) {
          try {
            return resolveFileName();
          } catch (err) {
            return null;
          }
        }
        return resolveFileName();
      };
      exports$5F = (fromDir, moduleId) => resolveFrom$1(fromDir, moduleId);
      exports$5F.silent = (fromDir, moduleId) => resolveFrom$1(fromDir, moduleId, true);
      var exports$1$R = exports$5F;
      exports$5F.silent;

      var exports$5E = {};
      const callsites$1 = () => {
        const _prepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = (_, stack) => stack;
        const stack = new Error().stack.slice(1);
        Error.prepareStackTrace = _prepareStackTrace;
        return stack;
      };
      exports$5E = callsites$1;
      exports$5E.default = callsites$1;
      var exports$1$Q = exports$5E;

      var exports$5D = {};
      const callsites = exports$1$Q;
      exports$5D = filepath => {
        const stacks = callsites();
        if (!filepath) {
          return stacks[2].getFileName();
        }
        let seenVal = false;
        stacks.shift();
        for (const stack of stacks) {
          const parentFilepath = stack.getFileName();
          if (typeof parentFilepath !== "string") {
            continue;
          }
          if (parentFilepath === filepath) {
            seenVal = true;
            continue;
          }
          if (parentFilepath === "module.js") {
            continue;
          }
          if (seenVal && parentFilepath !== filepath) {
            return parentFilepath;
          }
        }
      };
      var exports$1$P = exports$5D;

      var exports$5C = {};
      function _nullRequire$6(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }
      const path$e = exports$5S;
      const resolveFrom = exports$1$R;
      const parentModule = exports$1$P;
      exports$5C = moduleId => {
        if (typeof moduleId !== "string") {
          throw new TypeError("Expected a string");
        }
        const parentPath = parentModule(new URL(module.meta.url).pathname);
        const cwd = parentPath ? path$e.dirname(parentPath) : new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname;
        const filePath = resolveFrom(cwd, moduleId);
        const oldModule = {}[filePath];
        if (oldModule && oldModule.parent) {
          let i = oldModule.parent.children.length;
          while (i--) {
            if (oldModule.parent.children[i].id === filePath) {
              oldModule.parent.children.splice(i, 1);
            }
          }
        }
        delete {}[filePath];
        const parent = {}[parentPath];
        return parent === undefined ? _nullRequire$6(filePath) : parent.require(filePath);
      };
      var exports$1$O = exports$5C;

      var _importFresh2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$O
      });

      var exports$5B = {};
      const singleComment = Symbol("singleComment");
      const multiComment = Symbol("multiComment");
      const stripWithoutWhitespace = () => "";
      const stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\S/g, " ");
      const isEscaped$1 = (jsonString, quotePosition) => {
        let index = quotePosition - 1;
        let backslashCount = 0;
        while (jsonString[index] === "\\") {
          index -= 1;
          backslashCount += 1;
        }
        return Boolean(backslashCount % 2);
      };
      exports$5B = (jsonString, options = {}) => {
        if (typeof jsonString !== "string") {
          throw new TypeError(`Expected argument \`jsonString\` to be a \`string\`, got \`${ typeof jsonString }\``);
        }
        const strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;
        let insideString = false;
        let insideComment = false;
        let offset = 0;
        let result = "";
        for (let i = 0; i < jsonString.length; i++) {
          const currentCharacter = jsonString[i];
          const nextCharacter = jsonString[i + 1];
          if (!insideComment && currentCharacter === "\"") {
            const escaped = isEscaped$1(jsonString, i);
            if (!escaped) {
              insideString = !insideString;
            }
          }
          if (insideString) {
            continue;
          }
          if (!insideComment && currentCharacter + nextCharacter === "//") {
            result += jsonString.slice(offset, i);
            offset = i;
            insideComment = singleComment;
            i++;
          } else if (insideComment === singleComment && currentCharacter + nextCharacter === "\r\n") {
            i++;
            insideComment = false;
            result += strip(jsonString, offset, i);
            offset = i;
            continue;
          } else if (insideComment === singleComment && currentCharacter === "\n") {
            insideComment = false;
            result += strip(jsonString, offset, i);
            offset = i;
          } else if (!insideComment && currentCharacter + nextCharacter === "/*") {
            result += jsonString.slice(offset, i);
            offset = i;
            insideComment = multiComment;
            i++;
            continue;
          } else if (insideComment === multiComment && currentCharacter + nextCharacter === "*/") {
            i++;
            insideComment = false;
            result += strip(jsonString, offset, i + 1);
            offset = i + 1;
            continue;
          }
        }
        return result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));
      };
      var exports$1$N = exports$5B;

      var _stripJsonComments2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$N
      });

      var exports$5A = {};
      const NAMESPACE_REGEX = /^@.*\//iu;
      function normalizePackageName(name, prefix) {
        let normalizedName = name;
        if (normalizedName.includes("\\")) {
          normalizedName = normalizedName.replace(/\\/gu, "/");
        }
        if (normalizedName.charAt(0) === "@") {
          const scopedPackageShortcutRegex = new RegExp(`^(@[^/]+)(?:/(?:${ prefix })?)?$`, "u"), scopedPackageNameRegex = new RegExp(`^${ prefix }(-|$)`, "u");
          if (scopedPackageShortcutRegex.test(normalizedName)) {
            normalizedName = normalizedName.replace(scopedPackageShortcutRegex, `$1/${ prefix }`);
          } else if (!scopedPackageNameRegex.test(normalizedName.split("/")[1])) {
            normalizedName = normalizedName.replace(/^@([^/]+)\/(.*)$/u, `@$1/${ prefix }-$2`);
          }
        } else if (!normalizedName.startsWith(`${ prefix }-`)) {
          normalizedName = `${ prefix }-${ normalizedName }`;
        }
        return normalizedName;
      }
      function getShorthandName(fullname, prefix) {
        if (fullname[0] === "@") {
          let matchResult = new RegExp(`^(@[^/]+)/${ prefix }$`, "u").exec(fullname);
          if (matchResult) {
            return matchResult[1];
          }
          matchResult = new RegExp(`^(@[^/]+)/${ prefix }-(.+)$`, "u").exec(fullname);
          if (matchResult) {
            return `${ matchResult[1] }/${ matchResult[2] }`;
          }
        } else if (fullname.startsWith(`${ prefix }-`)) {
          return fullname.slice(prefix.length + 1);
        }
        return fullname;
      }
      function getNamespaceFromTerm(term) {
        const match = term.match(NAMESPACE_REGEX);
        return match ? match[0] : "";
      }
      exports$5A = {
        normalizePackageName,
        getShorthandName,
        getNamespaceFromTerm
      };
      var _naming = exports$5A;
      exports$5A.normalizePackageName; exports$5A.getShorthandName; exports$5A.getNamespaceFromTerm;

      var _module = "default" in _module2 ? module$2 : _module2;
      var exports$5z = {};
      const Module = _module;
      const createRequire = Module.createRequire || Module.createRequireFromPath;
      exports$5z = {
        resolve(moduleName, relativeToPath) {
          try {
            return createRequire(relativeToPath).resolve(moduleName);
          } catch (error) {
            if (typeof error === "object" && error !== null && error.code === "MODULE_NOT_FOUND" && !error.requireStack && error.message.includes(moduleName)) {
              error.message += `\nRequire stack:\n- ${ relativeToPath }`;
            }
            throw error;
          }
        }
      };
      var _relativeModuleResolver = exports$5z;
      exports$5z.resolve;

      var _global$h = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$5y = {};
      var process$e = process$g;
      function make_array(subject) {
        return Array.isArray(subject) ? subject : [subject];
      }
      const REGEX_BLANK_LINE = /^\s+$/;
      const REGEX_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
      const REGEX_LEADING_EXCAPED_HASH = /^\\#/;
      const SLASH = "/";
      const KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
      const define = (object, key, value) => Object.defineProperty(object, key, { value });
      const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
      const sanitizeRange = range => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : "");
      const DEFAULT_REPLACER_PREFIX = [
        [
          /\\?\s+$/,
          match => match.indexOf("\\") === 0 ? " " : ""
        ],
        [
          /\\\s/g,
          () => " "
        ],
        [
          /[\\^$.|*+(){]/g,
          match => `\\${ match }`
        ],
        [
          /\[([^\]/]*)($|\])/g,
          (match, p1, p2) => p2 === "]" ? `[${ sanitizeRange(p1) }]` : `\\${ match }`
        ],
        [
          /(?!\\)\?/g,
          () => "[^/]"
        ],
        [
          /^\//,
          () => "^"
        ],
        [
          /\//g,
          () => "\\/"
        ],
        [
          /^\^*\\\*\\\*\\\//,
          () => "^(?:.*\\/)?"
        ]
      ];
      const DEFAULT_REPLACER_SUFFIX = [
        [
          /^(?=[^^])/,
          function startingReplacer() {
            return !/\/(?!$)/.test(this || _global$h) ? "(?:^|\\/)" : "^";
          }
        ],
        [
          /\\\/\\\*\\\*(?=\\\/|$)/g,
          (match, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
        ],
        [
          /(^|[^\\]+)\\\*(?=.+)/g,
          (match, p1) => `${ p1 }[^\\/]*`
        ],
        [
          /(\^|\\\/)?\\\*$/,
          (match, p1) => {
            const prefix = p1 ? `${ p1 }[^/]+` : "[^/]*";
            return `${ prefix }(?=$|\\/$)`;
          }
        ],
        [
          /\\\\\\/g,
          () => "\\"
        ]
      ];
      const POSITIVE_REPLACERS = [
        ...DEFAULT_REPLACER_PREFIX,
        [
          /(?:[^*/])$/,
          match => `${ match }(?=$|\\/)`
        ],
        ...DEFAULT_REPLACER_SUFFIX
      ];
      const NEGATIVE_REPLACERS = [
        ...DEFAULT_REPLACER_PREFIX,
        [
          /(?:[^*])$/,
          match => `${ match }(?=$|\\/$)`
        ],
        ...DEFAULT_REPLACER_SUFFIX
      ];
      const cache$1 = Object.create(null);
      const make_regex = (pattern, negative, ignorecase) => {
        const r = cache$1[pattern];
        if (r) {
          return r;
        }
        const replacers = negative ? NEGATIVE_REPLACERS : POSITIVE_REPLACERS;
        const source = replacers.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);
        return cache$1[pattern] = ignorecase ? new RegExp(source, "i") : new RegExp(source);
      };
      const checkPattern = pattern => pattern && typeof pattern === "string" && !REGEX_BLANK_LINE.test(pattern) && pattern.indexOf("#") !== 0;
      const createRule = (pattern, ignorecase) => {
        const origin = pattern;
        let negative = false;
        if (pattern.indexOf("!") === 0) {
          negative = true;
          pattern = pattern.substr(1);
        }
        pattern = pattern.replace(REGEX_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_LEADING_EXCAPED_HASH, "#");
        const regex = make_regex(pattern, negative, ignorecase);
        return {
          origin,
          pattern,
          negative,
          regex
        };
      };
      class IgnoreBase {
        constructor({
          ignorecase = true
        } = {}) {
          (this || _global$h)._rules = [];
          (this || _global$h)._ignorecase = ignorecase;
          define(this || _global$h, KEY_IGNORE, true);
          this._initCache();
        }
        _initCache() {
          (this || _global$h)._cache = Object.create(null);
        }
        add(pattern) {
          (this || _global$h)._added = false;
          if (typeof pattern === "string") {
            pattern = pattern.split(/\r?\n/g);
          }
          make_array(pattern).forEach((this || _global$h)._addPattern, this || _global$h);
          if ((this || _global$h)._added) {
            this._initCache();
          }
          return this || _global$h;
        }
        addPattern(pattern) {
          return this.add(pattern);
        }
        _addPattern(pattern) {
          if (pattern && pattern[KEY_IGNORE]) {
            (this || _global$h)._rules = (this || _global$h)._rules.concat(pattern._rules);
            (this || _global$h)._added = true;
            return;
          }
          if (checkPattern(pattern)) {
            const rule = createRule(pattern, (this || _global$h)._ignorecase);
            (this || _global$h)._added = true;
            (this || _global$h)._rules.push(rule);
          }
        }
        filter(paths) {
          return make_array(paths).filter(path => this._filter(path));
        }
        createFilter() {
          return path => this._filter(path);
        }
        ignores(path) {
          return !this._filter(path);
        }
        _filter(path, slices) {
          if (!path) {
            return false;
          }
          if (path in (this || _global$h)._cache) {
            return (this || _global$h)._cache[path];
          }
          if (!slices) {
            slices = path.split(SLASH);
          }
          slices.pop();
          return (this || _global$h)._cache[path] = slices.length ? this._filter(slices.join(SLASH) + SLASH, slices) && this._test(path) : this._test(path);
        }
        _test(path) {
          let matched = 0;
          (this || _global$h)._rules.forEach(rule => {
            if (!(matched ^ rule.negative)) {
              matched = rule.negative ^ rule.regex.test(path);
            }
          });
          return !matched;
        }
      }
      if (typeof process$e !== "undefined" && (process$e.env && process$e.env.IGNORE_TEST_WIN32 || process$e.platform === "win32")) {
        const filter = IgnoreBase.prototype._filter;
        const make_posix = str => /^\\\\\?\\/.test(str) || /[^\x00-\x80]+/.test(str) ? str : str.replace(/\\/g, "/");
        IgnoreBase.prototype._filter = function filterWin32(path, slices) {
          path = make_posix(path);
          return filter.call(this || _global$h, path, slices);
        };
      }
      exports$5y = options => new IgnoreBase(options);
      var exports$1$M = exports$5y;

      var _ignore2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$M
      });

      var exports$5x = {};
      var s$1 = 1000;
      var m$1 = s$1 * 60;
      var h$1 = m$1 * 60;
      var d$1 = h$1 * 24;
      var w = d$1 * 7;
      var y$1 = d$1 * 365.25;
      exports$5x = function (val, options) {
        options = options || {};
        var type = typeof val;
        if (type === "string" && val.length > 0) {
          return parse$7(val);
        } else if (type === "number" && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }
        throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
      };
      function parse$7(str) {
        str = String(str);
        if (str.length > 100) {
          return;
        }
        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
        if (!match) {
          return;
        }
        var n = parseFloat(match[1]);
        var type = (match[2] || "ms").toLowerCase();
        switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y$1;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d$1;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h$1;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m$1;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s$1;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return undefined;
        }
      }
      function fmtShort(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d$1) {
          return Math.round(ms / d$1) + "d";
        }
        if (msAbs >= h$1) {
          return Math.round(ms / h$1) + "h";
        }
        if (msAbs >= m$1) {
          return Math.round(ms / m$1) + "m";
        }
        if (msAbs >= s$1) {
          return Math.round(ms / s$1) + "s";
        }
        return ms + "ms";
      }
      function fmtLong(ms) {
        var msAbs = Math.abs(ms);
        if (msAbs >= d$1) {
          return plural(ms, msAbs, d$1, "day");
        }
        if (msAbs >= h$1) {
          return plural(ms, msAbs, h$1, "hour");
        }
        if (msAbs >= m$1) {
          return plural(ms, msAbs, m$1, "minute");
        }
        if (msAbs >= s$1) {
          return plural(ms, msAbs, s$1, "second");
        }
        return ms + " ms";
      }
      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
      }
      var exports$1$L = exports$5x;

      var _ms2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$L
      });

      var _ms = "default" in _ms2 ? exports$1$L : _ms2;

      var _global$1$4 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

      var exports$1$K = {};

      function setup(env) {
        createDebug.debug = createDebug;
        createDebug["default"] = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = _ms;
        createDebug.destroy = destroy;
        Object.keys(env).forEach(function (key) {
          createDebug[key] = env[key];
        });
        createDebug.names = [];
        createDebug.skips = [];
        createDebug.formatters = {};

        function selectColor(namespace) {
          var hash = 0;

          for (var i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0;
          }

          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }

        createDebug.selectColor = selectColor;

        function createDebug(namespace) {
          var prevTime;
          var enableOverride = null;
          var namespacesCache;
          var enabledCache;

          function debug() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            if (!debug.enabled) {
              return;
            }

            var self = debug;
            var curr = Number(new Date());
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);

            if (typeof args[0] !== "string") {
              args.unshift("%O");
            }

            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
              if (match === "%%") {
                return "%";
              }

              index++;
              var formatter = createDebug.formatters[format];

              if (typeof formatter === "function") {
                var val = args[index];
                match = formatter.call(self, val);
                args.splice(index, 1);
                index--;
              }

              return match;
            });
            createDebug.formatArgs.call(self, args);
            var logFn = self.log || createDebug.log;
            logFn.apply(self, args);
          }

          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy;
          Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: function get() {
              if (enableOverride !== null) {
                return enableOverride;
              }

              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }

              return enabledCache;
            },
            set: function set(v) {
              enableOverride = v;
            }
          });

          if (typeof createDebug.init === "function") {
            createDebug.init(debug);
          }

          return debug;
        }

        function extend(namespace, delimiter) {
          var newDebug = createDebug((this || _global$1$4).namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
          newDebug.log = (this || _global$1$4).log;
          return newDebug;
        }

        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          var i;
          var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
          var len = split.length;

          for (i = 0; i < len; i++) {
            if (!split[i]) {
              continue;
            }

            namespaces = split[i].replace(/\*/g, ".*?");

            if (namespaces[0] === "-") {
              createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            } else {
              createDebug.names.push(new RegExp("^" + namespaces + "$"));
            }
          }
        }

        function disable() {
          var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {
            return "-" + namespace;
          }))).join(",");
          createDebug.enable("");
          return namespaces;
        }

        function enabled(name) {
          if (name[name.length - 1] === "*") {
            return true;
          }

          var i;
          var len;

          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }

          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }

          return false;
        }

        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
        }

        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }

          return val;
        }

        function destroy() {
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }

        createDebug.enable(createDebug.load());
        return createDebug;
      }

      exports$1$K = setup;
      var _common = exports$1$K;

      var _global$g = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

      var exports$5w = {};
      var process$d = process$g;
      exports$5w.formatArgs = formatArgs;
      exports$5w.save = save;
      exports$5w.load = load$1;
      exports$5w.useColors = useColors;
      exports$5w.storage = localstorage();

      exports$5w.destroy = function () {
        var warned = false;
        return function () {
          if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
        };
      }();

      exports$5w.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];

      function useColors() {
        if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
          return true;
        }

        if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }

        return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
      }

      function formatArgs(args) {
        args[0] = ((this || _global$g).useColors ? "%c" : "") + (this || _global$g).namespace + ((this || _global$g).useColors ? " %c" : " ") + args[0] + ((this || _global$g).useColors ? "%c " : " ") + "+" + exports$5w.humanize((this || _global$g).diff);

        if (!(this || _global$g).useColors) {
          return;
        }

        var c = "color: " + (this || _global$g).color;
        args.splice(1, 0, c, "color: inherit");
        var index = 0;
        var lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, function (match) {
          if (match === "%%") {
            return;
          }

          index++;

          if (match === "%c") {
            lastC = index;
          }
        });
        args.splice(lastC, 0, c);
      }

      exports$5w.log = console.debug || console.log || function () {};

      function save(namespaces) {
        try {
          if (namespaces) {
            exports$5w.storage.setItem("debug", namespaces);
          } else {
            exports$5w.storage.removeItem("debug");
          }
        } catch (error) {}
      }

      function load$1() {
        var r;

        try {
          r = exports$5w.storage.getItem("debug");
        } catch (error) {}

        if (!r && typeof process$d !== "undefined" && "env" in process$d) {
          r = process$d.env.DEBUG;
        }

        return r;
      }

      function localstorage() {
        try {
          return localStorage;
        } catch (error) {}
      }

      exports$5w = _common(exports$5w);
      var _exports = exports$5w,
          formatters = _exports.formatters;

      formatters.j = function (v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return "[UnexpectedJSONParseError]: " + error.message;
        }
      };

      var _browser = exports$5w;
      var storage = exports$5w.storage,
          destroy = exports$5w.destroy,
          colors = exports$5w.colors,
          log = exports$5w.log;
      var _formatArgs = exports$5w.formatArgs,
          _save = exports$5w.save,
          _load = exports$5w.load,
          _useColors = exports$5w.useColors;

      var _debug2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        colors: colors,
        'default': _browser,
        destroy: destroy,
        formatArgs: _formatArgs,
        load: _load,
        log: log,
        save: _save,
        storage: storage,
        useColors: _useColors
      });

      var _assert$8 = "default" in _assert2 ? et : _assert2;

      var _path$c = "default" in _path2 ? exports$5S : _path2;

      var _ignore$2 = "default" in _ignore2 ? exports$1$M : _ignore2;

      var _debug$a = "default" in _debug2 ? _browser : _debug2;

      var exports$2$k = {};
      var process$c = process$g;
      var assert$c = _assert$8;
      var path$d = _path$c;
      var ignore$3 = _ignore$2;

      var debug$c = _debug$a("eslintrc:ignore-pattern");

      function getCommonAncestorPath(sourcePaths) {
        var result = sourcePaths[0];

        for (var i = 1; i < sourcePaths.length; ++i) {
          var a = result;
          var b = sourcePaths[i];
          result = a.length < b.length ? a : b;

          for (var j = 0, lastSepPos = 0; j < a.length && j < b.length; ++j) {
            if (a[j] !== b[j]) {
              result = a.slice(0, lastSepPos);
              break;
            }

            if (a[j] === path$d.sep) {
              lastSepPos = j;
            }
          }
        }

        var resolvedResult = result || path$d.sep;

        if (resolvedResult && resolvedResult.endsWith(":") && process$c.platform === "win32") {
          resolvedResult += path$d.sep;
        }

        return resolvedResult;
      }

      function relative(from, to) {
        var relPath = path$d.relative(from, to);

        if (path$d.sep === "/") {
          return relPath;
        }

        return relPath.split(path$d.sep).join("/");
      }

      function dirSuffix(filePath) {
        var isDir = filePath.endsWith(path$d.sep) || process$c.platform === "win32" && filePath.endsWith("/");
        return isDir ? "/" : "";
      }

      var DefaultPatterns = Object.freeze(["/**/node_modules/*"]);
      var DotPatterns = Object.freeze([".*", "!.eslintrc.*", "!../"]);

      var IgnorePattern$2$2 = /*#__PURE__*/function () {
        _createClass(IgnorePattern$2, null, [{
          key: "createDefaultIgnore",
          value: function createDefaultIgnore(cwd) {
            return this.createIgnore([new IgnorePattern$2(DefaultPatterns, cwd)]);
          }
        }, {
          key: "createIgnore",
          value: function createIgnore(ignorePatterns) {
            var _ref;

            debug$c("Create with: %o", ignorePatterns);
            var basePath = getCommonAncestorPath(ignorePatterns.map(function (p) {
              return p.basePath;
            }));

            var patterns = (_ref = []).concat.apply(_ref, _toConsumableArray(ignorePatterns.map(function (p) {
              return p.getPatternsRelativeTo(basePath);
            })));

            var ig = ignore$3().add([].concat(_toConsumableArray(DotPatterns), _toConsumableArray(patterns)));
            var dotIg = ignore$3().add(patterns);
            debug$c("  processed: %o", {
              basePath: basePath,
              patterns: patterns
            });
            return Object.assign(function (filePath) {
              var dot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
              assert$c(path$d.isAbsolute(filePath), "'filePath' should be an absolute path.");
              var relPathRaw = relative(basePath, filePath);
              var relPath = relPathRaw && relPathRaw + dirSuffix(filePath);
              var adoptedIg = dot ? dotIg : ig;
              var result = relPath !== "" && adoptedIg.ignores(relPath);
              debug$c("Check", {
                filePath: filePath,
                dot: dot,
                relativePath: relPath,
                result: result
              });
              return result;
            }, {
              basePath: basePath,
              patterns: patterns
            });
          }
        }, {
          key: "DefaultPatterns",
          get: function get() {
            return DefaultPatterns;
          }
        }]);

        function IgnorePattern$2(patterns, basePath) {
          _classCallCheck(this, IgnorePattern$2);

          assert$c(path$d.isAbsolute(basePath), "'basePath' should be an absolute path.");
          this.patterns = patterns;
          this.basePath = basePath;
          this.loose = false;
        }

        _createClass(IgnorePattern$2, [{
          key: "getPatternsRelativeTo",
          value: function getPatternsRelativeTo(newBasePath) {
            assert$c(path$d.isAbsolute(newBasePath), "'newBasePath' should be an absolute path.");
            var basePath = this.basePath,
                loose = this.loose,
                patterns = this.patterns;

            if (newBasePath === basePath) {
              return patterns;
            }

            var prefix = "/".concat(relative(newBasePath, basePath));
            return patterns.map(function (pattern) {
              var negative = pattern.startsWith("!");
              var head = negative ? "!" : "";
              var body = negative ? pattern.slice(1) : pattern;

              if (body.startsWith("/") || body.startsWith("../")) {
                return "".concat(head).concat(prefix).concat(body);
              }

              return loose ? pattern : "".concat(head).concat(prefix, "/**/").concat(body);
            });
          }
        }]);

        return IgnorePattern$2;
      }();

      exports$2$k = {
        IgnorePattern: IgnorePattern$2$2
      };
      var _ignorePattern = exports$2$k;
      var exports$1$J = {};
      var IgnorePattern$1$2 = _ignorePattern.IgnorePattern;

      function startsWith(xs, ys) {
        return xs.length >= ys.length && ys.every(function (y, i) {
          return y === xs[i];
        });
      }

      var ExtractedConfig$1$1 = /*#__PURE__*/function () {
        function ExtractedConfig$1() {
          _classCallCheck(this, ExtractedConfig$1);

          this.configNameOfNoInlineConfig = "";
          this.env = {};
          this.globals = {};
          this.ignores = void 0;
          this.noInlineConfig = void 0;
          this.parser = null;
          this.parserOptions = {};
          this.plugins = {};
          this.processor = null;
          this.reportUnusedDisableDirectives = void 0;
          this.rules = {};
          this.settings = {};
        }

        _createClass(ExtractedConfig$1, [{
          key: "toCompatibleObjectAsConfigFileContent",
          value: function toCompatibleObjectAsConfigFileContent() {
            this.configNameOfNoInlineConfig;
                this.processor;
                var ignores = this.ignores,
                config = _objectWithoutProperties(this, ["configNameOfNoInlineConfig", "processor", "ignores"]);

            config.parser = config.parser && config.parser.filePath;
            config.plugins = Object.keys(config.plugins).filter(Boolean).reverse();
            config.ignorePatterns = ignores ? ignores.patterns : [];

            if (startsWith(config.ignorePatterns, IgnorePattern$1$2.DefaultPatterns)) {
              config.ignorePatterns = config.ignorePatterns.slice(IgnorePattern$1$2.DefaultPatterns.length);
            }

            return config;
          }
        }]);

        return ExtractedConfig$1;
      }();

      exports$1$J = {
        ExtractedConfig: ExtractedConfig$1$1
      };
      var _extractedConfig = exports$1$J;
      var exports$5v = {};
      var ExtractedConfig$2 = _extractedConfig.ExtractedConfig;
      var IgnorePattern$4 = _ignorePattern.IgnorePattern;
      var internalSlotsMap$4 = new ( /*#__PURE__*/function (_WeakMap) {
        _inherits$1(_class, _WeakMap);

        var _super = _createSuper(_class);

        function _class() {
          _classCallCheck(this, _class);

          return _super.apply(this, arguments);
        }

        _createClass(_class, [{
          key: "get",
          value: function get(key) {
            var value = _get(_getPrototypeOf(_class.prototype), "get", this).call(this, key);

            if (!value) {
              value = {
                cache: new Map(),
                envMap: null,
                processorMap: null,
                ruleMap: null
              };

              _get(_getPrototypeOf(_class.prototype), "set", this).call(this, key, value);
            }

            return value;
          }
        }]);

        return _class;
      }( /*#__PURE__*/_wrapNativeSuper(WeakMap)))();

      function getMatchedIndices(elements, filePath) {
        var indices = [];

        for (var i = elements.length - 1; i >= 0; --i) {
          var element = elements[i];

          if (!element.criteria || filePath && element.criteria.test(filePath)) {
            indices.push(i);
          }
        }

        return indices;
      }

      function isNonNullObject(x) {
        return _typeof(x) === "object" && x !== null;
      }

      function mergeWithoutOverwrite(target, source) {
        if (!isNonNullObject(source)) {
          return;
        }

        for (var _i = 0, _Object$keys = Object.keys(source); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];

          if (key === "__proto__") {
            continue;
          }

          if (isNonNullObject(target[key])) {
            mergeWithoutOverwrite(target[key], source[key]);
          } else if (target[key] === void 0) {
            if (isNonNullObject(source[key])) {
              target[key] = Array.isArray(source[key]) ? [] : {};
              mergeWithoutOverwrite(target[key], source[key]);
            } else if (source[key] !== void 0) {
              target[key] = source[key];
            }
          }
        }
      }

      var PluginConflictError = /*#__PURE__*/function (_Error) {
        _inherits$1(PluginConflictError, _Error);

        var _super2 = _createSuper(PluginConflictError);

        function PluginConflictError(pluginId, plugins) {
          var _this;

          _classCallCheck(this, PluginConflictError);

          _this = _super2.call(this, "Plugin \"".concat(pluginId, "\" was conflicted between ").concat(plugins.map(function (p) {
            return "\"".concat(p.importerName, "\"");
          }).join(" and "), "."));
          _this.messageTemplate = "plugin-conflict";
          _this.messageData = {
            pluginId: pluginId,
            plugins: plugins
          };
          return _this;
        }

        return PluginConflictError;
      }( /*#__PURE__*/_wrapNativeSuper(Error));

      function mergePlugins(target, source) {
        if (!isNonNullObject(source)) {
          return;
        }

        for (var _i2 = 0, _Object$keys2 = Object.keys(source); _i2 < _Object$keys2.length; _i2++) {
          var key = _Object$keys2[_i2];

          if (key === "__proto__") {
            continue;
          }

          var targetValue = target[key];
          var sourceValue = source[key];

          if (targetValue === void 0) {
            if (sourceValue.error) {
              throw sourceValue.error;
            }

            target[key] = sourceValue;
          } else if (sourceValue.filePath !== targetValue.filePath) {
            throw new PluginConflictError(key, [{
              filePath: targetValue.filePath,
              importerName: targetValue.importerName
            }, {
              filePath: sourceValue.filePath,
              importerName: sourceValue.importerName
            }]);
          }
        }
      }

      function mergeRuleConfigs(target, source) {
        if (!isNonNullObject(source)) {
          return;
        }

        for (var _i3 = 0, _Object$keys3 = Object.keys(source); _i3 < _Object$keys3.length; _i3++) {
          var key = _Object$keys3[_i3];

          if (key === "__proto__") {
            continue;
          }

          var targetDef = target[key];
          var sourceDef = source[key];

          if (targetDef === void 0) {
            if (Array.isArray(sourceDef)) {
              target[key] = _toConsumableArray(sourceDef);
            } else {
              target[key] = [sourceDef];
            }
          } else if (targetDef.length === 1 && Array.isArray(sourceDef) && sourceDef.length >= 2) {
            targetDef.push.apply(targetDef, _toConsumableArray(sourceDef.slice(1)));
          }
        }
      }

      function createConfig(instance, indices) {
        var config = new ExtractedConfig$2();
        var ignorePatterns = [];

        var _iterator = _createForOfIteratorHelper(indices),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var index = _step.value;
            var element = instance[index];

            if (!config.parser && element.parser) {
              if (element.parser.error) {
                throw element.parser.error;
              }

              config.parser = element.parser;
            }

            if (!config.processor && element.processor) {
              config.processor = element.processor;
            }

            if (config.noInlineConfig === void 0 && element.noInlineConfig !== void 0) {
              config.noInlineConfig = element.noInlineConfig;
              config.configNameOfNoInlineConfig = element.name;
            }

            if (config.reportUnusedDisableDirectives === void 0 && element.reportUnusedDisableDirectives !== void 0) {
              config.reportUnusedDisableDirectives = element.reportUnusedDisableDirectives;
            }

            if (element.ignorePattern) {
              ignorePatterns.push(element.ignorePattern);
            }

            mergeWithoutOverwrite(config.env, element.env);
            mergeWithoutOverwrite(config.globals, element.globals);
            mergeWithoutOverwrite(config.parserOptions, element.parserOptions);
            mergeWithoutOverwrite(config.settings, element.settings);
            mergePlugins(config.plugins, element.plugins);
            mergeRuleConfigs(config.rules, element.rules);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (ignorePatterns.length > 0) {
          config.ignores = IgnorePattern$4.createIgnore(ignorePatterns.reverse());
        }

        return config;
      }

      function collect(pluginId, defs, map, normalize) {
        if (defs) {
          var prefix = pluginId && "".concat(pluginId, "/");

          for (var _i4 = 0, _Object$entries = Object.entries(defs); _i4 < _Object$entries.length; _i4++) {
            var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),
                key = _Object$entries$_i[0],
                value = _Object$entries$_i[1];

            map.set("".concat(prefix).concat(key), normalize ? normalize(value) : value);
          }
        }
      }

      function normalizePluginRule(rule) {
        return typeof rule === "function" ? {
          create: rule
        } : rule;
      }

      function deleteMutationMethods(map) {
        Object.defineProperties(map, {
          clear: {
            configurable: true,
            value: void 0
          },
          "delete": {
            configurable: true,
            value: void 0
          },
          set: {
            configurable: true,
            value: void 0
          }
        });
      }

      function initPluginMemberMaps(elements, slots) {
        var processed = new Set();
        slots.envMap = new Map();
        slots.processorMap = new Map();
        slots.ruleMap = new Map();

        var _iterator2 = _createForOfIteratorHelper(elements),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var element = _step2.value;

            if (!element.plugins) {
              continue;
            }

            for (var _i5 = 0, _Object$entries2 = Object.entries(element.plugins); _i5 < _Object$entries2.length; _i5++) {
              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i5], 2),
                  pluginId = _Object$entries2$_i[0],
                  value = _Object$entries2$_i[1];

              var plugin = value.definition;

              if (!plugin || processed.has(pluginId)) {
                continue;
              }

              processed.add(pluginId);
              collect(pluginId, plugin.environments, slots.envMap);
              collect(pluginId, plugin.processors, slots.processorMap);
              collect(pluginId, plugin.rules, slots.ruleMap, normalizePluginRule);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        deleteMutationMethods(slots.envMap);
        deleteMutationMethods(slots.processorMap);
        deleteMutationMethods(slots.ruleMap);
      }

      function ensurePluginMemberMaps(instance) {
        var slots = internalSlotsMap$4.get(instance);

        if (!slots.ruleMap) {
          initPluginMemberMaps(instance, slots);
        }

        return slots;
      }

      var ConfigArray$4 = /*#__PURE__*/function (_Array) {
        _inherits$1(ConfigArray, _Array);

        var _super3 = _createSuper(ConfigArray);

        function ConfigArray() {
          _classCallCheck(this, ConfigArray);

          return _super3.apply(this, arguments);
        }

        _createClass(ConfigArray, [{
          key: "isRoot",
          value: function isRoot() {
            for (var i = this.length - 1; i >= 0; --i) {
              var root = this[i].root;

              if (typeof root === "boolean") {
                return root;
              }
            }

            return false;
          }
        }, {
          key: "extractConfig",
          value: function extractConfig(filePath) {
            var _internalSlotsMap$get = internalSlotsMap$4.get(this),
                cache = _internalSlotsMap$get.cache;

            var indices = getMatchedIndices(this, filePath);
            var cacheKey = indices.join(",");

            if (!cache.has(cacheKey)) {
              cache.set(cacheKey, createConfig(this, indices));
            }

            return cache.get(cacheKey);
          }
        }, {
          key: "isAdditionalTargetPath",
          value: function isAdditionalTargetPath(filePath) {
            var _iterator3 = _createForOfIteratorHelper(this),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _step3$value = _step3.value,
                    criteria = _step3$value.criteria,
                    type = _step3$value.type;

                if (type === "config" && criteria && !criteria.endsWithWildcard && criteria.test(filePath)) {
                  return true;
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            return false;
          }
        }, {
          key: "pluginEnvironments",
          get: function get() {
            return ensurePluginMemberMaps(this).envMap;
          }
        }, {
          key: "pluginProcessors",
          get: function get() {
            return ensurePluginMemberMaps(this).processorMap;
          }
        }, {
          key: "pluginRules",
          get: function get() {
            return ensurePluginMemberMaps(this).ruleMap;
          }
        }]);

        return ConfigArray;
      }( /*#__PURE__*/_wrapNativeSuper(Array));

      var exportObject = {
        ConfigArray: ConfigArray$4,
        getUsedExtractedConfigs: function getUsedExtractedConfigs(instance) {
          var _internalSlotsMap$get2 = internalSlotsMap$4.get(instance),
              cache = _internalSlotsMap$get2.cache;

          return Array.from(cache.values());
        }
      };
      exports$5v = exportObject;
      var _configArray$1 = exports$5v;

      var exports$5u = {};
      exports$5u = function (xs, fn) {
        var res = [];
        for (var i = 0; i < xs.length; i++) {
          var x = fn(xs[i], i);
          if (isArray$2(x))
            res.push.apply(res, x);
          else
            res.push(x);
        }
        return res;
      };
      var isArray$2 = Array.isArray || function (xs) {
        return Object.prototype.toString.call(xs) === "[object Array]";
      };
      var exports$1$I = exports$5u;

      var exports$5t = {};
      exports$5t = balanced$1;
      function balanced$1(a, b, str) {
        if (a instanceof RegExp)
          a = maybeMatch(a, str);
        if (b instanceof RegExp)
          b = maybeMatch(b, str);
        var r = range$1(a, b, str);
        return r && {
          start: r[0],
          end: r[1],
          pre: str.slice(0, r[0]),
          body: str.slice(r[0] + a.length, r[1]),
          post: str.slice(r[1] + b.length)
        };
      }
      function maybeMatch(reg, str) {
        var m = str.match(reg);
        return m ? m[0] : null;
      }
      balanced$1.range = range$1;
      function range$1(a, b, str) {
        var begs, beg, left, right, result;
        var ai = str.indexOf(a);
        var bi = str.indexOf(b, ai + 1);
        var i = ai;
        if (ai >= 0 && bi > 0) {
          if (a === b) {
            return [
              ai,
              bi
            ];
          }
          begs = [];
          left = str.length;
          while (i >= 0 && !result) {
            if (i == ai) {
              begs.push(i);
              ai = str.indexOf(a, i + 1);
            } else if (begs.length == 1) {
              result = [
                begs.pop(),
                bi
              ];
            } else {
              beg = begs.pop();
              if (beg < left) {
                left = beg;
                right = bi;
              }
              bi = str.indexOf(b, i + 1);
            }
            i = ai < bi && ai >= 0 ? ai : bi;
          }
          if (begs.length) {
            result = [
              left,
              right
            ];
          }
        }
        return result;
      }
      var exports$1$H = exports$5t;

      var exports$5s = {};
      var concatMap$1 = exports$1$I;
      var balanced = exports$1$H;
      exports$5s = expandTop;
      var escSlash = "\0SLASH" + Math.random() + "\0";
      var escOpen = "\0OPEN" + Math.random() + "\0";
      var escClose = "\0CLOSE" + Math.random() + "\0";
      var escComma = "\0COMMA" + Math.random() + "\0";
      var escPeriod = "\0PERIOD" + Math.random() + "\0";
      function numeric(str) {
        return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
      }
      function escapeBraces(str) {
        return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
      }
      function unescapeBraces(str) {
        return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
      }
      function parseCommaParts(str) {
        if (!str)
          return [""];
        var parts = [];
        var m = balanced("{", "}", str);
        if (!m)
          return str.split(",");
        var pre = m.pre;
        var body = m.body;
        var post = m.post;
        var p = pre.split(",");
        p[p.length - 1] += "{" + body + "}";
        var postParts = parseCommaParts(post);
        if (post.length) {
          p[p.length - 1] += postParts.shift();
          p.push.apply(p, postParts);
        }
        parts.push.apply(parts, p);
        return parts;
      }
      function expandTop(str) {
        if (!str)
          return [];
        if (str.substr(0, 2) === "{}") {
          str = "\\{\\}" + str.substr(2);
        }
        return expand$1(escapeBraces(str), true).map(unescapeBraces);
      }
      function embrace(str) {
        return "{" + str + "}";
      }
      function isPadded(el) {
        return /^-?0\d/.test(el);
      }
      function lte(i, y) {
        return i <= y;
      }
      function gte(i, y) {
        return i >= y;
      }
      function expand$1(str, isTop) {
        var expansions = [];
        var m = balanced("{", "}", str);
        if (!m || /\$$/.test(m.pre))
          return [str];
        var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
        var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
        var isSequence = isNumericSequence || isAlphaSequence;
        var isOptions = m.body.indexOf(",") >= 0;
        if (!isSequence && !isOptions) {
          if (m.post.match(/,.*\}/)) {
            str = m.pre + "{" + m.body + escClose + m.post;
            return expand$1(str);
          }
          return [str];
        }
        var n;
        if (isSequence) {
          n = m.body.split(/\.\./);
        } else {
          n = parseCommaParts(m.body);
          if (n.length === 1) {
            n = expand$1(n[0], false).map(embrace);
            if (n.length === 1) {
              var post = m.post.length ? expand$1(m.post, false) : [""];
              return post.map(function (p) {
                return m.pre + n[0] + p;
              });
            }
          }
        }
        var pre = m.pre;
        var post = m.post.length ? expand$1(m.post, false) : [""];
        var N;
        if (isSequence) {
          var x = numeric(n[0]);
          var y = numeric(n[1]);
          var width = Math.max(n[0].length, n[1].length);
          var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
          var test = lte;
          var reverse = y < x;
          if (reverse) {
            incr *= -1;
            test = gte;
          }
          var pad = n.some(isPadded);
          N = [];
          for (var i = x; test(i, y); i += incr) {
            var c;
            if (isAlphaSequence) {
              c = String.fromCharCode(i);
              if (c === "\\")
                c = "";
            } else {
              c = String(i);
              if (pad) {
                var need = width - c.length;
                if (need > 0) {
                  var z = new Array(need + 1).join("0");
                  if (i < 0)
                    c = "-" + z + c.slice(1);
                  else
                    c = z + c;
                }
              }
            }
            N.push(c);
          }
        } else {
          N = concatMap$1(n, function (el) {
            return expand$1(el, false);
          });
        }
        for (var j = 0; j < N.length; j++) {
          for (var k = 0; k < post.length; k++) {
            var expansion = pre + N[j] + post[k];
            if (!isTop || isSequence || expansion)
              expansions.push(expansion);
          }
        }
        return expansions;
      }
      var exports$1$G = exports$5s;

      var _braceExpansion2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$G
      });

      var _path$b = "default" in _path2 ? exports$5S : _path2;
      var _braceExpansion = "default" in _braceExpansion2 ? exports$1$G : _braceExpansion2;
      var _global$f = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$5r = {};
      exports$5r = minimatch;
      minimatch.Minimatch = Minimatch$2;
      var path$c = (function () {
        try {
          return _path$b;
        } catch (e) {
        }
      }()) || { sep: "/" };
      minimatch.sep = path$c.sep;
      var GLOBSTAR = minimatch.GLOBSTAR = Minimatch$2.GLOBSTAR = {};
      var expand = _braceExpansion;
      var plTypes = {
        "!": {
          open: "(?:(?!(?:",
          close: "))[^/]*?)"
        },
        "?": {
          open: "(?:",
          close: ")?"
        },
        "+": {
          open: "(?:",
          close: ")+"
        },
        "*": {
          open: "(?:",
          close: ")*"
        },
        "@": {
          open: "(?:",
          close: ")"
        }
      };
      var qmark = "[^/]";
      var star = qmark + "*?";
      var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
      var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
      var reSpecials = charSet("().*{}+?[]^$\\!");
      function charSet(s) {
        return s.split("").reduce(function (set, c) {
          set[c] = true;
          return set;
        }, {});
      }
      var slashSplit = /\/+/;
      minimatch.filter = filter$2;
      function filter$2(pattern, options) {
        options = options || {};
        return function (p, i, list) {
          return minimatch(p, pattern, options);
        };
      }
      function ext(a, b) {
        b = b || {};
        var t = {};
        Object.keys(a).forEach(function (k) {
          t[k] = a[k];
        });
        Object.keys(b).forEach(function (k) {
          t[k] = b[k];
        });
        return t;
      }
      minimatch.defaults = function (def) {
        if (!def || typeof def !== "object" || !Object.keys(def).length) {
          return minimatch;
        }
        var orig = minimatch;
        var m = function minimatch(p, pattern, options) {
          return orig(p, pattern, ext(def, options));
        };
        m.Minimatch = function Minimatch(pattern, options) {
          return new orig.Minimatch(pattern, ext(def, options));
        };
        m.Minimatch.defaults = function defaults(options) {
          return orig.defaults(ext(def, options)).Minimatch;
        };
        m.filter = function filter(pattern, options) {
          return orig.filter(pattern, ext(def, options));
        };
        m.defaults = function defaults(options) {
          return orig.defaults(ext(def, options));
        };
        m.makeRe = function makeRe(pattern, options) {
          return orig.makeRe(pattern, ext(def, options));
        };
        m.braceExpand = function braceExpand(pattern, options) {
          return orig.braceExpand(pattern, ext(def, options));
        };
        m.match = function (list, pattern, options) {
          return orig.match(list, pattern, ext(def, options));
        };
        return m;
      };
      Minimatch$2.defaults = function (def) {
        return minimatch.defaults(def).Minimatch;
      };
      function minimatch(p, pattern, options) {
        assertValidPattern(pattern);
        if (!options)
          options = {};
        if (!options.nocomment && pattern.charAt(0) === "#") {
          return false;
        }
        return new Minimatch$2(pattern, options).match(p);
      }
      function Minimatch$2(pattern, options) {
        if (!((this || _global$f) instanceof Minimatch$2)) {
          return new Minimatch$2(pattern, options);
        }
        assertValidPattern(pattern);
        if (!options)
          options = {};
        pattern = pattern.trim();
        if (!options.allowWindowsEscape && path$c.sep !== "/") {
          pattern = pattern.split(path$c.sep).join("/");
        }
        (this || _global$f).options = options;
        (this || _global$f).set = [];
        (this || _global$f).pattern = pattern;
        (this || _global$f).regexp = null;
        (this || _global$f).negate = false;
        (this || _global$f).comment = false;
        (this || _global$f).empty = false;
        (this || _global$f).partial = !!options.partial;
        this.make();
      }
      Minimatch$2.prototype.debug = function () {
      };
      Minimatch$2.prototype.make = make;
      function make() {
        var pattern = (this || _global$f).pattern;
        var options = (this || _global$f).options;
        if (!options.nocomment && pattern.charAt(0) === "#") {
          (this || _global$f).comment = true;
          return;
        }
        if (!pattern) {
          (this || _global$f).empty = true;
          return;
        }
        this.parseNegate();
        var set = (this || _global$f).globSet = this.braceExpand();
        if (options.debug)
          (this || _global$f).debug = function debug() {
            console.error.apply(console, arguments);
          };
        this.debug((this || _global$f).pattern, set);
        set = (this || _global$f).globParts = set.map(function (s) {
          return s.split(slashSplit);
        });
        this.debug((this || _global$f).pattern, set);
        set = set.map(function (s, si, set) {
          return s.map((this || _global$f).parse, this || _global$f);
        }, this || _global$f);
        this.debug((this || _global$f).pattern, set);
        set = set.filter(function (s) {
          return s.indexOf(false) === -1;
        });
        this.debug((this || _global$f).pattern, set);
        (this || _global$f).set = set;
      }
      Minimatch$2.prototype.parseNegate = parseNegate;
      function parseNegate() {
        var pattern = (this || _global$f).pattern;
        var negate = false;
        var options = (this || _global$f).options;
        var negateOffset = 0;
        if (options.nonegate)
          return;
        for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
          negate = !negate;
          negateOffset++;
        }
        if (negateOffset)
          (this || _global$f).pattern = pattern.substr(negateOffset);
        (this || _global$f).negate = negate;
      }
      minimatch.braceExpand = function (pattern, options) {
        return braceExpand(pattern, options);
      };
      Minimatch$2.prototype.braceExpand = braceExpand;
      function braceExpand(pattern, options) {
        if (!options) {
          if ((this || _global$f) instanceof Minimatch$2) {
            options = (this || _global$f).options;
          } else {
            options = {};
          }
        }
        pattern = typeof pattern === "undefined" ? (this || _global$f).pattern : pattern;
        assertValidPattern(pattern);
        if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
          return [pattern];
        }
        return expand(pattern);
      }
      var MAX_PATTERN_LENGTH = 1024 * 64;
      var assertValidPattern = function (pattern) {
        if (typeof pattern !== "string") {
          throw new TypeError("invalid pattern");
        }
        if (pattern.length > MAX_PATTERN_LENGTH) {
          throw new TypeError("pattern is too long");
        }
      };
      Minimatch$2.prototype.parse = parse$6;
      var SUBPARSE = {};
      function parse$6(pattern, isSub) {
        assertValidPattern(pattern);
        var options = (this || _global$f).options;
        if (pattern === "**") {
          if (!options.noglobstar)
            return GLOBSTAR;
          else
            pattern = "*";
        }
        if (pattern === "")
          return "";
        var re = "";
        var hasMagic = !!options.nocase;
        var escaping = false;
        var patternListStack = [];
        var negativeLists = [];
        var stateChar;
        var inClass = false;
        var reClassStart = -1;
        var classStart = -1;
        var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
        var self = this || _global$f;
        function clearStateChar() {
          if (stateChar) {
            switch (stateChar) {
            case "*":
              re += star;
              hasMagic = true;
              break;
            case "?":
              re += qmark;
              hasMagic = true;
              break;
            default:
              re += "\\" + stateChar;
              break;
            }
            self.debug("clearStateChar %j %j", stateChar, re);
            stateChar = false;
          }
        }
        for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
          this.debug("%s\t%s %s %j", pattern, i, re, c);
          if (escaping && reSpecials[c]) {
            re += "\\" + c;
            escaping = false;
            continue;
          }
          switch (c) {
          case "/": {
              return false;
            }
          case "\\":
            clearStateChar();
            escaping = true;
            continue;
          case "?":
          case "*":
          case "+":
          case "@":
          case "!":
            this.debug("%s\t%s %s %j <-- stateChar", pattern, i, re, c);
            if (inClass) {
              this.debug("  in class");
              if (c === "!" && i === classStart + 1)
                c = "^";
              re += c;
              continue;
            }
            self.debug("call clearStateChar %j", stateChar);
            clearStateChar();
            stateChar = c;
            if (options.noext)
              clearStateChar();
            continue;
          case "(":
            if (inClass) {
              re += "(";
              continue;
            }
            if (!stateChar) {
              re += "\\(";
              continue;
            }
            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
            this.debug("plType %j %j", stateChar, re);
            stateChar = false;
            continue;
          case ")":
            if (inClass || !patternListStack.length) {
              re += "\\)";
              continue;
            }
            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            re += pl.close;
            if (pl.type === "!") {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
            continue;
          case "|":
            if (inClass || !patternListStack.length || escaping) {
              re += "\\|";
              escaping = false;
              continue;
            }
            clearStateChar();
            re += "|";
            continue;
          case "[":
            clearStateChar();
            if (inClass) {
              re += "\\" + c;
              continue;
            }
            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
            continue;
          case "]":
            if (i === classStart + 1 || !inClass) {
              re += "\\" + c;
              escaping = false;
              continue;
            }
            var cs = pattern.substring(classStart + 1, i);
            try {
              RegExp("[" + cs + "]");
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
            hasMagic = true;
            inClass = false;
            re += c;
            continue;
          default:
            clearStateChar();
            if (escaping) {
              escaping = false;
            } else if (reSpecials[c] && !(c === "^" && inClass)) {
              re += "\\";
            }
            re += c;
          }
        }
        if (inClass) {
          cs = pattern.substr(classStart + 1);
          sp = this.parse(cs, SUBPARSE);
          re = re.substr(0, reClassStart) + "\\[" + sp[0];
          hasMagic = hasMagic || sp[1];
        }
        for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
          var tail = re.slice(pl.reStart + pl.open.length);
          this.debug("setting tail", re, pl);
          tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
            if (!$2) {
              $2 = "\\";
            }
            return $1 + $1 + $2 + "|";
          });
          this.debug("tail=%j\n   %s", tail, tail, pl, re);
          var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
          hasMagic = true;
          re = re.slice(0, pl.reStart) + t + "\\(" + tail;
        }
        clearStateChar();
        if (escaping) {
          re += "\\\\";
        }
        var addPatternStart = false;
        switch (re.charAt(0)) {
        case "[":
        case ".":
        case "(":
          addPatternStart = true;
        }
        for (var n = negativeLists.length - 1; n > -1; n--) {
          var nl = negativeLists[n];
          var nlBefore = re.slice(0, nl.reStart);
          var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
          var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
          var nlAfter = re.slice(nl.reEnd);
          nlLast += nlAfter;
          var openParensBefore = nlBefore.split("(").length - 1;
          var cleanAfter = nlAfter;
          for (i = 0; i < openParensBefore; i++) {
            cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
          }
          nlAfter = cleanAfter;
          var dollar = "";
          if (nlAfter === "" && isSub !== SUBPARSE) {
            dollar = "$";
          }
          var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
          re = newRe;
        }
        if (re !== "" && hasMagic) {
          re = "(?=.)" + re;
        }
        if (addPatternStart) {
          re = patternStart + re;
        }
        if (isSub === SUBPARSE) {
          return [
            re,
            hasMagic
          ];
        }
        if (!hasMagic) {
          return globUnescape(pattern);
        }
        var flags = options.nocase ? "i" : "";
        try {
          var regExp = new RegExp("^" + re + "$", flags);
        } catch (er) {
          return new RegExp("$.");
        }
        regExp._glob = pattern;
        regExp._src = re;
        return regExp;
      }
      minimatch.makeRe = function (pattern, options) {
        return new Minimatch$2(pattern, options || {}).makeRe();
      };
      Minimatch$2.prototype.makeRe = makeRe;
      function makeRe() {
        if ((this || _global$f).regexp || (this || _global$f).regexp === false)
          return (this || _global$f).regexp;
        var set = (this || _global$f).set;
        if (!set.length) {
          (this || _global$f).regexp = false;
          return (this || _global$f).regexp;
        }
        var options = (this || _global$f).options;
        var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
        var flags = options.nocase ? "i" : "";
        var re = set.map(function (pattern) {
          return pattern.map(function (p) {
            return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
          }).join("\\/");
        }).join("|");
        re = "^(?:" + re + ")$";
        if ((this || _global$f).negate)
          re = "^(?!" + re + ").*$";
        try {
          (this || _global$f).regexp = new RegExp(re, flags);
        } catch (ex) {
          (this || _global$f).regexp = false;
        }
        return (this || _global$f).regexp;
      }
      minimatch.match = function (list, pattern, options) {
        options = options || {};
        var mm = new Minimatch$2(pattern, options);
        list = list.filter(function (f) {
          return mm.match(f);
        });
        if (mm.options.nonull && !list.length) {
          list.push(pattern);
        }
        return list;
      };
      Minimatch$2.prototype.match = function match(f, partial) {
        if (typeof partial === "undefined")
          partial = (this || _global$f).partial;
        this.debug("match", f, (this || _global$f).pattern);
        if ((this || _global$f).comment)
          return false;
        if ((this || _global$f).empty)
          return f === "";
        if (f === "/" && partial)
          return true;
        var options = (this || _global$f).options;
        if (path$c.sep !== "/") {
          f = f.split(path$c.sep).join("/");
        }
        f = f.split(slashSplit);
        this.debug((this || _global$f).pattern, "split", f);
        var set = (this || _global$f).set;
        this.debug((this || _global$f).pattern, "set", set);
        var filename;
        var i;
        for (i = f.length - 1; i >= 0; i--) {
          filename = f[i];
          if (filename)
            break;
        }
        for (i = 0; i < set.length; i++) {
          var pattern = set[i];
          var file = f;
          if (options.matchBase && pattern.length === 1) {
            file = [filename];
          }
          var hit = this.matchOne(file, pattern, partial);
          if (hit) {
            if (options.flipNegate)
              return true;
            return !(this || _global$f).negate;
          }
        }
        if (options.flipNegate)
          return false;
        return (this || _global$f).negate;
      };
      Minimatch$2.prototype.matchOne = function (file, pattern, partial) {
        var options = (this || _global$f).options;
        this.debug("matchOne", {
          "this": this || _global$f,
          file: file,
          pattern: pattern
        });
        this.debug("matchOne", file.length, pattern.length);
        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
          this.debug("matchOne loop");
          var p = pattern[pi];
          var f = file[fi];
          this.debug(pattern, p, f);
          if (p === false)
            return false;
          if (p === GLOBSTAR) {
            this.debug("GLOBSTAR", [
              pattern,
              p,
              f
            ]);
            var fr = fi;
            var pr = pi + 1;
            if (pr === pl) {
              this.debug("** at the end");
              for (; fi < fl; fi++) {
                if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                  return false;
              }
              return true;
            }
            while (fr < fl) {
              var swallowee = file[fr];
              this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
              if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                this.debug("globstar found match!", fr, fl, swallowee);
                return true;
              } else {
                if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                  this.debug("dot detected!", file, fr, pattern, pr);
                  break;
                }
                this.debug("globstar swallow a segment, and continue");
                fr++;
              }
            }
            if (partial) {
              this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
              if (fr === fl)
                return true;
            }
            return false;
          }
          var hit;
          if (typeof p === "string") {
            hit = f === p;
            this.debug("string match", p, f, hit);
          } else {
            hit = f.match(p);
            this.debug("pattern match", p, f, hit);
          }
          if (!hit)
            return false;
        }
        if (fi === fl && pi === pl) {
          return true;
        } else if (fi === fl) {
          return partial;
        } else if (pi === pl) {
          return fi === fl - 1 && file[fi] === "";
        }
        throw new Error("wtf?");
      };
      function globUnescape(s) {
        return s.replace(/\\(.)/g, "$1");
      }
      function regExpEscape(s) {
        return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      }
      var exports$1$F = exports$5r;

      var _minimatch2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$F
      });

      var exports$5q = {};
      function isNothing(subject) {
        return typeof subject === "undefined" || subject === null;
      }
      function isObject$2(subject) {
        return typeof subject === "object" && subject !== null;
      }
      function toArray(sequence) {
        if (Array.isArray(sequence))
          return sequence;
        else if (isNothing(sequence))
          return [];
        return [sequence];
      }
      function extend(target, source) {
        var index, length, key, sourceKeys;
        if (source) {
          sourceKeys = Object.keys(source);
          for (index = 0, length = sourceKeys.length; index < length; index += 1) {
            key = sourceKeys[index];
            target[key] = source[key];
          }
        }
        return target;
      }
      function repeat$1(string, count) {
        var result = "", cycle;
        for (cycle = 0; cycle < count; cycle += 1) {
          result += string;
        }
        return result;
      }
      function isNegativeZero(number) {
        return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
      }
      exports$5q.isNothing = isNothing;
      exports$5q.isObject = isObject$2;
      exports$5q.toArray = toArray;
      exports$5q.repeat = repeat$1;
      exports$5q.isNegativeZero = isNegativeZero;
      exports$5q.extend = extend;
      exports$5q.isNothing; exports$5q.isObject; exports$5q.toArray; exports$5q.repeat; exports$5q.isNegativeZero; exports$5q.extend;

      var exports$5p = {};
      function YAMLException$4(reason, mark) {
        Error.call(this);
        this.name = "YAMLException";
        this.reason = reason;
        this.mark = mark;
        this.message = (this.reason || "(unknown reason)") + (this.mark ? " " + this.mark.toString() : "");
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack || "";
        }
      }
      YAMLException$4.prototype = Object.create(Error.prototype);
      YAMLException$4.prototype.constructor = YAMLException$4;
      YAMLException$4.prototype.toString = function toString(compact) {
        var result = this.name + ": ";
        result += this.reason || "(unknown reason)";
        if (!compact && this.mark) {
          result += " " + this.mark.toString();
        }
        return result;
      };
      exports$5p = YAMLException$4;
      var _exception = exports$5p;

      var exports$5o = {};
      var YAMLException$3 = _exception;
      var TYPE_CONSTRUCTOR_OPTIONS = [
        "kind",
        "resolve",
        "construct",
        "instanceOf",
        "predicate",
        "represent",
        "defaultStyle",
        "styleAliases"
      ];
      var YAML_NODE_KINDS = [
        "scalar",
        "sequence",
        "mapping"
      ];
      function compileStyleAliases(map) {
        var result = {};
        if (map !== null) {
          Object.keys(map).forEach(function (style) {
            map[style].forEach(function (alias) {
              result[String(alias)] = style;
            });
          });
        }
        return result;
      }
      function Type$c(tag, options) {
        options = options || {};
        Object.keys(options).forEach(function (name) {
          if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
            throw new YAMLException$3("Unknown option \"" + name + "\" is met in definition of \"" + tag + "\" YAML type.");
          }
        });
        this.tag = tag;
        this.kind = options["kind"] || null;
        this.resolve = options["resolve"] || function () {
          return true;
        };
        this.construct = options["construct"] || function (data) {
          return data;
        };
        this.instanceOf = options["instanceOf"] || null;
        this.predicate = options["predicate"] || null;
        this.represent = options["represent"] || null;
        this.defaultStyle = options["defaultStyle"] || null;
        this.styleAliases = compileStyleAliases(options["styleAliases"] || null);
        if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
          throw new YAMLException$3("Unknown kind \"" + this.kind + "\" is specified for \"" + tag + "\" YAML type.");
        }
      }
      exports$5o = Type$c;
      var _type = exports$5o;

      var exports$5n = {};
      var common$5 = exports$5q;
      var YAMLException$2 = _exception;
      var Type$b = _type;
      function compileList(schema, name, result) {
        var exclude = [];
        schema.include.forEach(function (includedSchema) {
          result = compileList(includedSchema, name, result);
        });
        schema[name].forEach(function (currentType) {
          result.forEach(function (previousType, previousIndex) {
            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {
              exclude.push(previousIndex);
            }
          });
          result.push(currentType);
        });
        return result.filter(function (type, index) {
          return exclude.indexOf(index) === -1;
        });
      }
      function compileMap() {
        var result = {
            scalar: {},
            sequence: {},
            mapping: {},
            fallback: {}
          }, index, length;
        function collectType(type) {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
        for (index = 0, length = arguments.length; index < length; index += 1) {
          arguments[index].forEach(collectType);
        }
        return result;
      }
      function Schema$4(definition) {
        this.include = definition.include || [];
        this.implicit = definition.implicit || [];
        this.explicit = definition.explicit || [];
        this.implicit.forEach(function (type) {
          if (type.loadKind && type.loadKind !== "scalar") {
            throw new YAMLException$2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.");
          }
        });
        this.compiledImplicit = compileList(this, "implicit", []);
        this.compiledExplicit = compileList(this, "explicit", []);
        this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);
      }
      Schema$4.DEFAULT = null;
      Schema$4.create = function createSchema() {
        var schemas, types;
        switch (arguments.length) {
        case 1:
          schemas = Schema$4.DEFAULT;
          types = arguments[0];
          break;
        case 2:
          schemas = arguments[0];
          types = arguments[1];
          break;
        default:
          throw new YAMLException$2("Wrong number of arguments for Schema.create function");
        }
        schemas = common$5.toArray(schemas);
        types = common$5.toArray(types);
        if (!schemas.every(function (schema) {
            return schema instanceof Schema$4;
          })) {
          throw new YAMLException$2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");
        }
        if (!types.every(function (type) {
            return type instanceof Type$b;
          })) {
          throw new YAMLException$2("Specified list of YAML types (or a single Type object) contains a non-Type object.");
        }
        return new Schema$4({
          include: schemas,
          explicit: types
        });
      };
      exports$5n = Schema$4;
      var _schema = exports$5n;

      var exports$5m = {};
      var Type$a = _type;
      exports$5m = new Type$a("tag:yaml.org,2002:str", {
        kind: "scalar",
        construct: function (data) {
          return data !== null ? data : "";
        }
      });
      var _str = exports$5m;
      var exports$1$E = {};
      var Type$1$2 = _type;
      exports$1$E = new Type$1$2("tag:yaml.org,2002:seq", {
        kind: "sequence",
        construct: function (data) {
          return data !== null ? data : [];
        }
      });
      var _seq = exports$1$E;
      var exports$2$j = {};
      var Type$2$2 = _type;
      exports$2$j = new Type$2$2("tag:yaml.org,2002:map", {
        kind: "mapping",
        construct: function (data) {
          return data !== null ? data : {};
        }
      });
      var _map = exports$2$j;
      var exports$3$g = {};
      var Schema$3 = _schema;
      exports$3$g = new Schema$3({
        explicit: [
          _str,
          _seq,
          _map
        ]
      });
      var _failsafe = exports$3$g;

      var exports$5l = {};
      var Type$9 = _type;
      function resolveYamlNull(data) {
        if (data === null)
          return true;
        var max = data.length;
        return max === 1 && data === "~" || max === 4 && (data === "null" || data === "Null" || data === "NULL");
      }
      function constructYamlNull() {
        return null;
      }
      function isNull(object) {
        return object === null;
      }
      exports$5l = new Type$9("tag:yaml.org,2002:null", {
        kind: "scalar",
        resolve: resolveYamlNull,
        construct: constructYamlNull,
        predicate: isNull,
        represent: {
          canonical: function () {
            return "~";
          },
          lowercase: function () {
            return "null";
          },
          uppercase: function () {
            return "NULL";
          },
          camelcase: function () {
            return "Null";
          }
        },
        defaultStyle: "lowercase"
      });
      var _null = exports$5l;

      var exports$5k = {};
      var Type$8 = _type;
      function resolveYamlBoolean(data) {
        if (data === null)
          return false;
        var max = data.length;
        return max === 4 && (data === "true" || data === "True" || data === "TRUE") || max === 5 && (data === "false" || data === "False" || data === "FALSE");
      }
      function constructYamlBoolean(data) {
        return data === "true" || data === "True" || data === "TRUE";
      }
      function isBoolean(object) {
        return Object.prototype.toString.call(object) === "[object Boolean]";
      }
      exports$5k = new Type$8("tag:yaml.org,2002:bool", {
        kind: "scalar",
        resolve: resolveYamlBoolean,
        construct: constructYamlBoolean,
        predicate: isBoolean,
        represent: {
          lowercase: function (object) {
            return object ? "true" : "false";
          },
          uppercase: function (object) {
            return object ? "TRUE" : "FALSE";
          },
          camelcase: function (object) {
            return object ? "True" : "False";
          }
        },
        defaultStyle: "lowercase"
      });
      var _bool = exports$5k;

      var exports$5j = {};
      var common$4 = exports$5q;
      var Type$7 = _type;
      var YAML_FLOAT_PATTERN = new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?" + "|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?" + "|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*" + "|[-+]?\\.(?:inf|Inf|INF)" + "|\\.(?:nan|NaN|NAN))$");
      function resolveYamlFloat(data) {
        if (data === null)
          return false;
        if (!YAML_FLOAT_PATTERN.test(data) || data[data.length - 1] === "_") {
          return false;
        }
        return true;
      }
      function constructYamlFloat(data) {
        var value, sign, base, digits;
        value = data.replace(/_/g, "").toLowerCase();
        sign = value[0] === "-" ? -1 : 1;
        digits = [];
        if ("+-".indexOf(value[0]) >= 0) {
          value = value.slice(1);
        }
        if (value === ".inf") {
          return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;
        } else if (value === ".nan") {
          return NaN;
        } else if (value.indexOf(":") >= 0) {
          value.split(":").forEach(function (v) {
            digits.unshift(parseFloat(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function (d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseFloat(value, 10);
      }
      var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
      function representYamlFloat(object, style) {
        var res;
        if (isNaN(object)) {
          switch (style) {
          case "lowercase":
            return ".nan";
          case "uppercase":
            return ".NAN";
          case "camelcase":
            return ".NaN";
          }
        } else if (Number.POSITIVE_INFINITY === object) {
          switch (style) {
          case "lowercase":
            return ".inf";
          case "uppercase":
            return ".INF";
          case "camelcase":
            return ".Inf";
          }
        } else if (Number.NEGATIVE_INFINITY === object) {
          switch (style) {
          case "lowercase":
            return "-.inf";
          case "uppercase":
            return "-.INF";
          case "camelcase":
            return "-.Inf";
          }
        } else if (common$4.isNegativeZero(object)) {
          return "-0.0";
        }
        res = object.toString(10);
        return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
      }
      function isFloat(object) {
        return Object.prototype.toString.call(object) === "[object Number]" && (object % 1 !== 0 || common$4.isNegativeZero(object));
      }
      exports$5j = new Type$7("tag:yaml.org,2002:float", {
        kind: "scalar",
        resolve: resolveYamlFloat,
        construct: constructYamlFloat,
        predicate: isFloat,
        represent: representYamlFloat,
        defaultStyle: "lowercase"
      });
      var _float = exports$5j;

      var exports$5i = {};
      var common$3 = exports$5q;
      var Type$3 = _type;

      function isHexCode(c) {
        return 48 <= c && c <= 57 || 65 <= c && c <= 70 || 97 <= c && c <= 102;
      }

      function isOctCode(c) {
        return 48 <= c && c <= 55;
      }

      function isDecCode(c) {
        return 48 <= c && c <= 57;
      }

      function resolveYamlInteger(data) {
        if (data === null) return false;
        var max = data.length,
            index = 0,
            hasDigits = false,
            ch;
        if (!max) return false;
        ch = data[index];

        if (ch === "-" || ch === "+") {
          ch = data[++index];
        }

        if (ch === "0") {
          if (index + 1 === max) return true;
          ch = data[++index];

          if (ch === "b") {
            index++;

            for (; index < max; index++) {
              ch = data[index];
              if (ch === "_") continue;
              if (ch !== "0" && ch !== "1") return false;
              hasDigits = true;
            }

            return hasDigits && ch !== "_";
          }

          if (ch === "x") {
            index++;

            for (; index < max; index++) {
              ch = data[index];
              if (ch === "_") continue;
              if (!isHexCode(data.charCodeAt(index))) return false;
              hasDigits = true;
            }

            return hasDigits && ch !== "_";
          }

          for (; index < max; index++) {
            ch = data[index];
            if (ch === "_") continue;
            if (!isOctCode(data.charCodeAt(index))) return false;
            hasDigits = true;
          }

          return hasDigits && ch !== "_";
        }

        if (ch === "_") return false;

        for (; index < max; index++) {
          ch = data[index];
          if (ch === "_") continue;
          if (ch === ":") break;

          if (!isDecCode(data.charCodeAt(index))) {
            return false;
          }

          hasDigits = true;
        }

        if (!hasDigits || ch === "_") return false;
        if (ch !== ":") return true;
        return /^(:[0-5]?[0-9])+$/.test(data.slice(index));
      }

      function constructYamlInteger(data) {
        var value = data,
            sign = 1,
            ch,
            base,
            digits = [];

        if (value.indexOf("_") !== -1) {
          value = value.replace(/_/g, "");
        }

        ch = value[0];

        if (ch === "-" || ch === "+") {
          if (ch === "-") sign = -1;
          value = value.slice(1);
          ch = value[0];
        }

        if (value === "0") return 0;

        if (ch === "0") {
          if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
          if (value[1] === "x") return sign * parseInt(value, 16);
          return sign * parseInt(value, 8);
        }

        if (value.indexOf(":") !== -1) {
          value.split(":").forEach(function (v) {
            digits.unshift(parseInt(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function (d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }

        return sign * parseInt(value, 10);
      }

      function isInteger(object) {
        return Object.prototype.toString.call(object) === "[object Number]" && object % 1 === 0 && !common$3.isNegativeZero(object);
      }

      exports$5i = new Type$3("tag:yaml.org,2002:int", {
        kind: "scalar",
        resolve: resolveYamlInteger,
        construct: constructYamlInteger,
        predicate: isInteger,
        represent: {
          binary: function binary(obj) {
            return obj >= 0 ? "0b" + obj.toString(2) : "-0b" + obj.toString(2).slice(1);
          },
          octal: function octal(obj) {
            return obj >= 0 ? "0" + obj.toString(8) : "-0" + obj.toString(8).slice(1);
          },
          decimal: function decimal(obj) {
            return obj.toString(10);
          },
          hexadecimal: function hexadecimal(obj) {
            return obj >= 0 ? "0x" + obj.toString(16).toUpperCase() : "-0x" + obj.toString(16).toUpperCase().slice(1);
          }
        },
        defaultStyle: "decimal",
        styleAliases: {
          binary: [2, "bin"],
          octal: [8, "oct"],
          decimal: [10, "dec"],
          hexadecimal: [16, "hex"]
        }
      });
      var _int = exports$5i;
      var exports$1$D = {};
      var Schema$1 = _schema;
      exports$1$D = new Schema$1({
        include: [_failsafe],
        implicit: [_null, _bool, _int, _float]
      });
      var _json = exports$1$D;
      var exports$2$i = {};
      var Schema$1$1 = _schema;
      exports$2$i = new Schema$1$1({
        include: [_json]
      });
      var _core = exports$2$i;
      var exports$3$f = {};
      var Type$1$1 = _type;
      var YAML_DATE_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])" + "-([0-9][0-9])" + "-([0-9][0-9])$");
      var YAML_TIMESTAMP_REGEXP = new RegExp("^([0-9][0-9][0-9][0-9])" + "-([0-9][0-9]?)" + "-([0-9][0-9]?)" + "(?:[Tt]|[ \\t]+)" + "([0-9][0-9]?)" + ":([0-9][0-9])" + ":([0-9][0-9])" + "(?:\\.([0-9]*))?" + "(?:[ \\t]*(Z|([-+])([0-9][0-9]?)" + "(?::([0-9][0-9]))?))?$");

      function resolveYamlTimestamp(data) {
        if (data === null) return false;
        if (YAML_DATE_REGEXP.exec(data) !== null) return true;
        if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
        return false;
      }

      function constructYamlTimestamp(data) {
        var match,
            year,
            month,
            day,
            hour,
            minute,
            second,
            fraction = 0,
            delta = null,
            tz_hour,
            tz_minute,
            date;
        match = YAML_DATE_REGEXP.exec(data);
        if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
        if (match === null) throw new Error("Date resolve error");
        year = +match[1];
        month = +match[2] - 1;
        day = +match[3];

        if (!match[4]) {
          return new Date(Date.UTC(year, month, day));
        }

        hour = +match[4];
        minute = +match[5];
        second = +match[6];

        if (match[7]) {
          fraction = match[7].slice(0, 3);

          while (fraction.length < 3) {
            fraction += "0";
          }

          fraction = +fraction;
        }

        if (match[9]) {
          tz_hour = +match[10];
          tz_minute = +(match[11] || 0);
          delta = (tz_hour * 60 + tz_minute) * 60000;
          if (match[9] === "-") delta = -delta;
        }

        date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));
        if (delta) date.setTime(date.getTime() - delta);
        return date;
      }

      function representYamlTimestamp(object) {
        return object.toISOString();
      }

      exports$3$f = new Type$1$1("tag:yaml.org,2002:timestamp", {
        kind: "scalar",
        resolve: resolveYamlTimestamp,
        construct: constructYamlTimestamp,
        instanceOf: Date,
        represent: representYamlTimestamp
      });
      var _timestamp = exports$3$f;
      var exports$4$9 = {};
      var Type$2$1 = _type;

      function resolveYamlMerge(data) {
        return data === "<<" || data === null;
      }

      exports$4$9 = new Type$2$1("tag:yaml.org,2002:merge", {
        kind: "scalar",
        resolve: resolveYamlMerge
      });
      var _merge = exports$4$9;
      var exports$5$7 = {};
      var NodeBuffer;

      try {
        var _require$1 = null;
        NodeBuffer = _require$1("buffer").Buffer;
      } catch (__) {}

      var Type$3$1 = _type;
      var BASE64_MAP = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";

      function resolveYamlBinary(data) {
        if (data === null) return false;
        var code,
            idx,
            bitlen = 0,
            max = data.length,
            map = BASE64_MAP;

        for (idx = 0; idx < max; idx++) {
          code = map.indexOf(data.charAt(idx));
          if (code > 64) continue;
          if (code < 0) return false;
          bitlen += 6;
        }

        return bitlen % 8 === 0;
      }

      function constructYamlBinary(data) {
        var idx,
            tailbits,
            input = data.replace(/[\r\n=]/g, ""),
            max = input.length,
            map = BASE64_MAP,
            bits = 0,
            result = [];

        for (idx = 0; idx < max; idx++) {
          if (idx % 4 === 0 && idx) {
            result.push(bits >> 16 & 255);
            result.push(bits >> 8 & 255);
            result.push(bits & 255);
          }

          bits = bits << 6 | map.indexOf(input.charAt(idx));
        }

        tailbits = max % 4 * 6;

        if (tailbits === 0) {
          result.push(bits >> 16 & 255);
          result.push(bits >> 8 & 255);
          result.push(bits & 255);
        } else if (tailbits === 18) {
          result.push(bits >> 10 & 255);
          result.push(bits >> 2 & 255);
        } else if (tailbits === 12) {
          result.push(bits >> 4 & 255);
        }

        if (NodeBuffer) {
          return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);
        }

        return result;
      }

      function representYamlBinary(object) {
        var result = "",
            bits = 0,
            idx,
            tail,
            max = object.length,
            map = BASE64_MAP;

        for (idx = 0; idx < max; idx++) {
          if (idx % 3 === 0 && idx) {
            result += map[bits >> 18 & 63];
            result += map[bits >> 12 & 63];
            result += map[bits >> 6 & 63];
            result += map[bits & 63];
          }

          bits = (bits << 8) + object[idx];
        }

        tail = max % 3;

        if (tail === 0) {
          result += map[bits >> 18 & 63];
          result += map[bits >> 12 & 63];
          result += map[bits >> 6 & 63];
          result += map[bits & 63];
        } else if (tail === 2) {
          result += map[bits >> 10 & 63];
          result += map[bits >> 4 & 63];
          result += map[bits << 2 & 63];
          result += map[64];
        } else if (tail === 1) {
          result += map[bits >> 2 & 63];
          result += map[bits << 4 & 63];
          result += map[64];
          result += map[64];
        }

        return result;
      }

      function isBinary(object) {
        return NodeBuffer && NodeBuffer.isBuffer(object);
      }

      exports$5$7 = new Type$3$1("tag:yaml.org,2002:binary", {
        kind: "scalar",
        resolve: resolveYamlBinary,
        construct: constructYamlBinary,
        predicate: isBinary,
        represent: representYamlBinary
      });
      var _binary = exports$5$7;
      var exports$6$5 = {};
      var Type$4 = _type;
      var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;
      var _toString$1 = Object.prototype.toString;

      function resolveYamlOmap(data) {
        if (data === null) return true;
        var objectKeys = [],
            index,
            length,
            pair,
            pairKey,
            pairHasKey,
            object = data;

        for (index = 0, length = object.length; index < length; index += 1) {
          pair = object[index];
          pairHasKey = false;
          if (_toString$1.call(pair) !== "[object Object]") return false;

          for (pairKey in pair) {
            if (_hasOwnProperty$2.call(pair, pairKey)) {
              if (!pairHasKey) pairHasKey = true;else return false;
            }
          }

          if (!pairHasKey) return false;
          if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;
        }

        return true;
      }

      function constructYamlOmap(data) {
        return data !== null ? data : [];
      }

      exports$6$5 = new Type$4("tag:yaml.org,2002:omap", {
        kind: "sequence",
        resolve: resolveYamlOmap,
        construct: constructYamlOmap
      });
      var _omap = exports$6$5;
      var exports$7$3 = {};
      var Type$5 = _type;
      var _toString$1$1 = Object.prototype.toString;

      function resolveYamlPairs(data) {
        if (data === null) return true;
        var index,
            length,
            pair,
            keys,
            result,
            object = data;
        result = new Array(object.length);

        for (index = 0, length = object.length; index < length; index += 1) {
          pair = object[index];
          if (_toString$1$1.call(pair) !== "[object Object]") return false;
          keys = Object.keys(pair);
          if (keys.length !== 1) return false;
          result[index] = [keys[0], pair[keys[0]]];
        }

        return true;
      }

      function constructYamlPairs(data) {
        if (data === null) return [];
        var index,
            length,
            pair,
            keys,
            result,
            object = data;
        result = new Array(object.length);

        for (index = 0, length = object.length; index < length; index += 1) {
          pair = object[index];
          keys = Object.keys(pair);
          result[index] = [keys[0], pair[keys[0]]];
        }

        return result;
      }

      exports$7$3 = new Type$5("tag:yaml.org,2002:pairs", {
        kind: "sequence",
        resolve: resolveYamlPairs,
        construct: constructYamlPairs
      });
      var _pairs = exports$7$3;
      var exports$8$3 = {};
      var Type$6 = _type;
      var _hasOwnProperty$1$1 = Object.prototype.hasOwnProperty;

      function resolveYamlSet(data) {
        if (data === null) return true;
        var key,
            object = data;

        for (key in object) {
          if (_hasOwnProperty$1$1.call(object, key)) {
            if (object[key] !== null) return false;
          }
        }

        return true;
      }

      function constructYamlSet(data) {
        return data !== null ? data : {};
      }

      exports$8$3 = new Type$6("tag:yaml.org,2002:set", {
        kind: "mapping",
        resolve: resolveYamlSet,
        construct: constructYamlSet
      });
      var _set = exports$8$3;
      var exports$9$3 = {};
      var Schema$2 = _schema;
      exports$9$3 = new Schema$2({
        include: [_core],
        implicit: [_timestamp, _merge],
        explicit: [_binary, _omap, _pairs, _set]
      });
      var _default_safe = exports$9$3;

      var exports$5h = {};
      var Type = _type;
      function resolveJavascriptUndefined() {
        return true;
      }
      function constructJavascriptUndefined() {
        return undefined;
      }
      function representJavascriptUndefined() {
        return "";
      }
      function isUndefined(object) {
        return typeof object === "undefined";
      }
      exports$5h = new Type("tag:yaml.org,2002:js/undefined", {
        kind: "scalar",
        resolve: resolveJavascriptUndefined,
        construct: constructJavascriptUndefined,
        predicate: isUndefined,
        represent: representJavascriptUndefined
      });
      var _undefined = exports$5h;
      var exports$1$C = {};
      var Type$1 = _type;
      function resolveJavascriptRegExp(data) {
        if (data === null)
          return false;
        if (data.length === 0)
          return false;
        var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
        if (regexp[0] === "/") {
          if (tail)
            modifiers = tail[1];
          if (modifiers.length > 3)
            return false;
          if (regexp[regexp.length - modifiers.length - 1] !== "/")
            return false;
        }
        return true;
      }
      function constructJavascriptRegExp(data) {
        var regexp = data, tail = /\/([gim]*)$/.exec(data), modifiers = "";
        if (regexp[0] === "/") {
          if (tail)
            modifiers = tail[1];
          regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
        }
        return new RegExp(regexp, modifiers);
      }
      function representJavascriptRegExp(object) {
        var result = "/" + object.source + "/";
        if (object.global)
          result += "g";
        if (object.multiline)
          result += "m";
        if (object.ignoreCase)
          result += "i";
        return result;
      }
      function isRegExp(object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
      }
      exports$1$C = new Type$1("tag:yaml.org,2002:js/regexp", {
        kind: "scalar",
        resolve: resolveJavascriptRegExp,
        construct: constructJavascriptRegExp,
        predicate: isRegExp,
        represent: representJavascriptRegExp
      });
      var _regexp = exports$1$C;
      var exports$2$h = {};
      var esprima;
      try {
        var _require = null;
        esprima = _require("esprima");
      } catch (_) {
        if (typeof window !== "undefined")
          esprima = window.esprima;
      }
      var Type$2 = _type;
      function resolveJavascriptFunction(data) {
        if (data === null)
          return false;
        try {
          var source = "(" + data + ")", ast = esprima.parse(source, { range: true });
          if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      function constructJavascriptFunction(data) {
        var source = "(" + data + ")", ast = esprima.parse(source, { range: true }), params = [], body;
        if (ast.type !== "Program" || ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement" || ast.body[0].expression.type !== "ArrowFunctionExpression" && ast.body[0].expression.type !== "FunctionExpression") {
          throw new Error("Failed to resolve function");
        }
        ast.body[0].expression.params.forEach(function (param) {
          params.push(param.name);
        });
        body = ast.body[0].expression.body.range;
        if (ast.body[0].expression.body.type === "BlockStatement") {
          return new Function(params, source.slice(body[0] + 1, body[1] - 1));
        }
        return new Function(params, "return " + source.slice(body[0], body[1]));
      }
      function representJavascriptFunction(object) {
        return object.toString();
      }
      function isFunction$3(object) {
        return Object.prototype.toString.call(object) === "[object Function]";
      }
      exports$2$h = new Type$2("tag:yaml.org,2002:js/function", {
        kind: "scalar",
        resolve: resolveJavascriptFunction,
        construct: constructJavascriptFunction,
        predicate: isFunction$3,
        represent: representJavascriptFunction
      });
      var _function = exports$2$h;
      var exports$3$e = {};
      var Schema = _schema;
      exports$3$e = Schema.DEFAULT = new Schema({
        include: [_default_safe],
        explicit: [
          _undefined,
          _regexp,
          _function
        ]
      });
      var _default_full = exports$3$e;

      var exports$5g = {};
      var common = exports$5q;
      function Mark(name, buffer, position, line, column) {
        this.name = name;
        this.buffer = buffer;
        this.position = position;
        this.line = line;
        this.column = column;
      }
      Mark.prototype.getSnippet = function getSnippet(indent, maxLength) {
        var head, start, tail, end, snippet;
        if (!this.buffer)
          return null;
        indent = indent || 4;
        maxLength = maxLength || 75;
        head = "";
        start = this.position;
        while (start > 0 && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1) {
          start -= 1;
          if (this.position - start > maxLength / 2 - 1) {
            head = " ... ";
            start += 5;
            break;
          }
        }
        tail = "";
        end = this.position;
        while (end < this.buffer.length && "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1) {
          end += 1;
          if (end - this.position > maxLength / 2 - 1) {
            tail = " ... ";
            end -= 5;
            break;
          }
        }
        snippet = this.buffer.slice(start, end);
        return common.repeat(" ", indent) + head + snippet + tail + "\n" + common.repeat(" ", indent + this.position - start + head.length) + "^";
      };
      Mark.prototype.toString = function toString(compact) {
        var snippet, where = "";
        if (this.name) {
          where += "in \"" + this.name + "\" ";
        }
        where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
        if (!compact) {
          snippet = this.getSnippet();
          if (snippet) {
            where += ":\n" + snippet;
          }
        }
        return where;
      };
      exports$5g = Mark;
      var _mark = exports$5g;
      var exports$1$B = {};
      var common$1 = exports$5q;
      var YAMLException = _exception;
      var Mark$1 = _mark;
      var DEFAULT_SAFE_SCHEMA = _default_safe;
      var DEFAULT_FULL_SCHEMA = _default_full;
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CONTEXT_FLOW_IN = 1;
      var CONTEXT_FLOW_OUT = 2;
      var CONTEXT_BLOCK_IN = 3;
      var CONTEXT_BLOCK_OUT = 4;
      var CHOMPING_CLIP = 1;
      var CHOMPING_STRIP = 2;
      var CHOMPING_KEEP = 3;
      var PATTERN_NON_PRINTABLE = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
      var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
      var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
      var PATTERN_TAG_URI = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      function is_EOL(c) {
        return c === 10 || c === 13;
      }
      function is_WHITE_SPACE(c) {
        return c === 9 || c === 32;
      }
      function is_WS_OR_EOL(c) {
        return c === 9 || c === 32 || c === 10 || c === 13;
      }
      function is_FLOW_INDICATOR(c) {
        return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
      }
      function fromHexCode(c) {
        var lc;
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        lc = c | 32;
        if (97 <= lc && lc <= 102) {
          return lc - 97 + 10;
        }
        return -1;
      }
      function escapedHexLen(c) {
        if (c === 120) {
          return 2;
        }
        if (c === 117) {
          return 4;
        }
        if (c === 85) {
          return 8;
        }
        return 0;
      }
      function fromDecimalCode(c) {
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        return -1;
      }
      function simpleEscapeSequence(c) {
        return c === 48 ? "\0" : c === 97 ? "\x07" : c === 98 ? "\b" : c === 116 ? "\t" : c === 9 ? "\t" : c === 110 ? "\n" : c === 118 ? "\x0B" : c === 102 ? "\f" : c === 114 ? "\r" : c === 101 ? "\x1B" : c === 32 ? " " : c === 34 ? "\"" : c === 47 ? "/" : c === 92 ? "\\" : c === 78 ? "\x85" : c === 95 ? "\xA0" : c === 76 ? "\u2028" : c === 80 ? "\u2029" : "";
      }
      function charFromCodepoint(c) {
        if (c <= 65535) {
          return String.fromCharCode(c);
        }
        return String.fromCharCode((c - 65536 >> 10) + 55296, (c - 65536 & 1023) + 56320);
      }
      var simpleEscapeCheck = new Array(256);
      var simpleEscapeMap = new Array(256);
      for (var i$1 = 0; i$1 < 256; i$1++) {
        simpleEscapeCheck[i$1] = simpleEscapeSequence(i$1) ? 1 : 0;
        simpleEscapeMap[i$1] = simpleEscapeSequence(i$1);
      }
      function State(input, options) {
        this.input = input;
        this.filename = options["filename"] || null;
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.onWarning = options["onWarning"] || null;
        this.legacy = options["legacy"] || false;
        this.json = options["json"] || false;
        this.listener = options["listener"] || null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.documents = [];
      }
      function generateError(state, message) {
        return new YAMLException(message, new Mark$1(state.filename, state.input, state.position, state.line, state.position - state.lineStart));
      }
      function throwError(state, message) {
        throw generateError(state, message);
      }
      function throwWarning(state, message) {
        if (state.onWarning) {
          state.onWarning.call(null, generateError(state, message));
        }
      }
      var directiveHandlers = {
        YAML: function handleYamlDirective(state, name, args) {
          var match, major, minor;
          if (state.version !== null) {
            throwError(state, "duplication of %YAML directive");
          }
          if (args.length !== 1) {
            throwError(state, "YAML directive accepts exactly one argument");
          }
          match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
          if (match === null) {
            throwError(state, "ill-formed argument of the YAML directive");
          }
          major = parseInt(match[1], 10);
          minor = parseInt(match[2], 10);
          if (major !== 1) {
            throwError(state, "unacceptable YAML version of the document");
          }
          state.version = args[0];
          state.checkLineBreaks = minor < 2;
          if (minor !== 1 && minor !== 2) {
            throwWarning(state, "unsupported YAML version of the document");
          }
        },
        TAG: function handleTagDirective(state, name, args) {
          var handle, prefix;
          if (args.length !== 2) {
            throwError(state, "TAG directive accepts exactly two arguments");
          }
          handle = args[0];
          prefix = args[1];
          if (!PATTERN_TAG_HANDLE.test(handle)) {
            throwError(state, "ill-formed tag handle (first argument) of the TAG directive");
          }
          if (_hasOwnProperty.call(state.tagMap, handle)) {
            throwError(state, "there is a previously declared suffix for \"" + handle + "\" tag handle");
          }
          if (!PATTERN_TAG_URI.test(prefix)) {
            throwError(state, "ill-formed tag prefix (second argument) of the TAG directive");
          }
          state.tagMap[handle] = prefix;
        }
      };
      function captureSegment(state, start, end, checkJson) {
        var _position, _length, _character, _result;
        if (start < end) {
          _result = state.input.slice(start, end);
          if (checkJson) {
            for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
              _character = _result.charCodeAt(_position);
              if (!(_character === 9 || 32 <= _character && _character <= 1114111)) {
                throwError(state, "expected valid JSON character");
              }
            }
          } else if (PATTERN_NON_PRINTABLE.test(_result)) {
            throwError(state, "the stream contains non-printable characters");
          }
          state.result += _result;
        }
      }
      function mergeMappings(state, destination, source, overridableKeys) {
        var sourceKeys, key, index, quantity;
        if (!common$1.isObject(source)) {
          throwError(state, "cannot merge mappings; the provided source object is unacceptable");
        }
        sourceKeys = Object.keys(source);
        for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
          key = sourceKeys[index];
          if (!_hasOwnProperty.call(destination, key)) {
            destination[key] = source[key];
            overridableKeys[key] = true;
          }
        }
      }
      function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {
        var index, quantity;
        if (Array.isArray(keyNode)) {
          keyNode = Array.prototype.slice.call(keyNode);
          for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
            if (Array.isArray(keyNode[index])) {
              throwError(state, "nested arrays are not supported inside keys");
            }
            if (typeof keyNode === "object" && _class(keyNode[index]) === "[object Object]") {
              keyNode[index] = "[object Object]";
            }
          }
        }
        if (typeof keyNode === "object" && _class(keyNode) === "[object Object]") {
          keyNode = "[object Object]";
        }
        keyNode = String(keyNode);
        if (_result === null) {
          _result = {};
        }
        if (keyTag === "tag:yaml.org,2002:merge") {
          if (Array.isArray(valueNode)) {
            for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
              mergeMappings(state, _result, valueNode[index], overridableKeys);
            }
          } else {
            mergeMappings(state, _result, valueNode, overridableKeys);
          }
        } else {
          if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {
            state.line = startLine || state.line;
            state.position = startPos || state.position;
            throwError(state, "duplicated mapping key");
          }
          _result[keyNode] = valueNode;
          delete overridableKeys[keyNode];
        }
        return _result;
      }
      function readLineBreak(state) {
        var ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 10) {
          state.position++;
        } else if (ch === 13) {
          state.position++;
          if (state.input.charCodeAt(state.position) === 10) {
            state.position++;
          }
        } else {
          throwError(state, "a line break is expected");
        }
        state.line += 1;
        state.lineStart = state.position;
      }
      function skipSeparationSpace(state, allowComments, checkIndent) {
        var lineBreaks = 0, ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (allowComments && ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 10 && ch !== 13 && ch !== 0);
          }
          if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while (ch === 32) {
              state.lineIndent++;
              ch = state.input.charCodeAt(++state.position);
            }
          } else {
            break;
          }
        }
        if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
          throwWarning(state, "deficient indentation");
        }
        return lineBreaks;
      }
      function testDocumentSeparator(state) {
        var _position = state.position, ch;
        ch = state.input.charCodeAt(_position);
        if ((ch === 45 || ch === 46) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {
          _position += 3;
          ch = state.input.charCodeAt(_position);
          if (ch === 0 || is_WS_OR_EOL(ch)) {
            return true;
          }
        }
        return false;
      }
      function writeFoldedLines(state, count) {
        if (count === 1) {
          state.result += " ";
        } else if (count > 1) {
          state.result += common$1.repeat("\n", count - 1);
        }
      }
      function readPlainScalar(state, nodeIndent, withinFlowCollection) {
        var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;
        ch = state.input.charCodeAt(state.position);
        if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 35 || ch === 38 || ch === 42 || ch === 33 || ch === 124 || ch === 62 || ch === 39 || ch === 34 || ch === 37 || ch === 64 || ch === 96) {
          return false;
        }
        if (ch === 63 || ch === 45) {
          following = state.input.charCodeAt(state.position + 1);
          if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
            return false;
          }
        }
        state.kind = "scalar";
        state.result = "";
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
        while (ch !== 0) {
          if (ch === 58) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {
              break;
            }
          } else if (ch === 35) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) {
              break;
            }
          } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {
            break;
          } else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
              hasPendingContent = true;
              ch = state.input.charCodeAt(state.position);
              continue;
            } else {
              state.position = captureEnd;
              state.line = _line;
              state.lineStart = _lineStart;
              state.lineIndent = _lineIndent;
              break;
            }
          }
          if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
          }
          if (!is_WHITE_SPACE(ch)) {
            captureEnd = state.position + 1;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, captureEnd, false);
        if (state.result) {
          return true;
        }
        state.kind = _kind;
        state.result = _result;
        return false;
      }
      function readSingleQuotedScalar(state, nodeIndent) {
        var ch, captureStart, captureEnd;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 39) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 39) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (ch === 39) {
              captureStart = state.position;
              state.position++;
              captureEnd = state.position;
            } else {
              return true;
            }
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
          } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, "unexpected end of the document within a single quoted scalar");
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(state, "unexpected end of the stream within a single quoted scalar");
      }
      function readDoubleQuotedScalar(state, nodeIndent) {
        var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 34) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 34) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
          } else if (ch === 92) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) {
              skipSeparationSpace(state, false, nodeIndent);
            } else if (ch < 256 && simpleEscapeCheck[ch]) {
              state.result += simpleEscapeMap[ch];
              state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
              hexLength = tmp;
              hexResult = 0;
              for (; hexLength > 0; hexLength--) {
                ch = state.input.charCodeAt(++state.position);
                if ((tmp = fromHexCode(ch)) >= 0) {
                  hexResult = (hexResult << 4) + tmp;
                } else {
                  throwError(state, "expected hexadecimal character");
                }
              }
              state.result += charFromCodepoint(hexResult);
              state.position++;
            } else {
              throwError(state, "unknown escape sequence");
            }
            captureStart = captureEnd = state.position;
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
            captureStart = captureEnd = state.position;
          } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
            throwError(state, "unexpected end of the document within a double quoted scalar");
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(state, "unexpected end of the stream within a double quoted scalar");
      }
      function readFlowCollection(state, nodeIndent) {
        var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 91) {
          terminator = 93;
          isMapping = false;
          _result = [];
        } else if (ch === 123) {
          terminator = 125;
          isMapping = true;
          _result = {};
        } else {
          return false;
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(++state.position);
        while (ch !== 0) {
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? "mapping" : "sequence";
            state.result = _result;
            return true;
          } else if (!readNext) {
            throwError(state, "missed comma between flow collection entries");
          }
          keyTag = keyNode = valueNode = null;
          isPair = isExplicitPair = false;
          if (ch === 63) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
              isPair = isExplicitPair = true;
              state.position++;
              skipSeparationSpace(state, true, nodeIndent);
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          keyTag = state.tag;
          keyNode = state.result;
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if ((isExplicitPair || state.line === _line) && ch === 58) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
          }
          if (isMapping) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);
          } else if (isPair) {
            _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));
          } else {
            _result.push(keyNode);
          }
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === 44) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
          } else {
            readNext = false;
          }
        }
        throwError(state, "unexpected end of the stream within a flow collection");
      }
      function readBlockScalar(state, nodeIndent) {
        var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 124) {
          folding = false;
        } else if (ch === 62) {
          folding = true;
        } else {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        while (ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
          if (ch === 43 || ch === 45) {
            if (CHOMPING_CLIP === chomping) {
              chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
            } else {
              throwError(state, "repeat of a chomping mode identifier");
            }
          } else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) {
              throwError(state, "bad explicit indentation width of a block scalar; it cannot be less than one");
            } else if (!detectedIndent) {
              textIndent = nodeIndent + tmp - 1;
              detectedIndent = true;
            } else {
              throwError(state, "repeat of an indentation width identifier");
            }
          } else {
            break;
          }
        }
        if (is_WHITE_SPACE(ch)) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (is_WHITE_SPACE(ch));
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && ch !== 0);
          }
        }
        while (ch !== 0) {
          readLineBreak(state);
          state.lineIndent = 0;
          ch = state.input.charCodeAt(state.position);
          while ((!detectedIndent || state.lineIndent < textIndent) && ch === 32) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
          if (!detectedIndent && state.lineIndent > textIndent) {
            textIndent = state.lineIndent;
          }
          if (is_EOL(ch)) {
            emptyLines++;
            continue;
          }
          if (state.lineIndent < textIndent) {
            if (chomping === CHOMPING_KEEP) {
              state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
            } else if (chomping === CHOMPING_CLIP) {
              if (didReadContent) {
                state.result += "\n";
              }
            }
            break;
          }
          if (folding) {
            if (is_WHITE_SPACE(ch)) {
              atMoreIndented = true;
              state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
            } else if (atMoreIndented) {
              atMoreIndented = false;
              state.result += common$1.repeat("\n", emptyLines + 1);
            } else if (emptyLines === 0) {
              if (didReadContent) {
                state.result += " ";
              }
            } else {
              state.result += common$1.repeat("\n", emptyLines);
            }
          } else {
            state.result += common$1.repeat("\n", didReadContent ? 1 + emptyLines : emptyLines);
          }
          didReadContent = true;
          detectedIndent = true;
          emptyLines = 0;
          captureStart = state.position;
          while (!is_EOL(ch) && ch !== 0) {
            ch = state.input.charCodeAt(++state.position);
          }
          captureSegment(state, captureStart, state.position, false);
        }
        return true;
      }
      function readBlockSequence(state, nodeIndent) {
        var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          if (ch !== 45) {
            break;
          }
          following = state.input.charCodeAt(state.position + 1);
          if (!is_WS_OR_EOL(following)) {
            break;
          }
          detected = true;
          state.position++;
          if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
              _result.push(null);
              ch = state.input.charCodeAt(state.position);
              continue;
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
          _result.push(state.result);
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {
            throwError(state, "bad indentation of a sequence entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "sequence";
          state.result = _result;
          return true;
        }
        return false;
      }
      function readBlockMapping(state, nodeIndent, flowIndent) {
        var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          following = state.input.charCodeAt(state.position + 1);
          _line = state.line;
          _pos = state.position;
          if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
            if (ch === 63) {
              if (atExplicitKey) {
                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = true;
              allowCompact = true;
            } else if (atExplicitKey) {
              atExplicitKey = false;
              allowCompact = true;
            } else {
              throwError(state, "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line");
            }
            state.position += 1;
            ch = following;
          } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
            if (state.line === _line) {
              ch = state.input.charCodeAt(state.position);
              while (is_WHITE_SPACE(ch)) {
                ch = state.input.charCodeAt(++state.position);
              }
              if (ch === 58) {
                ch = state.input.charCodeAt(++state.position);
                if (!is_WS_OR_EOL(ch)) {
                  throwError(state, "a whitespace character is expected after the key-value separator within a block mapping");
                }
                if (atExplicitKey) {
                  storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
                  keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = false;
                allowCompact = false;
                keyTag = state.tag;
                keyNode = state.result;
              } else if (detected) {
                throwError(state, "can not read an implicit mapping pair; a colon is missed");
              } else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true;
              }
            } else if (detected) {
              throwError(state, "can not read a block mapping entry; a multiline key may not be an implicit key");
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else {
            break;
          }
          if (state.line === _line || state.lineIndent > nodeIndent) {
            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
              if (atExplicitKey) {
                keyNode = state.result;
              } else {
                valueNode = state.result;
              }
            }
            if (!atExplicitKey) {
              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);
              keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
          }
          if (state.lineIndent > nodeIndent && ch !== 0) {
            throwError(state, "bad indentation of a mapping entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "mapping";
          state.result = _result;
        }
        return detected;
      }
      function readTagProperty(state) {
        var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 33)
          return false;
        if (state.tag !== null) {
          throwError(state, "duplication of a tag property");
        }
        ch = state.input.charCodeAt(++state.position);
        if (ch === 60) {
          isVerbatim = true;
          ch = state.input.charCodeAt(++state.position);
        } else if (ch === 33) {
          isNamed = true;
          tagHandle = "!!";
          ch = state.input.charCodeAt(++state.position);
        } else {
          tagHandle = "!";
        }
        _position = state.position;
        if (isVerbatim) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && ch !== 62);
          if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
          } else {
            throwError(state, "unexpected end of the stream within a verbatim tag");
          }
        } else {
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            if (ch === 33) {
              if (!isNamed) {
                tagHandle = state.input.slice(_position - 1, state.position + 1);
                if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                  throwError(state, "named tag handle cannot contain such characters");
                }
                isNamed = true;
                _position = state.position + 1;
              } else {
                throwError(state, "tag suffix cannot contain exclamation marks");
              }
            }
            ch = state.input.charCodeAt(++state.position);
          }
          tagName = state.input.slice(_position, state.position);
          if (PATTERN_FLOW_INDICATORS.test(tagName)) {
            throwError(state, "tag suffix cannot contain flow indicator characters");
          }
        }
        if (tagName && !PATTERN_TAG_URI.test(tagName)) {
          throwError(state, "tag name cannot contain such characters: " + tagName);
        }
        if (isVerbatim) {
          state.tag = tagName;
        } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
          state.tag = state.tagMap[tagHandle] + tagName;
        } else if (tagHandle === "!") {
          state.tag = "!" + tagName;
        } else if (tagHandle === "!!") {
          state.tag = "tag:yaml.org,2002:" + tagName;
        } else {
          throwError(state, "undeclared tag handle \"" + tagHandle + "\"");
        }
        return true;
      }
      function readAnchorProperty(state) {
        var _position, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 38)
          return false;
        if (state.anchor !== null) {
          throwError(state, "duplication of an anchor property");
        }
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(state, "name of an anchor node must contain at least one character");
        }
        state.anchor = state.input.slice(_position, state.position);
        return true;
      }
      function readAlias(state) {
        var _position, alias, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 42)
          return false;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(state, "name of an alias node must contain at least one character");
        }
        alias = state.input.slice(_position, state.position);
        if (!_hasOwnProperty.call(state.anchorMap, alias)) {
          throwError(state, "unidentified alias \"" + alias + "\"");
        }
        state.result = state.anchorMap[alias];
        skipSeparationSpace(state, true, -1);
        return true;
      }
      function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
        var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;
        if (state.listener !== null) {
          state.listener("open", state);
        }
        state.tag = null;
        state.anchor = null;
        state.kind = null;
        state.result = null;
        allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;
        if (allowToSeek) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          }
        }
        if (indentStatus === 1) {
          while (readTagProperty(state) || readAnchorProperty(state)) {
            if (skipSeparationSpace(state, true, -1)) {
              atNewLine = true;
              allowBlockCollections = allowBlockStyles;
              if (state.lineIndent > parentIndent) {
                indentStatus = 1;
              } else if (state.lineIndent === parentIndent) {
                indentStatus = 0;
              } else if (state.lineIndent < parentIndent) {
                indentStatus = -1;
              }
            } else {
              allowBlockCollections = false;
            }
          }
        }
        if (allowBlockCollections) {
          allowBlockCollections = atNewLine || allowCompact;
        }
        if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
          if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
            flowIndent = parentIndent;
          } else {
            flowIndent = parentIndent + 1;
          }
          blockIndent = state.position - state.lineStart;
          if (indentStatus === 1) {
            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {
              hasContent = true;
            } else {
              if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {
                hasContent = true;
              } else if (readAlias(state)) {
                hasContent = true;
                if (state.tag !== null || state.anchor !== null) {
                  throwError(state, "alias node should not have any properties");
                }
              } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
                hasContent = true;
                if (state.tag === null) {
                  state.tag = "?";
                }
              }
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else if (indentStatus === 0) {
            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
          }
        }
        if (state.tag !== null && state.tag !== "!") {
          if (state.tag === "?") {
            if (state.result !== null && state.kind !== "scalar") {
              throwError(state, "unacceptable node kind for !<?> tag; it should be \"scalar\", not \"" + state.kind + "\"");
            }
            for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
              type = state.implicitTypes[typeIndex];
              if (type.resolve(state.result)) {
                state.result = type.construct(state.result);
                state.tag = type.tag;
                if (state.anchor !== null) {
                  state.anchorMap[state.anchor] = state.result;
                }
                break;
              }
            }
          } else if (_hasOwnProperty.call(state.typeMap[state.kind || "fallback"], state.tag)) {
            type = state.typeMap[state.kind || "fallback"][state.tag];
            if (state.result !== null && type.kind !== state.kind) {
              throwError(state, "unacceptable node kind for !<" + state.tag + "> tag; it should be \"" + type.kind + "\", not \"" + state.kind + "\"");
            }
            if (!type.resolve(state.result)) {
              throwError(state, "cannot resolve a node with !<" + state.tag + "> explicit tag");
            } else {
              state.result = type.construct(state.result);
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else {
            throwError(state, "unknown tag !<" + state.tag + ">");
          }
        }
        if (state.listener !== null) {
          state.listener("close", state);
        }
        return state.tag !== null || state.anchor !== null || hasContent;
      }
      function readDocument(state) {
        var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;
        state.version = null;
        state.checkLineBreaks = state.legacy;
        state.tagMap = {};
        state.anchorMap = {};
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (state.lineIndent > 0 || ch !== 37) {
            break;
          }
          hasDirectives = true;
          ch = state.input.charCodeAt(++state.position);
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveName = state.input.slice(_position, state.position);
          directiveArgs = [];
          if (directiveName.length < 1) {
            throwError(state, "directive name must not be less than one character in length");
          }
          while (ch !== 0) {
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 35) {
              do {
                ch = state.input.charCodeAt(++state.position);
              } while (ch !== 0 && !is_EOL(ch));
              break;
            }
            if (is_EOL(ch))
              break;
            _position = state.position;
            while (ch !== 0 && !is_WS_OR_EOL(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            directiveArgs.push(state.input.slice(_position, state.position));
          }
          if (ch !== 0)
            readLineBreak(state);
          if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
            directiveHandlers[directiveName](state, directiveName, directiveArgs);
          } else {
            throwWarning(state, "unknown document directive \"" + directiveName + "\"");
          }
        }
        skipSeparationSpace(state, true, -1);
        if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 45 && state.input.charCodeAt(state.position + 1) === 45 && state.input.charCodeAt(state.position + 2) === 45) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        } else if (hasDirectives) {
          throwError(state, "directives end mark is expected");
        }
        composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
        skipSeparationSpace(state, true, -1);
        if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
          throwWarning(state, "non-ASCII line breaks are interpreted as content");
        }
        state.documents.push(state.result);
        if (state.position === state.lineStart && testDocumentSeparator(state)) {
          if (state.input.charCodeAt(state.position) === 46) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
          }
          return;
        }
        if (state.position < state.length - 1) {
          throwError(state, "end of the stream or a document separator is expected");
        } else {
          return;
        }
      }
      function loadDocuments(input, options) {
        input = String(input);
        options = options || {};
        if (input.length !== 0) {
          if (input.charCodeAt(input.length - 1) !== 10 && input.charCodeAt(input.length - 1) !== 13) {
            input += "\n";
          }
          if (input.charCodeAt(0) === 65279) {
            input = input.slice(1);
          }
        }
        var state = new State(input, options);
        var nullpos = input.indexOf("\0");
        if (nullpos !== -1) {
          state.position = nullpos;
          throwError(state, "null byte is not allowed in input");
        }
        state.input += "\0";
        while (state.input.charCodeAt(state.position) === 32) {
          state.lineIndent += 1;
          state.position += 1;
        }
        while (state.position < state.length - 1) {
          readDocument(state);
        }
        return state.documents;
      }
      function loadAll(input, iterator, options) {
        if (iterator !== null && typeof iterator === "object" && typeof options === "undefined") {
          options = iterator;
          iterator = null;
        }
        var documents = loadDocuments(input, options);
        if (typeof iterator !== "function") {
          return documents;
        }
        for (var index = 0, length = documents.length; index < length; index += 1) {
          iterator(documents[index]);
        }
      }
      function load(input, options) {
        var documents = loadDocuments(input, options);
        if (documents.length === 0) {
          return undefined;
        } else if (documents.length === 1) {
          return documents[0];
        }
        throw new YAMLException("expected a single document in the stream, but found more");
      }
      function safeLoadAll(input, iterator, options) {
        if (typeof iterator === "object" && iterator !== null && typeof options === "undefined") {
          options = iterator;
          iterator = null;
        }
        return loadAll(input, iterator, common$1.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
      }
      function safeLoad(input, options) {
        return load(input, common$1.extend({ schema: DEFAULT_SAFE_SCHEMA }, options));
      }
      exports$1$B.loadAll = loadAll;
      exports$1$B.load = load;
      exports$1$B.safeLoadAll = safeLoadAll;
      exports$1$B.safeLoad = safeLoad;
      var exports$2$g = {};
      var common$2 = exports$5q;
      var YAMLException$1 = _exception;
      var DEFAULT_FULL_SCHEMA$1 = _default_full;
      var DEFAULT_SAFE_SCHEMA$1 = _default_safe;
      var _toString = Object.prototype.toString;
      var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;
      var CHAR_TAB = 9;
      var CHAR_LINE_FEED = 10;
      var CHAR_CARRIAGE_RETURN = 13;
      var CHAR_SPACE = 32;
      var CHAR_EXCLAMATION = 33;
      var CHAR_DOUBLE_QUOTE = 34;
      var CHAR_SHARP = 35;
      var CHAR_PERCENT = 37;
      var CHAR_AMPERSAND = 38;
      var CHAR_SINGLE_QUOTE = 39;
      var CHAR_ASTERISK = 42;
      var CHAR_COMMA = 44;
      var CHAR_MINUS = 45;
      var CHAR_COLON = 58;
      var CHAR_EQUALS = 61;
      var CHAR_GREATER_THAN = 62;
      var CHAR_QUESTION = 63;
      var CHAR_COMMERCIAL_AT = 64;
      var CHAR_LEFT_SQUARE_BRACKET = 91;
      var CHAR_RIGHT_SQUARE_BRACKET = 93;
      var CHAR_GRAVE_ACCENT = 96;
      var CHAR_LEFT_CURLY_BRACKET = 123;
      var CHAR_VERTICAL_LINE = 124;
      var CHAR_RIGHT_CURLY_BRACKET = 125;
      var ESCAPE_SEQUENCES = {};
      ESCAPE_SEQUENCES[0] = "\\0";
      ESCAPE_SEQUENCES[7] = "\\a";
      ESCAPE_SEQUENCES[8] = "\\b";
      ESCAPE_SEQUENCES[9] = "\\t";
      ESCAPE_SEQUENCES[10] = "\\n";
      ESCAPE_SEQUENCES[11] = "\\v";
      ESCAPE_SEQUENCES[12] = "\\f";
      ESCAPE_SEQUENCES[13] = "\\r";
      ESCAPE_SEQUENCES[27] = "\\e";
      ESCAPE_SEQUENCES[34] = "\\\"";
      ESCAPE_SEQUENCES[92] = "\\\\";
      ESCAPE_SEQUENCES[133] = "\\N";
      ESCAPE_SEQUENCES[160] = "\\_";
      ESCAPE_SEQUENCES[8232] = "\\L";
      ESCAPE_SEQUENCES[8233] = "\\P";
      var DEPRECATED_BOOLEANS_SYNTAX = [
        "y",
        "Y",
        "yes",
        "Yes",
        "YES",
        "on",
        "On",
        "ON",
        "n",
        "N",
        "no",
        "No",
        "NO",
        "off",
        "Off",
        "OFF"
      ];
      function compileStyleMap(schema, map) {
        var result, keys, index, length, tag, style, type;
        if (map === null)
          return {};
        result = {};
        keys = Object.keys(map);
        for (index = 0, length = keys.length; index < length; index += 1) {
          tag = keys[index];
          style = String(map[tag]);
          if (tag.slice(0, 2) === "!!") {
            tag = "tag:yaml.org,2002:" + tag.slice(2);
          }
          type = schema.compiledTypeMap["fallback"][tag];
          if (type && _hasOwnProperty$1.call(type.styleAliases, style)) {
            style = type.styleAliases[style];
          }
          result[tag] = style;
        }
        return result;
      }
      function encodeHex(character) {
        var string, handle, length;
        string = character.toString(16).toUpperCase();
        if (character <= 255) {
          handle = "x";
          length = 2;
        } else if (character <= 65535) {
          handle = "u";
          length = 4;
        } else if (character <= 4294967295) {
          handle = "U";
          length = 8;
        } else {
          throw new YAMLException$1("code point within a string may not be greater than 0xFFFFFFFF");
        }
        return "\\" + handle + common$2.repeat("0", length - string.length) + string;
      }
      function State$1(options) {
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA$1;
        this.indent = Math.max(1, options["indent"] || 2);
        this.noArrayIndent = options["noArrayIndent"] || false;
        this.skipInvalid = options["skipInvalid"] || false;
        this.flowLevel = common$2.isNothing(options["flowLevel"]) ? -1 : options["flowLevel"];
        this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
        this.sortKeys = options["sortKeys"] || false;
        this.lineWidth = options["lineWidth"] || 80;
        this.noRefs = options["noRefs"] || false;
        this.noCompatMode = options["noCompatMode"] || false;
        this.condenseFlow = options["condenseFlow"] || false;
        this.implicitTypes = this.schema.compiledImplicit;
        this.explicitTypes = this.schema.compiledExplicit;
        this.tag = null;
        this.result = "";
        this.duplicates = [];
        this.usedDuplicates = null;
      }
      function indentString(string, spaces) {
        var ind = common$2.repeat(" ", spaces), position = 0, next = -1, result = "", line, length = string.length;
        while (position < length) {
          next = string.indexOf("\n", position);
          if (next === -1) {
            line = string.slice(position);
            position = length;
          } else {
            line = string.slice(position, next + 1);
            position = next + 1;
          }
          if (line.length && line !== "\n")
            result += ind;
          result += line;
        }
        return result;
      }
      function generateNextLine(state, level) {
        return "\n" + common$2.repeat(" ", state.indent * level);
      }
      function testImplicitResolving(state, str) {
        var index, length, type;
        for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
          type = state.implicitTypes[index];
          if (type.resolve(str)) {
            return true;
          }
        }
        return false;
      }
      function isWhitespace(c) {
        return c === CHAR_SPACE || c === CHAR_TAB;
      }
      function isPrintable(c) {
        return 32 <= c && c <= 126 || 161 <= c && c <= 55295 && c !== 8232 && c !== 8233 || 57344 <= c && c <= 65533 && c !== 65279 || 65536 <= c && c <= 1114111;
      }
      function isNsChar(c) {
        return isPrintable(c) && !isWhitespace(c) && c !== 65279 && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;
      }
      function isPlainSafe(c, prev) {
        return isPrintable(c) && c !== 65279 && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));
      }
      function isPlainSafeFirst(c) {
        return isPrintable(c) && c !== 65279 && !isWhitespace(c) && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;
      }
      function needIndentIndicator(string) {
        var leadingSpaceRe = /^\n* /;
        return leadingSpaceRe.test(string);
      }
      var STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;
      function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {
        var i;
        var char, prev_char;
        var hasLineBreak = false;
        var hasFoldableLine = false;
        var shouldTrackWidth = lineWidth !== -1;
        var previousLineBreak = -1;
        var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));
        if (singleLineOnly) {
          for (i = 0; i < string.length; i++) {
            char = string.charCodeAt(i);
            if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
            plain = plain && isPlainSafe(char, prev_char);
          }
        } else {
          for (i = 0; i < string.length; i++) {
            char = string.charCodeAt(i);
            if (char === CHAR_LINE_FEED) {
              hasLineBreak = true;
              if (shouldTrackWidth) {
                hasFoldableLine = hasFoldableLine || i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
                previousLineBreak = i;
              }
            } else if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            prev_char = i > 0 ? string.charCodeAt(i - 1) : null;
            plain = plain && isPlainSafe(char, prev_char);
          }
          hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== " ";
        }
        if (!hasLineBreak && !hasFoldableLine) {
          return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;
        }
        if (indentPerLevel > 9 && needIndentIndicator(string)) {
          return STYLE_DOUBLE;
        }
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      function writeScalar(state, string, level, iskey) {
        state.dump = (function () {
          if (string.length === 0) {
            return "''";
          }
          if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {
            return "'" + string + "'";
          }
          var indent = state.indent * Math.max(1, level);
          var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);
          var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;
          function testAmbiguity(string) {
            return testImplicitResolving(state, string);
          }
          switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {
          case STYLE_PLAIN:
            return string;
          case STYLE_SINGLE:
            return "'" + string.replace(/'/g, "''") + "'";
          case STYLE_LITERAL:
            return "|" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));
          case STYLE_FOLDED:
            return ">" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
          case STYLE_DOUBLE:
            return "\"" + escapeString(string) + "\"";
          default:
            throw new YAMLException$1("impossible error: invalid scalar style");
          }
        }());
      }
      function blockHeader(string, indentPerLevel) {
        var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : "";
        var clip = string[string.length - 1] === "\n";
        var keep = clip && (string[string.length - 2] === "\n" || string === "\n");
        var chomp = keep ? "+" : clip ? "" : "-";
        return indentIndicator + chomp + "\n";
      }
      function dropEndingNewline(string) {
        return string[string.length - 1] === "\n" ? string.slice(0, -1) : string;
      }
      function foldString(string, width) {
        var lineRe = /(\n+)([^\n]*)/g;
        var result = (function () {
          var nextLF = string.indexOf("\n");
          nextLF = nextLF !== -1 ? nextLF : string.length;
          lineRe.lastIndex = nextLF;
          return foldLine(string.slice(0, nextLF), width);
        }());
        var prevMoreIndented = string[0] === "\n" || string[0] === " ";
        var moreIndented;
        var match;
        while (match = lineRe.exec(string)) {
          var prefix = match[1], line = match[2];
          moreIndented = line[0] === " ";
          result += prefix + (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") + foldLine(line, width);
          prevMoreIndented = moreIndented;
        }
        return result;
      }
      function foldLine(line, width) {
        if (line === "" || line[0] === " ")
          return line;
        var breakRe = / [^ ]/g;
        var match;
        var start = 0, end, curr = 0, next = 0;
        var result = "";
        while (match = breakRe.exec(line)) {
          next = match.index;
          if (next - start > width) {
            end = curr > start ? curr : next;
            result += "\n" + line.slice(start, end);
            start = end + 1;
          }
          curr = next;
        }
        result += "\n";
        if (line.length - start > width && curr > start) {
          result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
        } else {
          result += line.slice(start);
        }
        return result.slice(1);
      }
      function escapeString(string) {
        var result = "";
        var char, nextChar;
        var escapeSeq;
        for (var i = 0; i < string.length; i++) {
          char = string.charCodeAt(i);
          if (char >= 55296 && char <= 56319) {
            nextChar = string.charCodeAt(i + 1);
            if (nextChar >= 56320 && nextChar <= 57343) {
              result += encodeHex((char - 55296) * 1024 + nextChar - 56320 + 65536);
              i++;
              continue;
            }
          }
          escapeSeq = ESCAPE_SEQUENCES[char];
          result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);
        }
        return result;
      }
      function writeFlowSequence(state, level, object) {
        var _result = "", _tag = state.tag, index, length;
        for (index = 0, length = object.length; index < length; index += 1) {
          if (writeNode(state, level, object[index], false, false)) {
            if (index !== 0)
              _result += "," + (!state.condenseFlow ? " " : "");
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = "[" + _result + "]";
      }
      function writeBlockSequence(state, level, object, compact) {
        var _result = "", _tag = state.tag, index, length;
        for (index = 0, length = object.length; index < length; index += 1) {
          if (writeNode(state, level + 1, object[index], true, true)) {
            if (!compact || index !== 0) {
              _result += generateNextLine(state, level);
            }
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              _result += "-";
            } else {
              _result += "- ";
            }
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = _result || "[]";
      }
      function writeFlowMapping(state, level, object) {
        var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          pairBuffer = "";
          if (index !== 0)
            pairBuffer += ", ";
          if (state.condenseFlow)
            pairBuffer += "\"";
          objectKey = objectKeyList[index];
          objectValue = object[objectKey];
          if (!writeNode(state, level, objectKey, false, false)) {
            continue;
          }
          if (state.dump.length > 1024)
            pairBuffer += "? ";
          pairBuffer += state.dump + (state.condenseFlow ? "\"" : "") + ":" + (state.condenseFlow ? "" : " ");
          if (!writeNode(state, level, objectValue, false, false)) {
            continue;
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = "{" + _result + "}";
      }
      function writeBlockMapping(state, level, object, compact) {
        var _result = "", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;
        if (state.sortKeys === true) {
          objectKeyList.sort();
        } else if (typeof state.sortKeys === "function") {
          objectKeyList.sort(state.sortKeys);
        } else if (state.sortKeys) {
          throw new YAMLException$1("sortKeys must be a boolean or a function");
        }
        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          pairBuffer = "";
          if (!compact || index !== 0) {
            pairBuffer += generateNextLine(state, level);
          }
          objectKey = objectKeyList[index];
          objectValue = object[objectKey];
          if (!writeNode(state, level + 1, objectKey, true, true, true)) {
            continue;
          }
          explicitPair = state.tag !== null && state.tag !== "?" || state.dump && state.dump.length > 1024;
          if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              pairBuffer += "?";
            } else {
              pairBuffer += "? ";
            }
          }
          pairBuffer += state.dump;
          if (explicitPair) {
            pairBuffer += generateNextLine(state, level);
          }
          if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
            continue;
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += ":";
          } else {
            pairBuffer += ": ";
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = _result || "{}";
      }
      function detectType(state, object, explicit) {
        var _result, typeList, index, length, type, style;
        typeList = explicit ? state.explicitTypes : state.implicitTypes;
        for (index = 0, length = typeList.length; index < length; index += 1) {
          type = typeList[index];
          if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === "object" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {
            state.tag = explicit ? type.tag : "?";
            if (type.represent) {
              style = state.styleMap[type.tag] || type.defaultStyle;
              if (_toString.call(type.represent) === "[object Function]") {
                _result = type.represent(object, style);
              } else if (_hasOwnProperty$1.call(type.represent, style)) {
                _result = type.represent[style](object, style);
              } else {
                throw new YAMLException$1("!<" + type.tag + "> tag resolver accepts not \"" + style + "\" style");
              }
              state.dump = _result;
            }
            return true;
          }
        }
        return false;
      }
      function writeNode(state, level, object, block, compact, iskey) {
        state.tag = null;
        state.dump = object;
        if (!detectType(state, object, false)) {
          detectType(state, object, true);
        }
        var type = _toString.call(state.dump);
        if (block) {
          block = state.flowLevel < 0 || state.flowLevel > level;
        }
        var objectOrArray = type === "[object Object]" || type === "[object Array]", duplicateIndex, duplicate;
        if (objectOrArray) {
          duplicateIndex = state.duplicates.indexOf(object);
          duplicate = duplicateIndex !== -1;
        }
        if (state.tag !== null && state.tag !== "?" || duplicate || state.indent !== 2 && level > 0) {
          compact = false;
        }
        if (duplicate && state.usedDuplicates[duplicateIndex]) {
          state.dump = "*ref_" + duplicateIndex;
        } else {
          if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
            state.usedDuplicates[duplicateIndex] = true;
          }
          if (type === "[object Object]") {
            if (block && Object.keys(state.dump).length !== 0) {
              writeBlockMapping(state, level, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowMapping(state, level, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object Array]") {
            var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;
            if (block && state.dump.length !== 0) {
              writeBlockSequence(state, arrayLevel, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowSequence(state, arrayLevel, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object String]") {
            if (state.tag !== "?") {
              writeScalar(state, state.dump, level, iskey);
            }
          } else {
            if (state.skipInvalid)
              return false;
            throw new YAMLException$1("unacceptable kind of an object to dump " + type);
          }
          if (state.tag !== null && state.tag !== "?") {
            state.dump = "!<" + state.tag + "> " + state.dump;
          }
        }
        return true;
      }
      function getDuplicateReferences(object, state) {
        var objects = [], duplicatesIndexes = [], index, length;
        inspectNode(object, objects, duplicatesIndexes);
        for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
          state.duplicates.push(objects[duplicatesIndexes[index]]);
        }
        state.usedDuplicates = new Array(length);
      }
      function inspectNode(object, objects, duplicatesIndexes) {
        var objectKeyList, index, length;
        if (object !== null && typeof object === "object") {
          index = objects.indexOf(object);
          if (index !== -1) {
            if (duplicatesIndexes.indexOf(index) === -1) {
              duplicatesIndexes.push(index);
            }
          } else {
            objects.push(object);
            if (Array.isArray(object)) {
              for (index = 0, length = object.length; index < length; index += 1) {
                inspectNode(object[index], objects, duplicatesIndexes);
              }
            } else {
              objectKeyList = Object.keys(object);
              for (index = 0, length = objectKeyList.length; index < length; index += 1) {
                inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
              }
            }
          }
        }
      }
      function dump(input, options) {
        options = options || {};
        var state = new State$1(options);
        if (!state.noRefs)
          getDuplicateReferences(input, state);
        if (writeNode(state, 0, input, true, true))
          return state.dump + "\n";
        return "";
      }
      function safeDump(input, options) {
        return dump(input, common$2.extend({ schema: DEFAULT_SAFE_SCHEMA$1 }, options));
      }
      exports$2$g.dump = dump;
      exports$2$g.safeDump = safeDump;
      var exports$3$d = {};
      var loader = exports$1$B;
      var dumper = exports$2$g;
      function deprecated(name) {
        return function () {
          throw new Error("Function " + name + " is deprecated and cannot be used.");
        };
      }
      exports$3$d.Type = _type;
      exports$3$d.Schema = _schema;
      exports$3$d.FAILSAFE_SCHEMA = _failsafe;
      exports$3$d.JSON_SCHEMA = _json;
      exports$3$d.CORE_SCHEMA = _core;
      exports$3$d.DEFAULT_SAFE_SCHEMA = _default_safe;
      exports$3$d.DEFAULT_FULL_SCHEMA = _default_full;
      exports$3$d.load = loader.load;
      exports$3$d.loadAll = loader.loadAll;
      exports$3$d.safeLoad = loader.safeLoad;
      exports$3$d.safeLoadAll = loader.safeLoadAll;
      exports$3$d.dump = dumper.dump;
      exports$3$d.safeDump = dumper.safeDump;
      exports$3$d.YAMLException = _exception;
      exports$3$d.MINIMAL_SCHEMA = _failsafe;
      exports$3$d.SAFE_SCHEMA = _default_safe;
      exports$3$d.DEFAULT_SCHEMA = _default_full;
      exports$3$d.scan = deprecated("scan");
      exports$3$d.parse = deprecated("parse");
      exports$3$d.compose = deprecated("compose");
      exports$3$d.addConstructor = deprecated("addConstructor");
      var exports$4$8 = {};
      var yaml = exports$3$d;
      exports$4$8 = yaml;
      var exports$5$6 = exports$4$8;

      var _jsYaml2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$5$6
      });

      var _global$e = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$5f = {};
      (function (global, factory) {
        factory(exports$5f);
      }(exports$5f, function (exports) {
        var reservedWords = {
          3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
          5: "class enum extends super const export import",
          6: "enum",
          strict: "implements interface let package private protected public static yield",
          strictBind: "eval arguments"
        };
        var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
        var keywords = {
          5: ecma5AndLessKeywords,
          "5module": ecma5AndLessKeywords + " export import",
          6: ecma5AndLessKeywords + " const class extends export import super"
        };
        var keywordRelationalOperator = /^in(stanceof)?$/;
        var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙ\u0560-\u0588א-ת\u05EF-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘ\u0860-\u086Aࢠ-ࢴࢶ-\u08C7ऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱ\u09FCਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲ\u0D04-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄ\u0E86-ຊ\u0E8C-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-\u1878ᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈ\u1C90-\u1CBA\u1CBD-\u1CBFᳩ-ᳬᳮ-ᳳᳵᳶ\u1CFAᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ\u2118-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ\u309B-ゟァ-ヺー-ヿㄅ-\u312Fㄱ-ㆎㆠ-\u31BFㇰ-ㇿ㐀-\u4DBF一-\u9FFCꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-\uA7BF\uA7C2-\uA7CA\uA7F5-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽ\uA8FEꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-\uAB69ꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
        var nonASCIIidentifierChars = "‌‍\xB7̀-ͯ\u0387҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳\u07FDࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛\u08D3-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯\u09FEਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯\u0AFA-\u0AFFଁ-ଃ଼ା-ୄେୈୋ-୍\u0B55-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-\u0C04ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯\u0D00-ഃ\u0D3B\u0D3Cാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯\u0D81-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟\u1369-\u1371ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-\u19DAᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽\u1ABF\u1AC0ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴\u1CF7-᳹᷀-\u1DF9᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ\uA82Cꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱\uA8FF-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
        var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
        var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        var astralIdentifierStartCodes = [
          0,
          11,
          2,
          25,
          2,
          18,
          2,
          1,
          2,
          14,
          3,
          13,
          35,
          122,
          70,
          52,
          268,
          28,
          4,
          48,
          48,
          31,
          14,
          29,
          6,
          37,
          11,
          29,
          3,
          35,
          5,
          7,
          2,
          4,
          43,
          157,
          19,
          35,
          5,
          35,
          5,
          39,
          9,
          51,
          157,
          310,
          10,
          21,
          11,
          7,
          153,
          5,
          3,
          0,
          2,
          43,
          2,
          1,
          4,
          0,
          3,
          22,
          11,
          22,
          10,
          30,
          66,
          18,
          2,
          1,
          11,
          21,
          11,
          25,
          71,
          55,
          7,
          1,
          65,
          0,
          16,
          3,
          2,
          2,
          2,
          28,
          43,
          28,
          4,
          28,
          36,
          7,
          2,
          27,
          28,
          53,
          11,
          21,
          11,
          18,
          14,
          17,
          111,
          72,
          56,
          50,
          14,
          50,
          14,
          35,
          349,
          41,
          7,
          1,
          79,
          28,
          11,
          0,
          9,
          21,
          107,
          20,
          28,
          22,
          13,
          52,
          76,
          44,
          33,
          24,
          27,
          35,
          30,
          0,
          3,
          0,
          9,
          34,
          4,
          0,
          13,
          47,
          15,
          3,
          22,
          0,
          2,
          0,
          36,
          17,
          2,
          24,
          85,
          6,
          2,
          0,
          2,
          3,
          2,
          14,
          2,
          9,
          8,
          46,
          39,
          7,
          3,
          1,
          3,
          21,
          2,
          6,
          2,
          1,
          2,
          4,
          4,
          0,
          19,
          0,
          13,
          4,
          159,
          52,
          19,
          3,
          21,
          2,
          31,
          47,
          21,
          1,
          2,
          0,
          185,
          46,
          42,
          3,
          37,
          47,
          21,
          0,
          60,
          42,
          14,
          0,
          72,
          26,
          230,
          43,
          117,
          63,
          32,
          7,
          3,
          0,
          3,
          7,
          2,
          1,
          2,
          23,
          16,
          0,
          2,
          0,
          95,
          7,
          3,
          38,
          17,
          0,
          2,
          0,
          29,
          0,
          11,
          39,
          8,
          0,
          22,
          0,
          12,
          45,
          20,
          0,
          35,
          56,
          264,
          8,
          2,
          36,
          18,
          0,
          50,
          29,
          113,
          6,
          2,
          1,
          2,
          37,
          22,
          0,
          26,
          5,
          2,
          1,
          2,
          31,
          15,
          0,
          328,
          18,
          190,
          0,
          80,
          921,
          103,
          110,
          18,
          195,
          2749,
          1070,
          4050,
          582,
          8634,
          568,
          8,
          30,
          114,
          29,
          19,
          47,
          17,
          3,
          32,
          20,
          6,
          18,
          689,
          63,
          129,
          74,
          6,
          0,
          67,
          12,
          65,
          1,
          2,
          0,
          29,
          6135,
          9,
          1237,
          43,
          8,
          8952,
          286,
          50,
          2,
          18,
          3,
          9,
          395,
          2309,
          106,
          6,
          12,
          4,
          8,
          8,
          9,
          5991,
          84,
          2,
          70,
          2,
          1,
          3,
          0,
          3,
          1,
          3,
          3,
          2,
          11,
          2,
          0,
          2,
          6,
          2,
          64,
          2,
          3,
          3,
          7,
          2,
          6,
          2,
          27,
          2,
          3,
          2,
          4,
          2,
          0,
          4,
          6,
          2,
          339,
          3,
          24,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          30,
          2,
          24,
          2,
          7,
          2357,
          44,
          11,
          6,
          17,
          0,
          370,
          43,
          1301,
          196,
          60,
          67,
          8,
          0,
          1205,
          3,
          2,
          26,
          2,
          1,
          2,
          0,
          3,
          0,
          2,
          9,
          2,
          3,
          2,
          0,
          2,
          0,
          7,
          0,
          5,
          0,
          2,
          0,
          2,
          0,
          2,
          2,
          2,
          1,
          2,
          0,
          3,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          0,
          2,
          1,
          2,
          0,
          3,
          3,
          2,
          6,
          2,
          3,
          2,
          3,
          2,
          0,
          2,
          9,
          2,
          16,
          6,
          2,
          2,
          4,
          2,
          16,
          4421,
          42717,
          35,
          4148,
          12,
          221,
          3,
          5761,
          15,
          7472,
          3104,
          541,
          1507,
          4938
        ];
        var astralIdentifierCodes = [
          509,
          0,
          227,
          0,
          150,
          4,
          294,
          9,
          1368,
          2,
          2,
          1,
          6,
          3,
          41,
          2,
          5,
          0,
          166,
          1,
          574,
          3,
          9,
          9,
          370,
          1,
          154,
          10,
          176,
          2,
          54,
          14,
          32,
          9,
          16,
          3,
          46,
          10,
          54,
          9,
          7,
          2,
          37,
          13,
          2,
          9,
          6,
          1,
          45,
          0,
          13,
          2,
          49,
          13,
          9,
          3,
          2,
          11,
          83,
          11,
          7,
          0,
          161,
          11,
          6,
          9,
          7,
          3,
          56,
          1,
          2,
          6,
          3,
          1,
          3,
          2,
          10,
          0,
          11,
          1,
          3,
          6,
          4,
          4,
          193,
          17,
          10,
          9,
          5,
          0,
          82,
          19,
          13,
          9,
          214,
          6,
          3,
          8,
          28,
          1,
          83,
          16,
          16,
          9,
          82,
          12,
          9,
          9,
          84,
          14,
          5,
          9,
          243,
          14,
          166,
          9,
          71,
          5,
          2,
          1,
          3,
          3,
          2,
          0,
          2,
          1,
          13,
          9,
          120,
          6,
          3,
          6,
          4,
          0,
          29,
          9,
          41,
          6,
          2,
          3,
          9,
          0,
          10,
          10,
          47,
          15,
          406,
          7,
          2,
          7,
          17,
          9,
          57,
          21,
          2,
          13,
          123,
          5,
          4,
          0,
          2,
          1,
          2,
          6,
          2,
          0,
          9,
          9,
          49,
          4,
          2,
          1,
          2,
          4,
          9,
          9,
          330,
          3,
          19306,
          9,
          135,
          4,
          60,
          6,
          26,
          9,
          1014,
          0,
          2,
          54,
          8,
          3,
          82,
          0,
          12,
          1,
          19628,
          1,
          5319,
          4,
          4,
          5,
          9,
          7,
          3,
          6,
          31,
          3,
          149,
          2,
          1418,
          49,
          513,
          54,
          5,
          49,
          9,
          0,
          15,
          0,
          23,
          4,
          2,
          14,
          1361,
          6,
          2,
          16,
          3,
          6,
          2,
          1,
          2,
          4,
          262,
          6,
          10,
          9,
          419,
          13,
          1495,
          6,
          110,
          6,
          6,
          9,
          4759,
          9,
          787719,
          239
        ];
        function isInAstralSet(code, set) {
          var pos = 65536;
          for (var i = 0; i < set.length; i += 2) {
            pos += set[i];
            if (pos > code) {
              return false;
            }
            pos += set[i + 1];
            if (pos >= code) {
              return true;
            }
          }
        }
        function isIdentifierStart(code, astral) {
          if (code < 65) {
            return code === 36;
          }
          if (code < 91) {
            return true;
          }
          if (code < 97) {
            return code === 95;
          }
          if (code < 123) {
            return true;
          }
          if (code <= 65535) {
            return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
          }
          if (astral === false) {
            return false;
          }
          return isInAstralSet(code, astralIdentifierStartCodes);
        }
        function isIdentifierChar(code, astral) {
          if (code < 48) {
            return code === 36;
          }
          if (code < 58) {
            return true;
          }
          if (code < 65) {
            return false;
          }
          if (code < 91) {
            return true;
          }
          if (code < 97) {
            return code === 95;
          }
          if (code < 123) {
            return true;
          }
          if (code <= 65535) {
            return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
          }
          if (astral === false) {
            return false;
          }
          return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
        }
        var TokenType = function TokenType(label, conf) {
          if (conf === void 0)
            conf = {};
          (this || _global$e).label = label;
          (this || _global$e).keyword = conf.keyword;
          (this || _global$e).beforeExpr = !!conf.beforeExpr;
          (this || _global$e).startsExpr = !!conf.startsExpr;
          (this || _global$e).isLoop = !!conf.isLoop;
          (this || _global$e).isAssign = !!conf.isAssign;
          (this || _global$e).prefix = !!conf.prefix;
          (this || _global$e).postfix = !!conf.postfix;
          (this || _global$e).binop = conf.binop || null;
          (this || _global$e).updateContext = null;
        };
        function binop(name, prec) {
          return new TokenType(name, {
            beforeExpr: true,
            binop: prec
          });
        }
        var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
        var keywords$1 = {};
        function kw(name, options) {
          if (options === void 0)
            options = {};
          options.keyword = name;
          return keywords$1[name] = new TokenType(name, options);
        }
        var types = {
          num: new TokenType("num", startsExpr),
          regexp: new TokenType("regexp", startsExpr),
          string: new TokenType("string", startsExpr),
          name: new TokenType("name", startsExpr),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", {
            beforeExpr: true,
            startsExpr: true
          }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", {
            beforeExpr: true,
            startsExpr: true
          }),
          braceR: new TokenType("}"),
          parenL: new TokenType("(", {
            beforeExpr: true,
            startsExpr: true
          }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", beforeExpr),
          semi: new TokenType(";", beforeExpr),
          colon: new TokenType(":", beforeExpr),
          dot: new TokenType("."),
          question: new TokenType("?", beforeExpr),
          questionDot: new TokenType("?."),
          arrow: new TokenType("=>", beforeExpr),
          template: new TokenType("template"),
          invalidTemplate: new TokenType("invalidTemplate"),
          ellipsis: new TokenType("...", beforeExpr),
          backQuote: new TokenType("`", startsExpr),
          dollarBraceL: new TokenType("${", {
            beforeExpr: true,
            startsExpr: true
          }),
          eq: new TokenType("=", {
            beforeExpr: true,
            isAssign: true
          }),
          assign: new TokenType("_=", {
            beforeExpr: true,
            isAssign: true
          }),
          incDec: new TokenType("++/--", {
            prefix: true,
            postfix: true,
            startsExpr: true
          }),
          prefix: new TokenType("!/~", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          logicalOR: binop("||", 1),
          logicalAND: binop("&&", 2),
          bitwiseOR: binop("|", 3),
          bitwiseXOR: binop("^", 4),
          bitwiseAND: binop("&", 5),
          equality: binop("==/!=/===/!==", 6),
          relational: binop("</>/<=/>=", 7),
          bitShift: binop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr: true,
            binop: 9,
            prefix: true,
            startsExpr: true
          }),
          modulo: binop("%", 10),
          star: binop("*", 10),
          slash: binop("/", 10),
          starstar: new TokenType("**", { beforeExpr: true }),
          coalesce: binop("??", 1),
          _break: kw("break"),
          _case: kw("case", beforeExpr),
          _catch: kw("catch"),
          _continue: kw("continue"),
          _debugger: kw("debugger"),
          _default: kw("default", beforeExpr),
          _do: kw("do", {
            isLoop: true,
            beforeExpr: true
          }),
          _else: kw("else", beforeExpr),
          _finally: kw("finally"),
          _for: kw("for", { isLoop: true }),
          _function: kw("function", startsExpr),
          _if: kw("if"),
          _return: kw("return", beforeExpr),
          _switch: kw("switch"),
          _throw: kw("throw", beforeExpr),
          _try: kw("try"),
          _var: kw("var"),
          _const: kw("const"),
          _while: kw("while", { isLoop: true }),
          _with: kw("with"),
          _new: kw("new", {
            beforeExpr: true,
            startsExpr: true
          }),
          _this: kw("this", startsExpr),
          _super: kw("super", startsExpr),
          _class: kw("class", startsExpr),
          _extends: kw("extends", beforeExpr),
          _export: kw("export"),
          _import: kw("import", startsExpr),
          _null: kw("null", startsExpr),
          _true: kw("true", startsExpr),
          _false: kw("false", startsExpr),
          _in: kw("in", {
            beforeExpr: true,
            binop: 7
          }),
          _instanceof: kw("instanceof", {
            beforeExpr: true,
            binop: 7
          }),
          _typeof: kw("typeof", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _void: kw("void", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _delete: kw("delete", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          })
        };
        var lineBreak = /\r\n?|\n|\u2028|\u2029/;
        var lineBreakG = new RegExp(lineBreak.source, "g");
        function isNewLine(code, ecma2019String) {
          return code === 10 || code === 13 || !ecma2019String && (code === 8232 || code === 8233);
        }
        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
        var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
        var ref = Object.prototype;
        var hasOwnProperty = ref.hasOwnProperty;
        var toString = ref.toString;
        function has(obj, propName) {
          return hasOwnProperty.call(obj, propName);
        }
        var isArray = Array.isArray || function (obj) {
          return toString.call(obj) === "[object Array]";
        };
        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }
        var Position = function Position(line, col) {
          (this || _global$e).line = line;
          (this || _global$e).column = col;
        };
        Position.prototype.offset = function offset(n) {
          return new Position((this || _global$e).line, (this || _global$e).column + n);
        };
        var SourceLocation = function SourceLocation(p, start, end) {
          (this || _global$e).start = start;
          (this || _global$e).end = end;
          if (p.sourceFile !== null) {
            (this || _global$e).source = p.sourceFile;
          }
        };
        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0;;) {
            lineBreakG.lastIndex = cur;
            var match = lineBreakG.exec(input);
            if (match && match.index < offset) {
              ++line;
              cur = match.index + match[0].length;
            } else {
              return new Position(line, offset - cur);
            }
          }
        }
        var defaultOptions = {
          ecmaVersion: 10,
          sourceType: "script",
          onInsertedSemicolon: null,
          onTrailingComma: null,
          allowReserved: null,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowAwaitOutsideFunction: false,
          allowHashBang: false,
          locations: false,
          onToken: null,
          onComment: null,
          ranges: false,
          program: null,
          sourceFile: null,
          directSourceFile: null,
          preserveParens: false
        };
        function getOptions(opts) {
          var options = {};
          for (var opt in defaultOptions) {
            options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
          }
          if (options.ecmaVersion >= 2015) {
            options.ecmaVersion -= 2009;
          }
          if (options.allowReserved == null) {
            options.allowReserved = options.ecmaVersion < 5;
          }
          if (isArray(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function (token) {
              return tokens.push(token);
            };
          }
          if (isArray(options.onComment)) {
            options.onComment = pushComment(options, options.onComment);
          }
          return options;
        }
        function pushComment(options, array) {
          return function (block, text, start, end, startLoc, endLoc) {
            var comment = {
              type: block ? "Block" : "Line",
              value: text,
              start: start,
              end: end
            };
            if (options.locations) {
              comment.loc = new SourceLocation(this || _global$e, startLoc, endLoc);
            }
            if (options.ranges) {
              comment.range = [
                start,
                end
              ];
            }
            array.push(comment);
          };
        }
        var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128;
        function functionFlags(async, generator) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
        }
        var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;
        var Parser = function Parser(options, input, startPos) {
          (this || _global$e).options = options = getOptions(options);
          (this || _global$e).sourceFile = options.sourceFile;
          (this || _global$e).keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
          var reserved = "";
          if (options.allowReserved !== true) {
            for (var v = options.ecmaVersion;; v--) {
              if (reserved = reservedWords[v]) {
                break;
              }
            }
            if (options.sourceType === "module") {
              reserved += " await";
            }
          }
          (this || _global$e).reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          (this || _global$e).reservedWordsStrict = wordsRegexp(reservedStrict);
          (this || _global$e).reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
          (this || _global$e).input = String(input);
          (this || _global$e).containsEsc = false;
          if (startPos) {
            (this || _global$e).pos = startPos;
            (this || _global$e).lineStart = (this || _global$e).input.lastIndexOf("\n", startPos - 1) + 1;
            (this || _global$e).curLine = (this || _global$e).input.slice(0, (this || _global$e).lineStart).split(lineBreak).length;
          } else {
            (this || _global$e).pos = (this || _global$e).lineStart = 0;
            (this || _global$e).curLine = 1;
          }
          (this || _global$e).type = types.eof;
          (this || _global$e).value = null;
          (this || _global$e).start = (this || _global$e).end = (this || _global$e).pos;
          (this || _global$e).startLoc = (this || _global$e).endLoc = this.curPosition();
          (this || _global$e).lastTokEndLoc = (this || _global$e).lastTokStartLoc = null;
          (this || _global$e).lastTokStart = (this || _global$e).lastTokEnd = (this || _global$e).pos;
          (this || _global$e).context = this.initialContext();
          (this || _global$e).exprAllowed = true;
          (this || _global$e).inModule = options.sourceType === "module";
          (this || _global$e).strict = (this || _global$e).inModule || this.strictDirective((this || _global$e).pos);
          (this || _global$e).potentialArrowAt = -1;
          (this || _global$e).yieldPos = (this || _global$e).awaitPos = (this || _global$e).awaitIdentPos = 0;
          (this || _global$e).labels = [];
          (this || _global$e).undefinedExports = {};
          if ((this || _global$e).pos === 0 && options.allowHashBang && (this || _global$e).input.slice(0, 2) === "#!") {
            this.skipLineComment(2);
          }
          (this || _global$e).scopeStack = [];
          this.enterScope(SCOPE_TOP);
          (this || _global$e).regexpState = null;
        };
        var prototypeAccessors = {
          inFunction: { configurable: true },
          inGenerator: { configurable: true },
          inAsync: { configurable: true },
          allowSuper: { configurable: true },
          allowDirectSuper: { configurable: true },
          treatFunctionsAsVar: { configurable: true }
        };
        Parser.prototype.parse = function parse() {
          var node = (this || _global$e).options.program || this.startNode();
          this.nextToken();
          return this.parseTopLevel(node);
        };
        prototypeAccessors.inFunction.get = function () {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
        };
        prototypeAccessors.inGenerator.get = function () {
          return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
        };
        prototypeAccessors.inAsync.get = function () {
          return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
        };
        prototypeAccessors.allowSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
        };
        prototypeAccessors.allowDirectSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
        };
        prototypeAccessors.treatFunctionsAsVar.get = function () {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        };
        Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
          return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
        };
        Parser.extend = function extend() {
          var plugins = [], len = arguments.length;
          while (len--)
            plugins[len] = arguments[len];
          var cls = this || _global$e;
          for (var i = 0; i < plugins.length; i++) {
            cls = plugins[i](cls);
          }
          return cls;
        };
        Parser.parse = function parse(input, options) {
          return new (this || _global$e)(options, input).parse();
        };
        Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
          var parser = new (this || _global$e)(options, input, pos);
          parser.nextToken();
          return parser.parseExpression();
        };
        Parser.tokenizer = function tokenizer(input, options) {
          return new (this || _global$e)(options, input);
        };
        Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp = Parser.prototype;
        var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
        pp.strictDirective = function (start) {
          for (;;) {
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec((this || _global$e).input)[0].length;
            var match = literal.exec((this || _global$e).input.slice(start));
            if (!match) {
              return false;
            }
            if ((match[1] || match[2]) === "use strict") {
              skipWhiteSpace.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace.exec((this || _global$e).input), end = spaceAfter.index + spaceAfter[0].length;
              var next = (this || _global$e).input.charAt(end);
              return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && (this || _global$e).input.charAt(end + 1) === "=");
            }
            start += match[0].length;
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec((this || _global$e).input)[0].length;
            if ((this || _global$e).input[start] === ";") {
              start++;
            }
          }
        };
        pp.eat = function (type) {
          if ((this || _global$e).type === type) {
            this.next();
            return true;
          } else {
            return false;
          }
        };
        pp.isContextual = function (name) {
          return (this || _global$e).type === types.name && (this || _global$e).value === name && !(this || _global$e).containsEsc;
        };
        pp.eatContextual = function (name) {
          if (!this.isContextual(name)) {
            return false;
          }
          this.next();
          return true;
        };
        pp.expectContextual = function (name) {
          if (!this.eatContextual(name)) {
            this.unexpected();
          }
        };
        pp.canInsertSemicolon = function () {
          return (this || _global$e).type === types.eof || (this || _global$e).type === types.braceR || lineBreak.test((this || _global$e).input.slice((this || _global$e).lastTokEnd, (this || _global$e).start));
        };
        pp.insertSemicolon = function () {
          if (this.canInsertSemicolon()) {
            if ((this || _global$e).options.onInsertedSemicolon) {
              (this || _global$e).options.onInsertedSemicolon((this || _global$e).lastTokEnd, (this || _global$e).lastTokEndLoc);
            }
            return true;
          }
        };
        pp.semicolon = function () {
          if (!this.eat(types.semi) && !this.insertSemicolon()) {
            this.unexpected();
          }
        };
        pp.afterTrailingComma = function (tokType, notNext) {
          if ((this || _global$e).type === tokType) {
            if ((this || _global$e).options.onTrailingComma) {
              (this || _global$e).options.onTrailingComma((this || _global$e).lastTokStart, (this || _global$e).lastTokStartLoc);
            }
            if (!notNext) {
              this.next();
            }
            return true;
          }
        };
        pp.expect = function (type) {
          this.eat(type) || this.unexpected();
        };
        pp.unexpected = function (pos) {
          this.raise(pos != null ? pos : (this || _global$e).start, "Unexpected token");
        };
        function DestructuringErrors() {
          (this || _global$e).shorthandAssign = (this || _global$e).trailingComma = (this || _global$e).parenthesizedAssign = (this || _global$e).parenthesizedBind = (this || _global$e).doubleProto = -1;
        }
        pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
          if (!refDestructuringErrors) {
            return;
          }
          if (refDestructuringErrors.trailingComma > -1) {
            this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          }
          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
          if (parens > -1) {
            this.raiseRecoverable(parens, "Parenthesized pattern");
          }
        };
        pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) {
            return false;
          }
          var shorthandAssign = refDestructuringErrors.shorthandAssign;
          var doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow) {
            return shorthandAssign >= 0 || doubleProto >= 0;
          }
          if (shorthandAssign >= 0) {
            this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
          }
          if (doubleProto >= 0) {
            this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
          }
        };
        pp.checkYieldAwaitInDefaultParams = function () {
          if ((this || _global$e).yieldPos && (!(this || _global$e).awaitPos || (this || _global$e).yieldPos < (this || _global$e).awaitPos)) {
            this.raise((this || _global$e).yieldPos, "Yield expression cannot be a default value");
          }
          if ((this || _global$e).awaitPos) {
            this.raise((this || _global$e).awaitPos, "Await expression cannot be a default value");
          }
        };
        pp.isSimpleAssignTarget = function (expr) {
          if (expr.type === "ParenthesizedExpression") {
            return this.isSimpleAssignTarget(expr.expression);
          }
          return expr.type === "Identifier" || expr.type === "MemberExpression";
        };
        var pp$1 = Parser.prototype;
        pp$1.parseTopLevel = function (node) {
          var exports = {};
          if (!node.body) {
            node.body = [];
          }
          while ((this || _global$e).type !== types.eof) {
            var stmt = this.parseStatement(null, true, exports);
            node.body.push(stmt);
          }
          if ((this || _global$e).inModule) {
            for (var i = 0, list = Object.keys((this || _global$e).undefinedExports); i < list.length; i += 1) {
              var name = list[i];
              this.raiseRecoverable((this || _global$e).undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          }
          this.adaptDirectivePrologue(node.body);
          this.next();
          node.sourceType = (this || _global$e).options.sourceType;
          return this.finishNode(node, "Program");
        };
        var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
        pp$1.isLet = function (context) {
          if ((this || _global$e).options.ecmaVersion < 6 || !this.isContextual("let")) {
            return false;
          }
          skipWhiteSpace.lastIndex = (this || _global$e).pos;
          var skip = skipWhiteSpace.exec((this || _global$e).input);
          var next = (this || _global$e).pos + skip[0].length, nextCh = (this || _global$e).input.charCodeAt(next);
          if (nextCh === 91) {
            return true;
          }
          if (context) {
            return false;
          }
          if (nextCh === 123) {
            return true;
          }
          if (isIdentifierStart(nextCh, true)) {
            var pos = next + 1;
            while (isIdentifierChar((this || _global$e).input.charCodeAt(pos), true)) {
              ++pos;
            }
            var ident = (this || _global$e).input.slice(next, pos);
            if (!keywordRelationalOperator.test(ident)) {
              return true;
            }
          }
          return false;
        };
        pp$1.isAsyncFunction = function () {
          if ((this || _global$e).options.ecmaVersion < 8 || !this.isContextual("async")) {
            return false;
          }
          skipWhiteSpace.lastIndex = (this || _global$e).pos;
          var skip = skipWhiteSpace.exec((this || _global$e).input);
          var next = (this || _global$e).pos + skip[0].length;
          return !lineBreak.test((this || _global$e).input.slice((this || _global$e).pos, next)) && (this || _global$e).input.slice(next, next + 8) === "function" && (next + 8 === (this || _global$e).input.length || !isIdentifierChar((this || _global$e).input.charAt(next + 8)));
        };
        pp$1.parseStatement = function (context, topLevel, exports) {
          var starttype = (this || _global$e).type, node = this.startNode(), kind;
          if (this.isLet(context)) {
            starttype = types._var;
            kind = "let";
          }
          switch (starttype) {
          case types._break:
          case types._continue:
            return this.parseBreakContinueStatement(node, starttype.keyword);
          case types._debugger:
            return this.parseDebuggerStatement(node);
          case types._do:
            return this.parseDoStatement(node);
          case types._for:
            return this.parseForStatement(node);
          case types._function:
            if (context && ((this || _global$e).strict || context !== "if" && context !== "label") && (this || _global$e).options.ecmaVersion >= 6) {
              this.unexpected();
            }
            return this.parseFunctionStatement(node, false, !context);
          case types._class:
            if (context) {
              this.unexpected();
            }
            return this.parseClass(node, true);
          case types._if:
            return this.parseIfStatement(node);
          case types._return:
            return this.parseReturnStatement(node);
          case types._switch:
            return this.parseSwitchStatement(node);
          case types._throw:
            return this.parseThrowStatement(node);
          case types._try:
            return this.parseTryStatement(node);
          case types._const:
          case types._var:
            kind = kind || (this || _global$e).value;
            if (context && kind !== "var") {
              this.unexpected();
            }
            return this.parseVarStatement(node, kind);
          case types._while:
            return this.parseWhileStatement(node);
          case types._with:
            return this.parseWithStatement(node);
          case types.braceL:
            return this.parseBlock(true, node);
          case types.semi:
            return this.parseEmptyStatement(node);
          case types._export:
          case types._import:
            if ((this || _global$e).options.ecmaVersion > 10 && starttype === types._import) {
              skipWhiteSpace.lastIndex = (this || _global$e).pos;
              var skip = skipWhiteSpace.exec((this || _global$e).input);
              var next = (this || _global$e).pos + skip[0].length, nextCh = (this || _global$e).input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46) {
                return this.parseExpressionStatement(node, this.parseExpression());
              }
            }
            if (!(this || _global$e).options.allowImportExportEverywhere) {
              if (!topLevel) {
                this.raise((this || _global$e).start, "'import' and 'export' may only appear at the top level");
              }
              if (!(this || _global$e).inModule) {
                this.raise((this || _global$e).start, "'import' and 'export' may appear only with 'sourceType: module'");
              }
            }
            return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);
          default:
            if (this.isAsyncFunction()) {
              if (context) {
                this.unexpected();
              }
              this.next();
              return this.parseFunctionStatement(node, true, !context);
            }
            var maybeName = (this || _global$e).value, expr = this.parseExpression();
            if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
              return this.parseLabeledStatement(node, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node, expr);
            }
          }
        };
        pp$1.parseBreakContinueStatement = function (node, keyword) {
          var isBreak = keyword === "break";
          this.next();
          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.label = null;
          } else if ((this || _global$e).type !== types.name) {
            this.unexpected();
          } else {
            node.label = this.parseIdent();
            this.semicolon();
          }
          var i = 0;
          for (; i < (this || _global$e).labels.length; ++i) {
            var lab = (this || _global$e).labels[i];
            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                break;
              }
              if (node.label && isBreak) {
                break;
              }
            }
          }
          if (i === (this || _global$e).labels.length) {
            this.raise(node.start, "Unsyntactic " + keyword);
          }
          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        };
        pp$1.parseDebuggerStatement = function (node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        };
        pp$1.parseDoStatement = function (node) {
          this.next();
          (this || _global$e).labels.push(loopLabel);
          node.body = this.parseStatement("do");
          (this || _global$e).labels.pop();
          this.expect(types._while);
          node.test = this.parseParenExpression();
          if ((this || _global$e).options.ecmaVersion >= 6) {
            this.eat(types.semi);
          } else {
            this.semicolon();
          }
          return this.finishNode(node, "DoWhileStatement");
        };
        pp$1.parseForStatement = function (node) {
          this.next();
          var awaitAt = (this || _global$e).options.ecmaVersion >= 9 && ((this || _global$e).inAsync || !(this || _global$e).inFunction && (this || _global$e).options.allowAwaitOutsideFunction) && this.eatContextual("await") ? (this || _global$e).lastTokStart : -1;
          (this || _global$e).labels.push(loopLabel);
          this.enterScope(0);
          this.expect(types.parenL);
          if ((this || _global$e).type === types.semi) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }
            return this.parseFor(node, null);
          }
          var isLet = this.isLet();
          if ((this || _global$e).type === types._var || (this || _global$e).type === types._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : (this || _global$e).value;
            this.next();
            this.parseVar(init$1, true, kind);
            this.finishNode(init$1, "VariableDeclaration");
            if (((this || _global$e).type === types._in || (this || _global$e).options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
              if ((this || _global$e).options.ecmaVersion >= 9) {
                if ((this || _global$e).type === types._in) {
                  if (awaitAt > -1) {
                    this.unexpected(awaitAt);
                  }
                } else {
                  node.await = awaitAt > -1;
                }
              }
              return this.parseForIn(node, init$1);
            }
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }
            return this.parseFor(node, init$1);
          }
          var refDestructuringErrors = new DestructuringErrors();
          var init = this.parseExpression(true, refDestructuringErrors);
          if ((this || _global$e).type === types._in || (this || _global$e).options.ecmaVersion >= 6 && this.isContextual("of")) {
            if ((this || _global$e).options.ecmaVersion >= 9) {
              if ((this || _global$e).type === types._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }
            this.toAssignable(init, false, refDestructuringErrors);
            this.checkLVal(init);
            return this.parseForIn(node, init);
          } else {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init);
        };
        pp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {
          this.next();
          return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        };
        pp$1.parseIfStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          node.consequent = this.parseStatement("if");
          node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
          return this.finishNode(node, "IfStatement");
        };
        pp$1.parseReturnStatement = function (node) {
          if (!(this || _global$e).inFunction && !(this || _global$e).options.allowReturnOutsideFunction) {
            this.raise((this || _global$e).start, "'return' outside of function");
          }
          this.next();
          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }
          return this.finishNode(node, "ReturnStatement");
        };
        pp$1.parseSwitchStatement = function (node) {
          this.next();
          node.discriminant = this.parseParenExpression();
          node.cases = [];
          this.expect(types.braceL);
          (this || _global$e).labels.push(switchLabel);
          this.enterScope(0);
          var cur;
          for (var sawDefault = false; (this || _global$e).type !== types.braceR;) {
            if ((this || _global$e).type === types._case || (this || _global$e).type === types._default) {
              var isCase = (this || _global$e).type === types._case;
              if (cur) {
                this.finishNode(cur, "SwitchCase");
              }
              node.cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();
              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raiseRecoverable((this || _global$e).lastTokStart, "Multiple default clauses");
                }
                sawDefault = true;
                cur.test = null;
              }
              this.expect(types.colon);
            } else {
              if (!cur) {
                this.unexpected();
              }
              cur.consequent.push(this.parseStatement(null));
            }
          }
          this.exitScope();
          if (cur) {
            this.finishNode(cur, "SwitchCase");
          }
          this.next();
          (this || _global$e).labels.pop();
          return this.finishNode(node, "SwitchStatement");
        };
        pp$1.parseThrowStatement = function (node) {
          this.next();
          if (lineBreak.test((this || _global$e).input.slice((this || _global$e).lastTokEnd, (this || _global$e).start))) {
            this.raise((this || _global$e).lastTokEnd, "Illegal newline after throw");
          }
          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        };
        var empty = [];
        pp$1.parseTryStatement = function (node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;
          if ((this || _global$e).type === types._catch) {
            var clause = this.startNode();
            this.next();
            if (this.eat(types.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = clause.param.type === "Identifier";
              this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
              this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
              this.expect(types.parenR);
            } else {
              if ((this || _global$e).options.ecmaVersion < 10) {
                this.unexpected();
              }
              clause.param = null;
              this.enterScope(0);
            }
            clause.body = this.parseBlock(false);
            this.exitScope();
            node.handler = this.finishNode(clause, "CatchClause");
          }
          node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
          if (!node.handler && !node.finalizer) {
            this.raise(node.start, "Missing catch or finally clause");
          }
          return this.finishNode(node, "TryStatement");
        };
        pp$1.parseVarStatement = function (node, kind) {
          this.next();
          this.parseVar(node, false, kind);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        };
        pp$1.parseWhileStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          (this || _global$e).labels.push(loopLabel);
          node.body = this.parseStatement("while");
          (this || _global$e).labels.pop();
          return this.finishNode(node, "WhileStatement");
        };
        pp$1.parseWithStatement = function (node) {
          if ((this || _global$e).strict) {
            this.raise((this || _global$e).start, "'with' in strict mode");
          }
          this.next();
          node.object = this.parseParenExpression();
          node.body = this.parseStatement("with");
          return this.finishNode(node, "WithStatement");
        };
        pp$1.parseEmptyStatement = function (node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        };
        pp$1.parseLabeledStatement = function (node, maybeName, expr, context) {
          for (var i$1 = 0, list = (this || _global$e).labels; i$1 < list.length; i$1 += 1) {
            var label = list[i$1];
            if (label.name === maybeName) {
              this.raise(expr.start, "Label '" + maybeName + "' is already declared");
            }
          }
          var kind = (this || _global$e).type.isLoop ? "loop" : (this || _global$e).type === types._switch ? "switch" : null;
          for (var i = (this || _global$e).labels.length - 1; i >= 0; i--) {
            var label$1 = (this || _global$e).labels[i];
            if (label$1.statementStart === node.start) {
              label$1.statementStart = (this || _global$e).start;
              label$1.kind = kind;
            } else {
              break;
            }
          }
          (this || _global$e).labels.push({
            name: maybeName,
            kind: kind,
            statementStart: (this || _global$e).start
          });
          node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
          (this || _global$e).labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        };
        pp$1.parseExpressionStatement = function (node, expr) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        };
        pp$1.parseBlock = function (createNewLexicalScope, node, exitStrict) {
          if (createNewLexicalScope === void 0)
            createNewLexicalScope = true;
          if (node === void 0)
            node = this.startNode();
          node.body = [];
          this.expect(types.braceL);
          if (createNewLexicalScope) {
            this.enterScope(0);
          }
          while ((this || _global$e).type !== types.braceR) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          if (exitStrict) {
            (this || _global$e).strict = false;
          }
          this.next();
          if (createNewLexicalScope) {
            this.exitScope();
          }
          return this.finishNode(node, "BlockStatement");
        };
        pp$1.parseFor = function (node, init) {
          node.init = init;
          this.expect(types.semi);
          node.test = (this || _global$e).type === types.semi ? null : this.parseExpression();
          this.expect(types.semi);
          node.update = (this || _global$e).type === types.parenR ? null : this.parseExpression();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          (this || _global$e).labels.pop();
          return this.finishNode(node, "ForStatement");
        };
        pp$1.parseForIn = function (node, init) {
          var isForIn = (this || _global$e).type === types._in;
          this.next();
          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || (this || _global$e).options.ecmaVersion < 8 || (this || _global$e).strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
          } else if (init.type === "AssignmentPattern") {
            this.raise(init.start, "Invalid left-hand side in for-loop");
          }
          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          (this || _global$e).labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        };
        pp$1.parseVar = function (node, isFor, kind) {
          node.declarations = [];
          node.kind = kind;
          for (;;) {
            var decl = this.startNode();
            this.parseVarId(decl, kind);
            if (this.eat(types.eq)) {
              decl.init = this.parseMaybeAssign(isFor);
            } else if (kind === "const" && !((this || _global$e).type === types._in || (this || _global$e).options.ecmaVersion >= 6 && this.isContextual("of"))) {
              this.unexpected();
            } else if (decl.id.type !== "Identifier" && !(isFor && ((this || _global$e).type === types._in || this.isContextual("of")))) {
              this.raise((this || _global$e).lastTokEnd, "Complex binding patterns require an initialization value");
            } else {
              decl.init = null;
            }
            node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
            if (!this.eat(types.comma)) {
              break;
            }
          }
          return node;
        };
        pp$1.parseVarId = function (decl, kind) {
          decl.id = this.parseBindingAtom();
          this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
        };
        var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
        pp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
          this.initFunction(node);
          if ((this || _global$e).options.ecmaVersion >= 9 || (this || _global$e).options.ecmaVersion >= 6 && !isAsync) {
            if ((this || _global$e).type === types.star && statement & FUNC_HANGING_STATEMENT) {
              this.unexpected();
            }
            node.generator = this.eat(types.star);
          }
          if ((this || _global$e).options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }
          if (statement & FUNC_STATEMENT) {
            node.id = statement & FUNC_NULLABLE_ID && (this || _global$e).type !== types.name ? null : this.parseIdent();
            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
              this.checkLVal(node.id, (this || _global$e).strict || node.generator || node.async ? (this || _global$e).treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
            }
          }
          var oldYieldPos = (this || _global$e).yieldPos, oldAwaitPos = (this || _global$e).awaitPos, oldAwaitIdentPos = (this || _global$e).awaitIdentPos;
          (this || _global$e).yieldPos = 0;
          (this || _global$e).awaitPos = 0;
          (this || _global$e).awaitIdentPos = 0;
          this.enterScope(functionFlags(node.async, node.generator));
          if (!(statement & FUNC_STATEMENT)) {
            node.id = (this || _global$e).type === types.name ? this.parseIdent() : null;
          }
          this.parseFunctionParams(node);
          this.parseFunctionBody(node, allowExpressionBody, false);
          (this || _global$e).yieldPos = oldYieldPos;
          (this || _global$e).awaitPos = oldAwaitPos;
          (this || _global$e).awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        };
        pp$1.parseFunctionParams = function (node) {
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, (this || _global$e).options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
        };
        pp$1.parseClass = function (node, isStatement) {
          this.next();
          var oldStrict = (this || _global$e).strict;
          (this || _global$e).strict = true;
          this.parseClassId(node, isStatement);
          this.parseClassSuper(node);
          var classBody = this.startNode();
          var hadConstructor = false;
          classBody.body = [];
          this.expect(types.braceL);
          while ((this || _global$e).type !== types.braceR) {
            var element = this.parseClassElement(node.superClass !== null);
            if (element) {
              classBody.body.push(element);
              if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) {
                  this.raise(element.start, "Duplicate constructor in the same class");
                }
                hadConstructor = true;
              }
            }
          }
          (this || _global$e).strict = oldStrict;
          this.next();
          node.body = this.finishNode(classBody, "ClassBody");
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        };
        pp$1.parseClassElement = function (constructorAllowsSuper) {
          var this$1$1 = this || _global$e;
          if (this.eat(types.semi)) {
            return null;
          }
          var method = this.startNode();
          var tryContextual = function (k, noLineBreak) {
            if (noLineBreak === void 0)
              noLineBreak = false;
            var start = this$1$1.start, startLoc = this$1$1.startLoc;
            if (!this$1$1.eatContextual(k)) {
              return false;
            }
            if (this$1$1.type !== types.parenL && (!noLineBreak || !this$1$1.canInsertSemicolon())) {
              return true;
            }
            if (method.key) {
              this$1$1.unexpected();
            }
            method.computed = false;
            method.key = this$1$1.startNodeAt(start, startLoc);
            method.key.name = k;
            this$1$1.finishNode(method.key, "Identifier");
            return false;
          };
          method.kind = "method";
          method.static = tryContextual("static");
          var isGenerator = this.eat(types.star);
          var isAsync = false;
          if (!isGenerator) {
            if ((this || _global$e).options.ecmaVersion >= 8 && tryContextual("async", true)) {
              isAsync = true;
              isGenerator = (this || _global$e).options.ecmaVersion >= 9 && this.eat(types.star);
            } else if (tryContextual("get")) {
              method.kind = "get";
            } else if (tryContextual("set")) {
              method.kind = "set";
            }
          }
          if (!method.key) {
            this.parsePropertyName(method);
          }
          var key = method.key;
          var allowsDirectSuper = false;
          if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
            if (method.kind !== "method") {
              this.raise(key.start, "Constructor can't have get/set modifier");
            }
            if (isGenerator) {
              this.raise(key.start, "Constructor can't be a generator");
            }
            if (isAsync) {
              this.raise(key.start, "Constructor can't be an async method");
            }
            method.kind = "constructor";
            allowsDirectSuper = constructorAllowsSuper;
          } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
            this.raise(key.start, "Classes may not have a static property named prototype");
          }
          this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
          if (method.kind === "get" && method.value.params.length !== 0) {
            this.raiseRecoverable(method.value.start, "getter should have no params");
          }
          if (method.kind === "set" && method.value.params.length !== 1) {
            this.raiseRecoverable(method.value.start, "setter should have exactly one param");
          }
          if (method.kind === "set" && method.value.params[0].type === "RestElement") {
            this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
          }
          return method;
        };
        pp$1.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
          method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return this.finishNode(method, "MethodDefinition");
        };
        pp$1.parseClassId = function (node, isStatement) {
          if ((this || _global$e).type === types.name) {
            node.id = this.parseIdent();
            if (isStatement) {
              this.checkLVal(node.id, BIND_LEXICAL, false);
            }
          } else {
            if (isStatement === true) {
              this.unexpected();
            }
            node.id = null;
          }
        };
        pp$1.parseClassSuper = function (node) {
          node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
        };
        pp$1.parseExport = function (node, exports) {
          this.next();
          if (this.eat(types.star)) {
            if ((this || _global$e).options.ecmaVersion >= 11) {
              if (this.eatContextual("as")) {
                node.exported = this.parseIdent(true);
                this.checkExport(exports, node.exported.name, (this || _global$e).lastTokStart);
              } else {
                node.exported = null;
              }
            }
            this.expectContextual("from");
            if ((this || _global$e).type !== types.string) {
              this.unexpected();
            }
            node.source = this.parseExprAtom();
            this.semicolon();
            return this.finishNode(node, "ExportAllDeclaration");
          }
          if (this.eat(types._default)) {
            this.checkExport(exports, "default", (this || _global$e).lastTokStart);
            var isAsync;
            if ((this || _global$e).type === types._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next();
              if (isAsync) {
                this.next();
              }
              node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
            } else if ((this || _global$e).type === types._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else {
              node.declaration = this.parseMaybeAssign();
              this.semicolon();
            }
            return this.finishNode(node, "ExportDefaultDeclaration");
          }
          if (this.shouldParseExportStatement()) {
            node.declaration = this.parseStatement(null);
            if (node.declaration.type === "VariableDeclaration") {
              this.checkVariableExport(exports, node.declaration.declarations);
            } else {
              this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
            }
            node.specifiers = [];
            node.source = null;
          } else {
            node.declaration = null;
            node.specifiers = this.parseExportSpecifiers(exports);
            if (this.eatContextual("from")) {
              if ((this || _global$e).type !== types.string) {
                this.unexpected();
              }
              node.source = this.parseExprAtom();
            } else {
              for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                var spec = list[i];
                this.checkUnreserved(spec.local);
                this.checkLocalExport(spec.local);
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        };
        pp$1.checkExport = function (exports, name, pos) {
          if (!exports) {
            return;
          }
          if (has(exports, name)) {
            this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
          }
          exports[name] = true;
        };
        pp$1.checkPatternExport = function (exports, pat) {
          var type = pat.type;
          if (type === "Identifier") {
            this.checkExport(exports, pat.name, pat.start);
          } else if (type === "ObjectPattern") {
            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkPatternExport(exports, prop);
            }
          } else if (type === "ArrayPattern") {
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];
              if (elt) {
                this.checkPatternExport(exports, elt);
              }
            }
          } else if (type === "Property") {
            this.checkPatternExport(exports, pat.value);
          } else if (type === "AssignmentPattern") {
            this.checkPatternExport(exports, pat.left);
          } else if (type === "RestElement") {
            this.checkPatternExport(exports, pat.argument);
          } else if (type === "ParenthesizedExpression") {
            this.checkPatternExport(exports, pat.expression);
          }
        };
        pp$1.checkVariableExport = function (exports, decls) {
          if (!exports) {
            return;
          }
          for (var i = 0, list = decls; i < list.length; i += 1) {
            var decl = list[i];
            this.checkPatternExport(exports, decl.id);
          }
        };
        pp$1.shouldParseExportStatement = function () {
          return (this || _global$e).type.keyword === "var" || (this || _global$e).type.keyword === "const" || (this || _global$e).type.keyword === "class" || (this || _global$e).type.keyword === "function" || this.isLet() || this.isAsyncFunction();
        };
        pp$1.parseExportSpecifiers = function (exports) {
          var nodes = [], first = true;
          this.expect(types.braceL);
          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);
              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }
            var node = this.startNode();
            node.local = this.parseIdent(true);
            node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
            this.checkExport(exports, node.exported.name, node.exported.start);
            nodes.push(this.finishNode(node, "ExportSpecifier"));
          }
          return nodes;
        };
        pp$1.parseImport = function (node) {
          this.next();
          if ((this || _global$e).type === types.string) {
            node.specifiers = empty;
            node.source = this.parseExprAtom();
          } else {
            node.specifiers = this.parseImportSpecifiers();
            this.expectContextual("from");
            node.source = (this || _global$e).type === types.string ? this.parseExprAtom() : this.unexpected();
          }
          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        };
        pp$1.parseImportSpecifiers = function () {
          var nodes = [], first = true;
          if ((this || _global$e).type === types.name) {
            var node = this.startNode();
            node.local = this.parseIdent();
            this.checkLVal(node.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
            if (!this.eat(types.comma)) {
              return nodes;
            }
          }
          if ((this || _global$e).type === types.star) {
            var node$1 = this.startNode();
            this.next();
            this.expectContextual("as");
            node$1.local = this.parseIdent();
            this.checkLVal(node$1.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
            return nodes;
          }
          this.expect(types.braceL);
          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);
              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }
            var node$2 = this.startNode();
            node$2.imported = this.parseIdent(true);
            if (this.eatContextual("as")) {
              node$2.local = this.parseIdent();
            } else {
              this.checkUnreserved(node$2.imported);
              node$2.local = node$2.imported;
            }
            this.checkLVal(node$2.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }
          return nodes;
        };
        pp$1.adaptDirectivePrologue = function (statements) {
          for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
            statements[i].directive = statements[i].expression.raw.slice(1, -1);
          }
        };
        pp$1.isDirectiveCandidate = function (statement) {
          return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && ((this || _global$e).input[statement.start] === "\"" || (this || _global$e).input[statement.start] === "'");
        };
        var pp$2 = Parser.prototype;
        pp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {
          if ((this || _global$e).options.ecmaVersion >= 6 && node) {
            switch (node.type) {
            case "Identifier":
              if ((this || _global$e).inAsync && node.name === "await") {
                this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              }
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              for (var i = 0, list = node.properties; i < list.length; i += 1) {
                var prop = list[i];
                this.toAssignable(prop, isBinding);
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                  this.raise(prop.argument.start, "Unexpected token");
                }
              }
              break;
            case "Property":
              if (node.kind !== "init") {
                this.raise(node.key.start, "Object pattern can't contain getter or setter");
              }
              this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement";
              this.toAssignable(node.argument, isBinding);
              if (node.argument.type === "AssignmentPattern") {
                this.raise(node.argument.start, "Rest elements cannot have a default value");
              }
              break;
            case "AssignmentExpression":
              if (node.operator !== "=") {
                this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
              }
              node.type = "AssignmentPattern";
              delete node.operator;
              this.toAssignable(node.left, isBinding);
            case "AssignmentPattern":
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) {
                break;
              }
            default:
              this.raise(node.start, "Assigning to rvalue");
            }
          } else if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }
          return node;
        };
        pp$2.toAssignableList = function (exprList, isBinding) {
          var end = exprList.length;
          for (var i = 0; i < end; i++) {
            var elt = exprList[i];
            if (elt) {
              this.toAssignable(elt, isBinding);
            }
          }
          if (end) {
            var last = exprList[end - 1];
            if ((this || _global$e).options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
              this.unexpected(last.argument.start);
            }
          }
          return exprList;
        };
        pp$2.parseSpread = function (refDestructuringErrors) {
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          return this.finishNode(node, "SpreadElement");
        };
        pp$2.parseRestBinding = function () {
          var node = this.startNode();
          this.next();
          if ((this || _global$e).options.ecmaVersion === 6 && (this || _global$e).type !== types.name) {
            this.unexpected();
          }
          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        };
        pp$2.parseBindingAtom = function () {
          if ((this || _global$e).options.ecmaVersion >= 6) {
            switch ((this || _global$e).type) {
            case types.bracketL:
              var node = this.startNode();
              this.next();
              node.elements = this.parseBindingList(types.bracketR, true, true);
              return this.finishNode(node, "ArrayPattern");
            case types.braceL:
              return this.parseObj(true);
            }
          }
          return this.parseIdent();
        };
        pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
          var elts = [], first = true;
          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(types.comma);
            }
            if (allowEmpty && (this || _global$e).type === types.comma) {
              elts.push(null);
            } else if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            } else if ((this || _global$e).type === types.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest);
              elts.push(rest);
              if ((this || _global$e).type === types.comma) {
                this.raise((this || _global$e).start, "Comma is not permitted after the rest element");
              }
              this.expect(close);
              break;
            } else {
              var elem = this.parseMaybeDefault((this || _global$e).start, (this || _global$e).startLoc);
              this.parseBindingListItem(elem);
              elts.push(elem);
            }
          }
          return elts;
        };
        pp$2.parseBindingListItem = function (param) {
          return param;
        };
        pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
          left = left || this.parseBindingAtom();
          if ((this || _global$e).options.ecmaVersion < 6 || !this.eat(types.eq)) {
            return left;
          }
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.right = this.parseMaybeAssign();
          return this.finishNode(node, "AssignmentPattern");
        };
        pp$2.checkLVal = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0)
            bindingType = BIND_NONE;
          switch (expr.type) {
          case "Identifier":
            if (bindingType === BIND_LEXICAL && expr.name === "let") {
              this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
            }
            if ((this || _global$e).strict && (this || _global$e).reservedWordsStrictBind.test(expr.name)) {
              this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            }
            if (checkClashes) {
              if (has(checkClashes, expr.name)) {
                this.raiseRecoverable(expr.start, "Argument name clash");
              }
              checkClashes[expr.name] = true;
            }
            if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
              this.declareName(expr.name, bindingType, expr.start);
            }
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            if (bindingType) {
              this.raiseRecoverable(expr.start, "Binding member expression");
            }
            break;
          case "ObjectPattern":
            for (var i = 0, list = expr.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkLVal(prop, bindingType, checkClashes);
            }
            break;
          case "Property":
            this.checkLVal(expr.value, bindingType, checkClashes);
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              if (elem) {
                this.checkLVal(elem, bindingType, checkClashes);
              }
            }
            break;
          case "AssignmentPattern":
            this.checkLVal(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLVal(expr.argument, bindingType, checkClashes);
            break;
          case "ParenthesizedExpression":
            this.checkLVal(expr.expression, bindingType, checkClashes);
            break;
          default:
            this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
          }
        };
        var pp$3 = Parser.prototype;
        pp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {
          if ((this || _global$e).options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
            return;
          }
          if ((this || _global$e).options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
            return;
          }
          var key = prop.key;
          var name;
          switch (key.type) {
          case "Identifier":
            name = key.name;
            break;
          case "Literal":
            name = String(key.value);
            break;
          default:
            return;
          }
          var kind = prop.kind;
          if ((this || _global$e).options.ecmaVersion >= 6) {
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto) {
                if (refDestructuringErrors) {
                  if (refDestructuringErrors.doubleProto < 0) {
                    refDestructuringErrors.doubleProto = key.start;
                  }
                } else {
                  this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
                }
              }
              propHash.proto = true;
            }
            return;
          }
          name = "$" + name;
          var other = propHash[name];
          if (other) {
            var redefinition;
            if (kind === "init") {
              redefinition = (this || _global$e).strict && other.init || other.get || other.set;
            } else {
              redefinition = other.init || other[kind];
            }
            if (redefinition) {
              this.raiseRecoverable(key.start, "Redefinition of property");
            }
          } else {
            other = propHash[name] = {
              init: false,
              get: false,
              set: false
            };
          }
          other[kind] = true;
        };
        pp$3.parseExpression = function (noIn, refDestructuringErrors) {
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc;
          var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
          if ((this || _global$e).type === types.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            node.expressions = [expr];
            while (this.eat(types.comma)) {
              node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
            }
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        };
        pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if ((this || _global$e).inGenerator) {
              return this.parseYield(noIn);
            } else {
              (this || _global$e).exprAllowed = false;
            }
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
          if (refDestructuringErrors) {
            oldParenAssign = refDestructuringErrors.parenthesizedAssign;
            oldTrailingComma = refDestructuringErrors.trailingComma;
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
          } else {
            refDestructuringErrors = new DestructuringErrors();
            ownDestructuringErrors = true;
          }
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc;
          if ((this || _global$e).type === types.parenL || (this || _global$e).type === types.name) {
            (this || _global$e).potentialArrowAt = (this || _global$e).start;
          }
          var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
          if (afterLeftParse) {
            left = afterLeftParse.call(this || _global$e, left, startPos, startLoc);
          }
          if ((this || _global$e).type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            node.operator = (this || _global$e).value;
            node.left = (this || _global$e).type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
            if (!ownDestructuringErrors) {
              refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
            }
            if (refDestructuringErrors.shorthandAssign >= node.left.start) {
              refDestructuringErrors.shorthandAssign = -1;
            }
            this.checkLVal(left);
            this.next();
            node.right = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "AssignmentExpression");
          } else {
            if (ownDestructuringErrors) {
              this.checkExpressionErrors(refDestructuringErrors, true);
            }
          }
          if (oldParenAssign > -1) {
            refDestructuringErrors.parenthesizedAssign = oldParenAssign;
          }
          if (oldTrailingComma > -1) {
            refDestructuringErrors.trailingComma = oldTrailingComma;
          }
          return left;
        };
        pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc;
          var expr = this.parseExprOps(noIn, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          if (this.eat(types.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssign();
            this.expect(types.colon);
            node.alternate = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        };
        pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc;
          var expr = this.parseMaybeUnary(refDestructuringErrors, false);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
        };
        pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
          var prec = (this || _global$e).type.binop;
          if (prec != null && (!noIn || (this || _global$e).type !== types._in)) {
            if (prec > minPrec) {
              var logical = (this || _global$e).type === types.logicalOR || (this || _global$e).type === types.logicalAND;
              var coalesce = (this || _global$e).type === types.coalesce;
              if (coalesce) {
                prec = types.logicalAND.binop;
              }
              var op = (this || _global$e).value;
              this.next();
              var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc;
              var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
              var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
              if (logical && (this || _global$e).type === types.coalesce || coalesce && ((this || _global$e).type === types.logicalOR || (this || _global$e).type === types.logicalAND)) {
                this.raiseRecoverable((this || _global$e).start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
              }
              return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
            }
          }
          return left;
        };
        pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.operator = op;
          node.right = right;
          return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        };
        pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc, expr;
          if (this.isContextual("await") && ((this || _global$e).inAsync || !(this || _global$e).inFunction && (this || _global$e).options.allowAwaitOutsideFunction)) {
            expr = this.parseAwait();
            sawUnary = true;
          } else if ((this || _global$e).type.prefix) {
            var node = this.startNode(), update = (this || _global$e).type === types.incDec;
            node.operator = (this || _global$e).value;
            node.prefix = true;
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refDestructuringErrors, true);
            if (update) {
              this.checkLVal(node.argument);
            } else if ((this || _global$e).strict && node.operator === "delete" && node.argument.type === "Identifier") {
              this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
            } else {
              sawUnary = true;
            }
            expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else {
            expr = this.parseExprSubscripts(refDestructuringErrors);
            if (this.checkExpressionErrors(refDestructuringErrors)) {
              return expr;
            }
            while ((this || _global$e).type.postfix && !this.canInsertSemicolon()) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = (this || _global$e).value;
              node$1.prefix = false;
              node$1.argument = expr;
              this.checkLVal(expr);
              this.next();
              expr = this.finishNode(node$1, "UpdateExpression");
            }
          }
          if (!sawUnary && this.eat(types.starstar)) {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
          } else {
            return expr;
          }
        };
        pp$3.parseExprSubscripts = function (refDestructuringErrors) {
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc;
          var expr = this.parseExprAtom(refDestructuringErrors);
          if (expr.type === "ArrowFunctionExpression" && (this || _global$e).input.slice((this || _global$e).lastTokStart, (this || _global$e).lastTokEnd) !== ")") {
            return expr;
          }
          var result = this.parseSubscripts(expr, startPos, startLoc);
          if (refDestructuringErrors && result.type === "MemberExpression") {
            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
              refDestructuringErrors.parenthesizedAssign = -1;
            }
            if (refDestructuringErrors.parenthesizedBind >= result.start) {
              refDestructuringErrors.parenthesizedBind = -1;
            }
          }
          return result;
        };
        pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
          var maybeAsyncArrow = (this || _global$e).options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && (this || _global$e).lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && (this || _global$e).potentialArrowAt === base.start;
          var optionalChained = false;
          while (true) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);
            if (element.optional) {
              optionalChained = true;
            }
            if (element === base || element.type === "ArrowFunctionExpression") {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element;
                element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        };
        pp$3.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
          var optionalSupported = (this || _global$e).options.ecmaVersion >= 11;
          var optional = optionalSupported && this.eat(types.questionDot);
          if (noCalls && optional) {
            this.raise((this || _global$e).lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          }
          var computed = this.eat(types.bracketL);
          if (computed || optional && (this || _global$e).type !== types.parenL && (this || _global$e).type !== types.backQuote || this.eat(types.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base;
            node.property = computed ? this.parseExpression() : this.parseIdent((this || _global$e).options.allowReserved !== "never");
            node.computed = !!computed;
            if (computed) {
              this.expect(types.bracketR);
            }
            if (optionalSupported) {
              node.optional = optional;
            }
            base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = (this || _global$e).yieldPos, oldAwaitPos = (this || _global$e).awaitPos, oldAwaitIdentPos = (this || _global$e).awaitIdentPos;
            (this || _global$e).yieldPos = 0;
            (this || _global$e).awaitPos = 0;
            (this || _global$e).awaitIdentPos = 0;
            var exprList = this.parseExprList(types.parenR, (this || _global$e).options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              if ((this || _global$e).awaitIdentPos > 0) {
                this.raise((this || _global$e).awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
              }
              (this || _global$e).yieldPos = oldYieldPos;
              (this || _global$e).awaitPos = oldAwaitPos;
              (this || _global$e).awaitIdentPos = oldAwaitIdentPos;
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
            }
            this.checkExpressionErrors(refDestructuringErrors, true);
            (this || _global$e).yieldPos = oldYieldPos || (this || _global$e).yieldPos;
            (this || _global$e).awaitPos = oldAwaitPos || (this || _global$e).awaitPos;
            (this || _global$e).awaitIdentPos = oldAwaitIdentPos || (this || _global$e).awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base;
            node$1.arguments = exprList;
            if (optionalSupported) {
              node$1.optional = optional;
            }
            base = this.finishNode(node$1, "CallExpression");
          } else if ((this || _global$e).type === types.backQuote) {
            if (optional || optionalChained) {
              this.raise((this || _global$e).start, "Optional chaining cannot appear in the tag of tagged template expressions");
            }
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base;
            node$2.quasi = this.parseTemplate({ isTagged: true });
            base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        };
        pp$3.parseExprAtom = function (refDestructuringErrors) {
          if ((this || _global$e).type === types.slash) {
            this.readRegexp();
          }
          var node, canBeArrow = (this || _global$e).potentialArrowAt === (this || _global$e).start;
          switch ((this || _global$e).type) {
          case types._super:
            if (!(this || _global$e).allowSuper) {
              this.raise((this || _global$e).start, "'super' keyword outside a method");
            }
            node = this.startNode();
            this.next();
            if ((this || _global$e).type === types.parenL && !(this || _global$e).allowDirectSuper) {
              this.raise(node.start, "super() call outside constructor of a subclass");
            }
            if ((this || _global$e).type !== types.dot && (this || _global$e).type !== types.bracketL && (this || _global$e).type !== types.parenL) {
              this.unexpected();
            }
            return this.finishNode(node, "Super");
          case types._this:
            node = this.startNode();
            this.next();
            return this.finishNode(node, "ThisExpression");
          case types.name:
            var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc, containsEsc = (this || _global$e).containsEsc;
            var id = this.parseIdent(false);
            if ((this || _global$e).options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
              return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types.arrow)) {
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
              }
              if ((this || _global$e).options.ecmaVersion >= 8 && id.name === "async" && (this || _global$e).type === types.name && !containsEsc) {
                id = this.parseIdent(false);
                if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                  this.unexpected();
                }
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
              }
            }
            return id;
          case types.regexp:
            var value = (this || _global$e).value;
            node = this.parseLiteral(value.value);
            node.regex = {
              pattern: value.pattern,
              flags: value.flags
            };
            return node;
          case types.num:
          case types.string:
            return this.parseLiteral((this || _global$e).value);
          case types._null:
          case types._true:
          case types._false:
            node = this.startNode();
            node.value = (this || _global$e).type === types._null ? null : (this || _global$e).type === types._true;
            node.raw = (this || _global$e).type.keyword;
            this.next();
            return this.finishNode(node, "Literal");
          case types.parenL:
            var start = (this || _global$e).start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
            if (refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                refDestructuringErrors.parenthesizedAssign = start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = start;
              }
            }
            return expr;
          case types.bracketL:
            node = this.startNode();
            this.next();
            node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node, "ArrayExpression");
          case types.braceL:
            return this.parseObj(false, refDestructuringErrors);
          case types._function:
            node = this.startNode();
            this.next();
            return this.parseFunction(node, 0);
          case types._class:
            return this.parseClass(this.startNode(), false);
          case types._new:
            return this.parseNew();
          case types.backQuote:
            return this.parseTemplate();
          case types._import:
            if ((this || _global$e).options.ecmaVersion >= 11) {
              return this.parseExprImport();
            } else {
              return this.unexpected();
            }
          default:
            this.unexpected();
          }
        };
        pp$3.parseExprImport = function () {
          var node = this.startNode();
          if ((this || _global$e).containsEsc) {
            this.raiseRecoverable((this || _global$e).start, "Escape sequence in keyword import");
          }
          var meta = this.parseIdent(true);
          switch ((this || _global$e).type) {
          case types.parenL:
            return this.parseDynamicImport(node);
          case types.dot:
            node.meta = meta;
            return this.parseImportMeta(node);
          default:
            this.unexpected();
          }
        };
        pp$3.parseDynamicImport = function (node) {
          this.next();
          node.source = this.parseMaybeAssign();
          if (!this.eat(types.parenR)) {
            var errorPos = (this || _global$e).start;
            if (this.eat(types.comma) && this.eat(types.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
            } else {
              this.unexpected(errorPos);
            }
          }
          return this.finishNode(node, "ImportExpression");
        };
        pp$3.parseImportMeta = function (node) {
          this.next();
          var containsEsc = (this || _global$e).containsEsc;
          node.property = this.parseIdent(true);
          if (node.property.name !== "meta") {
            this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
          }
          if ((this || _global$e).options.sourceType !== "module") {
            this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
          }
          return this.finishNode(node, "MetaProperty");
        };
        pp$3.parseLiteral = function (value) {
          var node = this.startNode();
          node.value = value;
          node.raw = (this || _global$e).input.slice((this || _global$e).start, (this || _global$e).end);
          if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
            node.bigint = node.raw.slice(0, -1).replace(/_/g, "");
          }
          this.next();
          return this.finishNode(node, "Literal");
        };
        pp$3.parseParenExpression = function () {
          this.expect(types.parenL);
          var val = this.parseExpression();
          this.expect(types.parenR);
          return val;
        };
        pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc, val, allowTrailingComma = (this || _global$e).options.ecmaVersion >= 8;
          if ((this || _global$e).options.ecmaVersion >= 6) {
            this.next();
            var innerStartPos = (this || _global$e).start, innerStartLoc = (this || _global$e).startLoc;
            var exprList = [], first = true, lastIsComma = false;
            var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = (this || _global$e).yieldPos, oldAwaitPos = (this || _global$e).awaitPos, spreadStart;
            (this || _global$e).yieldPos = 0;
            (this || _global$e).awaitPos = 0;
            while ((this || _global$e).type !== types.parenR) {
              first ? first = false : this.expect(types.comma);
              if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
                lastIsComma = true;
                break;
              } else if ((this || _global$e).type === types.ellipsis) {
                spreadStart = (this || _global$e).start;
                exprList.push(this.parseParenItem(this.parseRestBinding()));
                if ((this || _global$e).type === types.comma) {
                  this.raise((this || _global$e).start, "Comma is not permitted after the rest element");
                }
                break;
              } else {
                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, (this || _global$e).parseParenItem));
              }
            }
            var innerEndPos = (this || _global$e).start, innerEndLoc = (this || _global$e).startLoc;
            this.expect(types.parenR);
            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              (this || _global$e).yieldPos = oldYieldPos;
              (this || _global$e).awaitPos = oldAwaitPos;
              return this.parseParenArrowList(startPos, startLoc, exprList);
            }
            if (!exprList.length || lastIsComma) {
              this.unexpected((this || _global$e).lastTokStart);
            }
            if (spreadStart) {
              this.unexpected(spreadStart);
            }
            this.checkExpressionErrors(refDestructuringErrors, true);
            (this || _global$e).yieldPos = oldYieldPos || (this || _global$e).yieldPos;
            (this || _global$e).awaitPos = oldAwaitPos || (this || _global$e).awaitPos;
            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
            } else {
              val = exprList[0];
            }
          } else {
            val = this.parseParenExpression();
          }
          if ((this || _global$e).options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            par.expression = val;
            return this.finishNode(par, "ParenthesizedExpression");
          } else {
            return val;
          }
        };
        pp$3.parseParenItem = function (item) {
          return item;
        };
        pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
        };
        var empty$1 = [];
        pp$3.parseNew = function () {
          if ((this || _global$e).containsEsc) {
            this.raiseRecoverable((this || _global$e).start, "Escape sequence in keyword new");
          }
          var node = this.startNode();
          var meta = this.parseIdent(true);
          if ((this || _global$e).options.ecmaVersion >= 6 && this.eat(types.dot)) {
            node.meta = meta;
            var containsEsc = (this || _global$e).containsEsc;
            node.property = this.parseIdent(true);
            if (node.property.name !== "target") {
              this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
            }
            if (containsEsc) {
              this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
            }
            if (!this.inNonArrowFunction()) {
              this.raiseRecoverable(node.start, "'new.target' can only be used in functions");
            }
            return this.finishNode(node, "MetaProperty");
          }
          var startPos = (this || _global$e).start, startLoc = (this || _global$e).startLoc, isImport = (this || _global$e).type === types._import;
          node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
          if (isImport && node.callee.type === "ImportExpression") {
            this.raise(startPos, "Cannot use new with import()");
          }
          if (this.eat(types.parenL)) {
            node.arguments = this.parseExprList(types.parenR, (this || _global$e).options.ecmaVersion >= 8, false);
          } else {
            node.arguments = empty$1;
          }
          return this.finishNode(node, "NewExpression");
        };
        pp$3.parseTemplateElement = function (ref) {
          var isTagged = ref.isTagged;
          var elem = this.startNode();
          if ((this || _global$e).type === types.invalidTemplate) {
            if (!isTagged) {
              this.raiseRecoverable((this || _global$e).start, "Bad escape sequence in untagged template literal");
            }
            elem.value = {
              raw: (this || _global$e).value,
              cooked: null
            };
          } else {
            elem.value = {
              raw: (this || _global$e).input.slice((this || _global$e).start, (this || _global$e).end).replace(/\r\n?/g, "\n"),
              cooked: (this || _global$e).value
            };
          }
          this.next();
          elem.tail = (this || _global$e).type === types.backQuote;
          return this.finishNode(elem, "TemplateElement");
        };
        pp$3.parseTemplate = function (ref) {
          if (ref === void 0)
            ref = {};
          var isTagged = ref.isTagged;
          if (isTagged === void 0)
            isTagged = false;
          var node = this.startNode();
          this.next();
          node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged: isTagged });
          node.quasis = [curElt];
          while (!curElt.tail) {
            if ((this || _global$e).type === types.eof) {
              this.raise((this || _global$e).pos, "Unterminated template literal");
            }
            this.expect(types.dollarBraceL);
            node.expressions.push(this.parseExpression());
            this.expect(types.braceR);
            node.quasis.push(curElt = this.parseTemplateElement({ isTagged: isTagged }));
          }
          this.next();
          return this.finishNode(node, "TemplateLiteral");
        };
        pp$3.isAsyncProp = function (prop) {
          return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && ((this || _global$e).type === types.name || (this || _global$e).type === types.num || (this || _global$e).type === types.string || (this || _global$e).type === types.bracketL || (this || _global$e).type.keyword || (this || _global$e).options.ecmaVersion >= 9 && (this || _global$e).type === types.star) && !lineBreak.test((this || _global$e).input.slice((this || _global$e).lastTokEnd, (this || _global$e).start));
        };
        pp$3.parseObj = function (isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          node.properties = [];
          this.next();
          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);
              if ((this || _global$e).options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            if (!isPattern) {
              this.checkPropClash(prop, propHash, refDestructuringErrors);
            }
            node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        };
        pp$3.parseProperty = function (isPattern, refDestructuringErrors) {
          var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
          if ((this || _global$e).options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
            if (isPattern) {
              prop.argument = this.parseIdent(false);
              if ((this || _global$e).type === types.comma) {
                this.raise((this || _global$e).start, "Comma is not permitted after the rest element");
              }
              return this.finishNode(prop, "RestElement");
            }
            if ((this || _global$e).type === types.parenL && refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0) {
                refDestructuringErrors.parenthesizedAssign = (this || _global$e).start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = (this || _global$e).start;
              }
            }
            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
            if ((this || _global$e).type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = (this || _global$e).start;
            }
            return this.finishNode(prop, "SpreadElement");
          }
          if ((this || _global$e).options.ecmaVersion >= 6) {
            prop.method = false;
            prop.shorthand = false;
            if (isPattern || refDestructuringErrors) {
              startPos = (this || _global$e).start;
              startLoc = (this || _global$e).startLoc;
            }
            if (!isPattern) {
              isGenerator = this.eat(types.star);
            }
          }
          var containsEsc = (this || _global$e).containsEsc;
          this.parsePropertyName(prop);
          if (!isPattern && !containsEsc && (this || _global$e).options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
            isAsync = true;
            isGenerator = (this || _global$e).options.ecmaVersion >= 9 && this.eat(types.star);
            this.parsePropertyName(prop, refDestructuringErrors);
          } else {
            isAsync = false;
          }
          this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
          return this.finishNode(prop, "Property");
        };
        pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && (this || _global$e).type === types.colon) {
            this.unexpected();
          }
          if (this.eat(types.colon)) {
            prop.value = isPattern ? this.parseMaybeDefault((this || _global$e).start, (this || _global$e).startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
            prop.kind = "init";
          } else if ((this || _global$e).options.ecmaVersion >= 6 && (this || _global$e).type === types.parenL) {
            if (isPattern) {
              this.unexpected();
            }
            prop.kind = "init";
            prop.method = true;
            prop.value = this.parseMethod(isGenerator, isAsync);
          } else if (!isPattern && !containsEsc && (this || _global$e).options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this || _global$e).type !== types.comma && (this || _global$e).type !== types.braceR && (this || _global$e).type !== types.eq) {
            if (isGenerator || isAsync) {
              this.unexpected();
            }
            prop.kind = prop.key.name;
            this.parsePropertyName(prop);
            prop.value = this.parseMethod(false);
            var paramCount = prop.kind === "get" ? 0 : 1;
            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;
              if (prop.kind === "get") {
                this.raiseRecoverable(start, "getter should have no params");
              } else {
                this.raiseRecoverable(start, "setter should have exactly one param");
              }
            } else {
              if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
              }
            }
          } else if ((this || _global$e).options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
            if (isGenerator || isAsync) {
              this.unexpected();
            }
            this.checkUnreserved(prop.key);
            if (prop.key.name === "await" && !(this || _global$e).awaitIdentPos) {
              (this || _global$e).awaitIdentPos = startPos;
            }
            prop.kind = "init";
            if (isPattern) {
              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else if ((this || _global$e).type === types.eq && refDestructuringErrors) {
              if (refDestructuringErrors.shorthandAssign < 0) {
                refDestructuringErrors.shorthandAssign = (this || _global$e).start;
              }
              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else {
              prop.value = prop.key;
            }
            prop.shorthand = true;
          } else {
            this.unexpected();
          }
        };
        pp$3.parsePropertyName = function (prop) {
          if ((this || _global$e).options.ecmaVersion >= 6) {
            if (this.eat(types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(types.bracketR);
              return prop.key;
            } else {
              prop.computed = false;
            }
          }
          return prop.key = (this || _global$e).type === types.num || (this || _global$e).type === types.string ? this.parseExprAtom() : this.parseIdent((this || _global$e).options.allowReserved !== "never");
        };
        pp$3.initFunction = function (node) {
          node.id = null;
          if ((this || _global$e).options.ecmaVersion >= 6) {
            node.generator = node.expression = false;
          }
          if ((this || _global$e).options.ecmaVersion >= 8) {
            node.async = false;
          }
        };
        pp$3.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = (this || _global$e).yieldPos, oldAwaitPos = (this || _global$e).awaitPos, oldAwaitIdentPos = (this || _global$e).awaitIdentPos;
          this.initFunction(node);
          if ((this || _global$e).options.ecmaVersion >= 6) {
            node.generator = isGenerator;
          }
          if ((this || _global$e).options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }
          (this || _global$e).yieldPos = 0;
          (this || _global$e).awaitPos = 0;
          (this || _global$e).awaitIdentPos = 0;
          this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, (this || _global$e).options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
          this.parseFunctionBody(node, false, true);
          (this || _global$e).yieldPos = oldYieldPos;
          (this || _global$e).awaitPos = oldAwaitPos;
          (this || _global$e).awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "FunctionExpression");
        };
        pp$3.parseArrowExpression = function (node, params, isAsync) {
          var oldYieldPos = (this || _global$e).yieldPos, oldAwaitPos = (this || _global$e).awaitPos, oldAwaitIdentPos = (this || _global$e).awaitIdentPos;
          this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
          this.initFunction(node);
          if ((this || _global$e).options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }
          (this || _global$e).yieldPos = 0;
          (this || _global$e).awaitPos = 0;
          (this || _global$e).awaitIdentPos = 0;
          node.params = this.toAssignableList(params, true);
          this.parseFunctionBody(node, true, false);
          (this || _global$e).yieldPos = oldYieldPos;
          (this || _global$e).awaitPos = oldAwaitPos;
          (this || _global$e).awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "ArrowFunctionExpression");
        };
        pp$3.parseFunctionBody = function (node, isArrowFunction, isMethod) {
          var isExpression = isArrowFunction && (this || _global$e).type !== types.braceL;
          var oldStrict = (this || _global$e).strict, useStrict = false;
          if (isExpression) {
            node.body = this.parseMaybeAssign();
            node.expression = true;
            this.checkParams(node, false);
          } else {
            var nonSimple = (this || _global$e).options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            if (!oldStrict || nonSimple) {
              useStrict = this.strictDirective((this || _global$e).end);
              if (useStrict && nonSimple) {
                this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
              }
            }
            var oldLabels = (this || _global$e).labels;
            (this || _global$e).labels = [];
            if (useStrict) {
              (this || _global$e).strict = true;
            }
            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
            if ((this || _global$e).strict && node.id) {
              this.checkLVal(node.id, BIND_OUTSIDE);
            }
            node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
            node.expression = false;
            this.adaptDirectivePrologue(node.body.body);
            (this || _global$e).labels = oldLabels;
          }
          this.exitScope();
        };
        pp$3.isSimpleParamList = function (params) {
          for (var i = 0, list = params; i < list.length; i += 1) {
            var param = list[i];
            if (param.type !== "Identifier") {
              return false;
            }
          }
          return true;
        };
        pp$3.checkParams = function (node, allowDuplicates) {
          var nameHash = {};
          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i];
            this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
          }
        };
        pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          var elts = [], first = true;
          while (!this.eat(close)) {
            if (!first) {
              this.expect(types.comma);
              if (allowTrailingComma && this.afterTrailingComma(close)) {
                break;
              }
            } else {
              first = false;
            }
            var elt = void 0;
            if (allowEmpty && (this || _global$e).type === types.comma) {
              elt = null;
            } else if ((this || _global$e).type === types.ellipsis) {
              elt = this.parseSpread(refDestructuringErrors);
              if (refDestructuringErrors && (this || _global$e).type === types.comma && refDestructuringErrors.trailingComma < 0) {
                refDestructuringErrors.trailingComma = (this || _global$e).start;
              }
            } else {
              elt = this.parseMaybeAssign(false, refDestructuringErrors);
            }
            elts.push(elt);
          }
          return elts;
        };
        pp$3.checkUnreserved = function (ref) {
          var start = ref.start;
          var end = ref.end;
          var name = ref.name;
          if ((this || _global$e).inGenerator && name === "yield") {
            this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
          }
          if ((this || _global$e).inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
          }
          if ((this || _global$e).keywords.test(name)) {
            this.raise(start, "Unexpected keyword '" + name + "'");
          }
          if ((this || _global$e).options.ecmaVersion < 6 && (this || _global$e).input.slice(start, end).indexOf("\\") !== -1) {
            return;
          }
          var re = (this || _global$e).strict ? (this || _global$e).reservedWordsStrict : (this || _global$e).reservedWords;
          if (re.test(name)) {
            if (!(this || _global$e).inAsync && name === "await") {
              this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
            }
            this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
          }
        };
        pp$3.parseIdent = function (liberal, isBinding) {
          var node = this.startNode();
          if ((this || _global$e).type === types.name) {
            node.name = (this || _global$e).value;
          } else if ((this || _global$e).type.keyword) {
            node.name = (this || _global$e).type.keyword;
            if ((node.name === "class" || node.name === "function") && ((this || _global$e).lastTokEnd !== (this || _global$e).lastTokStart + 1 || (this || _global$e).input.charCodeAt((this || _global$e).lastTokStart) !== 46)) {
              (this || _global$e).context.pop();
            }
          } else {
            this.unexpected();
          }
          this.next(!!liberal);
          this.finishNode(node, "Identifier");
          if (!liberal) {
            this.checkUnreserved(node);
            if (node.name === "await" && !(this || _global$e).awaitIdentPos) {
              (this || _global$e).awaitIdentPos = node.start;
            }
          }
          return node;
        };
        pp$3.parseYield = function (noIn) {
          if (!(this || _global$e).yieldPos) {
            (this || _global$e).yieldPos = (this || _global$e).start;
          }
          var node = this.startNode();
          this.next();
          if ((this || _global$e).type === types.semi || this.canInsertSemicolon() || (this || _global$e).type !== types.star && !(this || _global$e).type.startsExpr) {
            node.delegate = false;
            node.argument = null;
          } else {
            node.delegate = this.eat(types.star);
            node.argument = this.parseMaybeAssign(noIn);
          }
          return this.finishNode(node, "YieldExpression");
        };
        pp$3.parseAwait = function () {
          if (!(this || _global$e).awaitPos) {
            (this || _global$e).awaitPos = (this || _global$e).start;
          }
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeUnary(null, false);
          return this.finishNode(node, "AwaitExpression");
        };
        var pp$4 = Parser.prototype;
        pp$4.raise = function (pos, message) {
          var loc = getLineInfo((this || _global$e).input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          err.pos = pos;
          err.loc = loc;
          err.raisedAt = (this || _global$e).pos;
          throw err;
        };
        pp$4.raiseRecoverable = pp$4.raise;
        pp$4.curPosition = function () {
          if ((this || _global$e).options.locations) {
            return new Position((this || _global$e).curLine, (this || _global$e).pos - (this || _global$e).lineStart);
          }
        };
        var pp$5 = Parser.prototype;
        var Scope = function Scope(flags) {
          (this || _global$e).flags = flags;
          (this || _global$e).var = [];
          (this || _global$e).lexical = [];
          (this || _global$e).functions = [];
        };
        pp$5.enterScope = function (flags) {
          (this || _global$e).scopeStack.push(new Scope(flags));
        };
        pp$5.exitScope = function () {
          (this || _global$e).scopeStack.pop();
        };
        pp$5.treatFunctionsAsVarInScope = function (scope) {
          return scope.flags & SCOPE_FUNCTION || !(this || _global$e).inModule && scope.flags & SCOPE_TOP;
        };
        pp$5.declareName = function (name, bindingType, pos) {
          var redeclared = false;
          if (bindingType === BIND_LEXICAL) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
            scope.lexical.push(name);
            if ((this || _global$e).inModule && scope.flags & SCOPE_TOP) {
              delete (this || _global$e).undefinedExports[name];
            }
          } else if (bindingType === BIND_SIMPLE_CATCH) {
            var scope$1 = this.currentScope();
            scope$1.lexical.push(name);
          } else if (bindingType === BIND_FUNCTION) {
            var scope$2 = this.currentScope();
            if ((this || _global$e).treatFunctionsAsVar) {
              redeclared = scope$2.lexical.indexOf(name) > -1;
            } else {
              redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
            }
            scope$2.functions.push(name);
          } else {
            for (var i = (this || _global$e).scopeStack.length - 1; i >= 0; --i) {
              var scope$3 = (this || _global$e).scopeStack[i];
              if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }
              scope$3.var.push(name);
              if ((this || _global$e).inModule && scope$3.flags & SCOPE_TOP) {
                delete (this || _global$e).undefinedExports[name];
              }
              if (scope$3.flags & SCOPE_VAR) {
                break;
              }
            }
          }
          if (redeclared) {
            this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
          }
        };
        pp$5.checkLocalExport = function (id) {
          if ((this || _global$e).scopeStack[0].lexical.indexOf(id.name) === -1 && (this || _global$e).scopeStack[0].var.indexOf(id.name) === -1) {
            (this || _global$e).undefinedExports[id.name] = id;
          }
        };
        pp$5.currentScope = function () {
          return (this || _global$e).scopeStack[(this || _global$e).scopeStack.length - 1];
        };
        pp$5.currentVarScope = function () {
          for (var i = (this || _global$e).scopeStack.length - 1;; i--) {
            var scope = (this || _global$e).scopeStack[i];
            if (scope.flags & SCOPE_VAR) {
              return scope;
            }
          }
        };
        pp$5.currentThisScope = function () {
          for (var i = (this || _global$e).scopeStack.length - 1;; i--) {
            var scope = (this || _global$e).scopeStack[i];
            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
              return scope;
            }
          }
        };
        var Node = function Node(parser, pos, loc) {
          (this || _global$e).type = "";
          (this || _global$e).start = pos;
          (this || _global$e).end = 0;
          if (parser.options.locations) {
            (this || _global$e).loc = new SourceLocation(parser, loc);
          }
          if (parser.options.directSourceFile) {
            (this || _global$e).sourceFile = parser.options.directSourceFile;
          }
          if (parser.options.ranges) {
            (this || _global$e).range = [
              pos,
              0
            ];
          }
        };
        var pp$6 = Parser.prototype;
        pp$6.startNode = function () {
          return new Node(this || _global$e, (this || _global$e).start, (this || _global$e).startLoc);
        };
        pp$6.startNodeAt = function (pos, loc) {
          return new Node(this || _global$e, pos, loc);
        };
        function finishNodeAt(node, type, pos, loc) {
          node.type = type;
          node.end = pos;
          if ((this || _global$e).options.locations) {
            node.loc.end = loc;
          }
          if ((this || _global$e).options.ranges) {
            node.range[1] = pos;
          }
          return node;
        }
        pp$6.finishNode = function (node, type) {
          return finishNodeAt.call(this || _global$e, node, type, (this || _global$e).lastTokEnd, (this || _global$e).lastTokEndLoc);
        };
        pp$6.finishNodeAt = function (node, type, pos, loc) {
          return finishNodeAt.call(this || _global$e, node, type, pos, loc);
        };
        var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
          (this || _global$e).token = token;
          (this || _global$e).isExpr = !!isExpr;
          (this || _global$e).preserveSpace = !!preserveSpace;
          (this || _global$e).override = override;
          (this || _global$e).generator = !!generator;
        };
        var types$1 = {
          b_stat: new TokContext("{", false),
          b_expr: new TokContext("{", true),
          b_tmpl: new TokContext("${", false),
          p_stat: new TokContext("(", false),
          p_expr: new TokContext("(", true),
          q_tmpl: new TokContext("`", true, true, function (p) {
            return p.tryReadTemplateToken();
          }),
          f_stat: new TokContext("function", false),
          f_expr: new TokContext("function", true),
          f_expr_gen: new TokContext("function", true, false, null, true),
          f_gen: new TokContext("function", false, false, null, true)
        };
        var pp$7 = Parser.prototype;
        pp$7.initialContext = function () {
          return [types$1.b_stat];
        };
        pp$7.braceIsBlock = function (prevType) {
          var parent = this.curContext();
          if (parent === types$1.f_expr || parent === types$1.f_stat) {
            return true;
          }
          if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
            return !parent.isExpr;
          }
          if (prevType === types._return || prevType === types.name && (this || _global$e).exprAllowed) {
            return lineBreak.test((this || _global$e).input.slice((this || _global$e).lastTokEnd, (this || _global$e).start));
          }
          if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
            return true;
          }
          if (prevType === types.braceL) {
            return parent === types$1.b_stat;
          }
          if (prevType === types._var || prevType === types._const || prevType === types.name) {
            return false;
          }
          return !(this || _global$e).exprAllowed;
        };
        pp$7.inGeneratorContext = function () {
          for (var i = (this || _global$e).context.length - 1; i >= 1; i--) {
            var context = (this || _global$e).context[i];
            if (context.token === "function") {
              return context.generator;
            }
          }
          return false;
        };
        pp$7.updateContext = function (prevType) {
          var update, type = (this || _global$e).type;
          if (type.keyword && prevType === types.dot) {
            (this || _global$e).exprAllowed = false;
          } else if (update = type.updateContext) {
            update.call(this || _global$e, prevType);
          } else {
            (this || _global$e).exprAllowed = type.beforeExpr;
          }
        };
        types.parenR.updateContext = types.braceR.updateContext = function () {
          if ((this || _global$e).context.length === 1) {
            (this || _global$e).exprAllowed = true;
            return;
          }
          var out = (this || _global$e).context.pop();
          if (out === types$1.b_stat && this.curContext().token === "function") {
            out = (this || _global$e).context.pop();
          }
          (this || _global$e).exprAllowed = !out.isExpr;
        };
        types.braceL.updateContext = function (prevType) {
          (this || _global$e).context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
          (this || _global$e).exprAllowed = true;
        };
        types.dollarBraceL.updateContext = function () {
          (this || _global$e).context.push(types$1.b_tmpl);
          (this || _global$e).exprAllowed = true;
        };
        types.parenL.updateContext = function (prevType) {
          var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
          (this || _global$e).context.push(statementParens ? types$1.p_stat : types$1.p_expr);
          (this || _global$e).exprAllowed = true;
        };
        types.incDec.updateContext = function () {
        };
        types._function.updateContext = types._class.updateContext = function (prevType) {
          if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test((this || _global$e).input.slice((this || _global$e).lastTokEnd, (this || _global$e).start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
            (this || _global$e).context.push(types$1.f_expr);
          } else {
            (this || _global$e).context.push(types$1.f_stat);
          }
          (this || _global$e).exprAllowed = false;
        };
        types.backQuote.updateContext = function () {
          if (this.curContext() === types$1.q_tmpl) {
            (this || _global$e).context.pop();
          } else {
            (this || _global$e).context.push(types$1.q_tmpl);
          }
          (this || _global$e).exprAllowed = false;
        };
        types.star.updateContext = function (prevType) {
          if (prevType === types._function) {
            var index = (this || _global$e).context.length - 1;
            if ((this || _global$e).context[index] === types$1.f_expr) {
              (this || _global$e).context[index] = types$1.f_expr_gen;
            } else {
              (this || _global$e).context[index] = types$1.f_gen;
            }
          }
          (this || _global$e).exprAllowed = true;
        };
        types.name.updateContext = function (prevType) {
          var allowed = false;
          if ((this || _global$e).options.ecmaVersion >= 6 && prevType !== types.dot) {
            if ((this || _global$e).value === "of" && !(this || _global$e).exprAllowed || (this || _global$e).value === "yield" && this.inGeneratorContext()) {
              allowed = true;
            }
          }
          (this || _global$e).exprAllowed = allowed;
        };
        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
        var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
        var ecma11BinaryProperties = ecma10BinaryProperties;
        var unicodeBinaryProperties = {
          9: ecma9BinaryProperties,
          10: ecma10BinaryProperties,
          11: ecma11BinaryProperties
        };
        var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
        var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
        var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
        var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
        var unicodeScriptValues = {
          9: ecma9ScriptValues,
          10: ecma10ScriptValues,
          11: ecma11ScriptValues
        };
        var data = {};
        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = {
            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
            nonBinary: {
              General_Category: wordsRegexp(unicodeGeneralCategoryValues),
              Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
            }
          };
          d.nonBinary.Script_Extensions = d.nonBinary.Script;
          d.nonBinary.gc = d.nonBinary.General_Category;
          d.nonBinary.sc = d.nonBinary.Script;
          d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }
        buildUnicodeData(9);
        buildUnicodeData(10);
        buildUnicodeData(11);
        var pp$8 = Parser.prototype;
        var RegExpValidationState = function RegExpValidationState(parser) {
          (this || _global$e).parser = parser;
          (this || _global$e).validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
          (this || _global$e).unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
          (this || _global$e).source = "";
          (this || _global$e).flags = "";
          (this || _global$e).start = 0;
          (this || _global$e).switchU = false;
          (this || _global$e).switchN = false;
          (this || _global$e).pos = 0;
          (this || _global$e).lastIntValue = 0;
          (this || _global$e).lastStringValue = "";
          (this || _global$e).lastAssertionIsQuantifiable = false;
          (this || _global$e).numCapturingParens = 0;
          (this || _global$e).maxBackReference = 0;
          (this || _global$e).groupNames = [];
          (this || _global$e).backReferenceNames = [];
        };
        RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
          var unicode = flags.indexOf("u") !== -1;
          (this || _global$e).start = start | 0;
          (this || _global$e).source = pattern + "";
          (this || _global$e).flags = flags;
          (this || _global$e).switchU = unicode && (this || _global$e).parser.options.ecmaVersion >= 6;
          (this || _global$e).switchN = unicode && (this || _global$e).parser.options.ecmaVersion >= 9;
        };
        RegExpValidationState.prototype.raise = function raise(message) {
          (this || _global$e).parser.raiseRecoverable((this || _global$e).start, "Invalid regular expression: /" + (this || _global$e).source + "/: " + message);
        };
        RegExpValidationState.prototype.at = function at(i, forceU) {
          if (forceU === void 0)
            forceU = false;
          var s = (this || _global$e).source;
          var l = s.length;
          if (i >= l) {
            return -1;
          }
          var c = s.charCodeAt(i);
          if (!(forceU || (this || _global$e).switchU) || c <= 55295 || c >= 57344 || i + 1 >= l) {
            return c;
          }
          var next = s.charCodeAt(i + 1);
          return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
        };
        RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
          if (forceU === void 0)
            forceU = false;
          var s = (this || _global$e).source;
          var l = s.length;
          if (i >= l) {
            return l;
          }
          var c = s.charCodeAt(i), next;
          if (!(forceU || (this || _global$e).switchU) || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
            return i + 1;
          }
          return i + 2;
        };
        RegExpValidationState.prototype.current = function current(forceU) {
          if (forceU === void 0)
            forceU = false;
          return this.at((this || _global$e).pos, forceU);
        };
        RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
          if (forceU === void 0)
            forceU = false;
          return this.at(this.nextIndex((this || _global$e).pos, forceU), forceU);
        };
        RegExpValidationState.prototype.advance = function advance(forceU) {
          if (forceU === void 0)
            forceU = false;
          (this || _global$e).pos = this.nextIndex((this || _global$e).pos, forceU);
        };
        RegExpValidationState.prototype.eat = function eat(ch, forceU) {
          if (forceU === void 0)
            forceU = false;
          if (this.current(forceU) === ch) {
            this.advance(forceU);
            return true;
          }
          return false;
        };
        function codePointToString(ch) {
          if (ch <= 65535) {
            return String.fromCharCode(ch);
          }
          ch -= 65536;
          return String.fromCharCode((ch >> 10) + 55296, (ch & 1023) + 56320);
        }
        pp$8.validateRegExpFlags = function (state) {
          var validFlags = state.validFlags;
          var flags = state.flags;
          for (var i = 0; i < flags.length; i++) {
            var flag = flags.charAt(i);
            if (validFlags.indexOf(flag) === -1) {
              this.raise(state.start, "Invalid regular expression flag");
            }
            if (flags.indexOf(flag, i + 1) > -1) {
              this.raise(state.start, "Duplicate regular expression flag");
            }
          }
        };
        pp$8.validateRegExpPattern = function (state) {
          this.regexp_pattern(state);
          if (!state.switchN && (this || _global$e).options.ecmaVersion >= 9 && state.groupNames.length > 0) {
            state.switchN = true;
            this.regexp_pattern(state);
          }
        };
        pp$8.regexp_pattern = function (state) {
          state.pos = 0;
          state.lastIntValue = 0;
          state.lastStringValue = "";
          state.lastAssertionIsQuantifiable = false;
          state.numCapturingParens = 0;
          state.maxBackReference = 0;
          state.groupNames.length = 0;
          state.backReferenceNames.length = 0;
          this.regexp_disjunction(state);
          if (state.pos !== state.source.length) {
            if (state.eat(41)) {
              state.raise("Unmatched ')'");
            }
            if (state.eat(93) || state.eat(125)) {
              state.raise("Lone quantifier brackets");
            }
          }
          if (state.maxBackReference > state.numCapturingParens) {
            state.raise("Invalid escape");
          }
          for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
            var name = list[i];
            if (state.groupNames.indexOf(name) === -1) {
              state.raise("Invalid named capture referenced");
            }
          }
        };
        pp$8.regexp_disjunction = function (state) {
          this.regexp_alternative(state);
          while (state.eat(124)) {
            this.regexp_alternative(state);
          }
          if (this.regexp_eatQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }
          if (state.eat(123)) {
            state.raise("Lone quantifier brackets");
          }
        };
        pp$8.regexp_alternative = function (state) {
          while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
          }
        };
        pp$8.regexp_eatTerm = function (state) {
          if (this.regexp_eatAssertion(state)) {
            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
              if (state.switchU) {
                state.raise("Invalid quantifier");
              }
            }
            return true;
          }
          if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
            this.regexp_eatQuantifier(state);
            return true;
          }
          return false;
        };
        pp$8.regexp_eatAssertion = function (state) {
          var start = state.pos;
          state.lastAssertionIsQuantifiable = false;
          if (state.eat(94) || state.eat(36)) {
            return true;
          }
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98)) {
              return true;
            }
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if ((this || _global$e).options.ecmaVersion >= 9) {
              lookbehind = state.eat(60);
            }
            if (state.eat(61) || state.eat(33)) {
              this.regexp_disjunction(state);
              if (!state.eat(41)) {
                state.raise("Unterminated group");
              }
              state.lastAssertionIsQuantifiable = !lookbehind;
              return true;
            }
          }
          state.pos = start;
          return false;
        };
        pp$8.regexp_eatQuantifier = function (state, noError) {
          if (noError === void 0)
            noError = false;
          if (this.regexp_eatQuantifierPrefix(state, noError)) {
            state.eat(63);
            return true;
          }
          return false;
        };
        pp$8.regexp_eatQuantifierPrefix = function (state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        };
        pp$8.regexp_eatBracedQuantifier = function (state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state)) {
              min = state.lastIntValue;
              if (state.eat(44) && this.regexp_eatDecimalDigits(state)) {
                max = state.lastIntValue;
              }
              if (state.eat(125)) {
                if (max !== -1 && max < min && !noError) {
                  state.raise("numbers out of order in {} quantifier");
                }
                return true;
              }
            }
            if (state.switchU && !noError) {
              state.raise("Incomplete quantifier");
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatAtom = function (state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        };
        pp$8.regexp_eatReverseSolidusAtomEscape = function (state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state)) {
              return true;
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatUncapturingGroup = function (state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63) && state.eat(58)) {
              this.regexp_disjunction(state);
              if (state.eat(41)) {
                return true;
              }
              state.raise("Unterminated group");
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatCapturingGroup = function (state) {
          if (state.eat(40)) {
            if ((this || _global$e).options.ecmaVersion >= 9) {
              this.regexp_groupSpecifier(state);
            } else if (state.current() === 63) {
              state.raise("Invalid group");
            }
            this.regexp_disjunction(state);
            if (state.eat(41)) {
              state.numCapturingParens += 1;
              return true;
            }
            state.raise("Unterminated group");
          }
          return false;
        };
        pp$8.regexp_eatExtendedAtom = function (state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        };
        pp$8.regexp_eatInvalidBracedQuantifier = function (state) {
          if (this.regexp_eatBracedQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }
          return false;
        };
        pp$8.regexp_eatSyntaxCharacter = function (state) {
          var ch = state.current();
          if (isSyntaxCharacter(ch)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }
          return false;
        };
        function isSyntaxCharacter(ch) {
          return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        pp$8.regexp_eatPatternCharacters = function (state) {
          var start = state.pos;
          var ch = 0;
          while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
            state.advance();
          }
          return state.pos !== start;
        };
        pp$8.regexp_eatExtendedPatternCharacter = function (state) {
          var ch = state.current();
          if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_groupSpecifier = function (state) {
          if (state.eat(63)) {
            if (this.regexp_eatGroupName(state)) {
              if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                state.raise("Duplicate capture group name");
              }
              state.groupNames.push(state.lastStringValue);
              return;
            }
            state.raise("Invalid group");
          }
        };
        pp$8.regexp_eatGroupName = function (state) {
          state.lastStringValue = "";
          if (state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) {
              return true;
            }
            state.raise("Invalid capture group name");
          }
          return false;
        };
        pp$8.regexp_eatRegExpIdentifierName = function (state) {
          state.lastStringValue = "";
          if (this.regexp_eatRegExpIdentifierStart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);
            while (this.regexp_eatRegExpIdentifierPart(state)) {
              state.lastStringValue += codePointToString(state.lastIntValue);
            }
            return true;
          }
          return false;
        };
        pp$8.regexp_eatRegExpIdentifierStart = function (state) {
          var start = state.pos;
          var forceU = (this || _global$e).options.ecmaVersion >= 11;
          var ch = state.current(forceU);
          state.advance(forceU);
          if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
            ch = state.lastIntValue;
          }
          if (isRegExpIdentifierStart(ch)) {
            state.lastIntValue = ch;
            return true;
          }
          state.pos = start;
          return false;
        };
        function isRegExpIdentifierStart(ch) {
          return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
        }
        pp$8.regexp_eatRegExpIdentifierPart = function (state) {
          var start = state.pos;
          var forceU = (this || _global$e).options.ecmaVersion >= 11;
          var ch = state.current(forceU);
          state.advance(forceU);
          if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
            ch = state.lastIntValue;
          }
          if (isRegExpIdentifierPart(ch)) {
            state.lastIntValue = ch;
            return true;
          }
          state.pos = start;
          return false;
        };
        function isRegExpIdentifierPart(ch) {
          return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
        }
        pp$8.regexp_eatAtomEscape = function (state) {
          if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
            return true;
          }
          if (state.switchU) {
            if (state.current() === 99) {
              state.raise("Invalid unicode escape");
            }
            state.raise("Invalid escape");
          }
          return false;
        };
        pp$8.regexp_eatBackReference = function (state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;
            if (state.switchU) {
              if (n > state.maxBackReference) {
                state.maxBackReference = n;
              }
              return true;
            }
            if (n <= state.numCapturingParens) {
              return true;
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatKGroupName = function (state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state)) {
              state.backReferenceNames.push(state.lastStringValue);
              return true;
            }
            state.raise("Invalid named reference");
          }
          return false;
        };
        pp$8.regexp_eatCharacterEscape = function (state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        };
        pp$8.regexp_eatCControlLetter = function (state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state)) {
              return true;
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatZero = function (state) {
          if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
            state.lastIntValue = 0;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatControlEscape = function (state) {
          var ch = state.current();
          if (ch === 116) {
            state.lastIntValue = 9;
            state.advance();
            return true;
          }
          if (ch === 110) {
            state.lastIntValue = 10;
            state.advance();
            return true;
          }
          if (ch === 118) {
            state.lastIntValue = 11;
            state.advance();
            return true;
          }
          if (ch === 102) {
            state.lastIntValue = 12;
            state.advance();
            return true;
          }
          if (ch === 114) {
            state.lastIntValue = 13;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatControlLetter = function (state) {
          var ch = state.current();
          if (isControlLetter(ch)) {
            state.lastIntValue = ch % 32;
            state.advance();
            return true;
          }
          return false;
        };
        function isControlLetter(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        pp$8.regexp_eatRegExpUnicodeEscapeSequence = function (state, forceU) {
          if (forceU === void 0)
            forceU = false;
          var start = state.pos;
          var switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343) {
                    state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                    return true;
                  }
                }
                state.pos = leadSurrogateEnd;
                state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && isValidUnicode(state.lastIntValue)) {
              return true;
            }
            if (switchU) {
              state.raise("Invalid unicode escape");
            }
            state.pos = start;
          }
          return false;
        };
        function isValidUnicode(ch) {
          return ch >= 0 && ch <= 1114111;
        }
        pp$8.regexp_eatIdentityEscape = function (state) {
          if (state.switchU) {
            if (this.regexp_eatSyntaxCharacter(state)) {
              return true;
            }
            if (state.eat(47)) {
              state.lastIntValue = 47;
              return true;
            }
            return false;
          }
          var ch = state.current();
          if (ch !== 99 && (!state.switchN || ch !== 107)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatDecimalEscape = function (state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
              state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        };
        pp$8.regexp_eatCharacterClassEscape = function (state) {
          var ch = state.current();
          if (isCharacterClassEscape(ch)) {
            state.lastIntValue = -1;
            state.advance();
            return true;
          }
          if (state.switchU && (this || _global$e).options.ecmaVersion >= 9 && (ch === 80 || ch === 112)) {
            state.lastIntValue = -1;
            state.advance();
            if (state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125)) {
              return true;
            }
            state.raise("Invalid property name");
          }
          return false;
        };
        function isCharacterClassEscape(ch) {
          return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
        }
        pp$8.regexp_eatUnicodePropertyValueExpression = function (state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue;
              this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
              return true;
            }
          }
          state.pos = start;
          if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
            return true;
          }
          return false;
        };
        pp$8.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
          if (!has(state.unicodeProperties.nonBinary, name)) {
            state.raise("Invalid property name");
          }
          if (!state.unicodeProperties.nonBinary[name].test(value)) {
            state.raise("Invalid property value");
          }
        };
        pp$8.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
          if (!state.unicodeProperties.binary.test(nameOrValue)) {
            state.raise("Invalid property name");
          }
        };
        pp$8.regexp_eatUnicodePropertyName = function (state) {
          var ch = 0;
          state.lastStringValue = "";
          while (isUnicodePropertyNameCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }
          return state.lastStringValue !== "";
        };
        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || ch === 95;
        }
        pp$8.regexp_eatUnicodePropertyValue = function (state) {
          var ch = 0;
          state.lastStringValue = "";
          while (isUnicodePropertyValueCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }
          return state.lastStringValue !== "";
        };
        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }
        pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
          return this.regexp_eatUnicodePropertyValue(state);
        };
        pp$8.regexp_eatCharacterClass = function (state) {
          if (state.eat(91)) {
            state.eat(94);
            this.regexp_classRanges(state);
            if (state.eat(93)) {
              return true;
            }
            state.raise("Unterminated character class");
          }
          return false;
        };
        pp$8.regexp_classRanges = function (state) {
          while (this.regexp_eatClassAtom(state)) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              if (state.switchU && (left === -1 || right === -1)) {
                state.raise("Invalid character class");
              }
              if (left !== -1 && right !== -1 && left > right) {
                state.raise("Range out of order in character class");
              }
            }
          }
        };
        pp$8.regexp_eatClassAtom = function (state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state)) {
              return true;
            }
            if (state.switchU) {
              var ch$1 = state.current();
              if (ch$1 === 99 || isOctalDigit(ch$1)) {
                state.raise("Invalid class escape");
              }
              state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          if (ch !== 93) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatClassEscape = function (state) {
          var start = state.pos;
          if (state.eat(98)) {
            state.lastIntValue = 8;
            return true;
          }
          if (state.switchU && state.eat(45)) {
            state.lastIntValue = 45;
            return true;
          }
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state)) {
              return true;
            }
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        };
        pp$8.regexp_eatClassControlLetter = function (state) {
          var ch = state.current();
          if (isDecimalDigit(ch) || ch === 95) {
            state.lastIntValue = ch % 32;
            state.advance();
            return true;
          }
          return false;
        };
        pp$8.regexp_eatHexEscapeSequence = function (state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) {
              return true;
            }
            if (state.switchU) {
              state.raise("Invalid escape");
            }
            state.pos = start;
          }
          return false;
        };
        pp$8.regexp_eatDecimalDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;
          while (isDecimalDigit(ch = state.current())) {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          }
          return state.pos !== start;
        };
        function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        pp$8.regexp_eatHexDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;
          while (isHexDigit(ch = state.current())) {
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }
          return state.pos !== start;
        };
        function isHexDigit(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt(ch) {
          if (ch >= 65 && ch <= 70) {
            return 10 + (ch - 65);
          }
          if (ch >= 97 && ch <= 102) {
            return 10 + (ch - 97);
          }
          return ch - 48;
        }
        pp$8.regexp_eatLegacyOctalEscapeSequence = function (state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
              } else {
                state.lastIntValue = n1 * 8 + n2;
              }
            } else {
              state.lastIntValue = n1;
            }
            return true;
          }
          return false;
        };
        pp$8.regexp_eatOctalDigit = function (state) {
          var ch = state.current();
          if (isOctalDigit(ch)) {
            state.lastIntValue = ch - 48;
            state.advance();
            return true;
          }
          state.lastIntValue = 0;
          return false;
        };
        function isOctalDigit(ch) {
          return ch >= 48 && ch <= 55;
        }
        pp$8.regexp_eatFixedHexDigits = function (state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i = 0; i < length; ++i) {
            var ch = state.current();
            if (!isHexDigit(ch)) {
              state.pos = start;
              return false;
            }
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }
          return true;
        };
        var Token = function Token(p) {
          (this || _global$e).type = p.type;
          (this || _global$e).value = p.value;
          (this || _global$e).start = p.start;
          (this || _global$e).end = p.end;
          if (p.options.locations) {
            (this || _global$e).loc = new SourceLocation(p, p.startLoc, p.endLoc);
          }
          if (p.options.ranges) {
            (this || _global$e).range = [
              p.start,
              p.end
            ];
          }
        };
        var pp$9 = Parser.prototype;
        pp$9.next = function (ignoreEscapeSequenceInKeyword) {
          if (!ignoreEscapeSequenceInKeyword && (this || _global$e).type.keyword && (this || _global$e).containsEsc) {
            this.raiseRecoverable((this || _global$e).start, "Escape sequence in keyword " + (this || _global$e).type.keyword);
          }
          if ((this || _global$e).options.onToken) {
            (this || _global$e).options.onToken(new Token(this || _global$e));
          }
          (this || _global$e).lastTokEnd = (this || _global$e).end;
          (this || _global$e).lastTokStart = (this || _global$e).start;
          (this || _global$e).lastTokEndLoc = (this || _global$e).endLoc;
          (this || _global$e).lastTokStartLoc = (this || _global$e).startLoc;
          this.nextToken();
        };
        pp$9.getToken = function () {
          this.next();
          return new Token(this || _global$e);
        };
        if (typeof Symbol !== "undefined") {
          pp$9[Symbol.iterator] = function () {
            var this$1$1 = this || _global$e;
            return {
              next: function () {
                var token = this$1$1.getToken();
                return {
                  done: token.type === types.eof,
                  value: token
                };
              }
            };
          };
        }
        pp$9.curContext = function () {
          return (this || _global$e).context[(this || _global$e).context.length - 1];
        };
        pp$9.nextToken = function () {
          var curContext = this.curContext();
          if (!curContext || !curContext.preserveSpace) {
            this.skipSpace();
          }
          (this || _global$e).start = (this || _global$e).pos;
          if ((this || _global$e).options.locations) {
            (this || _global$e).startLoc = this.curPosition();
          }
          if ((this || _global$e).pos >= (this || _global$e).input.length) {
            return this.finishToken(types.eof);
          }
          if (curContext.override) {
            return curContext.override(this || _global$e);
          } else {
            this.readToken(this.fullCharCodeAtPos());
          }
        };
        pp$9.readToken = function (code) {
          if (isIdentifierStart(code, (this || _global$e).options.ecmaVersion >= 6) || code === 92) {
            return this.readWord();
          }
          return this.getTokenFromCode(code);
        };
        pp$9.fullCharCodeAtPos = function () {
          var code = (this || _global$e).input.charCodeAt((this || _global$e).pos);
          if (code <= 55295 || code >= 57344) {
            return code;
          }
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          return (code << 10) + next - 56613888;
        };
        pp$9.skipBlockComment = function () {
          var startLoc = (this || _global$e).options.onComment && this.curPosition();
          var start = (this || _global$e).pos, end = (this || _global$e).input.indexOf("*/", (this || _global$e).pos += 2);
          if (end === -1) {
            this.raise((this || _global$e).pos - 2, "Unterminated comment");
          }
          (this || _global$e).pos = end + 2;
          if ((this || _global$e).options.locations) {
            lineBreakG.lastIndex = start;
            var match;
            while ((match = lineBreakG.exec((this || _global$e).input)) && match.index < (this || _global$e).pos) {
              ++(this || _global$e).curLine;
              (this || _global$e).lineStart = match.index + match[0].length;
            }
          }
          if ((this || _global$e).options.onComment) {
            (this || _global$e).options.onComment(true, (this || _global$e).input.slice(start + 2, end), start, (this || _global$e).pos, startLoc, this.curPosition());
          }
        };
        pp$9.skipLineComment = function (startSkip) {
          var start = (this || _global$e).pos;
          var startLoc = (this || _global$e).options.onComment && this.curPosition();
          var ch = (this || _global$e).input.charCodeAt((this || _global$e).pos += startSkip);
          while ((this || _global$e).pos < (this || _global$e).input.length && !isNewLine(ch)) {
            ch = (this || _global$e).input.charCodeAt(++(this || _global$e).pos);
          }
          if ((this || _global$e).options.onComment) {
            (this || _global$e).options.onComment(false, (this || _global$e).input.slice(start + startSkip, (this || _global$e).pos), start, (this || _global$e).pos, startLoc, this.curPosition());
          }
        };
        pp$9.skipSpace = function () {
          loop:
            while ((this || _global$e).pos < (this || _global$e).input.length) {
              var ch = (this || _global$e).input.charCodeAt((this || _global$e).pos);
              switch (ch) {
              case 32:
              case 160:
                ++(this || _global$e).pos;
                break;
              case 13:
                if ((this || _global$e).input.charCodeAt((this || _global$e).pos + 1) === 10) {
                  ++(this || _global$e).pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++(this || _global$e).pos;
                if ((this || _global$e).options.locations) {
                  ++(this || _global$e).curLine;
                  (this || _global$e).lineStart = (this || _global$e).pos;
                }
                break;
              case 47:
                switch ((this || _global$e).input.charCodeAt((this || _global$e).pos + 1)) {
                case 42:
                  this.skipBlockComment();
                  break;
                case 47:
                  this.skipLineComment(2);
                  break;
                default:
                  break loop;
                }
                break;
              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++(this || _global$e).pos;
                } else {
                  break loop;
                }
              }
            }
        };
        pp$9.finishToken = function (type, val) {
          (this || _global$e).end = (this || _global$e).pos;
          if ((this || _global$e).options.locations) {
            (this || _global$e).endLoc = this.curPosition();
          }
          var prevType = (this || _global$e).type;
          (this || _global$e).type = type;
          (this || _global$e).value = val;
          this.updateContext(prevType);
        };
        pp$9.readToken_dot = function () {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          if (next >= 48 && next <= 57) {
            return this.readNumber(true);
          }
          var next2 = (this || _global$e).input.charCodeAt((this || _global$e).pos + 2);
          if ((this || _global$e).options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
            (this || _global$e).pos += 3;
            return this.finishToken(types.ellipsis);
          } else {
            ++(this || _global$e).pos;
            return this.finishToken(types.dot);
          }
        };
        pp$9.readToken_slash = function () {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          if ((this || _global$e).exprAllowed) {
            ++(this || _global$e).pos;
            return this.readRegexp();
          }
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(types.slash, 1);
        };
        pp$9.readToken_mult_modulo_exp = function (code) {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          var size = 1;
          var tokentype = code === 42 ? types.star : types.modulo;
          if ((this || _global$e).options.ecmaVersion >= 7 && code === 42 && next === 42) {
            ++size;
            tokentype = types.starstar;
            next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 2);
          }
          if (next === 61) {
            return this.finishOp(types.assign, size + 1);
          }
          return this.finishOp(tokentype, size);
        };
        pp$9.readToken_pipe_amp = function (code) {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          if (next === code) {
            if ((this || _global$e).options.ecmaVersion >= 12) {
              var next2 = (this || _global$e).input.charCodeAt((this || _global$e).pos + 2);
              if (next2 === 61) {
                return this.finishOp(types.assign, 3);
              }
            }
            return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
          }
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
        };
        pp$9.readToken_caret = function () {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(types.bitwiseXOR, 1);
        };
        pp$9.readToken_plus_min = function (code) {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          if (next === code) {
            if (next === 45 && !(this || _global$e).inModule && (this || _global$e).input.charCodeAt((this || _global$e).pos + 2) === 62 && ((this || _global$e).lastTokEnd === 0 || lineBreak.test((this || _global$e).input.slice((this || _global$e).lastTokEnd, (this || _global$e).pos)))) {
              this.skipLineComment(3);
              this.skipSpace();
              return this.nextToken();
            }
            return this.finishOp(types.incDec, 2);
          }
          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }
          return this.finishOp(types.plusMin, 1);
        };
        pp$9.readToken_lt_gt = function (code) {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          var size = 1;
          if (next === code) {
            size = code === 62 && (this || _global$e).input.charCodeAt((this || _global$e).pos + 2) === 62 ? 3 : 2;
            if ((this || _global$e).input.charCodeAt((this || _global$e).pos + size) === 61) {
              return this.finishOp(types.assign, size + 1);
            }
            return this.finishOp(types.bitShift, size);
          }
          if (next === 33 && code === 60 && !(this || _global$e).inModule && (this || _global$e).input.charCodeAt((this || _global$e).pos + 2) === 45 && (this || _global$e).input.charCodeAt((this || _global$e).pos + 3) === 45) {
            this.skipLineComment(4);
            this.skipSpace();
            return this.nextToken();
          }
          if (next === 61) {
            size = 2;
          }
          return this.finishOp(types.relational, size);
        };
        pp$9.readToken_eq_excl = function (code) {
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
          if (next === 61) {
            return this.finishOp(types.equality, (this || _global$e).input.charCodeAt((this || _global$e).pos + 2) === 61 ? 3 : 2);
          }
          if (code === 61 && next === 62 && (this || _global$e).options.ecmaVersion >= 6) {
            (this || _global$e).pos += 2;
            return this.finishToken(types.arrow);
          }
          return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
        };
        pp$9.readToken_question = function () {
          var ecmaVersion = (this || _global$e).options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
            if (next === 46) {
              var next2 = (this || _global$e).input.charCodeAt((this || _global$e).pos + 2);
              if (next2 < 48 || next2 > 57) {
                return this.finishOp(types.questionDot, 2);
              }
            }
            if (next === 63) {
              if (ecmaVersion >= 12) {
                var next2$1 = (this || _global$e).input.charCodeAt((this || _global$e).pos + 2);
                if (next2$1 === 61) {
                  return this.finishOp(types.assign, 3);
                }
              }
              return this.finishOp(types.coalesce, 2);
            }
          }
          return this.finishOp(types.question, 1);
        };
        pp$9.getTokenFromCode = function (code) {
          switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            ++(this || _global$e).pos;
            return this.finishToken(types.parenL);
          case 41:
            ++(this || _global$e).pos;
            return this.finishToken(types.parenR);
          case 59:
            ++(this || _global$e).pos;
            return this.finishToken(types.semi);
          case 44:
            ++(this || _global$e).pos;
            return this.finishToken(types.comma);
          case 91:
            ++(this || _global$e).pos;
            return this.finishToken(types.bracketL);
          case 93:
            ++(this || _global$e).pos;
            return this.finishToken(types.bracketR);
          case 123:
            ++(this || _global$e).pos;
            return this.finishToken(types.braceL);
          case 125:
            ++(this || _global$e).pos;
            return this.finishToken(types.braceR);
          case 58:
            ++(this || _global$e).pos;
            return this.finishToken(types.colon);
          case 96:
            if ((this || _global$e).options.ecmaVersion < 6) {
              break;
            }
            ++(this || _global$e).pos;
            return this.finishToken(types.backQuote);
          case 48:
            var next = (this || _global$e).input.charCodeAt((this || _global$e).pos + 1);
            if (next === 120 || next === 88) {
              return this.readRadixNumber(16);
            }
            if ((this || _global$e).options.ecmaVersion >= 6) {
              if (next === 111 || next === 79) {
                return this.readRadixNumber(8);
              }
              if (next === 98 || next === 66) {
                return this.readRadixNumber(2);
              }
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types.prefix, 1);
          }
          this.raise((this || _global$e).pos, "Unexpected character '" + codePointToString$1(code) + "'");
        };
        pp$9.finishOp = function (type, size) {
          var str = (this || _global$e).input.slice((this || _global$e).pos, (this || _global$e).pos + size);
          (this || _global$e).pos += size;
          return this.finishToken(type, str);
        };
        pp$9.readRegexp = function () {
          var escaped, inClass, start = (this || _global$e).pos;
          for (;;) {
            if ((this || _global$e).pos >= (this || _global$e).input.length) {
              this.raise(start, "Unterminated regular expression");
            }
            var ch = (this || _global$e).input.charAt((this || _global$e).pos);
            if (lineBreak.test(ch)) {
              this.raise(start, "Unterminated regular expression");
            }
            if (!escaped) {
              if (ch === "[") {
                inClass = true;
              } else if (ch === "]" && inClass) {
                inClass = false;
              } else if (ch === "/" && !inClass) {
                break;
              }
              escaped = ch === "\\";
            } else {
              escaped = false;
            }
            ++(this || _global$e).pos;
          }
          var pattern = (this || _global$e).input.slice(start, (this || _global$e).pos);
          ++(this || _global$e).pos;
          var flagsStart = (this || _global$e).pos;
          var flags = this.readWord1();
          if ((this || _global$e).containsEsc) {
            this.unexpected(flagsStart);
          }
          var state = (this || _global$e).regexpState || ((this || _global$e).regexpState = new RegExpValidationState(this || _global$e));
          state.reset(start, pattern, flags);
          this.validateRegExpFlags(state);
          this.validateRegExpPattern(state);
          var value = null;
          try {
            value = new RegExp(pattern, flags);
          } catch (e) {
          }
          return this.finishToken(types.regexp, {
            pattern: pattern,
            flags: flags,
            value: value
          });
        };
        pp$9.readInt = function (radix, len, maybeLegacyOctalNumericLiteral) {
          var allowSeparators = (this || _global$e).options.ecmaVersion >= 12 && len === undefined;
          var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && (this || _global$e).input.charCodeAt((this || _global$e).pos) === 48;
          var start = (this || _global$e).pos, total = 0, lastCode = 0;
          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++(this || _global$e).pos) {
            var code = (this || _global$e).input.charCodeAt((this || _global$e).pos), val = void 0;
            if (allowSeparators && code === 95) {
              if (isLegacyOctalNumericLiteral) {
                this.raiseRecoverable((this || _global$e).pos, "Numeric separator is not allowed in legacy octal numeric literals");
              }
              if (lastCode === 95) {
                this.raiseRecoverable((this || _global$e).pos, "Numeric separator must be exactly one underscore");
              }
              if (i === 0) {
                this.raiseRecoverable((this || _global$e).pos, "Numeric separator is not allowed at the first of digits");
              }
              lastCode = code;
              continue;
            }
            if (code >= 97) {
              val = code - 97 + 10;
            } else if (code >= 65) {
              val = code - 65 + 10;
            } else if (code >= 48 && code <= 57) {
              val = code - 48;
            } else {
              val = Infinity;
            }
            if (val >= radix) {
              break;
            }
            lastCode = code;
            total = total * radix + val;
          }
          if (allowSeparators && lastCode === 95) {
            this.raiseRecoverable((this || _global$e).pos - 1, "Numeric separator is not allowed at the last of digits");
          }
          if ((this || _global$e).pos === start || len != null && (this || _global$e).pos - start !== len) {
            return null;
          }
          return total;
        };
        function stringToNumber(str, isLegacyOctalNumericLiteral) {
          if (isLegacyOctalNumericLiteral) {
            return parseInt(str, 8);
          }
          return parseFloat(str.replace(/_/g, ""));
        }
        function stringToBigInt(str) {
          if (typeof BigInt !== "function") {
            return null;
          }
          return BigInt(str.replace(/_/g, ""));
        }
        pp$9.readRadixNumber = function (radix) {
          var start = (this || _global$e).pos;
          (this || _global$e).pos += 2;
          var val = this.readInt(radix);
          if (val == null) {
            this.raise((this || _global$e).start + 2, "Expected number in radix " + radix);
          }
          if ((this || _global$e).options.ecmaVersion >= 11 && (this || _global$e).input.charCodeAt((this || _global$e).pos) === 110) {
            val = stringToBigInt((this || _global$e).input.slice(start, (this || _global$e).pos));
            ++(this || _global$e).pos;
          } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise((this || _global$e).pos, "Identifier directly after number");
          }
          return this.finishToken(types.num, val);
        };
        pp$9.readNumber = function (startsWithDot) {
          var start = (this || _global$e).pos;
          if (!startsWithDot && this.readInt(10, undefined, true) === null) {
            this.raise(start, "Invalid number");
          }
          var octal = (this || _global$e).pos - start >= 2 && (this || _global$e).input.charCodeAt(start) === 48;
          if (octal && (this || _global$e).strict) {
            this.raise(start, "Invalid number");
          }
          var next = (this || _global$e).input.charCodeAt((this || _global$e).pos);
          if (!octal && !startsWithDot && (this || _global$e).options.ecmaVersion >= 11 && next === 110) {
            var val$1 = stringToBigInt((this || _global$e).input.slice(start, (this || _global$e).pos));
            ++(this || _global$e).pos;
            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise((this || _global$e).pos, "Identifier directly after number");
            }
            return this.finishToken(types.num, val$1);
          }
          if (octal && /[89]/.test((this || _global$e).input.slice(start, (this || _global$e).pos))) {
            octal = false;
          }
          if (next === 46 && !octal) {
            ++(this || _global$e).pos;
            this.readInt(10);
            next = (this || _global$e).input.charCodeAt((this || _global$e).pos);
          }
          if ((next === 69 || next === 101) && !octal) {
            next = (this || _global$e).input.charCodeAt(++(this || _global$e).pos);
            if (next === 43 || next === 45) {
              ++(this || _global$e).pos;
            }
            if (this.readInt(10) === null) {
              this.raise(start, "Invalid number");
            }
          }
          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise((this || _global$e).pos, "Identifier directly after number");
          }
          var val = stringToNumber((this || _global$e).input.slice(start, (this || _global$e).pos), octal);
          return this.finishToken(types.num, val);
        };
        pp$9.readCodePoint = function () {
          var ch = (this || _global$e).input.charCodeAt((this || _global$e).pos), code;
          if (ch === 123) {
            if ((this || _global$e).options.ecmaVersion < 6) {
              this.unexpected();
            }
            var codePos = ++(this || _global$e).pos;
            code = this.readHexChar((this || _global$e).input.indexOf("}", (this || _global$e).pos) - (this || _global$e).pos);
            ++(this || _global$e).pos;
            if (code > 1114111) {
              this.invalidStringToken(codePos, "Code point out of bounds");
            }
          } else {
            code = this.readHexChar(4);
          }
          return code;
        };
        function codePointToString$1(code) {
          if (code <= 65535) {
            return String.fromCharCode(code);
          }
          code -= 65536;
          return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
        }
        pp$9.readString = function (quote) {
          var out = "", chunkStart = ++(this || _global$e).pos;
          for (;;) {
            if ((this || _global$e).pos >= (this || _global$e).input.length) {
              this.raise((this || _global$e).start, "Unterminated string constant");
            }
            var ch = (this || _global$e).input.charCodeAt((this || _global$e).pos);
            if (ch === quote) {
              break;
            }
            if (ch === 92) {
              out += (this || _global$e).input.slice(chunkStart, (this || _global$e).pos);
              out += this.readEscapedChar(false);
              chunkStart = (this || _global$e).pos;
            } else {
              if (isNewLine(ch, (this || _global$e).options.ecmaVersion >= 10)) {
                this.raise((this || _global$e).start, "Unterminated string constant");
              }
              ++(this || _global$e).pos;
            }
          }
          out += (this || _global$e).input.slice(chunkStart, (this || _global$e).pos++);
          return this.finishToken(types.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR = {};
        pp$9.tryReadTemplateToken = function () {
          (this || _global$e).inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
              this.readInvalidTemplateToken();
            } else {
              throw err;
            }
          }
          (this || _global$e).inTemplateElement = false;
        };
        pp$9.invalidStringToken = function (position, message) {
          if ((this || _global$e).inTemplateElement && (this || _global$e).options.ecmaVersion >= 9) {
            throw INVALID_TEMPLATE_ESCAPE_ERROR;
          } else {
            this.raise(position, message);
          }
        };
        pp$9.readTmplToken = function () {
          var out = "", chunkStart = (this || _global$e).pos;
          for (;;) {
            if ((this || _global$e).pos >= (this || _global$e).input.length) {
              this.raise((this || _global$e).start, "Unterminated template");
            }
            var ch = (this || _global$e).input.charCodeAt((this || _global$e).pos);
            if (ch === 96 || ch === 36 && (this || _global$e).input.charCodeAt((this || _global$e).pos + 1) === 123) {
              if ((this || _global$e).pos === (this || _global$e).start && ((this || _global$e).type === types.template || (this || _global$e).type === types.invalidTemplate)) {
                if (ch === 36) {
                  (this || _global$e).pos += 2;
                  return this.finishToken(types.dollarBraceL);
                } else {
                  ++(this || _global$e).pos;
                  return this.finishToken(types.backQuote);
                }
              }
              out += (this || _global$e).input.slice(chunkStart, (this || _global$e).pos);
              return this.finishToken(types.template, out);
            }
            if (ch === 92) {
              out += (this || _global$e).input.slice(chunkStart, (this || _global$e).pos);
              out += this.readEscapedChar(true);
              chunkStart = (this || _global$e).pos;
            } else if (isNewLine(ch)) {
              out += (this || _global$e).input.slice(chunkStart, (this || _global$e).pos);
              ++(this || _global$e).pos;
              switch (ch) {
              case 13:
                if ((this || _global$e).input.charCodeAt((this || _global$e).pos) === 10) {
                  ++(this || _global$e).pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
              }
              if ((this || _global$e).options.locations) {
                ++(this || _global$e).curLine;
                (this || _global$e).lineStart = (this || _global$e).pos;
              }
              chunkStart = (this || _global$e).pos;
            } else {
              ++(this || _global$e).pos;
            }
          }
        };
        pp$9.readInvalidTemplateToken = function () {
          for (; (this || _global$e).pos < (this || _global$e).input.length; (this || _global$e).pos++) {
            switch ((this || _global$e).input[(this || _global$e).pos]) {
            case "\\":
              ++(this || _global$e).pos;
              break;
            case "$":
              if ((this || _global$e).input[(this || _global$e).pos + 1] !== "{") {
                break;
              }
            case "`":
              return this.finishToken(types.invalidTemplate, (this || _global$e).input.slice((this || _global$e).start, (this || _global$e).pos));
            }
          }
          this.raise((this || _global$e).start, "Unterminated template");
        };
        pp$9.readEscapedChar = function (inTemplate) {
          var ch = (this || _global$e).input.charCodeAt(++(this || _global$e).pos);
          ++(this || _global$e).pos;
          switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString$1(this.readCodePoint());
          case 116:
            return "\t";
          case 98:
            return "\b";
          case 118:
            return "\x0B";
          case 102:
            return "\f";
          case 13:
            if ((this || _global$e).input.charCodeAt((this || _global$e).pos) === 10) {
              ++(this || _global$e).pos;
            }
          case 10:
            if ((this || _global$e).options.locations) {
              (this || _global$e).lineStart = (this || _global$e).pos;
              ++(this || _global$e).curLine;
            }
            return "";
          case 56:
          case 57:
            if (inTemplate) {
              var codePos = (this || _global$e).pos - 1;
              this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              return null;
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = (this || _global$e).input.substr((this || _global$e).pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              (this || _global$e).pos += octalStr.length - 1;
              ch = (this || _global$e).input.charCodeAt((this || _global$e).pos);
              if ((octalStr !== "0" || ch === 56 || ch === 57) && ((this || _global$e).strict || inTemplate)) {
                this.invalidStringToken((this || _global$e).pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
              }
              return String.fromCharCode(octal);
            }
            if (isNewLine(ch)) {
              return "";
            }
            return String.fromCharCode(ch);
          }
        };
        pp$9.readHexChar = function (len) {
          var codePos = (this || _global$e).pos;
          var n = this.readInt(16, len);
          if (n === null) {
            this.invalidStringToken(codePos, "Bad character escape sequence");
          }
          return n;
        };
        pp$9.readWord1 = function () {
          (this || _global$e).containsEsc = false;
          var word = "", first = true, chunkStart = (this || _global$e).pos;
          var astral = (this || _global$e).options.ecmaVersion >= 6;
          while ((this || _global$e).pos < (this || _global$e).input.length) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar(ch, astral)) {
              (this || _global$e).pos += ch <= 65535 ? 1 : 2;
            } else if (ch === 92) {
              (this || _global$e).containsEsc = true;
              word += (this || _global$e).input.slice(chunkStart, (this || _global$e).pos);
              var escStart = (this || _global$e).pos;
              if ((this || _global$e).input.charCodeAt(++(this || _global$e).pos) !== 117) {
                this.invalidStringToken((this || _global$e).pos, "Expecting Unicode escape sequence \\uXXXX");
              }
              ++(this || _global$e).pos;
              var esc = this.readCodePoint();
              if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                this.invalidStringToken(escStart, "Invalid Unicode escape");
              }
              word += codePointToString$1(esc);
              chunkStart = (this || _global$e).pos;
            } else {
              break;
            }
            first = false;
          }
          return word + (this || _global$e).input.slice(chunkStart, (this || _global$e).pos);
        };
        pp$9.readWord = function () {
          var word = this.readWord1();
          var type = types.name;
          if ((this || _global$e).keywords.test(word)) {
            type = keywords$1[word];
          }
          return this.finishToken(type, word);
        };
        var version = "7.4.1";
        Parser.acorn = {
          Parser: Parser,
          version: version,
          defaultOptions: defaultOptions,
          Position: Position,
          SourceLocation: SourceLocation,
          getLineInfo: getLineInfo,
          Node: Node,
          TokenType: TokenType,
          tokTypes: types,
          keywordTypes: keywords$1,
          TokContext: TokContext,
          tokContexts: types$1,
          isIdentifierChar: isIdentifierChar,
          isIdentifierStart: isIdentifierStart,
          Token: Token,
          isNewLine: isNewLine,
          lineBreak: lineBreak,
          lineBreakG: lineBreakG,
          nonASCIIwhitespace: nonASCIIwhitespace
        };
        function parse(input, options) {
          return Parser.parse(input, options);
        }
        function parseExpressionAt(input, pos, options) {
          return Parser.parseExpressionAt(input, pos, options);
        }
        function tokenizer(input, options) {
          return Parser.tokenizer(input, options);
        }
        exports.Node = Node;
        exports.Parser = Parser;
        exports.Position = Position;
        exports.SourceLocation = SourceLocation;
        exports.TokContext = TokContext;
        exports.Token = Token;
        exports.TokenType = TokenType;
        exports.defaultOptions = defaultOptions;
        exports.getLineInfo = getLineInfo;
        exports.isIdentifierChar = isIdentifierChar;
        exports.isIdentifierStart = isIdentifierStart;
        exports.isNewLine = isNewLine;
        exports.keywordTypes = keywords$1;
        exports.lineBreak = lineBreak;
        exports.lineBreakG = lineBreakG;
        exports.nonASCIIwhitespace = nonASCIIwhitespace;
        exports.parse = parse;
        exports.parseExpressionAt = parseExpressionAt;
        exports.tokContexts = types$1;
        exports.tokTypes = types;
        exports.tokenizer = tokenizer;
        exports.version = version;
        Object.defineProperty(exports, "__esModule", { value: true });
      }));
      exports$5f.Node; exports$5f.Parser; exports$5f.Position; exports$5f.SourceLocation; exports$5f.TokContext; exports$5f.Token; exports$5f.TokenType; exports$5f.defaultOptions; exports$5f.getLineInfo; exports$5f.isIdentifierChar; exports$5f.isIdentifierStart; exports$5f.isNewLine; exports$5f.keywordTypes; exports$5f.lineBreak; exports$5f.lineBreakG; exports$5f.nonASCIIwhitespace; exports$5f.parse; exports$5f.parseExpressionAt; exports$5f.tokContexts; exports$5f.tokTypes; exports$5f.tokenizer; exports$5f.version; exports$5f.__esModule;

      var exports$5e = {};
      exports$5e = {
        quot: "\"",
        amp: "&",
        apos: "'",
        lt: "<",
        gt: ">",
        nbsp: "\xA0",
        iexcl: "\xA1",
        cent: "\xA2",
        pound: "\xA3",
        curren: "\xA4",
        yen: "\xA5",
        brvbar: "\xA6",
        sect: "\xA7",
        uml: "\xA8",
        copy: "\xA9",
        ordf: "ª",
        laquo: "\xAB",
        not: "\xAC",
        shy: "\xAD",
        reg: "\xAE",
        macr: "\xAF",
        deg: "\xB0",
        plusmn: "\xB1",
        sup2: "\xB2",
        sup3: "\xB3",
        acute: "\xB4",
        micro: "µ",
        para: "\xB6",
        middot: "\xB7",
        cedil: "\xB8",
        sup1: "\xB9",
        ordm: "º",
        raquo: "\xBB",
        frac14: "\xBC",
        frac12: "\xBD",
        frac34: "\xBE",
        iquest: "\xBF",
        Agrave: "À",
        Aacute: "Á",
        Acirc: "Â",
        Atilde: "Ã",
        Auml: "Ä",
        Aring: "Å",
        AElig: "Æ",
        Ccedil: "Ç",
        Egrave: "È",
        Eacute: "É",
        Ecirc: "Ê",
        Euml: "Ë",
        Igrave: "Ì",
        Iacute: "Í",
        Icirc: "Î",
        Iuml: "Ï",
        ETH: "Ð",
        Ntilde: "Ñ",
        Ograve: "Ò",
        Oacute: "Ó",
        Ocirc: "Ô",
        Otilde: "Õ",
        Ouml: "Ö",
        times: "\xD7",
        Oslash: "Ø",
        Ugrave: "Ù",
        Uacute: "Ú",
        Ucirc: "Û",
        Uuml: "Ü",
        Yacute: "Ý",
        THORN: "Þ",
        szlig: "ß",
        agrave: "à",
        aacute: "á",
        acirc: "â",
        atilde: "ã",
        auml: "ä",
        aring: "å",
        aelig: "æ",
        ccedil: "ç",
        egrave: "è",
        eacute: "é",
        ecirc: "ê",
        euml: "ë",
        igrave: "ì",
        iacute: "í",
        icirc: "î",
        iuml: "ï",
        eth: "ð",
        ntilde: "ñ",
        ograve: "ò",
        oacute: "ó",
        ocirc: "ô",
        otilde: "õ",
        ouml: "ö",
        divide: "\xF7",
        oslash: "ø",
        ugrave: "ù",
        uacute: "ú",
        ucirc: "û",
        uuml: "ü",
        yacute: "ý",
        thorn: "þ",
        yuml: "ÿ",
        OElig: "Œ",
        oelig: "œ",
        Scaron: "Š",
        scaron: "š",
        Yuml: "Ÿ",
        fnof: "ƒ",
        circ: "ˆ",
        tilde: "\u02DC",
        Alpha: "Α",
        Beta: "Β",
        Gamma: "Γ",
        Delta: "Δ",
        Epsilon: "Ε",
        Zeta: "Ζ",
        Eta: "Η",
        Theta: "Θ",
        Iota: "Ι",
        Kappa: "Κ",
        Lambda: "Λ",
        Mu: "Μ",
        Nu: "Ν",
        Xi: "Ξ",
        Omicron: "Ο",
        Pi: "Π",
        Rho: "Ρ",
        Sigma: "Σ",
        Tau: "Τ",
        Upsilon: "Υ",
        Phi: "Φ",
        Chi: "Χ",
        Psi: "Ψ",
        Omega: "Ω",
        alpha: "α",
        beta: "β",
        gamma: "γ",
        delta: "δ",
        epsilon: "ε",
        zeta: "ζ",
        eta: "η",
        theta: "θ",
        iota: "ι",
        kappa: "κ",
        lambda: "λ",
        mu: "μ",
        nu: "ν",
        xi: "ξ",
        omicron: "ο",
        pi: "π",
        rho: "ρ",
        sigmaf: "ς",
        sigma: "σ",
        tau: "τ",
        upsilon: "υ",
        phi: "φ",
        chi: "χ",
        psi: "ψ",
        omega: "ω",
        thetasym: "ϑ",
        upsih: "ϒ",
        piv: "ϖ",
        ensp: "\u2002",
        emsp: "\u2003",
        thinsp: "\u2009",
        zwnj: "‌",
        zwj: "‍",
        lrm: "\u200E",
        rlm: "\u200F",
        ndash: "\u2013",
        mdash: "\u2014",
        lsquo: "\u2018",
        rsquo: "\u2019",
        sbquo: "\u201A",
        ldquo: "\u201C",
        rdquo: "\u201D",
        bdquo: "\u201E",
        dagger: "\u2020",
        Dagger: "\u2021",
        bull: "\u2022",
        hellip: "\u2026",
        permil: "\u2030",
        prime: "\u2032",
        Prime: "\u2033",
        lsaquo: "\u2039",
        rsaquo: "\u203A",
        oline: "\u203E",
        frasl: "\u2044",
        euro: "\u20AC",
        image: "ℑ",
        weierp: "\u2118",
        real: "ℜ",
        trade: "\u2122",
        alefsym: "ℵ",
        larr: "\u2190",
        uarr: "\u2191",
        rarr: "\u2192",
        darr: "\u2193",
        harr: "\u2194",
        crarr: "\u21B5",
        lArr: "\u21D0",
        uArr: "\u21D1",
        rArr: "\u21D2",
        dArr: "\u21D3",
        hArr: "\u21D4",
        forall: "\u2200",
        part: "\u2202",
        exist: "\u2203",
        empty: "\u2205",
        nabla: "\u2207",
        isin: "\u2208",
        notin: "\u2209",
        ni: "\u220B",
        prod: "\u220F",
        sum: "\u2211",
        minus: "\u2212",
        lowast: "\u2217",
        radic: "\u221A",
        prop: "\u221D",
        infin: "\u221E",
        ang: "\u2220",
        and: "\u2227",
        or: "\u2228",
        cap: "\u2229",
        cup: "\u222A",
        "int": "\u222B",
        there4: "\u2234",
        sim: "\u223C",
        cong: "\u2245",
        asymp: "\u2248",
        ne: "\u2260",
        equiv: "\u2261",
        le: "\u2264",
        ge: "\u2265",
        sub: "\u2282",
        sup: "\u2283",
        nsub: "\u2284",
        sube: "\u2286",
        supe: "\u2287",
        oplus: "\u2295",
        otimes: "\u2297",
        perp: "\u22A5",
        sdot: "\u22C5",
        lceil: "\u2308",
        rceil: "\u2309",
        lfloor: "\u230A",
        rfloor: "\u230B",
        lang: "\u2329",
        rang: "\u232A",
        loz: "\u25CA",
        spades: "\u2660",
        clubs: "\u2663",
        hearts: "\u2665",
        diams: "\u2666"
      };
      var _xhtml = exports$5e;

      var _acorn = "default" in _acorn2 ? exports$5R : _acorn2;
      var exports$5d = {};
      const XHTMLEntities = _xhtml;
      const hexNumber = /^[\da-fA-F]+$/;
      const decimalNumber = /^\d+$/;
      const acornJsxMap = new WeakMap();
      function getJsxTokens(acorn) {
        acorn = acorn.Parser.acorn || acorn;
        let acornJsx = acornJsxMap.get(acorn);
        if (!acornJsx) {
          const tt = acorn.tokTypes;
          const TokContext = acorn.TokContext;
          const TokenType = acorn.TokenType;
          const tc_oTag = new TokContext("<tag", false);
          const tc_cTag = new TokContext("</tag", false);
          const tc_expr = new TokContext("<tag>...</tag>", true, true);
          const tokContexts = {
            tc_oTag: tc_oTag,
            tc_cTag: tc_cTag,
            tc_expr: tc_expr
          };
          const tokTypes = {
            jsxName: new TokenType("jsxName"),
            jsxText: new TokenType("jsxText", { beforeExpr: true }),
            jsxTagStart: new TokenType("jsxTagStart", { startsExpr: true }),
            jsxTagEnd: new TokenType("jsxTagEnd")
          };
          tokTypes.jsxTagStart.updateContext = function () {
            this.context.push(tc_expr);
            this.context.push(tc_oTag);
            this.exprAllowed = false;
          };
          tokTypes.jsxTagEnd.updateContext = function (prevType) {
            let out = this.context.pop();
            if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {
              this.context.pop();
              this.exprAllowed = this.curContext() === tc_expr;
            } else {
              this.exprAllowed = true;
            }
          };
          acornJsx = {
            tokContexts: tokContexts,
            tokTypes: tokTypes
          };
          acornJsxMap.set(acorn, acornJsx);
        }
        return acornJsx;
      }
      function getQualifiedJSXName(object) {
        if (!object)
          return object;
        if (object.type === "JSXIdentifier")
          return object.name;
        if (object.type === "JSXNamespacedName")
          return object.namespace.name + ":" + object.name.name;
        if (object.type === "JSXMemberExpression")
          return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
      }
      exports$5d = function (options) {
        options = options || {};
        return function (Parser) {
          return plugin({
            allowNamespaces: options.allowNamespaces !== false,
            allowNamespacedObjects: !!options.allowNamespacedObjects
          }, Parser);
        };
      };
      Object.defineProperty(exports$5d, "tokTypes", {
        get: function get_tokTypes() {
          return getJsxTokens(_acorn).tokTypes;
        },
        configurable: true,
        enumerable: true
      });
      function plugin(options, Parser) {
        const acorn = Parser.acorn || _acorn;
        const acornJsx = getJsxTokens(acorn);
        const tt = acorn.tokTypes;
        const tok = acornJsx.tokTypes;
        const tokContexts = acorn.tokContexts;
        const tc_oTag = acornJsx.tokContexts.tc_oTag;
        const tc_cTag = acornJsx.tokContexts.tc_cTag;
        const tc_expr = acornJsx.tokContexts.tc_expr;
        const isNewLine = acorn.isNewLine;
        const isIdentifierStart = acorn.isIdentifierStart;
        const isIdentifierChar = acorn.isIdentifierChar;
        return class extends Parser {
          static get acornJsx() {
            return acornJsx;
          }
          jsx_readToken() {
            let out = "", chunkStart = this.pos;
            for (;;) {
              if (this.pos >= this.input.length)
                this.raise(this.start, "Unterminated JSX contents");
              let ch = this.input.charCodeAt(this.pos);
              switch (ch) {
              case 60:
              case 123:
                if (this.pos === this.start) {
                  if (ch === 60 && this.exprAllowed) {
                    ++this.pos;
                    return this.finishToken(tok.jsxTagStart);
                  }
                  return this.getTokenFromCode(ch);
                }
                out += this.input.slice(chunkStart, this.pos);
                return this.finishToken(tok.jsxText, out);
              case 38:
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readEntity();
                chunkStart = this.pos;
                break;
              case 62:
              case 125:
                this.raise(this.pos, "Unexpected token `" + this.input[this.pos] + "`. Did you mean `" + (ch === 62 ? "&gt;" : "&rbrace;") + "` or " + "`{\"" + this.input[this.pos] + "\"}" + "`?");
              default:
                if (isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.pos);
                  out += this.jsx_readNewLine(true);
                  chunkStart = this.pos;
                } else {
                  ++this.pos;
                }
              }
            }
          }
          jsx_readNewLine(normalizeCRLF) {
            let ch = this.input.charCodeAt(this.pos);
            let out;
            ++this.pos;
            if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
              out = normalizeCRLF ? "\n" : "\r\n";
            } else {
              out = String.fromCharCode(ch);
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            return out;
          }
          jsx_readString(quote) {
            let out = "", chunkStart = ++this.pos;
            for (;;) {
              if (this.pos >= this.input.length)
                this.raise(this.start, "Unterminated string constant");
              let ch = this.input.charCodeAt(this.pos);
              if (ch === quote)
                break;
              if (ch === 38) {
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readEntity();
                chunkStart = this.pos;
              } else if (isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.pos);
                out += this.jsx_readNewLine(false);
                chunkStart = this.pos;
              } else {
                ++this.pos;
              }
            }
            out += this.input.slice(chunkStart, this.pos++);
            return this.finishToken(tt.string, out);
          }
          jsx_readEntity() {
            let str = "", count = 0, entity;
            let ch = this.input[this.pos];
            if (ch !== "&")
              this.raise(this.pos, "Entity must start with an ampersand");
            let startPos = ++this.pos;
            while (this.pos < this.input.length && count++ < 10) {
              ch = this.input[this.pos++];
              if (ch === ";") {
                if (str[0] === "#") {
                  if (str[1] === "x") {
                    str = str.substr(2);
                    if (hexNumber.test(str))
                      entity = String.fromCharCode(parseInt(str, 16));
                  } else {
                    str = str.substr(1);
                    if (decimalNumber.test(str))
                      entity = String.fromCharCode(parseInt(str, 10));
                  }
                } else {
                  entity = XHTMLEntities[str];
                }
                break;
              }
              str += ch;
            }
            if (!entity) {
              this.pos = startPos;
              return "&";
            }
            return entity;
          }
          jsx_readWord() {
            let ch, start = this.pos;
            do {
              ch = this.input.charCodeAt(++this.pos);
            } while (isIdentifierChar(ch) || ch === 45);
            return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));
          }
          jsx_parseIdentifier() {
            let node = this.startNode();
            if (this.type === tok.jsxName)
              node.name = this.value;
            else if (this.type.keyword)
              node.name = this.type.keyword;
            else
              this.unexpected();
            this.next();
            return this.finishNode(node, "JSXIdentifier");
          }
          jsx_parseNamespacedName() {
            let startPos = this.start, startLoc = this.startLoc;
            let name = this.jsx_parseIdentifier();
            if (!options.allowNamespaces || !this.eat(tt.colon))
              return name;
            var node = this.startNodeAt(startPos, startLoc);
            node.namespace = name;
            node.name = this.jsx_parseIdentifier();
            return this.finishNode(node, "JSXNamespacedName");
          }
          jsx_parseElementName() {
            if (this.type === tok.jsxTagEnd)
              return "";
            let startPos = this.start, startLoc = this.startLoc;
            let node = this.jsx_parseNamespacedName();
            if (this.type === tt.dot && node.type === "JSXNamespacedName" && !options.allowNamespacedObjects) {
              this.unexpected();
            }
            while (this.eat(tt.dot)) {
              let newNode = this.startNodeAt(startPos, startLoc);
              newNode.object = node;
              newNode.property = this.jsx_parseIdentifier();
              node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsx_parseAttributeValue() {
            switch (this.type) {
            case tt.braceL:
              let node = this.jsx_parseExpressionContainer();
              if (node.expression.type === "JSXEmptyExpression")
                this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
              return node;
            case tok.jsxTagStart:
            case tt.string:
              return this.parseExprAtom();
            default:
              this.raise(this.start, "JSX value should be either an expression or a quoted JSX text");
            }
          }
          jsx_parseEmptyExpression() {
            let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
          }
          jsx_parseExpressionContainer() {
            let node = this.startNode();
            this.next();
            node.expression = this.type === tt.braceR ? this.jsx_parseEmptyExpression() : this.parseExpression();
            this.expect(tt.braceR);
            return this.finishNode(node, "JSXExpressionContainer");
          }
          jsx_parseAttribute() {
            let node = this.startNode();
            if (this.eat(tt.braceL)) {
              this.expect(tt.ellipsis);
              node.argument = this.parseMaybeAssign();
              this.expect(tt.braceR);
              return this.finishNode(node, "JSXSpreadAttribute");
            }
            node.name = this.jsx_parseNamespacedName();
            node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;
            return this.finishNode(node, "JSXAttribute");
          }
          jsx_parseOpeningElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            node.attributes = [];
            let nodeName = this.jsx_parseElementName();
            if (nodeName)
              node.name = nodeName;
            while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)
              node.attributes.push(this.jsx_parseAttribute());
            node.selfClosing = this.eat(tt.slash);
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? "JSXOpeningElement" : "JSXOpeningFragment");
          }
          jsx_parseClosingElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let nodeName = this.jsx_parseElementName();
            if (nodeName)
              node.name = nodeName;
            this.expect(tok.jsxTagEnd);
            return this.finishNode(node, nodeName ? "JSXClosingElement" : "JSXClosingFragment");
          }
          jsx_parseElementAt(startPos, startLoc) {
            let node = this.startNodeAt(startPos, startLoc);
            let children = [];
            let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents:
                for (;;) {
                  switch (this.type) {
                  case tok.jsxTagStart:
                    startPos = this.start;
                    startLoc = this.startLoc;
                    this.next();
                    if (this.eat(tt.slash)) {
                      closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);
                      break contents;
                    }
                    children.push(this.jsx_parseElementAt(startPos, startLoc));
                    break;
                  case tok.jsxText:
                    children.push(this.parseExprAtom());
                    break;
                  case tt.braceL:
                    children.push(this.jsx_parseExpressionContainer());
                    break;
                  default:
                    this.unexpected();
                  }
                }
              if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
              }
            }
            let fragmentOrElement = openingElement.name ? "Element" : "Fragment";
            node["opening" + fragmentOrElement] = openingElement;
            node["closing" + fragmentOrElement] = closingElement;
            node.children = children;
            if (this.type === tt.relational && this.value === "<") {
              this.raise(this.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
            }
            return this.finishNode(node, "JSX" + fragmentOrElement);
          }
          jsx_parseText() {
            let node = this.parseLiteral(this.value);
            node.type = "JSXText";
            return node;
          }
          jsx_parseElement() {
            let startPos = this.start, startLoc = this.startLoc;
            this.next();
            return this.jsx_parseElementAt(startPos, startLoc);
          }
          parseExprAtom(refShortHandDefaultPos) {
            if (this.type === tok.jsxText)
              return this.jsx_parseText();
            else if (this.type === tok.jsxTagStart)
              return this.jsx_parseElement();
            else
              return super.parseExprAtom(refShortHandDefaultPos);
          }
          readToken(code) {
            let context = this.curContext();
            if (context === tc_expr)
              return this.jsx_readToken();
            if (context === tc_oTag || context === tc_cTag) {
              if (isIdentifierStart(code))
                return this.jsx_readWord();
              if (code == 62) {
                ++this.pos;
                return this.finishToken(tok.jsxTagEnd);
              }
              if ((code === 34 || code === 39) && context == tc_oTag)
                return this.jsx_readString(code);
            }
            if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {
              ++this.pos;
              return this.finishToken(tok.jsxTagStart);
            }
            return super.readToken(code);
          }
          updateContext(prevType) {
            if (this.type == tt.braceL) {
              var curContext = this.curContext();
              if (curContext == tc_oTag)
                this.context.push(tokContexts.b_expr);
              else if (curContext == tc_expr)
                this.context.push(tokContexts.b_tmpl);
              else
                super.updateContext(prevType);
              this.exprAllowed = true;
            } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {
              this.context.length -= 2;
              this.context.push(tc_cTag);
              this.exprAllowed = false;
            } else {
              return super.updateContext(prevType);
            }
          }
        };
      }
      var exports$1$A = exports$5d;

      var _visitorKeys$1 = {
        "AssignmentExpression": [
          "left",
          "right"
        ],
        "AssignmentPattern": [
          "left",
          "right"
        ],
        "ArrayExpression": ["elements"],
        "ArrayPattern": ["elements"],
        "ArrowFunctionExpression": [
          "params",
          "body"
        ],
        "AwaitExpression": ["argument"],
        "BlockStatement": ["body"],
        "BinaryExpression": [
          "left",
          "right"
        ],
        "BreakStatement": ["label"],
        "CallExpression": [
          "callee",
          "arguments"
        ],
        "CatchClause": [
          "param",
          "body"
        ],
        "ChainExpression": ["expression"],
        "ClassBody": ["body"],
        "ClassDeclaration": [
          "id",
          "superClass",
          "body"
        ],
        "ClassExpression": [
          "id",
          "superClass",
          "body"
        ],
        "ConditionalExpression": [
          "test",
          "consequent",
          "alternate"
        ],
        "ContinueStatement": ["label"],
        "DebuggerStatement": [],
        "DoWhileStatement": [
          "body",
          "test"
        ],
        "EmptyStatement": [],
        "ExportAllDeclaration": [
          "exported",
          "source"
        ],
        "ExportDefaultDeclaration": ["declaration"],
        "ExportNamedDeclaration": [
          "declaration",
          "specifiers",
          "source"
        ],
        "ExportSpecifier": [
          "exported",
          "local"
        ],
        "ExpressionStatement": ["expression"],
        "ExperimentalRestProperty": ["argument"],
        "ExperimentalSpreadProperty": ["argument"],
        "ForStatement": [
          "init",
          "test",
          "update",
          "body"
        ],
        "ForInStatement": [
          "left",
          "right",
          "body"
        ],
        "ForOfStatement": [
          "left",
          "right",
          "body"
        ],
        "FunctionDeclaration": [
          "id",
          "params",
          "body"
        ],
        "FunctionExpression": [
          "id",
          "params",
          "body"
        ],
        "Identifier": [],
        "IfStatement": [
          "test",
          "consequent",
          "alternate"
        ],
        "ImportDeclaration": [
          "specifiers",
          "source"
        ],
        "ImportDefaultSpecifier": ["local"],
        "ImportExpression": ["source"],
        "ImportNamespaceSpecifier": ["local"],
        "ImportSpecifier": [
          "imported",
          "local"
        ],
        "JSXAttribute": [
          "name",
          "value"
        ],
        "JSXClosingElement": ["name"],
        "JSXElement": [
          "openingElement",
          "children",
          "closingElement"
        ],
        "JSXEmptyExpression": [],
        "JSXExpressionContainer": ["expression"],
        "JSXIdentifier": [],
        "JSXMemberExpression": [
          "object",
          "property"
        ],
        "JSXNamespacedName": [
          "namespace",
          "name"
        ],
        "JSXOpeningElement": [
          "name",
          "attributes"
        ],
        "JSXSpreadAttribute": ["argument"],
        "JSXText": [],
        "JSXFragment": [
          "openingFragment",
          "children",
          "closingFragment"
        ],
        "Literal": [],
        "LabeledStatement": [
          "label",
          "body"
        ],
        "LogicalExpression": [
          "left",
          "right"
        ],
        "MemberExpression": [
          "object",
          "property"
        ],
        "MetaProperty": [
          "meta",
          "property"
        ],
        "MethodDefinition": [
          "key",
          "value"
        ],
        "NewExpression": [
          "callee",
          "arguments"
        ],
        "ObjectExpression": ["properties"],
        "ObjectPattern": ["properties"],
        "Program": ["body"],
        "Property": [
          "key",
          "value"
        ],
        "RestElement": ["argument"],
        "ReturnStatement": ["argument"],
        "SequenceExpression": ["expressions"],
        "SpreadElement": ["argument"],
        "Super": [],
        "SwitchStatement": [
          "discriminant",
          "cases"
        ],
        "SwitchCase": [
          "test",
          "consequent"
        ],
        "TaggedTemplateExpression": [
          "tag",
          "quasi"
        ],
        "TemplateElement": [],
        "TemplateLiteral": [
          "quasis",
          "expressions"
        ],
        "ThisExpression": [],
        "ThrowStatement": ["argument"],
        "TryStatement": [
          "block",
          "handler",
          "finalizer"
        ],
        "UnaryExpression": ["argument"],
        "UpdateExpression": ["argument"],
        "VariableDeclaration": ["declarations"],
        "VariableDeclarator": [
          "id",
          "init"
        ],
        "WhileStatement": [
          "test",
          "body"
        ],
        "WithStatement": [
          "object",
          "body"
        ],
        "YieldExpression": ["argument"]
      };
      var exports$5c = {};
      const KEYS$2 = _visitorKeys$1;
      const NODE_TYPES$1 = Object.freeze(Object.keys(KEYS$2));
      for (const type of NODE_TYPES$1) {
        Object.freeze(KEYS$2[type]);
      }
      Object.freeze(KEYS$2);
      const KEY_BLACKLIST$1 = new Set([
        "parent",
        "leadingComments",
        "trailingComments"
      ]);
      function filterKey$1(key) {
        return !KEY_BLACKLIST$1.has(key) && key[0] !== "_";
      }
      exports$5c = Object.freeze({
        KEYS: KEYS$2,
        getKeys(node) {
          return Object.keys(node).filter(filterKey$1);
        },
        unionWith(additionalKeys) {
          const retv = Object.assign({}, KEYS$2);
          for (const type of Object.keys(additionalKeys)) {
            if (retv.hasOwnProperty(type)) {
              const keys = new Set(additionalKeys[type]);
              for (const key of retv[type]) {
                keys.add(key);
              }
              retv[type] = Object.freeze(Array.from(keys));
            } else {
              retv[type] = Object.freeze(Array.from(additionalKeys[type]));
            }
          }
          return Object.freeze(retv);
        }
      });
      var exports$1$z = exports$5c;

      var exports$5b = {};
      exports$5b = {
        AssignmentExpression: "AssignmentExpression",
        AssignmentPattern: "AssignmentPattern",
        ArrayExpression: "ArrayExpression",
        ArrayPattern: "ArrayPattern",
        ArrowFunctionExpression: "ArrowFunctionExpression",
        AwaitExpression: "AwaitExpression",
        BlockStatement: "BlockStatement",
        BinaryExpression: "BinaryExpression",
        BreakStatement: "BreakStatement",
        CallExpression: "CallExpression",
        CatchClause: "CatchClause",
        ClassBody: "ClassBody",
        ClassDeclaration: "ClassDeclaration",
        ClassExpression: "ClassExpression",
        ConditionalExpression: "ConditionalExpression",
        ContinueStatement: "ContinueStatement",
        DoWhileStatement: "DoWhileStatement",
        DebuggerStatement: "DebuggerStatement",
        EmptyStatement: "EmptyStatement",
        ExpressionStatement: "ExpressionStatement",
        ForStatement: "ForStatement",
        ForInStatement: "ForInStatement",
        ForOfStatement: "ForOfStatement",
        FunctionDeclaration: "FunctionDeclaration",
        FunctionExpression: "FunctionExpression",
        Identifier: "Identifier",
        IfStatement: "IfStatement",
        Literal: "Literal",
        LabeledStatement: "LabeledStatement",
        LogicalExpression: "LogicalExpression",
        MemberExpression: "MemberExpression",
        MetaProperty: "MetaProperty",
        MethodDefinition: "MethodDefinition",
        NewExpression: "NewExpression",
        ObjectExpression: "ObjectExpression",
        ObjectPattern: "ObjectPattern",
        Program: "Program",
        Property: "Property",
        RestElement: "RestElement",
        ReturnStatement: "ReturnStatement",
        SequenceExpression: "SequenceExpression",
        SpreadElement: "SpreadElement",
        Super: "Super",
        SwitchCase: "SwitchCase",
        SwitchStatement: "SwitchStatement",
        TaggedTemplateExpression: "TaggedTemplateExpression",
        TemplateElement: "TemplateElement",
        TemplateLiteral: "TemplateLiteral",
        ThisExpression: "ThisExpression",
        ThrowStatement: "ThrowStatement",
        TryStatement: "TryStatement",
        UnaryExpression: "UnaryExpression",
        UpdateExpression: "UpdateExpression",
        VariableDeclaration: "VariableDeclaration",
        VariableDeclarator: "VariableDeclarator",
        WhileStatement: "WhileStatement",
        WithStatement: "WithStatement",
        YieldExpression: "YieldExpression",
        JSXIdentifier: "JSXIdentifier",
        JSXNamespacedName: "JSXNamespacedName",
        JSXMemberExpression: "JSXMemberExpression",
        JSXEmptyExpression: "JSXEmptyExpression",
        JSXExpressionContainer: "JSXExpressionContainer",
        JSXElement: "JSXElement",
        JSXClosingElement: "JSXClosingElement",
        JSXOpeningElement: "JSXOpeningElement",
        JSXAttribute: "JSXAttribute",
        JSXSpreadAttribute: "JSXSpreadAttribute",
        JSXText: "JSXText",
        ExportDefaultDeclaration: "ExportDefaultDeclaration",
        ExportNamedDeclaration: "ExportNamedDeclaration",
        ExportAllDeclaration: "ExportAllDeclaration",
        ExportSpecifier: "ExportSpecifier",
        ImportDeclaration: "ImportDeclaration",
        ImportSpecifier: "ImportSpecifier",
        ImportDefaultSpecifier: "ImportDefaultSpecifier",
        ImportNamespaceSpecifier: "ImportNamespaceSpecifier"
      };
      var _astNodeTypes = exports$5b;
      var exports$1$y = {};
      const Token = {
        Boolean: "Boolean",
        EOF: "<end>",
        Identifier: "Identifier",
        Keyword: "Keyword",
        Null: "Null",
        Numeric: "Numeric",
        Punctuator: "Punctuator",
        String: "String",
        RegularExpression: "RegularExpression",
        Template: "Template",
        JSXIdentifier: "JSXIdentifier",
        JSXText: "JSXText"
      };
      function convertTemplatePart(tokens, code) {
        const firstToken = tokens[0], lastTemplateToken = tokens[tokens.length - 1];
        const token = {
          type: Token.Template,
          value: code.slice(firstToken.start, lastTemplateToken.end)
        };
        if (firstToken.loc) {
          token.loc = {
            start: firstToken.loc.start,
            end: lastTemplateToken.loc.end
          };
        }
        if (firstToken.range) {
          token.start = firstToken.range[0];
          token.end = lastTemplateToken.range[1];
          token.range = [
            token.start,
            token.end
          ];
        }
        return token;
      }
      function TokenTranslator(acornTokTypes, code) {
        this._acornTokTypes = acornTokTypes;
        this._tokens = [];
        this._curlyBrace = null;
        this._code = code;
      }
      TokenTranslator.prototype = {
        constructor: TokenTranslator,
        translate(token, extra) {
          const type = token.type, tt = this._acornTokTypes;
          if (type === tt.name) {
            token.type = Token.Identifier;
            if (token.value === "static") {
              token.type = Token.Keyword;
            }
            if (extra.ecmaVersion > 5 && (token.value === "yield" || token.value === "let")) {
              token.type = Token.Keyword;
            }
          } else if (type === tt.semi || type === tt.comma || type === tt.parenL || type === tt.parenR || type === tt.braceL || type === tt.braceR || type === tt.dot || type === tt.bracketL || type === tt.colon || type === tt.question || type === tt.bracketR || type === tt.ellipsis || type === tt.arrow || type === tt.jsxTagStart || type === tt.incDec || type === tt.starstar || type === tt.jsxTagEnd || type === tt.prefix || type === tt.questionDot || type.binop && !type.keyword || type.isAssign) {
            token.type = Token.Punctuator;
            token.value = this._code.slice(token.start, token.end);
          } else if (type === tt.jsxName) {
            token.type = Token.JSXIdentifier;
          } else if (type.label === "jsxText" || type === tt.jsxAttrValueToken) {
            token.type = Token.JSXText;
          } else if (type.keyword) {
            if (type.keyword === "true" || type.keyword === "false") {
              token.type = Token.Boolean;
            } else if (type.keyword === "null") {
              token.type = Token.Null;
            } else {
              token.type = Token.Keyword;
            }
          } else if (type === tt.num) {
            token.type = Token.Numeric;
            token.value = this._code.slice(token.start, token.end);
          } else if (type === tt.string) {
            if (extra.jsxAttrValueToken) {
              extra.jsxAttrValueToken = false;
              token.type = Token.JSXText;
            } else {
              token.type = Token.String;
            }
            token.value = this._code.slice(token.start, token.end);
          } else if (type === tt.regexp) {
            token.type = Token.RegularExpression;
            const value = token.value;
            token.regex = {
              flags: value.flags,
              pattern: value.pattern
            };
            token.value = `/${ value.pattern }/${ value.flags }`;
          }
          return token;
        },
        onToken(token, extra) {
          const that = this, tt = this._acornTokTypes, tokens = extra.tokens, templateTokens = this._tokens;
          function translateTemplateTokens() {
            tokens.push(convertTemplatePart(that._tokens, that._code));
            that._tokens = [];
          }
          if (token.type === tt.eof) {
            if (this._curlyBrace) {
              tokens.push(this.translate(this._curlyBrace, extra));
            }
            return;
          }
          if (token.type === tt.backQuote) {
            if (this._curlyBrace) {
              tokens.push(this.translate(this._curlyBrace, extra));
              this._curlyBrace = null;
            }
            templateTokens.push(token);
            if (templateTokens.length > 1) {
              translateTemplateTokens();
            }
            return;
          }
          if (token.type === tt.dollarBraceL) {
            templateTokens.push(token);
            translateTemplateTokens();
            return;
          }
          if (token.type === tt.braceR) {
            if (this._curlyBrace) {
              tokens.push(this.translate(this._curlyBrace, extra));
            }
            this._curlyBrace = token;
            return;
          }
          if (token.type === tt.template || token.type === tt.invalidTemplate) {
            if (this._curlyBrace) {
              templateTokens.push(this._curlyBrace);
              this._curlyBrace = null;
            }
            templateTokens.push(token);
            return;
          }
          if (this._curlyBrace) {
            tokens.push(this.translate(this._curlyBrace, extra));
            this._curlyBrace = null;
          }
          tokens.push(this.translate(token, extra));
        }
      };
      exports$1$y = TokenTranslator;
      var _tokenTranslator = exports$1$y;
      var exports$2$f = {};
      const DEFAULT_ECMA_VERSION$1 = 5;
      const SUPPORTED_VERSIONS = [
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ];
      function normalizeEcmaVersion$1(ecmaVersion = DEFAULT_ECMA_VERSION$1) {
        if (typeof ecmaVersion !== "number") {
          throw new Error(`ecmaVersion must be a number. Received value of type ${ typeof ecmaVersion } instead.`);
        }
        let version = ecmaVersion;
        if (version >= 2015) {
          version -= 2009;
        }
        if (!SUPPORTED_VERSIONS.includes(version)) {
          throw new Error("Invalid ecmaVersion.");
        }
        return version;
      }
      function normalizeSourceType(sourceType = "script") {
        if (sourceType === "script" || sourceType === "module") {
          return sourceType;
        }
        throw new Error("Invalid sourceType.");
      }
      function normalizeOptions$3(options) {
        const ecmaVersion = normalizeEcmaVersion$1(options.ecmaVersion);
        const sourceType = normalizeSourceType(options.sourceType);
        const ranges = options.range === true;
        const locations = options.loc === true;
        if (sourceType === "module" && ecmaVersion < 6) {
          throw new Error("sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.");
        }
        return Object.assign({}, options, {
          ecmaVersion,
          sourceType,
          ranges,
          locations
        });
      }
      function getLatestEcmaVersion() {
        return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];
      }
      function getSupportedEcmaVersions() {
        return [...SUPPORTED_VERSIONS];
      }
      exports$2$f = {
        normalizeOptions: normalizeOptions$3,
        getLatestEcmaVersion,
        getSupportedEcmaVersions
      };
      var _options = exports$2$f;
      var exports$3$c = {};
      const TokenTranslator$1 = _tokenTranslator;
      const {normalizeOptions: normalizeOptions$1$1} = _options;
      const STATE = Symbol("espree's internal state");
      const ESPRIMA_FINISH_NODE = Symbol("espree's esprimaFinishNode");
      function convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc) {
        const comment = {
          type: block ? "Block" : "Line",
          value: text
        };
        if (typeof start === "number") {
          comment.start = start;
          comment.end = end;
          comment.range = [
            start,
            end
          ];
        }
        if (typeof startLoc === "object") {
          comment.loc = {
            start: startLoc,
            end: endLoc
          };
        }
        return comment;
      }
      exports$3$c = () => Parser => {
        const tokTypes = Object.assign({}, Parser.acorn.tokTypes);
        if (Parser.acornJsx) {
          Object.assign(tokTypes, Parser.acornJsx.tokTypes);
        }
        return class Espree extends Parser {
          constructor(opts, code) {
            if (typeof opts !== "object" || opts === null) {
              opts = {};
            }
            if (typeof code !== "string" && !(code instanceof String)) {
              code = String(code);
            }
            const options = normalizeOptions$1$1(opts);
            const ecmaFeatures = options.ecmaFeatures || {};
            const tokenTranslator = options.tokens === true ? new TokenTranslator$1(tokTypes, code) : null;
            super({
              ecmaVersion: options.ecmaVersion,
              sourceType: options.sourceType,
              ranges: options.ranges,
              locations: options.locations,
              allowReturnOutsideFunction: Boolean(ecmaFeatures.globalReturn),
              onToken: token => {
                if (tokenTranslator) {
                  tokenTranslator.onToken(token, this[STATE]);
                }
                if (token.type !== tokTypes.eof) {
                  this[STATE].lastToken = token;
                }
              },
              onComment: (block, text, start, end, startLoc, endLoc) => {
                if (this[STATE].comments) {
                  const comment = convertAcornCommentToEsprimaComment(block, text, start, end, startLoc, endLoc);
                  this[STATE].comments.push(comment);
                }
              }
            }, code);
            this[STATE] = {
              tokens: tokenTranslator ? [] : null,
              comments: options.comment === true ? [] : null,
              impliedStrict: ecmaFeatures.impliedStrict === true && this.options.ecmaVersion >= 5,
              ecmaVersion: this.options.ecmaVersion,
              jsxAttrValueToken: false,
              lastToken: null
            };
          }
          tokenize() {
            do {
              this.next();
            } while (this.type !== tokTypes.eof);
            this.next();
            const extra = this[STATE];
            const tokens = extra.tokens;
            if (extra.comments) {
              tokens.comments = extra.comments;
            }
            return tokens;
          }
          finishNode(...args) {
            const result = super.finishNode(...args);
            return this[ESPRIMA_FINISH_NODE](result);
          }
          finishNodeAt(...args) {
            const result = super.finishNodeAt(...args);
            return this[ESPRIMA_FINISH_NODE](result);
          }
          parse() {
            const extra = this[STATE];
            const program = super.parse();
            program.sourceType = this.options.sourceType;
            if (extra.comments) {
              program.comments = extra.comments;
            }
            if (extra.tokens) {
              program.tokens = extra.tokens;
            }
            if (program.range) {
              program.range[0] = program.body.length ? program.body[0].range[0] : program.range[0];
              program.range[1] = extra.lastToken ? extra.lastToken.range[1] : program.range[1];
            }
            if (program.loc) {
              program.loc.start = program.body.length ? program.body[0].loc.start : program.loc.start;
              program.loc.end = extra.lastToken ? extra.lastToken.loc.end : program.loc.end;
            }
            return program;
          }
          parseTopLevel(node) {
            if (this[STATE].impliedStrict) {
              this.strict = true;
            }
            return super.parseTopLevel(node);
          }
          raise(pos, message) {
            const loc = Parser.acorn.getLineInfo(this.input, pos);
            const err = new SyntaxError(message);
            err.index = pos;
            err.lineNumber = loc.line;
            err.column = loc.column + 1;
            throw err;
          }
          raiseRecoverable(pos, message) {
            this.raise(pos, message);
          }
          unexpected(pos) {
            let message = "Unexpected token";
            if (pos !== null && pos !== void 0) {
              this.pos = pos;
              if (this.options.locations) {
                while (this.pos < this.lineStart) {
                  this.lineStart = this.input.lastIndexOf("\n", this.lineStart - 2) + 1;
                  --this.curLine;
                }
              }
              this.nextToken();
            }
            if (this.end > this.start) {
              message += ` ${ this.input.slice(this.start, this.end) }`;
            }
            this.raise(this.start, message);
          }
          jsx_readString(quote) {
            const result = super.jsx_readString(quote);
            if (this.type === tokTypes.string) {
              this[STATE].jsxAttrValueToken = true;
            }
            return result;
          }
          [ESPRIMA_FINISH_NODE](result) {
            if (result.type === "TemplateElement") {
              const terminalDollarBraceL = this.input.slice(result.end, result.end + 2) === "${";
              if (result.range) {
                result.range[0]--;
                result.range[1] += terminalDollarBraceL ? 2 : 1;
              }
              if (result.loc) {
                result.loc.start.column--;
                result.loc.end.column += terminalDollarBraceL ? 2 : 1;
              }
            }
            if (result.type.indexOf("Function") > -1 && !result.generator) {
              result.generator = false;
            }
            return result;
          }
        };
      };
      var _espree$4 = exports$3$c;
      var _package$4 = {
        "name": "espree",
        "description": "An Esprima-compatible JavaScript parser built on Acorn",
        "author": "Nicholas C. Zakas <nicholas+npm@nczconsulting.com>",
        "homepage": "https://github.com/eslint/espree",
        "main": "espree.js",
        "version": "7.3.1",
        "files": [
          "lib",
          "espree.js"
        ],
        "engines": { "node": "^10.12.0 || >=12.0.0" },
        "repository": "eslint/espree",
        "bugs": { "url": "http://github.com/eslint/espree.git" },
        "license": "BSD-2-Clause",
        "dependencies": {
          "acorn": "^7.4.0",
          "acorn-jsx": "^5.3.1",
          "eslint-visitor-keys": "^1.3.0"
        },
        "devDependencies": {
          "browserify": "^16.5.0",
          "chai": "^4.2.0",
          "eslint": "^6.0.1",
          "eslint-config-eslint": "^5.0.1",
          "eslint-plugin-node": "^9.1.0",
          "eslint-release": "^1.0.0",
          "esprima": "latest",
          "esprima-fb": "^8001.2001.0-dev-harmony-fb",
          "json-diff": "^0.5.4",
          "leche": "^2.3.0",
          "mocha": "^6.2.0",
          "nyc": "^14.1.1",
          "regenerate": "^1.4.0",
          "shelljs": "^0.3.0",
          "shelljs-nodecli": "^0.1.1",
          "unicode-6.3.0": "^0.7.5"
        },
        "keywords": [
          "ast",
          "ecmascript",
          "javascript",
          "parser",
          "syntax",
          "acorn"
        ],
        "scripts": {
          "generate-regex": "node tools/generate-identifier-regex.js",
          "test": "npm run-script lint && node Makefile.js test",
          "lint": "node Makefile.js lint",
          "fixlint": "node Makefile.js lint --fix",
          "sync-docs": "node Makefile.js docs",
          "browserify": "node Makefile.js browserify",
          "generate-release": "eslint-generate-release",
          "generate-alpharelease": "eslint-generate-prerelease alpha",
          "generate-betarelease": "eslint-generate-prerelease beta",
          "generate-rcrelease": "eslint-generate-prerelease rc",
          "publish-release": "eslint-publish-release"
        }
      };
      var exports$4$7 = {};
      const acorn = exports$5f;
      const jsx = exports$1$A;
      const astNodeTypes = _astNodeTypes;
      const espree$3 = _espree$4;
      const {
        getLatestEcmaVersion: getLatestEcmaVersion$1,
        getSupportedEcmaVersions: getSupportedEcmaVersions$1
      } = _options;
      const parsers = {
        _regular: null,
        _jsx: null,
        get regular() {
          if (this._regular === null) {
            this._regular = acorn.Parser.extend(espree$3());
          }
          return this._regular;
        },
        get jsx() {
          if (this._jsx === null) {
            this._jsx = acorn.Parser.extend(jsx(), espree$3());
          }
          return this._jsx;
        },
        get(options) {
          const useJsx = Boolean(options && options.ecmaFeatures && options.ecmaFeatures.jsx);
          return useJsx ? this.jsx : this.regular;
        }
      };
      function tokenize(code, options) {
        const Parser = parsers.get(options);
        if (!options || options.tokens !== true) {
          options = Object.assign({}, options, { tokens: true });
        }
        return new Parser(options, code).tokenize();
      }
      function parse$5(code, options) {
        const Parser = parsers.get(options);
        return new Parser(options, code).parse();
      }
      exports$4$7.version = _package$4.version;
      exports$4$7.tokenize = tokenize;
      exports$4$7.parse = parse$5;
      exports$4$7.Syntax = (function () {
        let name, types = {};
        if (typeof Object.create === "function") {
          types = Object.create(null);
        }
        for (name in astNodeTypes) {
          if (Object.hasOwnProperty.call(astNodeTypes, name)) {
            types[name] = astNodeTypes[name];
          }
        }
        if (typeof Object.freeze === "function") {
          Object.freeze(types);
        }
        return types;
      }());
      exports$4$7.VisitorKeys = (function () {
        return exports$1$z.KEYS;
      }());
      exports$4$7.latestEcmaVersion = getLatestEcmaVersion$1();
      exports$4$7.supportedEcmaVersions = getSupportedEcmaVersions$1();
      const version$4 = exports$4$7.version, Syntax$4 = exports$4$7.Syntax, VisitorKeys = exports$4$7.VisitorKeys, latestEcmaVersion = exports$4$7.latestEcmaVersion, supportedEcmaVersions = exports$4$7.supportedEcmaVersions;
      const _tokenize = exports$4$7.tokenize, _parse$1 = exports$4$7.parse;

      var _espree2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$4$7,
        Syntax: Syntax$4,
        VisitorKeys: VisitorKeys,
        latestEcmaVersion: latestEcmaVersion,
        parse: _parse$1,
        supportedEcmaVersions: supportedEcmaVersions,
        tokenize: _tokenize,
        version: version$4
      });

      var _util$1$1 = "default" in _util2 ? X : _util2;

      var exports$4$6 = {};
      var util$1$1 = _util$1$1;

      var ConfigDependency$3 = /*#__PURE__*/function () {
        function ConfigDependency$3(_ref) {
          var _ref$definition = _ref.definition,
              definition = _ref$definition === void 0 ? null : _ref$definition,
              _ref$error = _ref.error,
              error = _ref$error === void 0 ? null : _ref$error,
              _ref$filePath = _ref.filePath,
              filePath = _ref$filePath === void 0 ? null : _ref$filePath,
              id = _ref.id,
              importerName = _ref.importerName,
              importerPath = _ref.importerPath;

          _classCallCheck(this, ConfigDependency$3);

          this.definition = definition;
          this.error = error;
          this.filePath = filePath;
          this.id = id;
          this.importerName = importerName;
          this.importerPath = importerPath;
        }

        _createClass(ConfigDependency$3, [{
          key: "toJSON",
          value: function toJSON() {
            var obj = this[util$1$1.inspect.custom]();

            if (obj.error instanceof Error) {
              obj.error = _objectSpread2(_objectSpread2({}, obj.error), {}, {
                message: obj.error.message
              });
            }

            return obj;
          }
        }, {
          key: util$1$1.inspect.custom,
          value: function value() {
            this.definition;
                var obj = _objectWithoutProperties(this, ["definition"]);

            return obj;
          }
        }]);

        return ConfigDependency$3;
      }();

      exports$4$6 = {
        ConfigDependency: ConfigDependency$3
      };
      var _configDependency = exports$4$6;

      var _assert$7 = "default" in _assert2 ? et : _assert2;

      var _path$2$2 = "default" in _path2 ? exports$5S : _path2;

      var _util$3 = "default" in _util2 ? X : _util2;

      var _minimatch$4 = "default" in _minimatch2 ? exports$1$F : _minimatch2;

      var exports$3$b = {};
      var assert$b = _assert$7;
      var path$2$1 = _path$2$2;
      var util$3 = _util$3;
      var Minimatch$1 = _minimatch$4.Minimatch;
      var minimatchOpts$1 = {
        dot: true,
        matchBase: true
      };

      function normalizePatterns(patterns) {
        if (Array.isArray(patterns)) {
          return patterns.filter(Boolean);
        }

        if (typeof patterns === "string" && patterns) {
          return [patterns];
        }

        return [];
      }

      function toMatcher(patterns) {
        if (patterns.length === 0) {
          return null;
        }

        return patterns.map(function (pattern) {
          if (/^\.[\/\\]/.test(pattern)) {
            return new Minimatch$1(pattern.slice(2), _objectSpread2(_objectSpread2({}, minimatchOpts$1), {}, {
              matchBase: false
            }));
          }

          return new Minimatch$1(pattern, minimatchOpts$1);
        });
      }

      function patternToJson(_ref2) {
        var includes = _ref2.includes,
            excludes = _ref2.excludes;
        return {
          includes: includes && includes.map(function (m) {
            return m.pattern;
          }),
          excludes: excludes && excludes.map(function (m) {
            return m.pattern;
          })
        };
      }

      var OverrideTester$2 = /*#__PURE__*/function () {
        _createClass(OverrideTester$2, null, [{
          key: "create",
          value: function create(files, excludedFiles, basePath) {
            var includePatterns = normalizePatterns(files);
            var excludePatterns = normalizePatterns(excludedFiles);
            var endsWithWildcard = false;

            if (includePatterns.length === 0) {
              return null;
            }

            var _iterator = _createForOfIteratorHelper(includePatterns),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var pattern = _step.value;

                if (path$2$1.isAbsolute(pattern) || pattern.includes("..")) {
                  throw new Error("Invalid override pattern (expected relative path not containing '..'): ".concat(pattern));
                }

                if (pattern.endsWith("*")) {
                  endsWithWildcard = true;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            var _iterator2 = _createForOfIteratorHelper(excludePatterns),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var _pattern = _step2.value;

                if (path$2$1.isAbsolute(_pattern) || _pattern.includes("..")) {
                  throw new Error("Invalid override pattern (expected relative path not containing '..'): ".concat(_pattern));
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            var includes = toMatcher(includePatterns);
            var excludes = toMatcher(excludePatterns);
            return new OverrideTester$2([{
              includes: includes,
              excludes: excludes
            }], basePath, endsWithWildcard);
          }
        }, {
          key: "and",
          value: function and(a, b) {
            if (!b) {
              return a && new OverrideTester$2(a.patterns, a.basePath, a.endsWithWildcard);
            }

            if (!a) {
              return new OverrideTester$2(b.patterns, b.basePath, b.endsWithWildcard);
            }

            assert$b.strictEqual(a.basePath, b.basePath);
            return new OverrideTester$2(a.patterns.concat(b.patterns), a.basePath, a.endsWithWildcard || b.endsWithWildcard);
          }
        }]);

        function OverrideTester$2(patterns, basePath) {
          var endsWithWildcard = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

          _classCallCheck(this, OverrideTester$2);

          this.patterns = patterns;
          this.basePath = basePath;
          this.endsWithWildcard = endsWithWildcard;
        }

        _createClass(OverrideTester$2, [{
          key: "test",
          value: function test(filePath) {
            if (typeof filePath !== "string" || !path$2$1.isAbsolute(filePath)) {
              throw new Error("'filePath' should be an absolute path, but got ".concat(filePath, "."));
            }

            var relativePath = path$2$1.relative(this.basePath, filePath);
            return this.patterns.every(function (_ref3) {
              var includes = _ref3.includes,
                  excludes = _ref3.excludes;
              return (!includes || includes.some(function (m) {
                return m.match(relativePath);
              })) && (!excludes || !excludes.some(function (m) {
                return m.match(relativePath);
              }));
            });
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            if (this.patterns.length === 1) {
              return _objectSpread2(_objectSpread2({}, patternToJson(this.patterns[0])), {}, {
                basePath: this.basePath
              });
            }

            return {
              AND: this.patterns.map(patternToJson),
              basePath: this.basePath
            };
          }
        }, {
          key: util$3.inspect.custom,
          value: function value() {
            return this.toJSON();
          }
        }]);

        return OverrideTester$2;
      }();

      exports$3$b = {
        OverrideTester: OverrideTester$2
      };
      var _overrideTester = exports$3$b;
      var exports$2$e = {};
      var ConfigArray$2 = _configArray$1.ConfigArray,
          getUsedExtractedConfigs$2 = _configArray$1.getUsedExtractedConfigs;
      var ConfigDependency$2 = _configDependency.ConfigDependency;
      var ExtractedConfig$1 = _extractedConfig.ExtractedConfig;
      var IgnorePattern$2$1 = _ignorePattern.IgnorePattern;
      var OverrideTester$1 = _overrideTester.OverrideTester;
      exports$2$e = {
        ConfigArray: ConfigArray$2,
        ConfigDependency: ConfigDependency$2,
        ExtractedConfig: ExtractedConfig$1,
        IgnorePattern: IgnorePattern$2$1,
        OverrideTester: OverrideTester$1,
        getUsedExtractedConfigs: getUsedExtractedConfigs$2
      };
      var _configArray = exports$2$e;

      var _fs$7 = "default" in _fs2 ? fs$b : _fs2;

      var _path$1$3 = "default" in _path2 ? exports$5S : _path2;

      var _importFresh = "default" in _importFresh2 ? exports$1$O : _importFresh2;

      var _stripJsonComments = "default" in _stripJsonComments2 ? exports$1$N : _stripJsonComments2;

      var _debug$1$2 = "default" in _debug2 ? _browser : _debug2;

      var _jsYaml = "default" in _jsYaml2 ? exports$5$6 : _jsYaml2;

      var _espree$3 = "default" in _espree2 ? exports$4$7 : _espree2;

      var exports$1$x = {};

      function _nullRequire$5(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }

      _nullRequire$5.resolve = _nullRequire$5;
      var process$1$3 = process$g;
      var fs$9 = _fs$7;
      var path$1$2 = _path$1$3;
      var importFresh = _importFresh;
      var stripComments = _stripJsonComments;
      var ConfigValidator$1$1 = _configValidator$2;
      var naming$2 = _naming;
      var ModuleResolver$2 = _relativeModuleResolver;
      var ConfigArray$1 = _configArray.ConfigArray,
          ConfigDependency$1 = _configArray.ConfigDependency,
          IgnorePattern$1$1 = _configArray.IgnorePattern,
          OverrideTester$3 = _configArray.OverrideTester;

      var debug$1$2 = _debug$1$2("eslintrc:config-array-factory");

      var configFilenames = [".eslintrc.js", ".eslintrc.cjs", ".eslintrc.yaml", ".eslintrc.yml", ".eslintrc.json", ".eslintrc", "package.json"];
      var internalSlotsMap$1$1 = new WeakMap();

      function isFilePath(nameOrPath) {
        return /^\.{1,2}[\/\\]/.test(nameOrPath) || path$1$2.isAbsolute(nameOrPath);
      }

      function readFile(filePath) {
        return fs$9.readFileSync(filePath, "utf8").replace(/^\uFEFF/, "");
      }

      function loadYAMLConfigFile(filePath) {
        debug$1$2("Loading YAML config file: ".concat(filePath));
        var yaml = _jsYaml;

        try {
          return yaml.safeLoad(readFile(filePath)) || {};
        } catch (e) {
          debug$1$2("Error reading YAML file: ".concat(filePath));
          e.message = "Cannot read config file: ".concat(filePath, "\nError: ").concat(e.message);
          throw e;
        }
      }

      function loadJSONConfigFile(filePath) {
        debug$1$2("Loading JSON config file: ".concat(filePath));

        try {
          return JSON.parse(stripComments(readFile(filePath)));
        } catch (e) {
          debug$1$2("Error reading JSON file: ".concat(filePath));
          e.message = "Cannot read config file: ".concat(filePath, "\nError: ").concat(e.message);
          e.messageTemplate = "failed-to-read-json";
          e.messageData = {
            path: filePath,
            message: e.message
          };
          throw e;
        }
      }

      function loadLegacyConfigFile(filePath) {
        debug$1$2("Loading legacy config file: ".concat(filePath));
        var yaml = _jsYaml;

        try {
          return yaml.safeLoad(stripComments(readFile(filePath))) || {};
        } catch (e) {
          debug$1$2("Error reading YAML file: %s\n%o", filePath, e);
          e.message = "Cannot read config file: ".concat(filePath, "\nError: ").concat(e.message);
          throw e;
        }
      }

      function loadJSConfigFile(filePath) {
        debug$1$2("Loading JS config file: ".concat(filePath));

        try {
          return importFresh(filePath);
        } catch (e) {
          debug$1$2("Error reading JavaScript file: ".concat(filePath));
          e.message = "Cannot read config file: ".concat(filePath, "\nError: ").concat(e.message);
          throw e;
        }
      }

      function loadPackageJSONConfigFile(filePath) {
        debug$1$2("Loading package.json config file: ".concat(filePath));

        try {
          var packageData = loadJSONConfigFile(filePath);

          if (!Object.hasOwnProperty.call(packageData, "eslintConfig")) {
            throw Object.assign(new Error("package.json file doesn't have 'eslintConfig' field."), {
              code: "ESLINT_CONFIG_FIELD_NOT_FOUND"
            });
          }

          return packageData.eslintConfig;
        } catch (e) {
          debug$1$2("Error reading package.json file: ".concat(filePath));
          e.message = "Cannot read config file: ".concat(filePath, "\nError: ").concat(e.message);
          throw e;
        }
      }

      function loadESLintIgnoreFile(filePath) {
        debug$1$2("Loading .eslintignore file: ".concat(filePath));

        try {
          return readFile(filePath).split(/\r?\n/g).filter(function (line) {
            return line.trim() !== "" && !line.startsWith("#");
          });
        } catch (e) {
          debug$1$2("Error reading .eslintignore file: ".concat(filePath));
          e.message = "Cannot read .eslintignore file: ".concat(filePath, "\nError: ").concat(e.message);
          throw e;
        }
      }

      function configInvalidError(configName, importerName, messageTemplate) {
        return Object.assign(new Error("Failed to load config \"".concat(configName, "\" to extend from.")), {
          messageTemplate: messageTemplate,
          messageData: {
            configName: configName,
            importerName: importerName
          }
        });
      }

      function loadConfigFile(filePath) {
        switch (path$1$2.extname(filePath)) {
          case ".js":
          case ".cjs":
            return loadJSConfigFile(filePath);

          case ".json":
            if (path$1$2.basename(filePath) === "package.json") {
              return loadPackageJSONConfigFile(filePath);
            }

            return loadJSONConfigFile(filePath);

          case ".yaml":
          case ".yml":
            return loadYAMLConfigFile(filePath);

          default:
            return loadLegacyConfigFile(filePath);
        }
      }

      function writeDebugLogForLoading(request, relativeTo, filePath) {
        if (debug$1$2.enabled) {
          var nameAndVersion = null;

          try {
            var packageJsonPath = ModuleResolver$2.resolve("".concat(request, "/package.json"), relativeTo);

            var _nullRequire2 = _nullRequire$5(packageJsonPath),
                _nullRequire2$version = _nullRequire2.version,
                version = _nullRequire2$version === void 0 ? "unknown" : _nullRequire2$version;

            nameAndVersion = "".concat(request, "@").concat(version);
          } catch (error) {
            debug$1$2("package.json was not found:", error.message);
            nameAndVersion = request;
          }

          debug$1$2("Loaded: %s (%s)", nameAndVersion, filePath);
        }
      }

      function createContext(_ref4, providedType, providedName, providedFilePath, providedMatchBasePath) {
        var cwd = _ref4.cwd,
            resolvePluginsRelativeTo = _ref4.resolvePluginsRelativeTo;
        var filePath = providedFilePath ? path$1$2.resolve(cwd, providedFilePath) : "";
        var matchBasePath = providedMatchBasePath && path$1$2.resolve(cwd, providedMatchBasePath) || filePath && path$1$2.dirname(filePath) || cwd;
        var name = providedName || filePath && path$1$2.relative(cwd, filePath) || "";
        var pluginBasePath = resolvePluginsRelativeTo || filePath && path$1$2.dirname(filePath) || cwd;
        var type = providedType || "config";
        return {
          filePath: filePath,
          matchBasePath: matchBasePath,
          name: name,
          pluginBasePath: pluginBasePath,
          type: type
        };
      }

      function normalizePlugin(plugin) {
        return {
          configs: plugin.configs || {},
          environments: plugin.environments || {},
          processors: plugin.processors || {},
          rules: plugin.rules || {}
        };
      }

      var ConfigArrayFactory$1$1 = /*#__PURE__*/function () {
        function ConfigArrayFactory$1() {
          var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref5$additionalPlugi = _ref5.additionalPluginPool,
              additionalPluginPool = _ref5$additionalPlugi === void 0 ? new Map() : _ref5$additionalPlugi,
              _ref5$cwd = _ref5.cwd,
              cwd = _ref5$cwd === void 0 ? process$1$3.cwd() : _ref5$cwd,
              resolvePluginsRelativeTo = _ref5.resolvePluginsRelativeTo,
              builtInRules = _ref5.builtInRules,
              _ref5$resolver = _ref5.resolver,
              resolver = _ref5$resolver === void 0 ? ModuleResolver$2 : _ref5$resolver,
              eslintAllPath = _ref5.eslintAllPath,
              eslintRecommendedPath = _ref5.eslintRecommendedPath;

          _classCallCheck(this, ConfigArrayFactory$1);

          internalSlotsMap$1$1.set(this, {
            additionalPluginPool: additionalPluginPool,
            cwd: cwd,
            resolvePluginsRelativeTo: resolvePluginsRelativeTo && path$1$2.resolve(cwd, resolvePluginsRelativeTo),
            builtInRules: builtInRules,
            resolver: resolver,
            eslintAllPath: eslintAllPath,
            eslintRecommendedPath: eslintRecommendedPath
          });
        }

        _createClass(ConfigArrayFactory$1, [{
          key: "create",
          value: function create(configData) {
            var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                basePath = _ref6.basePath,
                filePath = _ref6.filePath,
                name = _ref6.name;

            if (!configData) {
              return new ConfigArray$1();
            }

            var slots = internalSlotsMap$1$1.get(this);
            var ctx = createContext(slots, "config", name, filePath, basePath);

            var elements = this._normalizeConfigData(configData, ctx);

            return _construct(ConfigArray$1, _toConsumableArray(elements));
          }
        }, {
          key: "loadFile",
          value: function loadFile(filePath) {
            var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                basePath = _ref7.basePath,
                name = _ref7.name;

            var slots = internalSlotsMap$1$1.get(this);
            var ctx = createContext(slots, "config", name, filePath, basePath);
            return _construct(ConfigArray$1, _toConsumableArray(this._loadConfigData(ctx)));
          }
        }, {
          key: "loadInDirectory",
          value: function loadInDirectory(directoryPath) {
            var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                basePath = _ref8.basePath,
                name = _ref8.name;

            var slots = internalSlotsMap$1$1.get(this);

            var _iterator3 = _createForOfIteratorHelper(configFilenames),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var filename = _step3.value;
                var ctx = createContext(slots, "config", name, path$1$2.join(directoryPath, filename), basePath);

                if (fs$9.existsSync(ctx.filePath) && fs$9.statSync(ctx.filePath).isFile()) {
                  var configData = void 0;

                  try {
                    configData = loadConfigFile(ctx.filePath);
                  } catch (error) {
                    if (!error || error.code !== "ESLINT_CONFIG_FIELD_NOT_FOUND") {
                      throw error;
                    }
                  }

                  if (configData) {
                    debug$1$2("Config file found: ".concat(ctx.filePath));
                    return _construct(ConfigArray$1, _toConsumableArray(this._normalizeConfigData(configData, ctx)));
                  }
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            debug$1$2("Config file not found on ".concat(directoryPath));
            return new ConfigArray$1();
          }
        }, {
          key: "loadESLintIgnore",
          value: function loadESLintIgnore(filePath) {
            var slots = internalSlotsMap$1$1.get(this);
            var ctx = createContext(slots, "ignore", void 0, filePath, slots.cwd);
            var ignorePatterns = loadESLintIgnoreFile(ctx.filePath);
            return _construct(ConfigArray$1, _toConsumableArray(this._normalizeESLintIgnoreData(ignorePatterns, ctx)));
          }
        }, {
          key: "loadDefaultESLintIgnore",
          value: function loadDefaultESLintIgnore() {
            var slots = internalSlotsMap$1$1.get(this);
            var eslintIgnorePath = path$1$2.resolve(slots.cwd, ".eslintignore");
            var packageJsonPath = path$1$2.resolve(slots.cwd, "package.json");

            if (fs$9.existsSync(eslintIgnorePath)) {
              return this.loadESLintIgnore(eslintIgnorePath);
            }

            if (fs$9.existsSync(packageJsonPath)) {
              var data = loadJSONConfigFile(packageJsonPath);

              if (Object.hasOwnProperty.call(data, "eslintIgnore")) {
                if (!Array.isArray(data.eslintIgnore)) {
                  throw new Error("Package.json eslintIgnore property requires an array of paths");
                }

                var ctx = createContext(slots, "ignore", "eslintIgnore in package.json", packageJsonPath, slots.cwd);
                return _construct(ConfigArray$1, _toConsumableArray(this._normalizeESLintIgnoreData(data.eslintIgnore, ctx)));
              }
            }

            return new ConfigArray$1();
          }
        }, {
          key: "_loadConfigData",
          value: function _loadConfigData(ctx) {
            return this._normalizeConfigData(loadConfigFile(ctx.filePath), ctx);
          }
        }, {
          key: "_normalizeESLintIgnoreData",
          value: /*#__PURE__*/regeneratorRuntime.mark(function _normalizeESLintIgnoreData(ignorePatterns, ctx) {
            var elements, _iterator4, _step4, element;

            return regeneratorRuntime.wrap(function _normalizeESLintIgnoreData$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    elements = this._normalizeObjectConfigData({
                      ignorePatterns: ignorePatterns
                    }, ctx);
                    _iterator4 = _createForOfIteratorHelper(elements);
                    _context.prev = 2;

                    _iterator4.s();

                  case 4:
                    if ((_step4 = _iterator4.n()).done) {
                      _context.next = 11;
                      break;
                    }

                    element = _step4.value;

                    if (element.ignorePattern) {
                      element.ignorePattern.loose = true;
                    }

                    _context.next = 9;
                    return element;

                  case 9:
                    _context.next = 4;
                    break;

                  case 11:
                    _context.next = 16;
                    break;

                  case 13:
                    _context.prev = 13;
                    _context.t0 = _context["catch"](2);

                    _iterator4.e(_context.t0);

                  case 16:
                    _context.prev = 16;

                    _iterator4.f();

                    return _context.finish(16);

                  case 19:
                  case "end":
                    return _context.stop();
                }
              }
            }, _normalizeESLintIgnoreData, this, [[2, 13, 16, 19]]);
          })
        }, {
          key: "_normalizeConfigData",
          value: function _normalizeConfigData(configData, ctx) {
            var validator = new ConfigValidator$1$1();
            validator.validateConfigSchema(configData, ctx.name || ctx.filePath);
            return this._normalizeObjectConfigData(configData, ctx);
          }
        }, {
          key: "_normalizeObjectConfigData",
          value: /*#__PURE__*/regeneratorRuntime.mark(function _normalizeObjectConfigData(configData, ctx) {
            var files, excludedFiles, configBody, criteria, elements, _iterator5, _step5, element;

            return regeneratorRuntime.wrap(function _normalizeObjectConfigData$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    files = configData.files, excludedFiles = configData.excludedFiles, configBody = _objectWithoutProperties(configData, ["files", "excludedFiles"]);
                    criteria = OverrideTester$3.create(files, excludedFiles, ctx.matchBasePath);
                    elements = this._normalizeObjectConfigDataBody(configBody, ctx);
                    _iterator5 = _createForOfIteratorHelper(elements);
                    _context2.prev = 4;

                    _iterator5.s();

                  case 6:
                    if ((_step5 = _iterator5.n()).done) {
                      _context2.next = 14;
                      break;
                    }

                    element = _step5.value;
                    element.criteria = OverrideTester$3.and(criteria, element.criteria);

                    if (element.criteria) {
                      element.root = void 0;
                    }

                    _context2.next = 12;
                    return element;

                  case 12:
                    _context2.next = 6;
                    break;

                  case 14:
                    _context2.next = 19;
                    break;

                  case 16:
                    _context2.prev = 16;
                    _context2.t0 = _context2["catch"](4);

                    _iterator5.e(_context2.t0);

                  case 19:
                    _context2.prev = 19;

                    _iterator5.f();

                    return _context2.finish(19);

                  case 22:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _normalizeObjectConfigData, this, [[4, 16, 19, 22]]);
          })
        }, {
          key: "_normalizeObjectConfigDataBody",
          value: /*#__PURE__*/regeneratorRuntime.mark(function _normalizeObjectConfigDataBody(_ref9, ctx) {
            var env, extend, globals, ignorePatterns, noInlineConfig, parserName, parserOptions, pluginList, processor, reportUnusedDisableDirectives, root, rules, settings, _ref9$overrides, overrideList, extendList, ignorePattern, _iterator6, _step6, extendName, parser, plugins, i;

            return regeneratorRuntime.wrap(function _normalizeObjectConfigDataBody$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    env = _ref9.env, extend = _ref9["extends"], globals = _ref9.globals, ignorePatterns = _ref9.ignorePatterns, noInlineConfig = _ref9.noInlineConfig, parserName = _ref9.parser, parserOptions = _ref9.parserOptions, pluginList = _ref9.plugins, processor = _ref9.processor, reportUnusedDisableDirectives = _ref9.reportUnusedDisableDirectives, root = _ref9.root, rules = _ref9.rules, settings = _ref9.settings, _ref9$overrides = _ref9.overrides, overrideList = _ref9$overrides === void 0 ? [] : _ref9$overrides;
                    extendList = Array.isArray(extend) ? extend : [extend];
                    ignorePattern = ignorePatterns && new IgnorePattern$1$1(Array.isArray(ignorePatterns) ? ignorePatterns : [ignorePatterns], ctx.matchBasePath);
                    _iterator6 = _createForOfIteratorHelper(extendList.filter(Boolean));
                    _context3.prev = 4;

                    _iterator6.s();

                  case 6:
                    if ((_step6 = _iterator6.n()).done) {
                      _context3.next = 11;
                      break;
                    }

                    extendName = _step6.value;
                    return _context3.delegateYield(this._loadExtends(extendName, ctx), "t0", 9);

                  case 9:
                    _context3.next = 6;
                    break;

                  case 11:
                    _context3.next = 16;
                    break;

                  case 13:
                    _context3.prev = 13;
                    _context3.t1 = _context3["catch"](4);

                    _iterator6.e(_context3.t1);

                  case 16:
                    _context3.prev = 16;

                    _iterator6.f();

                    return _context3.finish(16);

                  case 19:
                    parser = parserName && this._loadParser(parserName, ctx);
                    plugins = pluginList && this._loadPlugins(pluginList, ctx);

                    if (!plugins) {
                      _context3.next = 23;
                      break;
                    }

                    return _context3.delegateYield(this._takeFileExtensionProcessors(plugins, ctx), "t2", 23);

                  case 23:
                    _context3.next = 25;
                    return {
                      type: ctx.type,
                      name: ctx.name,
                      filePath: ctx.filePath,
                      criteria: null,
                      env: env,
                      globals: globals,
                      ignorePattern: ignorePattern,
                      noInlineConfig: noInlineConfig,
                      parser: parser,
                      parserOptions: parserOptions,
                      plugins: plugins,
                      processor: processor,
                      reportUnusedDisableDirectives: reportUnusedDisableDirectives,
                      root: root,
                      rules: rules,
                      settings: settings
                    };

                  case 25:
                    i = 0;

                  case 26:
                    if (!(i < overrideList.length)) {
                      _context3.next = 31;
                      break;
                    }

                    return _context3.delegateYield(this._normalizeObjectConfigData(overrideList[i], _objectSpread2(_objectSpread2({}, ctx), {}, {
                      name: "".concat(ctx.name, "#overrides[").concat(i, "]")
                    })), "t3", 28);

                  case 28:
                    ++i;
                    _context3.next = 26;
                    break;

                  case 31:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _normalizeObjectConfigDataBody, this, [[4, 13, 16, 19]]);
          })
        }, {
          key: "_loadExtends",
          value: function _loadExtends(extendName, ctx) {
            debug$1$2("Loading {extends:%j} relative to %s", extendName, ctx.filePath);

            try {
              if (extendName.startsWith("eslint:")) {
                return this._loadExtendedBuiltInConfig(extendName, ctx);
              }

              if (extendName.startsWith("plugin:")) {
                return this._loadExtendedPluginConfig(extendName, ctx);
              }

              return this._loadExtendedShareableConfig(extendName, ctx);
            } catch (error) {
              error.message += "\nReferenced from: ".concat(ctx.filePath || ctx.name);
              throw error;
            }
          }
        }, {
          key: "_loadExtendedBuiltInConfig",
          value: function _loadExtendedBuiltInConfig(extendName, ctx) {
            var _internalSlotsMap$1$g = internalSlotsMap$1$1.get(this),
                eslintAllPath = _internalSlotsMap$1$g.eslintAllPath,
                eslintRecommendedPath = _internalSlotsMap$1$g.eslintRecommendedPath;

            if (extendName === "eslint:recommended") {
              return this._loadConfigData(_objectSpread2(_objectSpread2({}, ctx), {}, {
                filePath: eslintRecommendedPath,
                name: "".concat(ctx.name, " \xBB ").concat(extendName)
              }));
            }

            if (extendName === "eslint:all") {
              return this._loadConfigData(_objectSpread2(_objectSpread2({}, ctx), {}, {
                filePath: eslintAllPath,
                name: "".concat(ctx.name, " \xBB ").concat(extendName)
              }));
            }

            throw configInvalidError(extendName, ctx.name, "extend-config-missing");
          }
        }, {
          key: "_loadExtendedPluginConfig",
          value: function _loadExtendedPluginConfig(extendName, ctx) {
            var slashIndex = extendName.lastIndexOf("/");

            if (slashIndex === -1) {
              throw configInvalidError(extendName, ctx.filePath, "plugin-invalid");
            }

            var pluginName = extendName.slice("plugin:".length, slashIndex);
            var configName = extendName.slice(slashIndex + 1);

            if (isFilePath(pluginName)) {
              throw new Error("'extends' cannot use a file path for plugins.");
            }

            var plugin = this._loadPlugin(pluginName, ctx);

            var configData = plugin.definition && plugin.definition.configs[configName];

            if (configData) {
              return this._normalizeConfigData(configData, _objectSpread2(_objectSpread2({}, ctx), {}, {
                filePath: plugin.filePath || ctx.filePath,
                name: "".concat(ctx.name, " \xBB plugin:").concat(plugin.id, "/").concat(configName)
              }));
            }

            throw plugin.error || configInvalidError(extendName, ctx.filePath, "extend-config-missing");
          }
        }, {
          key: "_loadExtendedShareableConfig",
          value: function _loadExtendedShareableConfig(extendName, ctx) {
            var _internalSlotsMap$1$g2 = internalSlotsMap$1$1.get(this),
                cwd = _internalSlotsMap$1$g2.cwd,
                resolver = _internalSlotsMap$1$g2.resolver;

            var relativeTo = ctx.filePath || path$1$2.join(cwd, "__placeholder__.js");
            var request;

            if (isFilePath(extendName)) {
              request = extendName;
            } else if (extendName.startsWith(".")) {
              request = "./".concat(extendName);
            } else {
              request = naming$2.normalizePackageName(extendName, "eslint-config");
            }

            var filePath;

            try {
              filePath = resolver.resolve(request, relativeTo);
            } catch (error) {
              if (error && error.code === "MODULE_NOT_FOUND") {
                throw configInvalidError(extendName, ctx.filePath, "extend-config-missing");
              }

              throw error;
            }

            writeDebugLogForLoading(request, relativeTo, filePath);
            return this._loadConfigData(_objectSpread2(_objectSpread2({}, ctx), {}, {
              filePath: filePath,
              name: "".concat(ctx.name, " \xBB ").concat(request)
            }));
          }
        }, {
          key: "_loadPlugins",
          value: function _loadPlugins(names, ctx) {
            var _this = this;

            return names.reduce(function (map, name) {
              if (isFilePath(name)) {
                throw new Error("Plugins array cannot includes file paths.");
              }

              var plugin = _this._loadPlugin(name, ctx);

              map[plugin.id] = plugin;
              return map;
            }, {});
          }
        }, {
          key: "_loadParser",
          value: function _loadParser(nameOrPath, ctx) {
            debug$1$2("Loading parser %j from %s", nameOrPath, ctx.filePath);

            var _internalSlotsMap$1$g3 = internalSlotsMap$1$1.get(this),
                cwd = _internalSlotsMap$1$g3.cwd;

            var relativeTo = ctx.filePath || path$1$2.join(cwd, "__placeholder__.js");

            try {
              var filePath = ModuleResolver$2.resolve(nameOrPath, relativeTo);
              writeDebugLogForLoading(nameOrPath, relativeTo, filePath);
              return new ConfigDependency$1({
                definition: _nullRequire$5(filePath),
                filePath: filePath,
                id: nameOrPath,
                importerName: ctx.name,
                importerPath: ctx.filePath
              });
            } catch (error) {
              if (nameOrPath === "espree") {
                debug$1$2("Fallback espree.");
                return new ConfigDependency$1({
                  definition: _espree$3,
                  filePath: "espree",
                  id: nameOrPath,
                  importerName: ctx.name,
                  importerPath: ctx.filePath
                });
              }

              debug$1$2("Failed to load parser '%s' declared in '%s'.", nameOrPath, ctx.name);
              error.message = "Failed to load parser '".concat(nameOrPath, "' declared in '").concat(ctx.name, "': ").concat(error.message);
              return new ConfigDependency$1({
                error: error,
                id: nameOrPath,
                importerName: ctx.name,
                importerPath: ctx.filePath
              });
            }
          }
        }, {
          key: "_loadPlugin",
          value: function _loadPlugin(name, ctx) {
            debug$1$2("Loading plugin %j from %s", name, ctx.filePath);

            var _internalSlotsMap$1$g4 = internalSlotsMap$1$1.get(this),
                additionalPluginPool = _internalSlotsMap$1$g4.additionalPluginPool;

            var request = naming$2.normalizePackageName(name, "eslint-plugin");
            var id = naming$2.getShorthandName(request, "eslint-plugin");
            var relativeTo = path$1$2.join(ctx.pluginBasePath, "__placeholder__.js");

            if (name.match(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/)) {
              var _error = Object.assign(new Error("Whitespace found in plugin name '".concat(name, "'")), {
                messageTemplate: "whitespace-found",
                messageData: {
                  pluginName: request
                }
              });

              return new ConfigDependency$1({
                error: _error,
                id: id,
                importerName: ctx.name,
                importerPath: ctx.filePath
              });
            }

            var plugin = additionalPluginPool.get(request) || additionalPluginPool.get(id);

            if (plugin) {
              return new ConfigDependency$1({
                definition: normalizePlugin(plugin),
                filePath: "",
                id: id,
                importerName: ctx.name,
                importerPath: ctx.filePath
              });
            }

            var filePath;
            var error;

            try {
              filePath = ModuleResolver$2.resolve(request, relativeTo);
            } catch (resolveError) {
              error = resolveError;

              if (error && error.code === "MODULE_NOT_FOUND") {
                error.messageTemplate = "plugin-missing";
                error.messageData = {
                  pluginName: request,
                  resolvePluginsRelativeTo: ctx.pluginBasePath,
                  importerName: ctx.name
                };
              }
            }

            if (filePath) {
              try {
                writeDebugLogForLoading(request, relativeTo, filePath);
                var startTime = Date.now();

                var pluginDefinition = _nullRequire$5(filePath);

                debug$1$2("Plugin ".concat(filePath, " loaded in: ").concat(Date.now() - startTime, "ms"));
                return new ConfigDependency$1({
                  definition: normalizePlugin(pluginDefinition),
                  filePath: filePath,
                  id: id,
                  importerName: ctx.name,
                  importerPath: ctx.filePath
                });
              } catch (loadError) {
                error = loadError;
              }
            }

            debug$1$2("Failed to load plugin '%s' declared in '%s'.", name, ctx.name);
            error.message = "Failed to load plugin '".concat(name, "' declared in '").concat(ctx.name, "': ").concat(error.message);
            return new ConfigDependency$1({
              error: error,
              id: id,
              importerName: ctx.name,
              importerPath: ctx.filePath
            });
          }
        }, {
          key: "_takeFileExtensionProcessors",
          value: /*#__PURE__*/regeneratorRuntime.mark(function _takeFileExtensionProcessors(plugins, ctx) {
            var _i, _Object$keys, pluginId, processors, _i2, _Object$keys2, processorId;

            return regeneratorRuntime.wrap(function _takeFileExtensionProcessors$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _i = 0, _Object$keys = Object.keys(plugins);

                  case 1:
                    if (!(_i < _Object$keys.length)) {
                      _context4.next = 17;
                      break;
                    }

                    pluginId = _Object$keys[_i];
                    processors = plugins[pluginId] && plugins[pluginId].definition && plugins[pluginId].definition.processors;

                    if (processors) {
                      _context4.next = 6;
                      break;
                    }

                    return _context4.abrupt("continue", 14);

                  case 6:
                    _i2 = 0, _Object$keys2 = Object.keys(processors);

                  case 7:
                    if (!(_i2 < _Object$keys2.length)) {
                      _context4.next = 14;
                      break;
                    }

                    processorId = _Object$keys2[_i2];

                    if (!processorId.startsWith(".")) {
                      _context4.next = 11;
                      break;
                    }

                    return _context4.delegateYield(this._normalizeObjectConfigData({
                      files: ["*".concat(processorId)],
                      processor: "".concat(pluginId, "/").concat(processorId)
                    }, _objectSpread2(_objectSpread2({}, ctx), {}, {
                      type: "implicit-processor",
                      name: "".concat(ctx.name, "#processors[\"").concat(pluginId, "/").concat(processorId, "\"]")
                    })), "t0", 11);

                  case 11:
                    _i2++;
                    _context4.next = 7;
                    break;

                  case 14:
                    _i++;
                    _context4.next = 1;
                    break;

                  case 17:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _takeFileExtensionProcessors, this);
          })
        }], [{
          key: "getPathToConfigFileInDirectory",
          value: function getPathToConfigFileInDirectory(directoryPath) {
            var _iterator7 = _createForOfIteratorHelper(configFilenames),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var filename = _step7.value;
                var filePath = path$1$2.join(directoryPath, filename);

                if (fs$9.existsSync(filePath)) {
                  if (filename === "package.json") {
                    try {
                      loadPackageJSONConfigFile(filePath);
                      return filePath;
                    } catch (_unused) {}
                  } else {
                    return filePath;
                  }
                }
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }

            return null;
          }
        }]);

        return ConfigArrayFactory$1;
      }();

      exports$1$x = {
        ConfigArrayFactory: ConfigArrayFactory$1$1,
        createContext: createContext
      };
      var _configArrayFactory = exports$1$x;

      var _os = "default" in _os2 ? exports$5Q : _os2;

      var _path$a = "default" in _path2 ? exports$5S : _path2;

      var _debug$9 = "default" in _debug2 ? _browser : _debug2;

      var exports$5a = {};
      var process$b = process$g;
      var os = _os;
      var path$b = _path$a;
      var ConfigValidator$2 = _configValidator$2;
      var emitDeprecationWarning$2 = _deprecationWarnings$1.emitDeprecationWarning;
      var ConfigArrayFactory$2 = _configArrayFactory.ConfigArrayFactory;
      var ConfigArray$3 = _configArray.ConfigArray,
          ConfigDependency$4 = _configArray.ConfigDependency,
          IgnorePattern$3 = _configArray.IgnorePattern;

      var debug$b = _debug$9("eslintrc:cascading-config-array-factory");

      var internalSlotsMap$3 = new WeakMap();

      function createBaseConfigArray(_ref10) {
        var configArrayFactory = _ref10.configArrayFactory,
            baseConfigData = _ref10.baseConfigData,
            rulePaths = _ref10.rulePaths,
            cwd = _ref10.cwd,
            loadRules = _ref10.loadRules;
        var baseConfigArray = configArrayFactory.create(baseConfigData, {
          name: "BaseConfig"
        });
        baseConfigArray.unshift(configArrayFactory.create({
          ignorePatterns: IgnorePattern$3.DefaultPatterns
        }, {
          name: "DefaultIgnorePattern"
        })[0]);

        if (rulePaths && rulePaths.length > 0) {
          baseConfigArray.push({
            type: "config",
            name: "--rulesdir",
            filePath: "",
            plugins: {
              "": new ConfigDependency$4({
                definition: {
                  rules: rulePaths.reduce(function (map, rulesPath) {
                    return Object.assign(map, loadRules(rulesPath, cwd));
                  }, {})
                },
                filePath: "",
                id: "",
                importerName: "--rulesdir",
                importerPath: ""
              })
            }
          });
        }

        return baseConfigArray;
      }

      function createCLIConfigArray(_ref11) {
        var cliConfigData = _ref11.cliConfigData,
            configArrayFactory = _ref11.configArrayFactory,
            cwd = _ref11.cwd,
            ignorePath = _ref11.ignorePath,
            specificConfigPath = _ref11.specificConfigPath;
        var cliConfigArray = configArrayFactory.create(cliConfigData, {
          name: "CLIOptions"
        });
        cliConfigArray.unshift.apply(cliConfigArray, _toConsumableArray(ignorePath ? configArrayFactory.loadESLintIgnore(ignorePath) : configArrayFactory.loadDefaultESLintIgnore()));

        if (specificConfigPath) {
          cliConfigArray.unshift.apply(cliConfigArray, _toConsumableArray(configArrayFactory.loadFile(specificConfigPath, {
            name: "--config",
            basePath: cwd
          })));
        }

        return cliConfigArray;
      }

      var ConfigurationNotFoundError = /*#__PURE__*/function (_Error) {
        _inherits$1(ConfigurationNotFoundError, _Error);

        var _super = _createSuper(ConfigurationNotFoundError);

        function ConfigurationNotFoundError(directoryPath) {
          var _this2;

          _classCallCheck(this, ConfigurationNotFoundError);

          _this2 = _super.call(this, "No ESLint configuration found in ".concat(directoryPath, "."));
          _this2.messageTemplate = "no-config-found";
          _this2.messageData = {
            directoryPath: directoryPath
          };
          return _this2;
        }

        return ConfigurationNotFoundError;
      }( /*#__PURE__*/_wrapNativeSuper(Error));

      var CascadingConfigArrayFactory$3 = /*#__PURE__*/function () {
        function CascadingConfigArrayFactory() {
          var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref12$additionalPlug = _ref12.additionalPluginPool,
              additionalPluginPool = _ref12$additionalPlug === void 0 ? new Map() : _ref12$additionalPlug,
              _ref12$baseConfig = _ref12.baseConfig,
              baseConfigData = _ref12$baseConfig === void 0 ? null : _ref12$baseConfig,
              _ref12$cliConfig = _ref12.cliConfig,
              cliConfigData = _ref12$cliConfig === void 0 ? null : _ref12$cliConfig,
              _ref12$cwd = _ref12.cwd,
              cwd = _ref12$cwd === void 0 ? process$b.cwd() : _ref12$cwd,
              ignorePath = _ref12.ignorePath,
              resolvePluginsRelativeTo = _ref12.resolvePluginsRelativeTo,
              _ref12$rulePaths = _ref12.rulePaths,
              rulePaths = _ref12$rulePaths === void 0 ? [] : _ref12$rulePaths,
              _ref12$specificConfig = _ref12.specificConfigPath,
              specificConfigPath = _ref12$specificConfig === void 0 ? null : _ref12$specificConfig,
              _ref12$useEslintrc = _ref12.useEslintrc,
              useEslintrc = _ref12$useEslintrc === void 0 ? true : _ref12$useEslintrc,
              _ref12$builtInRules = _ref12.builtInRules,
              builtInRules = _ref12$builtInRules === void 0 ? new Map() : _ref12$builtInRules,
              loadRules = _ref12.loadRules,
              resolver = _ref12.resolver,
              eslintRecommendedPath = _ref12.eslintRecommendedPath,
              eslintAllPath = _ref12.eslintAllPath;

          _classCallCheck(this, CascadingConfigArrayFactory);

          var configArrayFactory = new ConfigArrayFactory$2({
            additionalPluginPool: additionalPluginPool,
            cwd: cwd,
            resolvePluginsRelativeTo: resolvePluginsRelativeTo,
            builtInRules: builtInRules,
            resolver: resolver,
            eslintRecommendedPath: eslintRecommendedPath,
            eslintAllPath: eslintAllPath
          });
          internalSlotsMap$3.set(this, {
            baseConfigArray: createBaseConfigArray({
              baseConfigData: baseConfigData,
              configArrayFactory: configArrayFactory,
              cwd: cwd,
              rulePaths: rulePaths,
              loadRules: loadRules,
              resolver: resolver
            }),
            baseConfigData: baseConfigData,
            cliConfigArray: createCLIConfigArray({
              cliConfigData: cliConfigData,
              configArrayFactory: configArrayFactory,
              cwd: cwd,
              ignorePath: ignorePath,
              specificConfigPath: specificConfigPath
            }),
            cliConfigData: cliConfigData,
            configArrayFactory: configArrayFactory,
            configCache: new Map(),
            cwd: cwd,
            finalizeCache: new WeakMap(),
            ignorePath: ignorePath,
            rulePaths: rulePaths,
            specificConfigPath: specificConfigPath,
            useEslintrc: useEslintrc,
            builtInRules: builtInRules,
            loadRules: loadRules
          });
        }

        _createClass(CascadingConfigArrayFactory, [{
          key: "getConfigArrayForFile",
          value: function getConfigArrayForFile(filePath) {
            var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                _ref13$ignoreNotFound = _ref13.ignoreNotFoundError,
                ignoreNotFoundError = _ref13$ignoreNotFound === void 0 ? false : _ref13$ignoreNotFound;

            var _internalSlotsMap$get = internalSlotsMap$3.get(this),
                baseConfigArray = _internalSlotsMap$get.baseConfigArray,
                cliConfigArray = _internalSlotsMap$get.cliConfigArray,
                cwd = _internalSlotsMap$get.cwd;

            if (!filePath) {
              return _construct(ConfigArray$3, _toConsumableArray(baseConfigArray).concat(_toConsumableArray(cliConfigArray)));
            }

            var directoryPath = path$b.dirname(path$b.resolve(cwd, filePath));
            debug$b("Load config files for ".concat(directoryPath, "."));
            return this._finalizeConfigArray(this._loadConfigInAncestors(directoryPath), directoryPath, ignoreNotFoundError);
          }
        }, {
          key: "setOverrideConfig",
          value: function setOverrideConfig(configData) {
            var slots = internalSlotsMap$3.get(this);
            slots.cliConfigData = configData;
          }
        }, {
          key: "clearCache",
          value: function clearCache() {
            var slots = internalSlotsMap$3.get(this);
            slots.baseConfigArray = createBaseConfigArray(slots);
            slots.cliConfigArray = createCLIConfigArray(slots);
            slots.configCache.clear();
          }
        }, {
          key: "_loadConfigInAncestors",
          value: function _loadConfigInAncestors(directoryPath) {
            var configsExistInSubdirs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var _internalSlotsMap$get2 = internalSlotsMap$3.get(this),
                baseConfigArray = _internalSlotsMap$get2.baseConfigArray,
                configArrayFactory = _internalSlotsMap$get2.configArrayFactory,
                configCache = _internalSlotsMap$get2.configCache,
                cwd = _internalSlotsMap$get2.cwd,
                useEslintrc = _internalSlotsMap$get2.useEslintrc;

            if (!useEslintrc) {
              return baseConfigArray;
            }

            var configArray = configCache.get(directoryPath);

            if (configArray) {
              debug$b("Cache hit: ".concat(directoryPath, "."));
              return configArray;
            }

            debug$b("No cache found: ".concat(directoryPath, "."));
            var homePath = os.homedir();

            if (directoryPath === homePath && cwd !== homePath) {
              debug$b("Stop traversing because of considered root.");

              if (configsExistInSubdirs) {
                var filePath = ConfigArrayFactory$2.getPathToConfigFileInDirectory(directoryPath);

                if (filePath) {
                  emitDeprecationWarning$2(filePath, "ESLINT_PERSONAL_CONFIG_SUPPRESS");
                }
              }

              return this._cacheConfig(directoryPath, baseConfigArray);
            }

            try {
              configArray = configArrayFactory.loadInDirectory(directoryPath);
            } catch (error) {
              if (error.code === "EACCES") {
                debug$b("Stop traversing because of 'EACCES' error.");
                return this._cacheConfig(directoryPath, baseConfigArray);
              }

              throw error;
            }

            if (configArray.length > 0 && configArray.isRoot()) {
              var _configArray2;

              debug$b("Stop traversing because of 'root:true'.");

              (_configArray2 = configArray).unshift.apply(_configArray2, _toConsumableArray(baseConfigArray));

              return this._cacheConfig(directoryPath, configArray);
            }

            var parentPath = path$b.dirname(directoryPath);
            var parentConfigArray = parentPath && parentPath !== directoryPath ? this._loadConfigInAncestors(parentPath, configsExistInSubdirs || configArray.length > 0) : baseConfigArray;

            if (configArray.length > 0) {
              var _configArray3;

              (_configArray3 = configArray).unshift.apply(_configArray3, _toConsumableArray(parentConfigArray));
            } else {
              configArray = parentConfigArray;
            }

            return this._cacheConfig(directoryPath, configArray);
          }
        }, {
          key: "_cacheConfig",
          value: function _cacheConfig(directoryPath, configArray) {
            var _internalSlotsMap$get3 = internalSlotsMap$3.get(this),
                configCache = _internalSlotsMap$get3.configCache;

            Object.freeze(configArray);
            configCache.set(directoryPath, configArray);
            return configArray;
          }
        }, {
          key: "_finalizeConfigArray",
          value: function _finalizeConfigArray(configArray, directoryPath, ignoreNotFoundError) {
            var _internalSlotsMap$get4 = internalSlotsMap$3.get(this),
                cliConfigArray = _internalSlotsMap$get4.cliConfigArray,
                configArrayFactory = _internalSlotsMap$get4.configArrayFactory,
                finalizeCache = _internalSlotsMap$get4.finalizeCache,
                useEslintrc = _internalSlotsMap$get4.useEslintrc,
                builtInRules = _internalSlotsMap$get4.builtInRules;

            var finalConfigArray = finalizeCache.get(configArray);

            if (!finalConfigArray) {
              finalConfigArray = configArray;

              if (useEslintrc && configArray.every(function (c) {
                return !c.filePath;
              }) && cliConfigArray.every(function (c) {
                return !c.filePath;
              })) {
                var homePath = os.homedir();
                debug$b("Loading the config file of the home directory:", homePath);
                var personalConfigArray = configArrayFactory.loadInDirectory(homePath, {
                  name: "PersonalConfig"
                });

                if (personalConfigArray.length > 0 && !directoryPath.startsWith(homePath)) {
                  var lastElement = personalConfigArray[personalConfigArray.length - 1];
                  emitDeprecationWarning$2(lastElement.filePath, "ESLINT_PERSONAL_CONFIG_LOAD");
                }

                finalConfigArray = finalConfigArray.concat(personalConfigArray);
              }

              if (cliConfigArray.length > 0) {
                finalConfigArray = finalConfigArray.concat(cliConfigArray);
              }

              var validator = new ConfigValidator$2({
                builtInRules: builtInRules
              });
              validator.validateConfigArray(finalConfigArray);
              Object.freeze(finalConfigArray);
              finalizeCache.set(configArray, finalConfigArray);
              debug$b("Configuration was determined: %o on %s", finalConfigArray, directoryPath);
            }

            if (!ignoreNotFoundError && useEslintrc && finalConfigArray.length <= 1) {
              throw new ConfigurationNotFoundError(directoryPath);
            }

            return finalConfigArray;
          }
        }, {
          key: "cwd",
          get: function get() {
            var _internalSlotsMap$get5 = internalSlotsMap$3.get(this),
                cwd = _internalSlotsMap$get5.cwd;

            return cwd;
          }
        }]);

        return CascadingConfigArrayFactory;
      }();

      exports$5a = {
        CascadingConfigArrayFactory: CascadingConfigArrayFactory$3
      };
      var _cascadingConfigArrayFactory = exports$5a;
      exports$5a.CascadingConfigArrayFactory;

      var _path$9 = "default" in _path2 ? exports$5S : _path2;
      var _debug$8 = "default" in _debug2 ? _browser : _debug2;
      var exports$2$d = {};
      var process$a = process$g;
      const path$a = _path$9;
      const environments = _environments$2;
      const createDebug = _debug$8;
      const {ConfigArrayFactory: ConfigArrayFactory$1} = _configArrayFactory;
      const debug$a = createDebug("eslintrc:flat-compat");
      const cafactory = Symbol("cafactory");
      function translateESLintRC(eslintrcConfig, {resolveConfigRelativeTo, resolvePluginsRelativeTo, pluginEnvironments, pluginProcessors}) {
        const flatConfig = {};
        const configs = [];
        const languageOptions = {};
        const linterOptions = {};
        const keysToCopy = [
          "settings",
          "rules",
          "processor"
        ];
        const languageOptionsKeysToCopy = [
          "globals",
          "parser",
          "parserOptions"
        ];
        const linterOptionsKeysToCopy = [
          "noInlineConfig",
          "reportUnusedDisableDirectives"
        ];
        if (eslintrcConfig.settings) {
          if (eslintrcConfig.settings["eslint:all"] === true) {
            return ["eslint:all"];
          }
          if (eslintrcConfig.settings["eslint:recommended"] === true) {
            return ["eslint:recommended"];
          }
        }
        for (const key of keysToCopy) {
          if (key in eslintrcConfig && typeof eslintrcConfig[key] !== "undefined") {
            flatConfig[key] = eslintrcConfig[key];
          }
        }
        for (const key of languageOptionsKeysToCopy) {
          if (key in eslintrcConfig && typeof eslintrcConfig[key] !== "undefined") {
            flatConfig.languageOptions = languageOptions;
            if (key === "parser") {
              debug$a(`Resolving parser '${ languageOptions[key] }' relative to ${ resolveConfigRelativeTo }`);
              if (eslintrcConfig[key].error) {
                throw eslintrcConfig[key].error;
              }
              languageOptions[key] = eslintrcConfig[key].definition;
              continue;
            }
            if (eslintrcConfig[key] && typeof eslintrcConfig[key] === "object") {
              languageOptions[key] = { ...eslintrcConfig[key] };
            } else {
              languageOptions[key] = eslintrcConfig[key];
            }
          }
        }
        for (const key of linterOptionsKeysToCopy) {
          if (key in eslintrcConfig && typeof eslintrcConfig[key] !== "undefined") {
            flatConfig.linterOptions = linterOptions;
            linterOptions[key] = eslintrcConfig[key];
          }
        }
        if (languageOptions.parserOptions) {
          if ("ecmaVersion" in languageOptions.parserOptions) {
            languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;
            delete languageOptions.parserOptions.ecmaVersion;
          }
          if ("sourceType" in languageOptions.parserOptions) {
            languageOptions.sourceType = languageOptions.parserOptions.sourceType;
            delete languageOptions.parserOptions.sourceType;
          }
          if (Object.keys(languageOptions.parserOptions).length === 0) {
            delete languageOptions.parserOptions;
          }
        }
        if (eslintrcConfig.criteria) {
          flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];
        }
        if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === "object") {
          debug$a(`Translating plugins: ${ eslintrcConfig.plugins }`);
          flatConfig.plugins = {};
          for (const pluginName of Object.keys(eslintrcConfig.plugins)) {
            debug$a(`Translating plugin: ${ pluginName }`);
            debug$a(`Resolving plugin '${ pluginName } relative to ${ resolvePluginsRelativeTo }`);
            const {
              definition: plugin,
              error
            } = eslintrcConfig.plugins[pluginName];
            if (error) {
              throw error;
            }
            flatConfig.plugins[pluginName] = plugin;
            if (plugin.processors) {
              for (const processorName of Object.keys(plugin.processors)) {
                if (processorName.startsWith(".")) {
                  debug$a(`Assigning processor: ${ pluginName }/${ processorName }`);
                  configs.unshift({
                    files: [`**/*${ processorName }`],
                    processor: pluginProcessors.get(`${ pluginName }/${ processorName }`)
                  });
                }
              }
            }
          }
        }
        if (eslintrcConfig.env && typeof eslintrcConfig.env === "object") {
          for (const envName of Object.keys(eslintrcConfig.env)) {
            if (eslintrcConfig.env[envName]) {
              debug$a(`Translating environment: ${ envName }`);
              if (environments.has(envName)) {
                configs.unshift(...translateESLintRC(environments.get(envName), {
                  resolveConfigRelativeTo,
                  resolvePluginsRelativeTo
                }));
              } else if (pluginEnvironments.has(envName)) {
                configs.push(...translateESLintRC(pluginEnvironments.get(envName), {
                  resolveConfigRelativeTo,
                  resolvePluginsRelativeTo
                }));
              }
            }
          }
        }
        if (Object.keys(flatConfig).length > 0) {
          configs.push(flatConfig);
        }
        return configs;
      }
      class FlatCompat$1 {
        constructor({baseDirectory = process$a.cwd(), resolvePluginsRelativeTo = baseDirectory} = {}) {
          this.baseDirectory = baseDirectory;
          this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;
          this[cafactory] = new ConfigArrayFactory$1({
            cwd: baseDirectory,
            resolvePluginsRelativeTo,
            eslintAllPath: path$a.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../conf/eslint-all.js"),
            eslintRecommendedPath: path$a.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../conf/eslint-recommended.js")
          });
        }
        config(eslintrcConfig) {
          const eslintrcArray = this[cafactory].create(eslintrcConfig, { basePath: this.baseDirectory });
          const flatArray = [];
          let hasIgnorePatterns = false;
          eslintrcArray.forEach(configData => {
            if (configData.type === "config") {
              hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;
              flatArray.push(...translateESLintRC(configData, {
                resolveConfigRelativeTo: path$a.join(this.baseDirectory, "__placeholder.js"),
                resolvePluginsRelativeTo: path$a.join(this.resolvePluginsRelativeTo, "__placeholder.js"),
                pluginEnvironments: eslintrcArray.pluginEnvironments,
                pluginProcessors: eslintrcArray.pluginProcessors
              }));
            }
          });
          if (hasIgnorePatterns) {
            flatArray.unshift({
              ignores: [filePath => {
                  const finalConfig = eslintrcArray.extractConfig(filePath);
                  return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);
                }]
            });
          }
          return flatArray;
        }
        env(envConfig) {
          return this.config({ env: envConfig });
        }
        extends(...configsToExtend) {
          return this.config({ extends: configsToExtend });
        }
        plugins(...plugins) {
          return this.config({ plugins });
        }
      }
      exports$2$d.FlatCompat = FlatCompat$1;
      var exports$59 = {};
      const {
        ConfigArrayFactory,
        createContext: createConfigArrayFactoryContext
      } = _configArrayFactory;
      const {CascadingConfigArrayFactory: CascadingConfigArrayFactory$2} = _cascadingConfigArrayFactory;
      const ModuleResolver$1 = _relativeModuleResolver;
      const {ConfigArray, getUsedExtractedConfigs: getUsedExtractedConfigs$1} = _configArray;
      const {ConfigDependency} = _configDependency;
      const {ExtractedConfig} = _extractedConfig;
      const {IgnorePattern: IgnorePattern$2} = _ignorePattern;
      const {OverrideTester} = _overrideTester;
      const ConfigOps$3 = _configOps$3;
      const ConfigValidator$1 = _configValidator$2;
      const naming$1 = _naming;
      const {FlatCompat} = exports$2$d;
      exports$59 = {
        Legacy: {
          ConfigArray,
          createConfigArrayFactoryContext,
          CascadingConfigArrayFactory: CascadingConfigArrayFactory$2,
          ConfigArrayFactory,
          ConfigDependency,
          ExtractedConfig,
          IgnorePattern: IgnorePattern$2,
          OverrideTester,
          getUsedExtractedConfigs: getUsedExtractedConfigs$1,
          ConfigOps: ConfigOps$3,
          ConfigValidator: ConfigValidator$1,
          ModuleResolver: ModuleResolver$1,
          naming: naming$1
        },
        FlatCompat
      };
      var exports$1$w = exports$59;

      var _eslintrc2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$w
      });

      var exports$58 = {};
      exports$58 = function isExtglob(str) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        var match;
        while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
          if (match[2])
            return true;
          str = str.slice(match.index + match[0].length);
        }
        return false;
      };
      var exports$1$v = exports$58;

      var _isExtglob2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$v
      });

      var _isExtglob = "default" in _isExtglob2 ? exports$1$v : _isExtglob2;
      var exports$57 = {};
      var isExtglob = _isExtglob;
      var chars$1 = {
        "{": "}",
        "(": ")",
        "[": "]"
      };
      var strictCheck = function (str) {
        if (str[0] === "!") {
          return true;
        }
        var index = 0;
        var pipeIndex = -2;
        var closeSquareIndex = -2;
        var closeCurlyIndex = -2;
        var closeParenIndex = -2;
        var backSlashIndex = -2;
        while (index < str.length) {
          if (str[index] === "*") {
            return true;
          }
          if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
            return true;
          }
          if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
            if (closeSquareIndex < index) {
              closeSquareIndex = str.indexOf("]", index);
            }
            if (closeSquareIndex > index) {
              if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                return true;
              }
              backSlashIndex = str.indexOf("\\", index);
              if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                return true;
              }
            }
          }
          if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
            closeCurlyIndex = str.indexOf("}", index);
            if (closeCurlyIndex > index) {
              backSlashIndex = str.indexOf("\\", index);
              if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
                return true;
              }
            }
          }
          if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
            closeParenIndex = str.indexOf(")", index);
            if (closeParenIndex > index) {
              backSlashIndex = str.indexOf("\\", index);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
          if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
            if (pipeIndex < index) {
              pipeIndex = str.indexOf("|", index);
            }
            if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
              closeParenIndex = str.indexOf(")", pipeIndex);
              if (closeParenIndex > pipeIndex) {
                backSlashIndex = str.indexOf("\\", pipeIndex);
                if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                  return true;
                }
              }
            }
          }
          if (str[index] === "\\") {
            var open = str[index + 1];
            index += 2;
            var close = chars$1[open];
            if (close) {
              var n = str.indexOf(close, index);
              if (n !== -1) {
                index = n + 1;
              }
            }
            if (str[index] === "!") {
              return true;
            }
          } else {
            index++;
          }
        }
        return false;
      };
      var relaxedCheck = function (str) {
        if (str[0] === "!") {
          return true;
        }
        var index = 0;
        while (index < str.length) {
          if (/[*?{}()[\]]/.test(str[index])) {
            return true;
          }
          if (str[index] === "\\") {
            var open = str[index + 1];
            index += 2;
            var close = chars$1[open];
            if (close) {
              var n = str.indexOf(close, index);
              if (n !== -1) {
                index = n + 1;
              }
            }
            if (str[index] === "!") {
              return true;
            }
          } else {
            index++;
          }
        }
        return false;
      };
      exports$57 = function isGlob(str, options) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        if (isExtglob(str)) {
          return true;
        }
        var check = strictCheck;
        if (options && options.strict === false) {
          check = relaxedCheck;
        }
        return check(str);
      };
      var exports$1$u = exports$57;

      var _isGlob2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$u
      });

      var exports$56 = {};
      var isGlob$1 = exports$1$u;
      var pathPosixDirname = exports$5S.posix.dirname;
      var isWin32 = exports$5Q.platform() === "win32";
      var slash = "/";
      var backslash = /\\/g;
      var enclosure = /[\{\[].*[\}\]]$/;
      var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
      var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
      exports$56 = function globParent(str, opts) {
        var options = Object.assign({ flipBackslashes: true }, opts);
        if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
          str = str.replace(backslash, slash);
        }
        if (enclosure.test(str)) {
          str += slash;
        }
        str += "a";
        do {
          str = pathPosixDirname(str);
        } while (isGlob$1(str) || globby.test(str));
        return str.replace(escaped, "$1");
      };
      var exports$1$t = exports$56;

      var _globParent2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$t
      });

      var exports$55 = {};
      exports$55 = string => {
        if (typeof string !== "string") {
          throw new TypeError("Expected a string");
        }
        return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
      };
      var exports$1$s = exports$55;

      var _escapeStringRegexp2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$s
      });

      var _fs$6 = "default" in _fs2 ? fs$b : _fs2;
      var _path$8 = "default" in _path2 ? exports$5S : _path2;
      var _globParent = "default" in _globParent2 ? exports$1$t : _globParent2;
      var _isGlob = "default" in _isGlob2 ? exports$1$u : _isGlob2;
      var _escapeStringRegexp$3 = "default" in _escapeStringRegexp2 ? exports$1$s : _escapeStringRegexp2;
      var _minimatch$3 = "default" in _minimatch2 ? exports$1$F : _minimatch2;
      var _eslintrc$2 = "default" in _eslintrc2 ? exports$1$w : _eslintrc2;
      var _debug$7 = "default" in _debug2 ? _browser : _debug2;
      var exports$54 = {};
      var process$9 = process$g;
      const fs$8 = _fs$6;
      const path$9 = _path$8;
      const getGlobParent = _globParent;
      const isGlob = _isGlob;
      const escapeRegExp$3 = _escapeStringRegexp$3;
      const {Minimatch} = _minimatch$3;
      const {
        Legacy: {IgnorePattern: IgnorePattern$1, CascadingConfigArrayFactory: CascadingConfigArrayFactory$1}
      } = _eslintrc$2;
      const debug$9 = _debug$7("eslint:file-enumerator");
      const minimatchOpts = {
        dot: true,
        matchBase: true
      };
      const dotfilesPattern = /(?:(?:^\.)|(?:[/\\]\.))[^/\\.].*/u;
      const NONE = 0;
      const IGNORED_SILENTLY = 1;
      const IGNORED = 2;
      const internalSlotsMap$2 = new WeakMap();
      function isGlobPattern(pattern) {
        return isGlob(path$9.sep === "\\" ? pattern.replace(/\\/gu, "/") : pattern);
      }
      function statSafeSync(filePath) {
        try {
          return fs$8.statSync(filePath);
        } catch (error) {
          if (error.code !== "ENOENT") {
            throw error;
          }
          return null;
        }
      }
      function readdirSafeSync(directoryPath) {
        try {
          return fs$8.readdirSync(directoryPath, { withFileTypes: true });
        } catch (error) {
          if (error.code !== "ENOENT") {
            throw error;
          }
          return [];
        }
      }
      function createExtensionRegExp(extensions) {
        if (extensions) {
          const normalizedExts = extensions.map(ext => escapeRegExp$3(ext.startsWith(".") ? ext.slice(1) : ext));
          return new RegExp(`.\\.(?:${ normalizedExts.join("|") })$`, "u");
        }
        return null;
      }
      class NoFilesFoundError extends Error {
        constructor(pattern, globDisabled) {
          super(`No files matching '${ pattern }' were found${ globDisabled ? " (glob was disabled)" : "" }.`);
          this.messageTemplate = "file-not-found";
          this.messageData = {
            pattern,
            globDisabled
          };
        }
      }
      class AllFilesIgnoredError extends Error {
        constructor(pattern) {
          super(`All files matched by '${ pattern }' are ignored.`);
          this.messageTemplate = "all-files-ignored";
          this.messageData = { pattern };
        }
      }
      class FileEnumerator$1 {
        constructor({cwd = process$9.cwd(), configArrayFactory = new CascadingConfigArrayFactory$1({
            cwd,
            eslintRecommendedPath: path$9.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../../conf/eslint-recommended.js"),
            eslintAllPath: path$9.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../../conf/eslint-all.js")
          }), extensions = null, globInputPaths = true, errorOnUnmatchedPattern = true, ignore = true} = {}) {
          internalSlotsMap$2.set(this, {
            configArrayFactory,
            cwd,
            defaultIgnores: IgnorePattern$1.createDefaultIgnore(cwd),
            extensionRegExp: createExtensionRegExp(extensions),
            globInputPaths,
            errorOnUnmatchedPattern,
            ignoreFlag: ignore
          });
        }
        isTargetPath(filePath, providedConfig) {
          const {configArrayFactory, extensionRegExp} = internalSlotsMap$2.get(this);
          if (extensionRegExp) {
            return extensionRegExp.test(filePath);
          }
          if (filePath.endsWith(".js")) {
            return true;
          }
          const config = providedConfig || configArrayFactory.getConfigArrayForFile(filePath, { ignoreNotFoundError: true });
          return config.isAdditionalTargetPath(filePath);
        }
        *iterateFiles(patternOrPatterns) {
          const {globInputPaths, errorOnUnmatchedPattern} = internalSlotsMap$2.get(this);
          const patterns = Array.isArray(patternOrPatterns) ? patternOrPatterns : [patternOrPatterns];
          debug$9("Start to iterate files: %o", patterns);
          const set = new Set();
          for (const pattern of patterns) {
            let foundRegardlessOfIgnored = false;
            let found = false;
            if (!pattern) {
              continue;
            }
            for (const {config, filePath, flag} of this._iterateFiles(pattern)) {
              foundRegardlessOfIgnored = true;
              if (flag === IGNORED_SILENTLY) {
                continue;
              }
              found = true;
              if (!set.has(filePath)) {
                set.add(filePath);
                yield {
                  config,
                  filePath,
                  ignored: flag === IGNORED
                };
              }
            }
            if (errorOnUnmatchedPattern) {
              if (!foundRegardlessOfIgnored) {
                throw new NoFilesFoundError(pattern, !globInputPaths && isGlob(pattern));
              }
              if (!found) {
                throw new AllFilesIgnoredError(pattern);
              }
            }
          }
          debug$9(`Complete iterating files: ${ JSON.stringify(patterns) }`);
        }
        _iterateFiles(pattern) {
          const {cwd, globInputPaths} = internalSlotsMap$2.get(this);
          const absolutePath = path$9.resolve(cwd, pattern);
          const isDot = dotfilesPattern.test(pattern);
          const stat = statSafeSync(absolutePath);
          if (stat && stat.isDirectory()) {
            return this._iterateFilesWithDirectory(absolutePath, isDot);
          }
          if (stat && stat.isFile()) {
            return this._iterateFilesWithFile(absolutePath);
          }
          if (globInputPaths && isGlobPattern(pattern)) {
            return this._iterateFilesWithGlob(absolutePath, isDot);
          }
          return [];
        }
        _iterateFilesWithFile(filePath) {
          debug$9(`File: ${ filePath }`);
          const {configArrayFactory} = internalSlotsMap$2.get(this);
          const config = configArrayFactory.getConfigArrayForFile(filePath);
          const ignored = this._isIgnoredFile(filePath, {
            config,
            direct: true
          });
          const flag = ignored ? IGNORED : NONE;
          return [{
              config,
              filePath,
              flag
            }];
        }
        _iterateFilesWithDirectory(directoryPath, dotfiles) {
          debug$9(`Directory: ${ directoryPath }`);
          return this._iterateFilesRecursive(directoryPath, {
            dotfiles,
            recursive: true,
            selector: null
          });
        }
        _iterateFilesWithGlob(pattern, dotfiles) {
          debug$9(`Glob: ${ pattern }`);
          const directoryPath = path$9.resolve(getGlobParent(pattern));
          const globPart = pattern.slice(directoryPath.length + 1);
          const recursive = /\*\*|\/|\\/u.test(globPart);
          const selector = new Minimatch(pattern, minimatchOpts);
          debug$9(`recursive? ${ recursive }`);
          return this._iterateFilesRecursive(directoryPath, {
            dotfiles,
            recursive,
            selector
          });
        }
        *_iterateFilesRecursive(directoryPath, options) {
          debug$9(`Enter the directory: ${ directoryPath }`);
          const {configArrayFactory} = internalSlotsMap$2.get(this);
          let config = null;
          for (const entry of readdirSafeSync(directoryPath)) {
            const filePath = path$9.join(directoryPath, entry.name);
            const fileInfo = entry.isSymbolicLink() ? statSafeSync(filePath) : entry;
            if (!fileInfo) {
              continue;
            }
            if (fileInfo.isFile()) {
              if (!config) {
                config = configArrayFactory.getConfigArrayForFile(filePath, { ignoreNotFoundError: true });
              }
              const matched = options.selector ? options.selector.match(filePath) : this.isTargetPath(filePath, config);
              if (matched) {
                const ignored = this._isIgnoredFile(filePath, {
                  ...options,
                  config
                });
                const flag = ignored ? IGNORED_SILENTLY : NONE;
                debug$9(`Yield: ${ entry.name }${ ignored ? " but ignored" : "" }`);
                yield {
                  config: configArrayFactory.getConfigArrayForFile(filePath),
                  filePath,
                  flag
                };
              } else {
                debug$9(`Didn't match: ${ entry.name }`);
              }
            } else if (options.recursive && fileInfo.isDirectory()) {
              if (!config) {
                config = configArrayFactory.getConfigArrayForFile(filePath, { ignoreNotFoundError: true });
              }
              const ignored = this._isIgnoredFile(filePath + path$9.sep, {
                ...options,
                config
              });
              if (!ignored) {
                yield* this._iterateFilesRecursive(filePath, options);
              }
            }
          }
          debug$9(`Leave the directory: ${ directoryPath }`);
        }
        _isIgnoredFile(filePath, {
          config: providedConfig,
          dotfiles = false,
          direct = false
        }) {
          const {configArrayFactory, defaultIgnores, ignoreFlag} = internalSlotsMap$2.get(this);
          if (ignoreFlag) {
            const config = providedConfig || configArrayFactory.getConfigArrayForFile(filePath, { ignoreNotFoundError: true });
            const ignores = config.extractConfig(filePath).ignores || defaultIgnores;
            return ignores(filePath, dotfiles);
          }
          return !direct && defaultIgnores(filePath, dotfiles);
        }
      }
      exports$54 = { FileEnumerator: FileEnumerator$1 };
      var _fileEnumerator = exports$54;
      exports$54.FileEnumerator;

      var _package$3 = {
        "name": "estraverse",
        "description": "ECMAScript JS AST traversal functions",
        "homepage": "https://github.com/estools/estraverse",
        "main": "estraverse.js",
        "version": "4.3.0",
        "engines": { "node": ">=4.0" },
        "maintainers": [{
            "name": "Yusuke Suzuki",
            "email": "utatane.tea@gmail.com",
            "web": "http://github.com/Constellation"
          }],
        "repository": {
          "type": "git",
          "url": "http://github.com/estools/estraverse.git"
        },
        "devDependencies": {
          "babel-preset-env": "^1.6.1",
          "babel-register": "^6.3.13",
          "chai": "^2.1.1",
          "espree": "^1.11.0",
          "gulp": "^3.8.10",
          "gulp-bump": "^0.2.2",
          "gulp-filter": "^2.0.0",
          "gulp-git": "^1.0.1",
          "gulp-tag-version": "^1.3.0",
          "jshint": "^2.5.6",
          "mocha": "^2.1.0"
        },
        "license": "BSD-2-Clause",
        "scripts": {
          "test": "npm run-script lint && npm run-script unit-test",
          "lint": "jshint estraverse.js",
          "unit-test": "mocha --compilers js:babel-register"
        }
      };
      var _global$d = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$53 = {};
      (function clone(exports) {
        var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;
        function deepCopy(obj) {
          var ret = {}, key, val;
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              val = obj[key];
              if (typeof val === "object" && val !== null) {
                ret[key] = deepCopy(val);
              } else {
                ret[key] = val;
              }
            }
          }
          return ret;
        }
        function upperBound(array, func) {
          var diff, len, i, current;
          len = array.length;
          i = 0;
          while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
              len = diff;
            } else {
              i = current + 1;
              len -= diff + 1;
            }
          }
          return i;
        }
        Syntax = {
          AssignmentExpression: "AssignmentExpression",
          AssignmentPattern: "AssignmentPattern",
          ArrayExpression: "ArrayExpression",
          ArrayPattern: "ArrayPattern",
          ArrowFunctionExpression: "ArrowFunctionExpression",
          AwaitExpression: "AwaitExpression",
          BlockStatement: "BlockStatement",
          BinaryExpression: "BinaryExpression",
          BreakStatement: "BreakStatement",
          CallExpression: "CallExpression",
          CatchClause: "CatchClause",
          ClassBody: "ClassBody",
          ClassDeclaration: "ClassDeclaration",
          ClassExpression: "ClassExpression",
          ComprehensionBlock: "ComprehensionBlock",
          ComprehensionExpression: "ComprehensionExpression",
          ConditionalExpression: "ConditionalExpression",
          ContinueStatement: "ContinueStatement",
          DebuggerStatement: "DebuggerStatement",
          DirectiveStatement: "DirectiveStatement",
          DoWhileStatement: "DoWhileStatement",
          EmptyStatement: "EmptyStatement",
          ExportAllDeclaration: "ExportAllDeclaration",
          ExportDefaultDeclaration: "ExportDefaultDeclaration",
          ExportNamedDeclaration: "ExportNamedDeclaration",
          ExportSpecifier: "ExportSpecifier",
          ExpressionStatement: "ExpressionStatement",
          ForStatement: "ForStatement",
          ForInStatement: "ForInStatement",
          ForOfStatement: "ForOfStatement",
          FunctionDeclaration: "FunctionDeclaration",
          FunctionExpression: "FunctionExpression",
          GeneratorExpression: "GeneratorExpression",
          Identifier: "Identifier",
          IfStatement: "IfStatement",
          ImportExpression: "ImportExpression",
          ImportDeclaration: "ImportDeclaration",
          ImportDefaultSpecifier: "ImportDefaultSpecifier",
          ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
          ImportSpecifier: "ImportSpecifier",
          Literal: "Literal",
          LabeledStatement: "LabeledStatement",
          LogicalExpression: "LogicalExpression",
          MemberExpression: "MemberExpression",
          MetaProperty: "MetaProperty",
          MethodDefinition: "MethodDefinition",
          ModuleSpecifier: "ModuleSpecifier",
          NewExpression: "NewExpression",
          ObjectExpression: "ObjectExpression",
          ObjectPattern: "ObjectPattern",
          Program: "Program",
          Property: "Property",
          RestElement: "RestElement",
          ReturnStatement: "ReturnStatement",
          SequenceExpression: "SequenceExpression",
          SpreadElement: "SpreadElement",
          Super: "Super",
          SwitchStatement: "SwitchStatement",
          SwitchCase: "SwitchCase",
          TaggedTemplateExpression: "TaggedTemplateExpression",
          TemplateElement: "TemplateElement",
          TemplateLiteral: "TemplateLiteral",
          ThisExpression: "ThisExpression",
          ThrowStatement: "ThrowStatement",
          TryStatement: "TryStatement",
          UnaryExpression: "UnaryExpression",
          UpdateExpression: "UpdateExpression",
          VariableDeclaration: "VariableDeclaration",
          VariableDeclarator: "VariableDeclarator",
          WhileStatement: "WhileStatement",
          WithStatement: "WithStatement",
          YieldExpression: "YieldExpression"
        };
        VisitorKeys = {
          AssignmentExpression: [
            "left",
            "right"
          ],
          AssignmentPattern: [
            "left",
            "right"
          ],
          ArrayExpression: ["elements"],
          ArrayPattern: ["elements"],
          ArrowFunctionExpression: [
            "params",
            "body"
          ],
          AwaitExpression: ["argument"],
          BlockStatement: ["body"],
          BinaryExpression: [
            "left",
            "right"
          ],
          BreakStatement: ["label"],
          CallExpression: [
            "callee",
            "arguments"
          ],
          CatchClause: [
            "param",
            "body"
          ],
          ClassBody: ["body"],
          ClassDeclaration: [
            "id",
            "superClass",
            "body"
          ],
          ClassExpression: [
            "id",
            "superClass",
            "body"
          ],
          ComprehensionBlock: [
            "left",
            "right"
          ],
          ComprehensionExpression: [
            "blocks",
            "filter",
            "body"
          ],
          ConditionalExpression: [
            "test",
            "consequent",
            "alternate"
          ],
          ContinueStatement: ["label"],
          DebuggerStatement: [],
          DirectiveStatement: [],
          DoWhileStatement: [
            "body",
            "test"
          ],
          EmptyStatement: [],
          ExportAllDeclaration: ["source"],
          ExportDefaultDeclaration: ["declaration"],
          ExportNamedDeclaration: [
            "declaration",
            "specifiers",
            "source"
          ],
          ExportSpecifier: [
            "exported",
            "local"
          ],
          ExpressionStatement: ["expression"],
          ForStatement: [
            "init",
            "test",
            "update",
            "body"
          ],
          ForInStatement: [
            "left",
            "right",
            "body"
          ],
          ForOfStatement: [
            "left",
            "right",
            "body"
          ],
          FunctionDeclaration: [
            "id",
            "params",
            "body"
          ],
          FunctionExpression: [
            "id",
            "params",
            "body"
          ],
          GeneratorExpression: [
            "blocks",
            "filter",
            "body"
          ],
          Identifier: [],
          IfStatement: [
            "test",
            "consequent",
            "alternate"
          ],
          ImportExpression: ["source"],
          ImportDeclaration: [
            "specifiers",
            "source"
          ],
          ImportDefaultSpecifier: ["local"],
          ImportNamespaceSpecifier: ["local"],
          ImportSpecifier: [
            "imported",
            "local"
          ],
          Literal: [],
          LabeledStatement: [
            "label",
            "body"
          ],
          LogicalExpression: [
            "left",
            "right"
          ],
          MemberExpression: [
            "object",
            "property"
          ],
          MetaProperty: [
            "meta",
            "property"
          ],
          MethodDefinition: [
            "key",
            "value"
          ],
          ModuleSpecifier: [],
          NewExpression: [
            "callee",
            "arguments"
          ],
          ObjectExpression: ["properties"],
          ObjectPattern: ["properties"],
          Program: ["body"],
          Property: [
            "key",
            "value"
          ],
          RestElement: ["argument"],
          ReturnStatement: ["argument"],
          SequenceExpression: ["expressions"],
          SpreadElement: ["argument"],
          Super: [],
          SwitchStatement: [
            "discriminant",
            "cases"
          ],
          SwitchCase: [
            "test",
            "consequent"
          ],
          TaggedTemplateExpression: [
            "tag",
            "quasi"
          ],
          TemplateElement: [],
          TemplateLiteral: [
            "quasis",
            "expressions"
          ],
          ThisExpression: [],
          ThrowStatement: ["argument"],
          TryStatement: [
            "block",
            "handler",
            "finalizer"
          ],
          UnaryExpression: ["argument"],
          UpdateExpression: ["argument"],
          VariableDeclaration: ["declarations"],
          VariableDeclarator: [
            "id",
            "init"
          ],
          WhileStatement: [
            "test",
            "body"
          ],
          WithStatement: [
            "object",
            "body"
          ],
          YieldExpression: ["argument"]
        };
        BREAK = {};
        SKIP = {};
        REMOVE = {};
        VisitorOption = {
          Break: BREAK,
          Skip: SKIP,
          Remove: REMOVE
        };
        function Reference(parent, key) {
          (this || _global$d).parent = parent;
          (this || _global$d).key = key;
        }
        Reference.prototype.replace = function replace(node) {
          (this || _global$d).parent[(this || _global$d).key] = node;
        };
        Reference.prototype.remove = function remove() {
          if (Array.isArray((this || _global$d).parent)) {
            (this || _global$d).parent.splice((this || _global$d).key, 1);
            return true;
          } else {
            this.replace(null);
            return false;
          }
        };
        function Element(node, path, wrap, ref) {
          (this || _global$d).node = node;
          (this || _global$d).path = path;
          (this || _global$d).wrap = wrap;
          (this || _global$d).ref = ref;
        }
        function Controller() {
        }
        Controller.prototype.path = function path() {
          var i, iz, j, jz, result, element;
          function addToPath(result, path) {
            if (Array.isArray(path)) {
              for (j = 0, jz = path.length; j < jz; ++j) {
                result.push(path[j]);
              }
            } else {
              result.push(path);
            }
          }
          if (!(this || _global$d).__current.path) {
            return null;
          }
          result = [];
          for (i = 2, iz = (this || _global$d).__leavelist.length; i < iz; ++i) {
            element = (this || _global$d).__leavelist[i];
            addToPath(result, element.path);
          }
          addToPath(result, (this || _global$d).__current.path);
          return result;
        };
        Controller.prototype.type = function () {
          var node = this.current();
          return node.type || (this || _global$d).__current.wrap;
        };
        Controller.prototype.parents = function parents() {
          var i, iz, result;
          result = [];
          for (i = 1, iz = (this || _global$d).__leavelist.length; i < iz; ++i) {
            result.push((this || _global$d).__leavelist[i].node);
          }
          return result;
        };
        Controller.prototype.current = function current() {
          return (this || _global$d).__current.node;
        };
        Controller.prototype.__execute = function __execute(callback, element) {
          var previous, result;
          result = undefined;
          previous = (this || _global$d).__current;
          (this || _global$d).__current = element;
          (this || _global$d).__state = null;
          if (callback) {
            result = callback.call(this || _global$d, element.node, (this || _global$d).__leavelist[(this || _global$d).__leavelist.length - 1].node);
          }
          (this || _global$d).__current = previous;
          return result;
        };
        Controller.prototype.notify = function notify(flag) {
          (this || _global$d).__state = flag;
        };
        Controller.prototype.skip = function () {
          this.notify(SKIP);
        };
        Controller.prototype["break"] = function () {
          this.notify(BREAK);
        };
        Controller.prototype.remove = function () {
          this.notify(REMOVE);
        };
        Controller.prototype.__initialize = function (root, visitor) {
          (this || _global$d).visitor = visitor;
          (this || _global$d).root = root;
          (this || _global$d).__worklist = [];
          (this || _global$d).__leavelist = [];
          (this || _global$d).__current = null;
          (this || _global$d).__state = null;
          (this || _global$d).__fallback = null;
          if (visitor.fallback === "iteration") {
            (this || _global$d).__fallback = Object.keys;
          } else if (typeof visitor.fallback === "function") {
            (this || _global$d).__fallback = visitor.fallback;
          }
          (this || _global$d).__keys = VisitorKeys;
          if (visitor.keys) {
            (this || _global$d).__keys = Object.assign(Object.create((this || _global$d).__keys), visitor.keys);
          }
        };
        function isNode(node) {
          if (node == null) {
            return false;
          }
          return typeof node === "object" && typeof node.type === "string";
        }
        function isProperty(nodeType, key) {
          return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && "properties" === key;
        }
        Controller.prototype.traverse = function traverse(root, visitor) {
          var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
          this.__initialize(root, visitor);
          sentinel = {};
          worklist = (this || _global$d).__worklist;
          leavelist = (this || _global$d).__leavelist;
          worklist.push(new Element(root, null, null, null));
          leavelist.push(new Element(null, null, null, null));
          while (worklist.length) {
            element = worklist.pop();
            if (element === sentinel) {
              element = leavelist.pop();
              ret = this.__execute(visitor.leave, element);
              if ((this || _global$d).__state === BREAK || ret === BREAK) {
                return;
              }
              continue;
            }
            if (element.node) {
              ret = this.__execute(visitor.enter, element);
              if ((this || _global$d).__state === BREAK || ret === BREAK) {
                return;
              }
              worklist.push(sentinel);
              leavelist.push(element);
              if ((this || _global$d).__state === SKIP || ret === SKIP) {
                continue;
              }
              node = element.node;
              nodeType = node.type || element.wrap;
              candidates = (this || _global$d).__keys[nodeType];
              if (!candidates) {
                if ((this || _global$d).__fallback) {
                  candidates = this.__fallback(node);
                } else {
                  throw new Error("Unknown node type " + nodeType + ".");
                }
              }
              current = candidates.length;
              while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                  continue;
                }
                if (Array.isArray(candidate)) {
                  current2 = candidate.length;
                  while ((current2 -= 1) >= 0) {
                    if (!candidate[current2]) {
                      continue;
                    }
                    if (isProperty(nodeType, candidates[current])) {
                      element = new Element(candidate[current2], [
                        key,
                        current2
                      ], "Property", null);
                    } else if (isNode(candidate[current2])) {
                      element = new Element(candidate[current2], [
                        key,
                        current2
                      ], null, null);
                    } else {
                      continue;
                    }
                    worklist.push(element);
                  }
                } else if (isNode(candidate)) {
                  worklist.push(new Element(candidate, key, null, null));
                }
              }
            }
          }
        };
        Controller.prototype.replace = function replace(root, visitor) {
          var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
          function removeElem(element) {
            var i, key, nextElem, parent;
            if (element.ref.remove()) {
              key = element.ref.key;
              parent = element.ref.parent;
              i = worklist.length;
              while (i--) {
                nextElem = worklist[i];
                if (nextElem.ref && nextElem.ref.parent === parent) {
                  if (nextElem.ref.key < key) {
                    break;
                  }
                  --nextElem.ref.key;
                }
              }
            }
          }
          this.__initialize(root, visitor);
          sentinel = {};
          worklist = (this || _global$d).__worklist;
          leavelist = (this || _global$d).__leavelist;
          outer = { root: root };
          element = new Element(root, null, null, new Reference(outer, "root"));
          worklist.push(element);
          leavelist.push(element);
          while (worklist.length) {
            element = worklist.pop();
            if (element === sentinel) {
              element = leavelist.pop();
              target = this.__execute(visitor.leave, element);
              if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                element.ref.replace(target);
              }
              if ((this || _global$d).__state === REMOVE || target === REMOVE) {
                removeElem(element);
              }
              if ((this || _global$d).__state === BREAK || target === BREAK) {
                return outer.root;
              }
              continue;
            }
            target = this.__execute(visitor.enter, element);
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
              element.ref.replace(target);
              element.node = target;
            }
            if ((this || _global$d).__state === REMOVE || target === REMOVE) {
              removeElem(element);
              element.node = null;
            }
            if ((this || _global$d).__state === BREAK || target === BREAK) {
              return outer.root;
            }
            node = element.node;
            if (!node) {
              continue;
            }
            worklist.push(sentinel);
            leavelist.push(element);
            if ((this || _global$d).__state === SKIP || target === SKIP) {
              continue;
            }
            nodeType = node.type || element.wrap;
            candidates = (this || _global$d).__keys[nodeType];
            if (!candidates) {
              if ((this || _global$d).__fallback) {
                candidates = this.__fallback(node);
              } else {
                throw new Error("Unknown node type " + nodeType + ".");
              }
            }
            current = candidates.length;
            while ((current -= 1) >= 0) {
              key = candidates[current];
              candidate = node[key];
              if (!candidate) {
                continue;
              }
              if (Array.isArray(candidate)) {
                current2 = candidate.length;
                while ((current2 -= 1) >= 0) {
                  if (!candidate[current2]) {
                    continue;
                  }
                  if (isProperty(nodeType, candidates[current])) {
                    element = new Element(candidate[current2], [
                      key,
                      current2
                    ], "Property", new Reference(candidate, current2));
                  } else if (isNode(candidate[current2])) {
                    element = new Element(candidate[current2], [
                      key,
                      current2
                    ], null, new Reference(candidate, current2));
                  } else {
                    continue;
                  }
                  worklist.push(element);
                }
              } else if (isNode(candidate)) {
                worklist.push(new Element(candidate, key, null, new Reference(node, key)));
              }
            }
          }
          return outer.root;
        };
        function traverse(root, visitor) {
          var controller = new Controller();
          return controller.traverse(root, visitor);
        }
        function replace(root, visitor) {
          var controller = new Controller();
          return controller.replace(root, visitor);
        }
        function extendCommentRange(comment, tokens) {
          var target;
          target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
          });
          comment.extendedRange = [
            comment.range[0],
            comment.range[1]
          ];
          if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
          }
          target -= 1;
          if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
          }
          return comment;
        }
        function attachComments(tree, providedComments, tokens) {
          var comments = [], comment, len, i, cursor;
          if (!tree.range) {
            throw new Error("attachComments needs range information");
          }
          if (!tokens.length) {
            if (providedComments.length) {
              for (i = 0, len = providedComments.length; i < len; i += 1) {
                comment = deepCopy(providedComments[i]);
                comment.extendedRange = [
                  0,
                  tree.range[0]
                ];
                comments.push(comment);
              }
              tree.leadingComments = comments;
            }
            return tree;
          }
          for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
          }
          cursor = 0;
          traverse(tree, {
            enter: function (node) {
              var comment;
              while (cursor < comments.length) {
                comment = comments[cursor];
                if (comment.extendedRange[1] > node.range[0]) {
                  break;
                }
                if (comment.extendedRange[1] === node.range[0]) {
                  if (!node.leadingComments) {
                    node.leadingComments = [];
                  }
                  node.leadingComments.push(comment);
                  comments.splice(cursor, 1);
                } else {
                  cursor += 1;
                }
              }
              if (cursor === comments.length) {
                return VisitorOption.Break;
              }
              if (comments[cursor].extendedRange[0] > node.range[1]) {
                return VisitorOption.Skip;
              }
            }
          });
          cursor = 0;
          traverse(tree, {
            leave: function (node) {
              var comment;
              while (cursor < comments.length) {
                comment = comments[cursor];
                if (node.range[1] < comment.extendedRange[0]) {
                  break;
                }
                if (node.range[1] === comment.extendedRange[0]) {
                  if (!node.trailingComments) {
                    node.trailingComments = [];
                  }
                  node.trailingComments.push(comment);
                  comments.splice(cursor, 1);
                } else {
                  cursor += 1;
                }
              }
              if (cursor === comments.length) {
                return VisitorOption.Break;
              }
              if (comments[cursor].extendedRange[0] > node.range[1]) {
                return VisitorOption.Skip;
              }
            }
          });
          return tree;
        }
        exports.version = _package$3.version;
        exports.Syntax = Syntax;
        exports.traverse = traverse;
        exports.replace = replace;
        exports.attachComments = attachComments;
        exports.VisitorKeys = VisitorKeys;
        exports.VisitorOption = VisitorOption;
        exports.Controller = Controller;
        exports.cloneEnvironment = function () {
          return clone({});
        };
        return exports;
      }(exports$53));
      exports$53.version; exports$53.Syntax; exports$53.traverse; exports$53.replace; exports$53.attachComments; exports$53.VisitorKeys; exports$53.VisitorOption; exports$53.Controller; exports$53.cloneEnvironment;

      var exports$52 = {};
      const READ$1 = 1;
      const WRITE = 2;
      const RW = READ$1 | WRITE;
      class Reference$3 {
        constructor(ident, scope, flag, writeExpr, maybeImplicitGlobal, partial, init) {
          this.identifier = ident;
          this.from = scope;
          this.tainted = false;
          this.resolved = null;
          this.flag = flag;
          if (this.isWrite()) {
            this.writeExpr = writeExpr;
            this.partial = partial;
            this.init = init;
          }
          this.__maybeImplicitGlobal = maybeImplicitGlobal;
        }
        isStatic() {
          return !this.tainted && this.resolved && this.resolved.scope.isStatic();
        }
        isWrite() {
          return !!(this.flag & Reference$3.WRITE);
        }
        isRead() {
          return !!(this.flag & Reference$3.READ);
        }
        isReadOnly() {
          return this.flag === Reference$3.READ;
        }
        isWriteOnly() {
          return this.flag === Reference$3.WRITE;
        }
        isReadWrite() {
          return this.flag === Reference$3.RW;
        }
      }
      Reference$3.READ = READ$1;
      Reference$3.WRITE = WRITE;
      Reference$3.RW = RW;
      exports$52 = Reference$3;
      var _reference = exports$52;

      var exports$51 = {};
      class Variable$4 {
        constructor(name, scope) {
          this.name = name;
          this.identifiers = [];
          this.references = [];
          this.defs = [];
          this.tainted = false;
          this.stack = true;
          this.scope = scope;
        }
      }
      Variable$4.CatchClause = "CatchClause";
      Variable$4.Parameter = "Parameter";
      Variable$4.FunctionName = "FunctionName";
      Variable$4.ClassName = "ClassName";
      Variable$4.Variable = "Variable";
      Variable$4.ImportBinding = "ImportBinding";
      Variable$4.ImplicitGlobalVariable = "ImplicitGlobalVariable";
      exports$51 = Variable$4;
      var _variable = exports$51;

      var exports$50 = {};
      const Variable$3 = _variable;
      class Definition$2 {
        constructor(type, name, node, parent, index, kind) {
          this.type = type;
          this.name = name;
          this.node = node;
          this.parent = parent;
          this.index = index;
          this.kind = kind;
        }
      }
      class ParameterDefinition$1 extends Definition$2 {
        constructor(name, node, index, rest) {
          super(Variable$3.Parameter, name, node, null, index, null);
          this.rest = rest;
        }
      }
      exports$50 = {
        ParameterDefinition: ParameterDefinition$1,
        Definition: Definition$2
      };
      var _definition = exports$50;
      exports$50.ParameterDefinition; exports$50.Definition;

      var exports$4$ = {};
      const Syntax$3 = exports$53.Syntax;
      const Reference$2 = _reference;
      const Variable$2 = _variable;
      const Definition$1 = _definition.Definition;
      const assert$a = et;
      function isStrictScope(scope, block, isMethodDefinition, useDirective) {
        let body;
        if (scope.upper && scope.upper.isStrict) {
          return true;
        }
        if (isMethodDefinition) {
          return true;
        }
        if (scope.type === "class" || scope.type === "module") {
          return true;
        }
        if (scope.type === "block" || scope.type === "switch") {
          return false;
        }
        if (scope.type === "function") {
          if (block.type === Syntax$3.ArrowFunctionExpression && block.body.type !== Syntax$3.BlockStatement) {
            return false;
          }
          if (block.type === Syntax$3.Program) {
            body = block;
          } else {
            body = block.body;
          }
          if (!body) {
            return false;
          }
        } else if (scope.type === "global") {
          body = block;
        } else {
          return false;
        }
        if (useDirective) {
          for (let i = 0, iz = body.body.length; i < iz; ++i) {
            const stmt = body.body[i];
            if (stmt.type !== Syntax$3.DirectiveStatement) {
              break;
            }
            if (stmt.raw === "\"use strict\"" || stmt.raw === "'use strict'") {
              return true;
            }
          }
        } else {
          for (let i = 0, iz = body.body.length; i < iz; ++i) {
            const stmt = body.body[i];
            if (stmt.type !== Syntax$3.ExpressionStatement) {
              break;
            }
            const expr = stmt.expression;
            if (expr.type !== Syntax$3.Literal || typeof expr.value !== "string") {
              break;
            }
            if (expr.raw !== null && expr.raw !== undefined) {
              if (expr.raw === "\"use strict\"" || expr.raw === "'use strict'") {
                return true;
              }
            } else {
              if (expr.value === "use strict") {
                return true;
              }
            }
          }
        }
        return false;
      }
      function registerScope(scopeManager, scope) {
        scopeManager.scopes.push(scope);
        const scopes = scopeManager.__nodeToScope.get(scope.block);
        if (scopes) {
          scopes.push(scope);
        } else {
          scopeManager.__nodeToScope.set(scope.block, [scope]);
        }
      }
      function shouldBeStatically(def) {
        return def.type === Variable$2.ClassName || def.type === Variable$2.Variable && def.parent.kind !== "var";
      }
      class Scope$2 {
        constructor(scopeManager, type, upperScope, block, isMethodDefinition) {
          this.type = type;
          this.set = new Map();
          this.taints = new Map();
          this.dynamic = this.type === "global" || this.type === "with";
          this.block = block;
          this.through = [];
          this.variables = [];
          this.references = [];
          this.variableScope = this.type === "global" || this.type === "function" || this.type === "module" ? this : upperScope.variableScope;
          this.functionExpressionScope = false;
          this.directCallToEvalScope = false;
          this.thisFound = false;
          this.__left = [];
          this.upper = upperScope;
          this.isStrict = isStrictScope(this, block, isMethodDefinition, scopeManager.__useDirective());
          this.childScopes = [];
          if (this.upper) {
            this.upper.childScopes.push(this);
          }
          this.__declaredVariables = scopeManager.__declaredVariables;
          registerScope(scopeManager, this);
        }
        __shouldStaticallyClose(scopeManager) {
          return !this.dynamic || scopeManager.__isOptimistic();
        }
        __shouldStaticallyCloseForGlobal(ref) {
          const name = ref.identifier.name;
          if (!this.set.has(name)) {
            return false;
          }
          const variable = this.set.get(name);
          const defs = variable.defs;
          return defs.length > 0 && defs.every(shouldBeStatically);
        }
        __staticCloseRef(ref) {
          if (!this.__resolve(ref)) {
            this.__delegateToUpperScope(ref);
          }
        }
        __dynamicCloseRef(ref) {
          let current = this;
          do {
            current.through.push(ref);
            current = current.upper;
          } while (current);
        }
        __globalCloseRef(ref) {
          if (this.__shouldStaticallyCloseForGlobal(ref)) {
            this.__staticCloseRef(ref);
          } else {
            this.__dynamicCloseRef(ref);
          }
        }
        __close(scopeManager) {
          let closeRef;
          if (this.__shouldStaticallyClose(scopeManager)) {
            closeRef = this.__staticCloseRef;
          } else if (this.type !== "global") {
            closeRef = this.__dynamicCloseRef;
          } else {
            closeRef = this.__globalCloseRef;
          }
          for (let i = 0, iz = this.__left.length; i < iz; ++i) {
            const ref = this.__left[i];
            closeRef.call(this, ref);
          }
          this.__left = null;
          return this.upper;
        }
        __isValidResolution(ref, variable) {
          return true;
        }
        __resolve(ref) {
          const name = ref.identifier.name;
          if (!this.set.has(name)) {
            return false;
          }
          const variable = this.set.get(name);
          if (!this.__isValidResolution(ref, variable)) {
            return false;
          }
          variable.references.push(ref);
          variable.stack = variable.stack && ref.from.variableScope === this.variableScope;
          if (ref.tainted) {
            variable.tainted = true;
            this.taints.set(variable.name, true);
          }
          ref.resolved = variable;
          return true;
        }
        __delegateToUpperScope(ref) {
          if (this.upper) {
            this.upper.__left.push(ref);
          }
          this.through.push(ref);
        }
        __addDeclaredVariablesOfNode(variable, node) {
          if (node === null || node === undefined) {
            return;
          }
          let variables = this.__declaredVariables.get(node);
          if (variables === null || variables === undefined) {
            variables = [];
            this.__declaredVariables.set(node, variables);
          }
          if (variables.indexOf(variable) === -1) {
            variables.push(variable);
          }
        }
        __defineGeneric(name, set, variables, node, def) {
          let variable;
          variable = set.get(name);
          if (!variable) {
            variable = new Variable$2(name, this);
            set.set(name, variable);
            variables.push(variable);
          }
          if (def) {
            variable.defs.push(def);
            this.__addDeclaredVariablesOfNode(variable, def.node);
            this.__addDeclaredVariablesOfNode(variable, def.parent);
          }
          if (node) {
            variable.identifiers.push(node);
          }
        }
        __define(node, def) {
          if (node && node.type === Syntax$3.Identifier) {
            this.__defineGeneric(node.name, this.set, this.variables, node, def);
          }
        }
        __referencing(node, assign, writeExpr, maybeImplicitGlobal, partial, init) {
          if (!node || node.type !== Syntax$3.Identifier) {
            return;
          }
          if (node.name === "super") {
            return;
          }
          const ref = new Reference$2(node, this, assign || Reference$2.READ, writeExpr, maybeImplicitGlobal, !!partial, !!init);
          this.references.push(ref);
          this.__left.push(ref);
        }
        __detectEval() {
          let current = this;
          this.directCallToEvalScope = true;
          do {
            current.dynamic = true;
            current = current.upper;
          } while (current);
        }
        __detectThis() {
          this.thisFound = true;
        }
        __isClosed() {
          return this.__left === null;
        }
        resolve(ident) {
          let ref, i, iz;
          assert$a(this.__isClosed(), "Scope should be closed.");
          assert$a(ident.type === Syntax$3.Identifier, "Target should be identifier.");
          for (i = 0, iz = this.references.length; i < iz; ++i) {
            ref = this.references[i];
            if (ref.identifier === ident) {
              return ref;
            }
          }
          return null;
        }
        isStatic() {
          return !this.dynamic;
        }
        isArgumentsMaterialized() {
          return true;
        }
        isThisMaterialized() {
          return true;
        }
        isUsedName(name) {
          if (this.set.has(name)) {
            return true;
          }
          for (let i = 0, iz = this.through.length; i < iz; ++i) {
            if (this.through[i].identifier.name === name) {
              return true;
            }
          }
          return false;
        }
      }
      class GlobalScope$1 extends Scope$2 {
        constructor(scopeManager, block) {
          super(scopeManager, "global", null, block, false);
          this.implicit = {
            set: new Map(),
            variables: [],
            left: []
          };
        }
        __close(scopeManager) {
          const implicit = [];
          for (let i = 0, iz = this.__left.length; i < iz; ++i) {
            const ref = this.__left[i];
            if (ref.__maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {
              implicit.push(ref.__maybeImplicitGlobal);
            }
          }
          for (let i = 0, iz = implicit.length; i < iz; ++i) {
            const info = implicit[i];
            this.__defineImplicit(info.pattern, new Definition$1(Variable$2.ImplicitGlobalVariable, info.pattern, info.node, null, null, null));
          }
          this.implicit.left = this.__left;
          return super.__close(scopeManager);
        }
        __defineImplicit(node, def) {
          if (node && node.type === Syntax$3.Identifier) {
            this.__defineGeneric(node.name, this.implicit.set, this.implicit.variables, node, def);
          }
        }
      }
      class ModuleScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "module", upperScope, block, false);
        }
      }
      class FunctionExpressionNameScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "function-expression-name", upperScope, block, false);
          this.__define(block.id, new Definition$1(Variable$2.FunctionName, block.id, block, null, null, null));
          this.functionExpressionScope = true;
        }
      }
      class CatchScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "catch", upperScope, block, false);
        }
      }
      class WithScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "with", upperScope, block, false);
        }
        __close(scopeManager) {
          if (this.__shouldStaticallyClose(scopeManager)) {
            return super.__close(scopeManager);
          }
          for (let i = 0, iz = this.__left.length; i < iz; ++i) {
            const ref = this.__left[i];
            ref.tainted = true;
            this.__delegateToUpperScope(ref);
          }
          this.__left = null;
          return this.upper;
        }
      }
      class BlockScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "block", upperScope, block, false);
        }
      }
      class SwitchScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "switch", upperScope, block, false);
        }
      }
      class FunctionScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block, isMethodDefinition) {
          super(scopeManager, "function", upperScope, block, isMethodDefinition);
          if (this.block.type !== Syntax$3.ArrowFunctionExpression) {
            this.__defineArguments();
          }
        }
        isArgumentsMaterialized() {
          if (this.block.type === Syntax$3.ArrowFunctionExpression) {
            return false;
          }
          if (!this.isStatic()) {
            return true;
          }
          const variable = this.set.get("arguments");
          assert$a(variable, "Always have arguments variable.");
          return variable.tainted || variable.references.length !== 0;
        }
        isThisMaterialized() {
          if (!this.isStatic()) {
            return true;
          }
          return this.thisFound;
        }
        __defineArguments() {
          this.__defineGeneric("arguments", this.set, this.variables, null, null);
          this.taints.set("arguments", true);
        }
        __isValidResolution(ref, variable) {
          if (this.block.type === "Program") {
            return true;
          }
          const bodyStart = this.block.body.range[0];
          return !(variable.scope === this && ref.identifier.range[0] < bodyStart && variable.defs.every(d => d.name.range[0] >= bodyStart));
        }
      }
      class ForScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "for", upperScope, block, false);
        }
      }
      class ClassScope$1 extends Scope$2 {
        constructor(scopeManager, upperScope, block) {
          super(scopeManager, "class", upperScope, block, false);
        }
      }
      exports$4$ = {
        Scope: Scope$2,
        GlobalScope: GlobalScope$1,
        ModuleScope: ModuleScope$1,
        FunctionExpressionNameScope: FunctionExpressionNameScope$1,
        CatchScope: CatchScope$1,
        WithScope: WithScope$1,
        BlockScope: BlockScope$1,
        SwitchScope: SwitchScope$1,
        FunctionScope: FunctionScope$1,
        ForScope: ForScope$1,
        ClassScope: ClassScope$1
      };
      var _scope = exports$4$;
      exports$4$.Scope; exports$4$.GlobalScope; exports$4$.ModuleScope; exports$4$.FunctionExpressionNameScope; exports$4$.CatchScope; exports$4$.WithScope; exports$4$.BlockScope; exports$4$.SwitchScope; exports$4$.FunctionScope; exports$4$.ForScope; exports$4$.ClassScope;

      var exports$4_ = {};
      const Scope$1 = _scope;
      const assert$9 = et;
      const GlobalScope = Scope$1.GlobalScope;
      const CatchScope = Scope$1.CatchScope;
      const WithScope = Scope$1.WithScope;
      const ModuleScope = Scope$1.ModuleScope;
      const ClassScope = Scope$1.ClassScope;
      const SwitchScope = Scope$1.SwitchScope;
      const FunctionScope = Scope$1.FunctionScope;
      const ForScope = Scope$1.ForScope;
      const FunctionExpressionNameScope = Scope$1.FunctionExpressionNameScope;
      const BlockScope = Scope$1.BlockScope;
      class ScopeManager$1 {
        constructor(options) {
          this.scopes = [];
          this.globalScope = null;
          this.__nodeToScope = new WeakMap();
          this.__currentScope = null;
          this.__options = options;
          this.__declaredVariables = new WeakMap();
        }
        __useDirective() {
          return this.__options.directive;
        }
        __isOptimistic() {
          return this.__options.optimistic;
        }
        __ignoreEval() {
          return this.__options.ignoreEval;
        }
        __isNodejsScope() {
          return this.__options.nodejsScope;
        }
        isModule() {
          return this.__options.sourceType === "module";
        }
        isImpliedStrict() {
          return this.__options.impliedStrict;
        }
        isStrictModeSupported() {
          return this.__options.ecmaVersion >= 5;
        }
        __get(node) {
          return this.__nodeToScope.get(node);
        }
        getDeclaredVariables(node) {
          return this.__declaredVariables.get(node) || [];
        }
        acquire(node, inner) {
          function predicate(testScope) {
            if (testScope.type === "function" && testScope.functionExpressionScope) {
              return false;
            }
            return true;
          }
          const scopes = this.__get(node);
          if (!scopes || scopes.length === 0) {
            return null;
          }
          if (scopes.length === 1) {
            return scopes[0];
          }
          if (inner) {
            for (let i = scopes.length - 1; i >= 0; --i) {
              const scope = scopes[i];
              if (predicate(scope)) {
                return scope;
              }
            }
          } else {
            for (let i = 0, iz = scopes.length; i < iz; ++i) {
              const scope = scopes[i];
              if (predicate(scope)) {
                return scope;
              }
            }
          }
          return null;
        }
        acquireAll(node) {
          return this.__get(node);
        }
        release(node, inner) {
          const scopes = this.__get(node);
          if (scopes && scopes.length) {
            const scope = scopes[0].upper;
            if (!scope) {
              return null;
            }
            return this.acquire(scope.block, inner);
          }
          return null;
        }
        attach() {
        }
        detach() {
        }
        __nestScope(scope) {
          if (scope instanceof GlobalScope) {
            assert$9(this.__currentScope === null);
            this.globalScope = scope;
          }
          this.__currentScope = scope;
          return scope;
        }
        __nestGlobalScope(node) {
          return this.__nestScope(new GlobalScope(this, node));
        }
        __nestBlockScope(node) {
          return this.__nestScope(new BlockScope(this, this.__currentScope, node));
        }
        __nestFunctionScope(node, isMethodDefinition) {
          return this.__nestScope(new FunctionScope(this, this.__currentScope, node, isMethodDefinition));
        }
        __nestForScope(node) {
          return this.__nestScope(new ForScope(this, this.__currentScope, node));
        }
        __nestCatchScope(node) {
          return this.__nestScope(new CatchScope(this, this.__currentScope, node));
        }
        __nestWithScope(node) {
          return this.__nestScope(new WithScope(this, this.__currentScope, node));
        }
        __nestClassScope(node) {
          return this.__nestScope(new ClassScope(this, this.__currentScope, node));
        }
        __nestSwitchScope(node) {
          return this.__nestScope(new SwitchScope(this, this.__currentScope, node));
        }
        __nestModuleScope(node) {
          return this.__nestScope(new ModuleScope(this, this.__currentScope, node));
        }
        __nestFunctionExpressionNameScope(node) {
          return this.__nestScope(new FunctionExpressionNameScope(this, this.__currentScope, node));
        }
        __isES6() {
          return this.__options.ecmaVersion >= 6;
        }
      }
      exports$4_ = ScopeManager$1;
      var _scopeManager = exports$4_;

      var _global$c = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$4Z = {};
      (function clone(exports) {
        var Syntax, VisitorOption, VisitorKeys, BREAK, SKIP, REMOVE;
        function deepCopy(obj) {
          var ret = {}, key, val;
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              val = obj[key];
              if (typeof val === "object" && val !== null) {
                ret[key] = deepCopy(val);
              } else {
                ret[key] = val;
              }
            }
          }
          return ret;
        }
        function upperBound(array, func) {
          var diff, len, i, current;
          len = array.length;
          i = 0;
          while (len) {
            diff = len >>> 1;
            current = i + diff;
            if (func(array[current])) {
              len = diff;
            } else {
              i = current + 1;
              len -= diff + 1;
            }
          }
          return i;
        }
        Syntax = {
          AssignmentExpression: "AssignmentExpression",
          AssignmentPattern: "AssignmentPattern",
          ArrayExpression: "ArrayExpression",
          ArrayPattern: "ArrayPattern",
          ArrowFunctionExpression: "ArrowFunctionExpression",
          AwaitExpression: "AwaitExpression",
          BlockStatement: "BlockStatement",
          BinaryExpression: "BinaryExpression",
          BreakStatement: "BreakStatement",
          CallExpression: "CallExpression",
          CatchClause: "CatchClause",
          ChainExpression: "ChainExpression",
          ClassBody: "ClassBody",
          ClassDeclaration: "ClassDeclaration",
          ClassExpression: "ClassExpression",
          ComprehensionBlock: "ComprehensionBlock",
          ComprehensionExpression: "ComprehensionExpression",
          ConditionalExpression: "ConditionalExpression",
          ContinueStatement: "ContinueStatement",
          DebuggerStatement: "DebuggerStatement",
          DirectiveStatement: "DirectiveStatement",
          DoWhileStatement: "DoWhileStatement",
          EmptyStatement: "EmptyStatement",
          ExportAllDeclaration: "ExportAllDeclaration",
          ExportDefaultDeclaration: "ExportDefaultDeclaration",
          ExportNamedDeclaration: "ExportNamedDeclaration",
          ExportSpecifier: "ExportSpecifier",
          ExpressionStatement: "ExpressionStatement",
          ForStatement: "ForStatement",
          ForInStatement: "ForInStatement",
          ForOfStatement: "ForOfStatement",
          FunctionDeclaration: "FunctionDeclaration",
          FunctionExpression: "FunctionExpression",
          GeneratorExpression: "GeneratorExpression",
          Identifier: "Identifier",
          IfStatement: "IfStatement",
          ImportExpression: "ImportExpression",
          ImportDeclaration: "ImportDeclaration",
          ImportDefaultSpecifier: "ImportDefaultSpecifier",
          ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
          ImportSpecifier: "ImportSpecifier",
          Literal: "Literal",
          LabeledStatement: "LabeledStatement",
          LogicalExpression: "LogicalExpression",
          MemberExpression: "MemberExpression",
          MetaProperty: "MetaProperty",
          MethodDefinition: "MethodDefinition",
          ModuleSpecifier: "ModuleSpecifier",
          NewExpression: "NewExpression",
          ObjectExpression: "ObjectExpression",
          ObjectPattern: "ObjectPattern",
          PrivateIdentifier: "PrivateIdentifier",
          Program: "Program",
          Property: "Property",
          PropertyDefinition: "PropertyDefinition",
          RestElement: "RestElement",
          ReturnStatement: "ReturnStatement",
          SequenceExpression: "SequenceExpression",
          SpreadElement: "SpreadElement",
          Super: "Super",
          SwitchStatement: "SwitchStatement",
          SwitchCase: "SwitchCase",
          TaggedTemplateExpression: "TaggedTemplateExpression",
          TemplateElement: "TemplateElement",
          TemplateLiteral: "TemplateLiteral",
          ThisExpression: "ThisExpression",
          ThrowStatement: "ThrowStatement",
          TryStatement: "TryStatement",
          UnaryExpression: "UnaryExpression",
          UpdateExpression: "UpdateExpression",
          VariableDeclaration: "VariableDeclaration",
          VariableDeclarator: "VariableDeclarator",
          WhileStatement: "WhileStatement",
          WithStatement: "WithStatement",
          YieldExpression: "YieldExpression"
        };
        VisitorKeys = {
          AssignmentExpression: [
            "left",
            "right"
          ],
          AssignmentPattern: [
            "left",
            "right"
          ],
          ArrayExpression: ["elements"],
          ArrayPattern: ["elements"],
          ArrowFunctionExpression: [
            "params",
            "body"
          ],
          AwaitExpression: ["argument"],
          BlockStatement: ["body"],
          BinaryExpression: [
            "left",
            "right"
          ],
          BreakStatement: ["label"],
          CallExpression: [
            "callee",
            "arguments"
          ],
          CatchClause: [
            "param",
            "body"
          ],
          ChainExpression: ["expression"],
          ClassBody: ["body"],
          ClassDeclaration: [
            "id",
            "superClass",
            "body"
          ],
          ClassExpression: [
            "id",
            "superClass",
            "body"
          ],
          ComprehensionBlock: [
            "left",
            "right"
          ],
          ComprehensionExpression: [
            "blocks",
            "filter",
            "body"
          ],
          ConditionalExpression: [
            "test",
            "consequent",
            "alternate"
          ],
          ContinueStatement: ["label"],
          DebuggerStatement: [],
          DirectiveStatement: [],
          DoWhileStatement: [
            "body",
            "test"
          ],
          EmptyStatement: [],
          ExportAllDeclaration: ["source"],
          ExportDefaultDeclaration: ["declaration"],
          ExportNamedDeclaration: [
            "declaration",
            "specifiers",
            "source"
          ],
          ExportSpecifier: [
            "exported",
            "local"
          ],
          ExpressionStatement: ["expression"],
          ForStatement: [
            "init",
            "test",
            "update",
            "body"
          ],
          ForInStatement: [
            "left",
            "right",
            "body"
          ],
          ForOfStatement: [
            "left",
            "right",
            "body"
          ],
          FunctionDeclaration: [
            "id",
            "params",
            "body"
          ],
          FunctionExpression: [
            "id",
            "params",
            "body"
          ],
          GeneratorExpression: [
            "blocks",
            "filter",
            "body"
          ],
          Identifier: [],
          IfStatement: [
            "test",
            "consequent",
            "alternate"
          ],
          ImportExpression: ["source"],
          ImportDeclaration: [
            "specifiers",
            "source"
          ],
          ImportDefaultSpecifier: ["local"],
          ImportNamespaceSpecifier: ["local"],
          ImportSpecifier: [
            "imported",
            "local"
          ],
          Literal: [],
          LabeledStatement: [
            "label",
            "body"
          ],
          LogicalExpression: [
            "left",
            "right"
          ],
          MemberExpression: [
            "object",
            "property"
          ],
          MetaProperty: [
            "meta",
            "property"
          ],
          MethodDefinition: [
            "key",
            "value"
          ],
          ModuleSpecifier: [],
          NewExpression: [
            "callee",
            "arguments"
          ],
          ObjectExpression: ["properties"],
          ObjectPattern: ["properties"],
          PrivateIdentifier: [],
          Program: ["body"],
          Property: [
            "key",
            "value"
          ],
          PropertyDefinition: [
            "key",
            "value"
          ],
          RestElement: ["argument"],
          ReturnStatement: ["argument"],
          SequenceExpression: ["expressions"],
          SpreadElement: ["argument"],
          Super: [],
          SwitchStatement: [
            "discriminant",
            "cases"
          ],
          SwitchCase: [
            "test",
            "consequent"
          ],
          TaggedTemplateExpression: [
            "tag",
            "quasi"
          ],
          TemplateElement: [],
          TemplateLiteral: [
            "quasis",
            "expressions"
          ],
          ThisExpression: [],
          ThrowStatement: ["argument"],
          TryStatement: [
            "block",
            "handler",
            "finalizer"
          ],
          UnaryExpression: ["argument"],
          UpdateExpression: ["argument"],
          VariableDeclaration: ["declarations"],
          VariableDeclarator: [
            "id",
            "init"
          ],
          WhileStatement: [
            "test",
            "body"
          ],
          WithStatement: [
            "object",
            "body"
          ],
          YieldExpression: ["argument"]
        };
        BREAK = {};
        SKIP = {};
        REMOVE = {};
        VisitorOption = {
          Break: BREAK,
          Skip: SKIP,
          Remove: REMOVE
        };
        function Reference(parent, key) {
          (this || _global$c).parent = parent;
          (this || _global$c).key = key;
        }
        Reference.prototype.replace = function replace(node) {
          (this || _global$c).parent[(this || _global$c).key] = node;
        };
        Reference.prototype.remove = function remove() {
          if (Array.isArray((this || _global$c).parent)) {
            (this || _global$c).parent.splice((this || _global$c).key, 1);
            return true;
          } else {
            this.replace(null);
            return false;
          }
        };
        function Element(node, path, wrap, ref) {
          (this || _global$c).node = node;
          (this || _global$c).path = path;
          (this || _global$c).wrap = wrap;
          (this || _global$c).ref = ref;
        }
        function Controller() {
        }
        Controller.prototype.path = function path() {
          var i, iz, j, jz, result, element;
          function addToPath(result, path) {
            if (Array.isArray(path)) {
              for (j = 0, jz = path.length; j < jz; ++j) {
                result.push(path[j]);
              }
            } else {
              result.push(path);
            }
          }
          if (!(this || _global$c).__current.path) {
            return null;
          }
          result = [];
          for (i = 2, iz = (this || _global$c).__leavelist.length; i < iz; ++i) {
            element = (this || _global$c).__leavelist[i];
            addToPath(result, element.path);
          }
          addToPath(result, (this || _global$c).__current.path);
          return result;
        };
        Controller.prototype.type = function () {
          var node = this.current();
          return node.type || (this || _global$c).__current.wrap;
        };
        Controller.prototype.parents = function parents() {
          var i, iz, result;
          result = [];
          for (i = 1, iz = (this || _global$c).__leavelist.length; i < iz; ++i) {
            result.push((this || _global$c).__leavelist[i].node);
          }
          return result;
        };
        Controller.prototype.current = function current() {
          return (this || _global$c).__current.node;
        };
        Controller.prototype.__execute = function __execute(callback, element) {
          var previous, result;
          result = undefined;
          previous = (this || _global$c).__current;
          (this || _global$c).__current = element;
          (this || _global$c).__state = null;
          if (callback) {
            result = callback.call(this || _global$c, element.node, (this || _global$c).__leavelist[(this || _global$c).__leavelist.length - 1].node);
          }
          (this || _global$c).__current = previous;
          return result;
        };
        Controller.prototype.notify = function notify(flag) {
          (this || _global$c).__state = flag;
        };
        Controller.prototype.skip = function () {
          this.notify(SKIP);
        };
        Controller.prototype["break"] = function () {
          this.notify(BREAK);
        };
        Controller.prototype.remove = function () {
          this.notify(REMOVE);
        };
        Controller.prototype.__initialize = function (root, visitor) {
          (this || _global$c).visitor = visitor;
          (this || _global$c).root = root;
          (this || _global$c).__worklist = [];
          (this || _global$c).__leavelist = [];
          (this || _global$c).__current = null;
          (this || _global$c).__state = null;
          (this || _global$c).__fallback = null;
          if (visitor.fallback === "iteration") {
            (this || _global$c).__fallback = Object.keys;
          } else if (typeof visitor.fallback === "function") {
            (this || _global$c).__fallback = visitor.fallback;
          }
          (this || _global$c).__keys = VisitorKeys;
          if (visitor.keys) {
            (this || _global$c).__keys = Object.assign(Object.create((this || _global$c).__keys), visitor.keys);
          }
        };
        function isNode(node) {
          if (node == null) {
            return false;
          }
          return typeof node === "object" && typeof node.type === "string";
        }
        function isProperty(nodeType, key) {
          return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && "properties" === key;
        }
        function candidateExistsInLeaveList(leavelist, candidate) {
          for (var i = leavelist.length - 1; i >= 0; --i) {
            if (leavelist[i].node === candidate) {
              return true;
            }
          }
          return false;
        }
        Controller.prototype.traverse = function traverse(root, visitor) {
          var worklist, leavelist, element, node, nodeType, ret, key, current, current2, candidates, candidate, sentinel;
          this.__initialize(root, visitor);
          sentinel = {};
          worklist = (this || _global$c).__worklist;
          leavelist = (this || _global$c).__leavelist;
          worklist.push(new Element(root, null, null, null));
          leavelist.push(new Element(null, null, null, null));
          while (worklist.length) {
            element = worklist.pop();
            if (element === sentinel) {
              element = leavelist.pop();
              ret = this.__execute(visitor.leave, element);
              if ((this || _global$c).__state === BREAK || ret === BREAK) {
                return;
              }
              continue;
            }
            if (element.node) {
              ret = this.__execute(visitor.enter, element);
              if ((this || _global$c).__state === BREAK || ret === BREAK) {
                return;
              }
              worklist.push(sentinel);
              leavelist.push(element);
              if ((this || _global$c).__state === SKIP || ret === SKIP) {
                continue;
              }
              node = element.node;
              nodeType = node.type || element.wrap;
              candidates = (this || _global$c).__keys[nodeType];
              if (!candidates) {
                if ((this || _global$c).__fallback) {
                  candidates = this.__fallback(node);
                } else {
                  throw new Error("Unknown node type " + nodeType + ".");
                }
              }
              current = candidates.length;
              while ((current -= 1) >= 0) {
                key = candidates[current];
                candidate = node[key];
                if (!candidate) {
                  continue;
                }
                if (Array.isArray(candidate)) {
                  current2 = candidate.length;
                  while ((current2 -= 1) >= 0) {
                    if (!candidate[current2]) {
                      continue;
                    }
                    if (candidateExistsInLeaveList(leavelist, candidate[current2])) {
                      continue;
                    }
                    if (isProperty(nodeType, candidates[current])) {
                      element = new Element(candidate[current2], [
                        key,
                        current2
                      ], "Property", null);
                    } else if (isNode(candidate[current2])) {
                      element = new Element(candidate[current2], [
                        key,
                        current2
                      ], null, null);
                    } else {
                      continue;
                    }
                    worklist.push(element);
                  }
                } else if (isNode(candidate)) {
                  if (candidateExistsInLeaveList(leavelist, candidate)) {
                    continue;
                  }
                  worklist.push(new Element(candidate, key, null, null));
                }
              }
            }
          }
        };
        Controller.prototype.replace = function replace(root, visitor) {
          var worklist, leavelist, node, nodeType, target, element, current, current2, candidates, candidate, sentinel, outer, key;
          function removeElem(element) {
            var i, key, nextElem, parent;
            if (element.ref.remove()) {
              key = element.ref.key;
              parent = element.ref.parent;
              i = worklist.length;
              while (i--) {
                nextElem = worklist[i];
                if (nextElem.ref && nextElem.ref.parent === parent) {
                  if (nextElem.ref.key < key) {
                    break;
                  }
                  --nextElem.ref.key;
                }
              }
            }
          }
          this.__initialize(root, visitor);
          sentinel = {};
          worklist = (this || _global$c).__worklist;
          leavelist = (this || _global$c).__leavelist;
          outer = { root: root };
          element = new Element(root, null, null, new Reference(outer, "root"));
          worklist.push(element);
          leavelist.push(element);
          while (worklist.length) {
            element = worklist.pop();
            if (element === sentinel) {
              element = leavelist.pop();
              target = this.__execute(visitor.leave, element);
              if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
                element.ref.replace(target);
              }
              if ((this || _global$c).__state === REMOVE || target === REMOVE) {
                removeElem(element);
              }
              if ((this || _global$c).__state === BREAK || target === BREAK) {
                return outer.root;
              }
              continue;
            }
            target = this.__execute(visitor.enter, element);
            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
              element.ref.replace(target);
              element.node = target;
            }
            if ((this || _global$c).__state === REMOVE || target === REMOVE) {
              removeElem(element);
              element.node = null;
            }
            if ((this || _global$c).__state === BREAK || target === BREAK) {
              return outer.root;
            }
            node = element.node;
            if (!node) {
              continue;
            }
            worklist.push(sentinel);
            leavelist.push(element);
            if ((this || _global$c).__state === SKIP || target === SKIP) {
              continue;
            }
            nodeType = node.type || element.wrap;
            candidates = (this || _global$c).__keys[nodeType];
            if (!candidates) {
              if ((this || _global$c).__fallback) {
                candidates = this.__fallback(node);
              } else {
                throw new Error("Unknown node type " + nodeType + ".");
              }
            }
            current = candidates.length;
            while ((current -= 1) >= 0) {
              key = candidates[current];
              candidate = node[key];
              if (!candidate) {
                continue;
              }
              if (Array.isArray(candidate)) {
                current2 = candidate.length;
                while ((current2 -= 1) >= 0) {
                  if (!candidate[current2]) {
                    continue;
                  }
                  if (isProperty(nodeType, candidates[current])) {
                    element = new Element(candidate[current2], [
                      key,
                      current2
                    ], "Property", new Reference(candidate, current2));
                  } else if (isNode(candidate[current2])) {
                    element = new Element(candidate[current2], [
                      key,
                      current2
                    ], null, new Reference(candidate, current2));
                  } else {
                    continue;
                  }
                  worklist.push(element);
                }
              } else if (isNode(candidate)) {
                worklist.push(new Element(candidate, key, null, new Reference(node, key)));
              }
            }
          }
          return outer.root;
        };
        function traverse(root, visitor) {
          var controller = new Controller();
          return controller.traverse(root, visitor);
        }
        function replace(root, visitor) {
          var controller = new Controller();
          return controller.replace(root, visitor);
        }
        function extendCommentRange(comment, tokens) {
          var target;
          target = upperBound(tokens, function search(token) {
            return token.range[0] > comment.range[0];
          });
          comment.extendedRange = [
            comment.range[0],
            comment.range[1]
          ];
          if (target !== tokens.length) {
            comment.extendedRange[1] = tokens[target].range[0];
          }
          target -= 1;
          if (target >= 0) {
            comment.extendedRange[0] = tokens[target].range[1];
          }
          return comment;
        }
        function attachComments(tree, providedComments, tokens) {
          var comments = [], comment, len, i, cursor;
          if (!tree.range) {
            throw new Error("attachComments needs range information");
          }
          if (!tokens.length) {
            if (providedComments.length) {
              for (i = 0, len = providedComments.length; i < len; i += 1) {
                comment = deepCopy(providedComments[i]);
                comment.extendedRange = [
                  0,
                  tree.range[0]
                ];
                comments.push(comment);
              }
              tree.leadingComments = comments;
            }
            return tree;
          }
          for (i = 0, len = providedComments.length; i < len; i += 1) {
            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
          }
          cursor = 0;
          traverse(tree, {
            enter: function (node) {
              var comment;
              while (cursor < comments.length) {
                comment = comments[cursor];
                if (comment.extendedRange[1] > node.range[0]) {
                  break;
                }
                if (comment.extendedRange[1] === node.range[0]) {
                  if (!node.leadingComments) {
                    node.leadingComments = [];
                  }
                  node.leadingComments.push(comment);
                  comments.splice(cursor, 1);
                } else {
                  cursor += 1;
                }
              }
              if (cursor === comments.length) {
                return VisitorOption.Break;
              }
              if (comments[cursor].extendedRange[0] > node.range[1]) {
                return VisitorOption.Skip;
              }
            }
          });
          cursor = 0;
          traverse(tree, {
            leave: function (node) {
              var comment;
              while (cursor < comments.length) {
                comment = comments[cursor];
                if (node.range[1] < comment.extendedRange[0]) {
                  break;
                }
                if (node.range[1] === comment.extendedRange[0]) {
                  if (!node.trailingComments) {
                    node.trailingComments = [];
                  }
                  node.trailingComments.push(comment);
                  comments.splice(cursor, 1);
                } else {
                  cursor += 1;
                }
              }
              if (cursor === comments.length) {
                return VisitorOption.Break;
              }
              if (comments[cursor].extendedRange[0] > node.range[1]) {
                return VisitorOption.Skip;
              }
            }
          });
          return tree;
        }
        exports.Syntax = Syntax;
        exports.traverse = traverse;
        exports.replace = replace;
        exports.attachComments = attachComments;
        exports.VisitorKeys = VisitorKeys;
        exports.VisitorOption = VisitorOption;
        exports.Controller = Controller;
        exports.cloneEnvironment = function () {
          return clone({});
        };
        return exports;
      }(exports$4Z));
      exports$4Z.Syntax; exports$4Z.traverse; exports$4Z.replace; exports$4Z.attachComments; exports$4Z.VisitorKeys; exports$4Z.VisitorOption; exports$4Z.Controller; exports$4Z.cloneEnvironment;

      var _package$2 = {
        "name": "esrecurse",
        "description": "ECMAScript AST recursive visitor",
        "homepage": "https://github.com/estools/esrecurse",
        "main": "esrecurse.js",
        "version": "4.3.0",
        "engines": { "node": ">=4.0" },
        "maintainers": [{
            "name": "Yusuke Suzuki",
            "email": "utatane.tea@gmail.com",
            "web": "https://github.com/Constellation"
          }],
        "repository": {
          "type": "git",
          "url": "https://github.com/estools/esrecurse.git"
        },
        "dependencies": { "estraverse": "^5.2.0" },
        "devDependencies": {
          "babel-cli": "^6.24.1",
          "babel-eslint": "^7.2.3",
          "babel-preset-es2015": "^6.24.1",
          "babel-register": "^6.24.1",
          "chai": "^4.0.2",
          "esprima": "^4.0.0",
          "gulp": "^3.9.0",
          "gulp-bump": "^2.7.0",
          "gulp-eslint": "^4.0.0",
          "gulp-filter": "^5.0.0",
          "gulp-git": "^2.4.1",
          "gulp-mocha": "^4.3.1",
          "gulp-tag-version": "^1.2.1",
          "jsdoc": "^3.3.0-alpha10",
          "minimist": "^1.1.0"
        },
        "license": "BSD-2-Clause",
        "scripts": {
          "test": "gulp travis",
          "unit-test": "gulp test",
          "lint": "gulp lint"
        },
        "babel": { "presets": ["es2015"] }
      };
      var _global$b = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$4Y = {};
      (function () {
        var estraverse = exports$4Z;
        function isNode(node) {
          if (node == null) {
            return false;
          }
          return typeof node === "object" && typeof node.type === "string";
        }
        function isProperty(nodeType, key) {
          return (nodeType === estraverse.Syntax.ObjectExpression || nodeType === estraverse.Syntax.ObjectPattern) && key === "properties";
        }
        function Visitor(visitor, options) {
          options = options || {};
          (this || _global$b).__visitor = visitor || this || _global$b;
          (this || _global$b).__childVisitorKeys = options.childVisitorKeys ? Object.assign({}, estraverse.VisitorKeys, options.childVisitorKeys) : estraverse.VisitorKeys;
          if (options.fallback === "iteration") {
            (this || _global$b).__fallback = Object.keys;
          } else if (typeof options.fallback === "function") {
            (this || _global$b).__fallback = options.fallback;
          }
        }
        Visitor.prototype.visitChildren = function (node) {
          var type, children, i, iz, j, jz, child;
          if (node == null) {
            return;
          }
          type = node.type || estraverse.Syntax.Property;
          children = (this || _global$b).__childVisitorKeys[type];
          if (!children) {
            if ((this || _global$b).__fallback) {
              children = this.__fallback(node);
            } else {
              throw new Error("Unknown node type " + type + ".");
            }
          }
          for (i = 0, iz = children.length; i < iz; ++i) {
            child = node[children[i]];
            if (child) {
              if (Array.isArray(child)) {
                for (j = 0, jz = child.length; j < jz; ++j) {
                  if (child[j]) {
                    if (isNode(child[j]) || isProperty(type, children[i])) {
                      this.visit(child[j]);
                    }
                  }
                }
              } else if (isNode(child)) {
                this.visit(child);
              }
            }
          }
        };
        Visitor.prototype.visit = function (node) {
          var type;
          if (node == null) {
            return;
          }
          type = node.type || estraverse.Syntax.Property;
          if ((this || _global$b).__visitor[type]) {
            (this || _global$b).__visitor[type].call(this || _global$b, node);
            return;
          }
          this.visitChildren(node);
        };
        exports$4Y.version = _package$2.version;
        exports$4Y.Visitor = Visitor;
        exports$4Y.visit = function (node, visitor, options) {
          var v = new Visitor(visitor, options);
          v.visit(node);
        };
      }());

      var exports$4X = {};
      const Syntax$2 = exports$53.Syntax;
      const esrecurse$1 = exports$4Y;
      function getLast(xs) {
        return xs[xs.length - 1] || null;
      }
      class PatternVisitor$1 extends esrecurse$1.Visitor {
        static isPattern(node) {
          const nodeType = node.type;
          return nodeType === Syntax$2.Identifier || nodeType === Syntax$2.ObjectPattern || nodeType === Syntax$2.ArrayPattern || nodeType === Syntax$2.SpreadElement || nodeType === Syntax$2.RestElement || nodeType === Syntax$2.AssignmentPattern;
        }
        constructor(options, rootPattern, callback) {
          super(null, options);
          this.rootPattern = rootPattern;
          this.callback = callback;
          this.assignments = [];
          this.rightHandNodes = [];
          this.restElements = [];
        }
        Identifier(pattern) {
          const lastRestElement = getLast(this.restElements);
          this.callback(pattern, {
            topLevel: pattern === this.rootPattern,
            rest: lastRestElement !== null && lastRestElement !== undefined && lastRestElement.argument === pattern,
            assignments: this.assignments
          });
        }
        Property(property) {
          if (property.computed) {
            this.rightHandNodes.push(property.key);
          }
          this.visit(property.value);
        }
        ArrayPattern(pattern) {
          for (let i = 0, iz = pattern.elements.length; i < iz; ++i) {
            const element = pattern.elements[i];
            this.visit(element);
          }
        }
        AssignmentPattern(pattern) {
          this.assignments.push(pattern);
          this.visit(pattern.left);
          this.rightHandNodes.push(pattern.right);
          this.assignments.pop();
        }
        RestElement(pattern) {
          this.restElements.push(pattern);
          this.visit(pattern.argument);
          this.restElements.pop();
        }
        MemberExpression(node) {
          if (node.computed) {
            this.rightHandNodes.push(node.property);
          }
          this.rightHandNodes.push(node.object);
        }
        SpreadElement(node) {
          this.visit(node.argument);
        }
        ArrayExpression(node) {
          node.elements.forEach(this.visit, this);
        }
        AssignmentExpression(node) {
          this.assignments.push(node);
          this.visit(node.left);
          this.rightHandNodes.push(node.right);
          this.assignments.pop();
        }
        CallExpression(node) {
          node.arguments.forEach(a => {
            this.rightHandNodes.push(a);
          });
          this.visit(node.callee);
        }
      }
      exports$4X = PatternVisitor$1;
      var _patternVisitor = exports$4X;

      var exports$4W = {};
      const Syntax$1 = exports$53.Syntax;
      const esrecurse = exports$4Y;
      const Reference$1 = _reference;
      const Variable$1 = _variable;
      const PatternVisitor = _patternVisitor;
      const definition = _definition;
      const assert$8 = et;
      const ParameterDefinition = definition.ParameterDefinition;
      const Definition = definition.Definition;
      function traverseIdentifierInPattern(options, rootPattern, referencer, callback) {
        const visitor = new PatternVisitor(options, rootPattern, callback);
        visitor.visit(rootPattern);
        if (referencer !== null && referencer !== undefined) {
          visitor.rightHandNodes.forEach(referencer.visit, referencer);
        }
      }
      class Importer extends esrecurse.Visitor {
        constructor(declaration, referencer) {
          super(null, referencer.options);
          this.declaration = declaration;
          this.referencer = referencer;
        }
        visitImport(id, specifier) {
          this.referencer.visitPattern(id, pattern => {
            this.referencer.currentScope().__define(pattern, new Definition(Variable$1.ImportBinding, pattern, specifier, this.declaration, null, null));
          });
        }
        ImportNamespaceSpecifier(node) {
          const local = node.local || node.id;
          if (local) {
            this.visitImport(local, node);
          }
        }
        ImportDefaultSpecifier(node) {
          const local = node.local || node.id;
          this.visitImport(local, node);
        }
        ImportSpecifier(node) {
          const local = node.local || node.id;
          if (node.name) {
            this.visitImport(node.name, node);
          } else {
            this.visitImport(local, node);
          }
        }
      }
      class Referencer$1 extends esrecurse.Visitor {
        constructor(options, scopeManager) {
          super(null, options);
          this.options = options;
          this.scopeManager = scopeManager;
          this.parent = null;
          this.isInnerMethodDefinition = false;
        }
        currentScope() {
          return this.scopeManager.__currentScope;
        }
        close(node) {
          while (this.currentScope() && node === this.currentScope().block) {
            this.scopeManager.__currentScope = this.currentScope().__close(this.scopeManager);
          }
        }
        pushInnerMethodDefinition(isInnerMethodDefinition) {
          const previous = this.isInnerMethodDefinition;
          this.isInnerMethodDefinition = isInnerMethodDefinition;
          return previous;
        }
        popInnerMethodDefinition(isInnerMethodDefinition) {
          this.isInnerMethodDefinition = isInnerMethodDefinition;
        }
        referencingDefaultValue(pattern, assignments, maybeImplicitGlobal, init) {
          const scope = this.currentScope();
          assignments.forEach(assignment => {
            scope.__referencing(pattern, Reference$1.WRITE, assignment.right, maybeImplicitGlobal, pattern !== assignment.left, init);
          });
        }
        visitPattern(node, options, callback) {
          let visitPatternOptions = options;
          let visitPatternCallback = callback;
          if (typeof options === "function") {
            visitPatternCallback = options;
            visitPatternOptions = { processRightHandNodes: false };
          }
          traverseIdentifierInPattern(this.options, node, visitPatternOptions.processRightHandNodes ? this : null, visitPatternCallback);
        }
        visitFunction(node) {
          let i, iz;
          if (node.type === Syntax$1.FunctionDeclaration) {
            this.currentScope().__define(node.id, new Definition(Variable$1.FunctionName, node.id, node, null, null, null));
          }
          if (node.type === Syntax$1.FunctionExpression && node.id) {
            this.scopeManager.__nestFunctionExpressionNameScope(node);
          }
          this.scopeManager.__nestFunctionScope(node, this.isInnerMethodDefinition);
          const that = this;
          function visitPatternCallback(pattern, info) {
            that.currentScope().__define(pattern, new ParameterDefinition(pattern, node, i, info.rest));
            that.referencingDefaultValue(pattern, info.assignments, null, true);
          }
          for (i = 0, iz = node.params.length; i < iz; ++i) {
            this.visitPattern(node.params[i], { processRightHandNodes: true }, visitPatternCallback);
          }
          if (node.rest) {
            this.visitPattern({
              type: "RestElement",
              argument: node.rest
            }, pattern => {
              this.currentScope().__define(pattern, new ParameterDefinition(pattern, node, node.params.length, true));
            });
          }
          if (node.body) {
            if (node.body.type === Syntax$1.BlockStatement) {
              this.visitChildren(node.body);
            } else {
              this.visit(node.body);
            }
          }
          this.close(node);
        }
        visitClass(node) {
          if (node.type === Syntax$1.ClassDeclaration) {
            this.currentScope().__define(node.id, new Definition(Variable$1.ClassName, node.id, node, null, null, null));
          }
          this.visit(node.superClass);
          this.scopeManager.__nestClassScope(node);
          if (node.id) {
            this.currentScope().__define(node.id, new Definition(Variable$1.ClassName, node.id, node));
          }
          this.visit(node.body);
          this.close(node);
        }
        visitProperty(node) {
          let previous;
          if (node.computed) {
            this.visit(node.key);
          }
          const isMethodDefinition = node.type === Syntax$1.MethodDefinition;
          if (isMethodDefinition) {
            previous = this.pushInnerMethodDefinition(true);
          }
          this.visit(node.value);
          if (isMethodDefinition) {
            this.popInnerMethodDefinition(previous);
          }
        }
        visitForIn(node) {
          if (node.left.type === Syntax$1.VariableDeclaration && node.left.kind !== "var") {
            this.scopeManager.__nestForScope(node);
          }
          if (node.left.type === Syntax$1.VariableDeclaration) {
            this.visit(node.left);
            this.visitPattern(node.left.declarations[0].id, pattern => {
              this.currentScope().__referencing(pattern, Reference$1.WRITE, node.right, null, true, true);
            });
          } else {
            this.visitPattern(node.left, { processRightHandNodes: true }, (pattern, info) => {
              let maybeImplicitGlobal = null;
              if (!this.currentScope().isStrict) {
                maybeImplicitGlobal = {
                  pattern,
                  node
                };
              }
              this.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);
              this.currentScope().__referencing(pattern, Reference$1.WRITE, node.right, maybeImplicitGlobal, true, false);
            });
          }
          this.visit(node.right);
          this.visit(node.body);
          this.close(node);
        }
        visitVariableDeclaration(variableTargetScope, type, node, index) {
          const decl = node.declarations[index];
          const init = decl.init;
          this.visitPattern(decl.id, { processRightHandNodes: true }, (pattern, info) => {
            variableTargetScope.__define(pattern, new Definition(type, pattern, decl, node, index, node.kind));
            this.referencingDefaultValue(pattern, info.assignments, null, true);
            if (init) {
              this.currentScope().__referencing(pattern, Reference$1.WRITE, init, null, !info.topLevel, true);
            }
          });
        }
        AssignmentExpression(node) {
          if (PatternVisitor.isPattern(node.left)) {
            if (node.operator === "=") {
              this.visitPattern(node.left, { processRightHandNodes: true }, (pattern, info) => {
                let maybeImplicitGlobal = null;
                if (!this.currentScope().isStrict) {
                  maybeImplicitGlobal = {
                    pattern,
                    node
                  };
                }
                this.referencingDefaultValue(pattern, info.assignments, maybeImplicitGlobal, false);
                this.currentScope().__referencing(pattern, Reference$1.WRITE, node.right, maybeImplicitGlobal, !info.topLevel, false);
              });
            } else {
              this.currentScope().__referencing(node.left, Reference$1.RW, node.right);
            }
          } else {
            this.visit(node.left);
          }
          this.visit(node.right);
        }
        CatchClause(node) {
          this.scopeManager.__nestCatchScope(node);
          this.visitPattern(node.param, { processRightHandNodes: true }, (pattern, info) => {
            this.currentScope().__define(pattern, new Definition(Variable$1.CatchClause, node.param, node, null, null, null));
            this.referencingDefaultValue(pattern, info.assignments, null, true);
          });
          this.visit(node.body);
          this.close(node);
        }
        Program(node) {
          this.scopeManager.__nestGlobalScope(node);
          if (this.scopeManager.__isNodejsScope()) {
            this.currentScope().isStrict = false;
            this.scopeManager.__nestFunctionScope(node, false);
          }
          if (this.scopeManager.__isES6() && this.scopeManager.isModule()) {
            this.scopeManager.__nestModuleScope(node);
          }
          if (this.scopeManager.isStrictModeSupported() && this.scopeManager.isImpliedStrict()) {
            this.currentScope().isStrict = true;
          }
          this.visitChildren(node);
          this.close(node);
        }
        Identifier(node) {
          this.currentScope().__referencing(node);
        }
        UpdateExpression(node) {
          if (PatternVisitor.isPattern(node.argument)) {
            this.currentScope().__referencing(node.argument, Reference$1.RW, null);
          } else {
            this.visitChildren(node);
          }
        }
        MemberExpression(node) {
          this.visit(node.object);
          if (node.computed) {
            this.visit(node.property);
          }
        }
        Property(node) {
          this.visitProperty(node);
        }
        MethodDefinition(node) {
          this.visitProperty(node);
        }
        BreakStatement() {
        }
        ContinueStatement() {
        }
        LabeledStatement(node) {
          this.visit(node.body);
        }
        ForStatement(node) {
          if (node.init && node.init.type === Syntax$1.VariableDeclaration && node.init.kind !== "var") {
            this.scopeManager.__nestForScope(node);
          }
          this.visitChildren(node);
          this.close(node);
        }
        ClassExpression(node) {
          this.visitClass(node);
        }
        ClassDeclaration(node) {
          this.visitClass(node);
        }
        CallExpression(node) {
          if (!this.scopeManager.__ignoreEval() && node.callee.type === Syntax$1.Identifier && node.callee.name === "eval") {
            this.currentScope().variableScope.__detectEval();
          }
          this.visitChildren(node);
        }
        BlockStatement(node) {
          if (this.scopeManager.__isES6()) {
            this.scopeManager.__nestBlockScope(node);
          }
          this.visitChildren(node);
          this.close(node);
        }
        ThisExpression() {
          this.currentScope().variableScope.__detectThis();
        }
        WithStatement(node) {
          this.visit(node.object);
          this.scopeManager.__nestWithScope(node);
          this.visit(node.body);
          this.close(node);
        }
        VariableDeclaration(node) {
          const variableTargetScope = node.kind === "var" ? this.currentScope().variableScope : this.currentScope();
          for (let i = 0, iz = node.declarations.length; i < iz; ++i) {
            const decl = node.declarations[i];
            this.visitVariableDeclaration(variableTargetScope, Variable$1.Variable, node, i);
            if (decl.init) {
              this.visit(decl.init);
            }
          }
        }
        SwitchStatement(node) {
          this.visit(node.discriminant);
          if (this.scopeManager.__isES6()) {
            this.scopeManager.__nestSwitchScope(node);
          }
          for (let i = 0, iz = node.cases.length; i < iz; ++i) {
            this.visit(node.cases[i]);
          }
          this.close(node);
        }
        FunctionDeclaration(node) {
          this.visitFunction(node);
        }
        FunctionExpression(node) {
          this.visitFunction(node);
        }
        ForOfStatement(node) {
          this.visitForIn(node);
        }
        ForInStatement(node) {
          this.visitForIn(node);
        }
        ArrowFunctionExpression(node) {
          this.visitFunction(node);
        }
        ImportDeclaration(node) {
          assert$8(this.scopeManager.__isES6() && this.scopeManager.isModule(), "ImportDeclaration should appear when the mode is ES6 and in the module context.");
          const importer = new Importer(node, this);
          importer.visit(node);
        }
        visitExportDeclaration(node) {
          if (node.source) {
            return;
          }
          if (node.declaration) {
            this.visit(node.declaration);
            return;
          }
          this.visitChildren(node);
        }
        ExportDeclaration(node) {
          this.visitExportDeclaration(node);
        }
        ExportAllDeclaration(node) {
          this.visitExportDeclaration(node);
        }
        ExportDefaultDeclaration(node) {
          this.visitExportDeclaration(node);
        }
        ExportNamedDeclaration(node) {
          this.visitExportDeclaration(node);
        }
        ExportSpecifier(node) {
          const local = node.id || node.local;
          this.visit(local);
        }
        MetaProperty() {
        }
      }
      exports$4W = Referencer$1;
      var _referencer = exports$4W;

      var _package$1 = {
        "name": "eslint-scope",
        "description": "ECMAScript scope analyzer for ESLint",
        "homepage": "http://github.com/eslint/eslint-scope",
        "main": "lib/index.js",
        "version": "5.1.1",
        "engines": { "node": ">=8.0.0" },
        "repository": "eslint/eslint-scope",
        "bugs": { "url": "https://github.com/eslint/eslint-scope/issues" },
        "license": "BSD-2-Clause",
        "scripts": {
          "test": "node Makefile.js test",
          "lint": "node Makefile.js lint",
          "generate-release": "eslint-generate-release",
          "generate-alpharelease": "eslint-generate-prerelease alpha",
          "generate-betarelease": "eslint-generate-prerelease beta",
          "generate-rcrelease": "eslint-generate-prerelease rc",
          "publish-release": "eslint-publish-release"
        },
        "files": [
          "LICENSE",
          "README.md",
          "lib"
        ],
        "dependencies": {
          "esrecurse": "^4.3.0",
          "estraverse": "^4.1.1"
        },
        "devDependencies": {
          "@typescript-eslint/parser": "^1.11.0",
          "chai": "^4.2.0",
          "eslint": "^6.0.1",
          "eslint-config-eslint": "^5.0.1",
          "eslint-plugin-node": "^9.1.0",
          "eslint-release": "^1.0.0",
          "eslint-visitor-keys": "^1.2.0",
          "espree": "^7.1.0",
          "istanbul": "^0.4.5",
          "mocha": "^6.1.4",
          "npm-license": "^0.3.3",
          "shelljs": "^0.8.3",
          "typescript": "^3.5.2"
        }
      };
      var exports$4V = {};
      const assert$7 = et;
      const ScopeManager = _scopeManager;
      const Referencer = _referencer;
      const Reference = _reference;
      const Variable = _variable;
      const Scope = _scope.Scope;
      const version$3 = _package$1.version;
      function defaultOptions$1() {
        return {
          optimistic: false,
          directive: false,
          nodejsScope: false,
          impliedStrict: false,
          sourceType: "script",
          ecmaVersion: 5,
          childVisitorKeys: null,
          fallback: "iteration"
        };
      }
      function updateDeeply(target, override) {
        function isHashObject(value) {
          return typeof value === "object" && value instanceof Object && !(value instanceof Array) && !(value instanceof RegExp);
        }
        for (const key in override) {
          if (Object.prototype.hasOwnProperty.call(override, key)) {
            const val = override[key];
            if (isHashObject(val)) {
              if (isHashObject(target[key])) {
                updateDeeply(target[key], val);
              } else {
                target[key] = updateDeeply({}, val);
              }
            } else {
              target[key] = val;
            }
          }
        }
        return target;
      }
      function analyze(tree, providedOptions) {
        const options = updateDeeply(defaultOptions$1(), providedOptions);
        const scopeManager = new ScopeManager(options);
        const referencer = new Referencer(options, scopeManager);
        referencer.visit(tree);
        assert$7(scopeManager.__currentScope === null, "currentScope should be null.");
        return scopeManager;
      }
      exports$4V = {
        version: version$3,
        Reference,
        Variable,
        Scope,
        ScopeManager,
        analyze
      };
      var exports$1$r = exports$4V;
      const _version = exports$4V.version, _Reference = exports$4V.Reference, _Variable = exports$4V.Variable, _Scope = exports$4V.Scope, _ScopeManager = exports$4V.ScopeManager, _analyze = exports$4V.analyze;

      var _eslintScope2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$r,
        Reference: _Reference,
        Scope: _Scope,
        ScopeManager: _ScopeManager,
        Variable: _Variable,
        analyze: _analyze,
        version: _version
      });

      var _visitorKeys = {
        "AssignmentExpression": [
          "left",
          "right"
        ],
        "AssignmentPattern": [
          "left",
          "right"
        ],
        "ArrayExpression": ["elements"],
        "ArrayPattern": ["elements"],
        "ArrowFunctionExpression": [
          "params",
          "body"
        ],
        "AwaitExpression": ["argument"],
        "BlockStatement": ["body"],
        "BinaryExpression": [
          "left",
          "right"
        ],
        "BreakStatement": ["label"],
        "CallExpression": [
          "callee",
          "arguments"
        ],
        "CatchClause": [
          "param",
          "body"
        ],
        "ChainExpression": ["expression"],
        "ClassBody": ["body"],
        "ClassDeclaration": [
          "id",
          "superClass",
          "body"
        ],
        "ClassExpression": [
          "id",
          "superClass",
          "body"
        ],
        "ConditionalExpression": [
          "test",
          "consequent",
          "alternate"
        ],
        "ContinueStatement": ["label"],
        "DebuggerStatement": [],
        "DoWhileStatement": [
          "body",
          "test"
        ],
        "EmptyStatement": [],
        "ExportAllDeclaration": [
          "exported",
          "source"
        ],
        "ExportDefaultDeclaration": ["declaration"],
        "ExportNamedDeclaration": [
          "declaration",
          "specifiers",
          "source"
        ],
        "ExportSpecifier": [
          "exported",
          "local"
        ],
        "ExpressionStatement": ["expression"],
        "ExperimentalRestProperty": ["argument"],
        "ExperimentalSpreadProperty": ["argument"],
        "ForStatement": [
          "init",
          "test",
          "update",
          "body"
        ],
        "ForInStatement": [
          "left",
          "right",
          "body"
        ],
        "ForOfStatement": [
          "left",
          "right",
          "body"
        ],
        "FunctionDeclaration": [
          "id",
          "params",
          "body"
        ],
        "FunctionExpression": [
          "id",
          "params",
          "body"
        ],
        "Identifier": [],
        "IfStatement": [
          "test",
          "consequent",
          "alternate"
        ],
        "ImportDeclaration": [
          "specifiers",
          "source"
        ],
        "ImportDefaultSpecifier": ["local"],
        "ImportExpression": ["source"],
        "ImportNamespaceSpecifier": ["local"],
        "ImportSpecifier": [
          "imported",
          "local"
        ],
        "JSXAttribute": [
          "name",
          "value"
        ],
        "JSXClosingElement": ["name"],
        "JSXElement": [
          "openingElement",
          "children",
          "closingElement"
        ],
        "JSXEmptyExpression": [],
        "JSXExpressionContainer": ["expression"],
        "JSXIdentifier": [],
        "JSXMemberExpression": [
          "object",
          "property"
        ],
        "JSXNamespacedName": [
          "namespace",
          "name"
        ],
        "JSXOpeningElement": [
          "name",
          "attributes"
        ],
        "JSXSpreadAttribute": ["argument"],
        "JSXText": [],
        "JSXFragment": [
          "openingFragment",
          "children",
          "closingFragment"
        ],
        "Literal": [],
        "LabeledStatement": [
          "label",
          "body"
        ],
        "LogicalExpression": [
          "left",
          "right"
        ],
        "MemberExpression": [
          "object",
          "property"
        ],
        "MetaProperty": [
          "meta",
          "property"
        ],
        "MethodDefinition": [
          "key",
          "value"
        ],
        "NewExpression": [
          "callee",
          "arguments"
        ],
        "ObjectExpression": ["properties"],
        "ObjectPattern": ["properties"],
        "PrivateIdentifier": [],
        "Program": ["body"],
        "Property": [
          "key",
          "value"
        ],
        "PropertyDefinition": [
          "key",
          "value"
        ],
        "RestElement": ["argument"],
        "ReturnStatement": ["argument"],
        "SequenceExpression": ["expressions"],
        "SpreadElement": ["argument"],
        "Super": [],
        "SwitchStatement": [
          "discriminant",
          "cases"
        ],
        "SwitchCase": [
          "test",
          "consequent"
        ],
        "TaggedTemplateExpression": [
          "tag",
          "quasi"
        ],
        "TemplateElement": [],
        "TemplateLiteral": [
          "quasis",
          "expressions"
        ],
        "ThisExpression": [],
        "ThrowStatement": ["argument"],
        "TryStatement": [
          "block",
          "handler",
          "finalizer"
        ],
        "UnaryExpression": ["argument"],
        "UpdateExpression": ["argument"],
        "VariableDeclaration": ["declarations"],
        "VariableDeclarator": [
          "id",
          "init"
        ],
        "WhileStatement": [
          "test",
          "body"
        ],
        "WithStatement": [
          "object",
          "body"
        ],
        "YieldExpression": ["argument"]
      };
      var exports$4U = {};
      const KEYS$1 = _visitorKeys;
      const NODE_TYPES = Object.freeze(Object.keys(KEYS$1));
      for (const type of NODE_TYPES) {
        Object.freeze(KEYS$1[type]);
      }
      Object.freeze(KEYS$1);
      const KEY_BLACKLIST = new Set([
        "parent",
        "leadingComments",
        "trailingComments"
      ]);
      function filterKey(key) {
        return !KEY_BLACKLIST.has(key) && key[0] !== "_";
      }
      exports$4U = Object.freeze({
        KEYS: KEYS$1,
        getKeys(node) {
          return Object.keys(node).filter(filterKey);
        },
        unionWith(additionalKeys) {
          const retv = Object.assign({}, KEYS$1);
          for (const type of Object.keys(additionalKeys)) {
            if (retv.hasOwnProperty(type)) {
              const keys = new Set(additionalKeys[type]);
              for (const key of retv[type]) {
                keys.add(key);
              }
              retv[type] = Object.freeze(Array.from(keys));
            } else {
              retv[type] = Object.freeze(Array.from(additionalKeys[type]));
            }
          }
          return Object.freeze(retv);
        }
      });
      var exports$1$q = exports$4U;

      var _eslintVisitorKeys2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$q
      });

      var _global$a = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$4T = {};
      var module$1 = { exports: exports$4T };
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof _global$a == "object" && _global$a && _global$a.Object === Object && _global$a;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = exports$4T && !exports$4T.nodeType && exports$4T;
      var freeModule = freeExports && true && module$1 && !module$1.nodeType && module$1;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = (function () {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }());
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply$1(func, thisArg, args) {
        switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
          result[index] = iteratee(index);
        }
        return result;
      }
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }
      var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty$1 = objectProto.hasOwnProperty;
      var maskSrcKey = (function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }());
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty$1).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer$1 = moduleExports ? root.Buffer : undefined, Symbol$1 = root.Symbol, Uint8Array$1 = root.Uint8Array, allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
      var defineProperty = (function () {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }());
      var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined, nativeMax = Math.max, nativeNow = Date.now;
      var Map$1 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
      var baseCreate = (function () {
        function object() {
        }
        return function (proto) {
          if (!isObject$1(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object();
          object.prototype = undefined;
          return result;
        };
      }());
      function Hash(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        (this || _global$a).__data__ = nativeCreate ? nativeCreate(null) : {};
        (this || _global$a).size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete (this || _global$a).__data__[key];
        (this || _global$a).size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = (this || _global$a).__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty$1.call(data, key) ? data[key] : undefined;
      }
      function hashHas(key) {
        var data = (this || _global$a).__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty$1.call(data, key);
      }
      function hashSet(key, value) {
        var data = (this || _global$a).__data__;
        (this || _global$a).size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this || _global$a;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        (this || _global$a).__data__ = [];
        (this || _global$a).size = 0;
      }
      function listCacheDelete(key) {
        var data = (this || _global$a).__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --(this || _global$a).size;
        return true;
      }
      function listCacheGet(key) {
        var data = (this || _global$a).__data__, index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }
      function listCacheHas(key) {
        return assocIndexOf((this || _global$a).__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = (this || _global$a).__data__, index = assocIndexOf(data, key);
        if (index < 0) {
          ++(this || _global$a).size;
          data.push([
            key,
            value
          ]);
        } else {
          data[index][1] = value;
        }
        return this || _global$a;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        (this || _global$a).size = 0;
        (this || _global$a).__data__ = {
          "hash": new Hash(),
          "map": new (Map$1 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this || _global$a, key)["delete"](key);
        (this || _global$a).size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this || _global$a, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this || _global$a, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this || _global$a, key), size = data.size;
        data.set(key, value);
        (this || _global$a).size += data.size == size ? 0 : 1;
        return this || _global$a;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function Stack(entries) {
        var data = (this || _global$a).__data__ = new ListCache(entries);
        (this || _global$a).size = data.size;
      }
      function stackClear() {
        (this || _global$a).__data__ = new ListCache();
        (this || _global$a).size = 0;
      }
      function stackDelete(key) {
        var data = (this || _global$a).__data__, result = data["delete"](key);
        (this || _global$a).size = data.size;
        return result;
      }
      function stackGet(key) {
        return (this || _global$a).__data__.get(key);
      }
      function stackHas(key) {
        return (this || _global$a).__data__.has(key);
      }
      function stackSet(key, value) {
        var data = (this || _global$a).__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map$1 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
              key,
              value
            ]);
            (this || _global$a).size = ++data.size;
            return this || _global$a;
          }
          data = (this || _global$a).__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        (this || _global$a).size = data.size;
        return this || _global$a;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray$1(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty$1.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var baseFor = createBaseFor();
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsNative(value) {
        if (!isObject$1(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseKeysIn(object) {
        if (!isObject$1(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty$1.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function (srcValue, key) {
          stack || (stack = new Stack());
          if (isObject$1(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined;
            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined;
        var isCommon = newValue === undefined;
        if (isCommon) {
          var isArr = isArray$1(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray$1(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject$1(objValue) || isFunction$2(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result);
        return result;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));
        return result;
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function copyArray(source, array) {
        var index = -1, length = source.length;
        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index = -1, length = props.length;
        while (++index < length) {
          var key = props[index];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function createAssigner(assigner) {
        return baseRest(function (object, sources) {
          var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }
      function createBaseFor(fromRight) {
        return function (object, iteratee, keysFunc) {
          var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty$1.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
      }
      function isIterateeCall(value, index, object) {
        if (!isObject$1(object)) {
          return false;
        }
        var type = typeof index;
        if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
          return eq(object[index], value);
        }
        return false;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply$1(func, this || _global$a, otherArgs);
        };
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setToString = shortOut(baseSetToString);
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function () {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArguments = baseIsArguments((function () {
        return arguments;
      }())) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty$1.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray$1 = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction$2(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      function isFunction$2(value) {
        if (!isObject$1(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject$1(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty$1.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      var merge$2 = createAssigner(function (object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });
      function constant(value) {
        return function () {
          return value;
        };
      }
      function identity(value) {
        return value;
      }
      function stubFalse() {
        return false;
      }
      module$1.exports = merge$2;
      var index$1 = module$1.exports;

      var _lodash2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': index$1
      });

      var _environments2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _environments$2
      });

      var exports$4S = {};
      const breakableTypePattern$2 = /^(?:(?:Do)?While|For(?:In|Of)?|Switch)Statement$/u;
      const lineBreakPattern$1 = /\r\n|[\r\n\u2028\u2029]/u;
      const shebangPattern$1 = /^#!([^\r\n]+)/u;
      function createGlobalLinebreakMatcher$1() {
        return new RegExp(lineBreakPattern$1.source, "gu");
      }
      exports$4S = {
        breakableTypePattern: breakableTypePattern$2,
        lineBreakPattern: lineBreakPattern$1,
        createGlobalLinebreakMatcher: createGlobalLinebreakMatcher$1,
        shebangPattern: shebangPattern$1
      };
      var _astUtils$1 = exports$4S;
      exports$4S.breakableTypePattern; exports$4S.lineBreakPattern; exports$4S.createGlobalLinebreakMatcher; exports$4S.shebangPattern;

      var _configOps2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _configOps$3,
        getRuleSeverity: getRuleSeverity$1
      });

      var _configValidator2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _configValidator$2
      });

      var _eslintVisitorKeys$1 = "default" in _eslintVisitorKeys2 ? exports$1$q : _eslintVisitorKeys2;
      var _debug$6 = "default" in _debug2 ? _browser : _debug2;
      var exports$4R = {};
      const vk = _eslintVisitorKeys$1;
      const debug$8 = _debug$6("eslint:traverser");
      function noop$2() {
      }
      function isNode$1(x) {
        return x !== null && typeof x === "object" && typeof x.type === "string";
      }
      function getVisitorKeys(visitorKeys, node) {
        let keys = visitorKeys[node.type];
        if (!keys) {
          keys = vk.getKeys(node);
          debug$8("Unknown node type \"%s\": Estimated visitor keys %j", node.type, keys);
        }
        return keys;
      }
      class Traverser$4 {
        constructor() {
          this._current = null;
          this._parents = [];
          this._skipped = false;
          this._broken = false;
          this._visitorKeys = null;
          this._enter = null;
          this._leave = null;
        }
        current() {
          return this._current;
        }
        parents() {
          return this._parents.slice(0);
        }
        break() {
          this._broken = true;
        }
        skip() {
          this._skipped = true;
        }
        traverse(node, options) {
          this._current = null;
          this._parents = [];
          this._skipped = false;
          this._broken = false;
          this._visitorKeys = options.visitorKeys || vk.KEYS;
          this._enter = options.enter || noop$2;
          this._leave = options.leave || noop$2;
          this._traverse(node, null);
        }
        _traverse(node, parent) {
          if (!isNode$1(node)) {
            return;
          }
          this._current = node;
          this._skipped = false;
          this._enter(node, parent);
          if (!this._skipped && !this._broken) {
            const keys = getVisitorKeys(this._visitorKeys, node);
            if (keys.length >= 1) {
              this._parents.push(node);
              for (let i = 0; i < keys.length && !this._broken; ++i) {
                const child = node[keys[i]];
                if (Array.isArray(child)) {
                  for (let j = 0; j < child.length && !this._broken; ++j) {
                    this._traverse(child[j], node);
                  }
                } else {
                  this._traverse(child, node);
                }
              }
              this._parents.pop();
            }
          }
          if (!this._broken) {
            this._leave(node, parent);
          }
          this._current = parent;
        }
        static getKeys(node) {
          return vk.getKeys(node);
        }
        static traverse(node, options) {
          new Traverser$4().traverse(node, options);
        }
        static get DEFAULT_VISITOR_KEYS() {
          return vk.KEYS;
        }
      }
      exports$4R = Traverser$4;
      var _traverser = exports$4R;

      var _global$9 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$4Q = {};
      Object.defineProperty(exports$4Q, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var evk$1 = _interopDefault(exports$1$z);
      function getInnermostScope(initialScope, node) {
        const location = node.range[0];
        let scope = initialScope;
        let found = false;
        do {
          found = false;
          for (const childScope of scope.childScopes) {
            const range = childScope.block.range;
            if (range[0] <= location && location < range[1]) {
              scope = childScope;
              found = true;
              break;
            }
          }
        } while (found);
        return scope;
      }
      function findVariable$4(initialScope, nameOrNode) {
        let name = "";
        let scope = initialScope;
        if (typeof nameOrNode === "string") {
          name = nameOrNode;
        } else {
          name = nameOrNode.name;
          scope = getInnermostScope(scope, nameOrNode);
        }
        while (scope != null) {
          const variable = scope.set.get(name);
          if (variable != null) {
            return variable;
          }
          scope = scope.upper;
        }
        return null;
      }
      function negate0(token) {
        return !this(token);
      }
      function negate$2(f) {
        return negate0.bind(f);
      }
      function isArrowToken$1(token) {
        return token.value === "=>" && token.type === "Punctuator";
      }
      function isCommaToken$2(token) {
        return token.value === "," && token.type === "Punctuator";
      }
      function isSemicolonToken$1(token) {
        return token.value === ";" && token.type === "Punctuator";
      }
      function isColonToken$1(token) {
        return token.value === ":" && token.type === "Punctuator";
      }
      function isOpeningParenToken$2(token) {
        return token.value === "(" && token.type === "Punctuator";
      }
      function isClosingParenToken$2(token) {
        return token.value === ")" && token.type === "Punctuator";
      }
      function isOpeningBracketToken$1(token) {
        return token.value === "[" && token.type === "Punctuator";
      }
      function isClosingBracketToken$1(token) {
        return token.value === "]" && token.type === "Punctuator";
      }
      function isOpeningBraceToken$1(token) {
        return token.value === "{" && token.type === "Punctuator";
      }
      function isClosingBraceToken$1(token) {
        return token.value === "}" && token.type === "Punctuator";
      }
      function isCommentToken$3(token) {
        return token.type === "Line" || token.type === "Block" || token.type === "Shebang";
      }
      const isNotArrowToken = negate$2(isArrowToken$1);
      const isNotCommaToken = negate$2(isCommaToken$2);
      const isNotSemicolonToken = negate$2(isSemicolonToken$1);
      const isNotColonToken = negate$2(isColonToken$1);
      const isNotOpeningParenToken$1 = negate$2(isOpeningParenToken$2);
      const isNotClosingParenToken = negate$2(isClosingParenToken$2);
      const isNotOpeningBracketToken = negate$2(isOpeningBracketToken$1);
      const isNotClosingBracketToken = negate$2(isClosingBracketToken$1);
      const isNotOpeningBraceToken = negate$2(isOpeningBraceToken$1);
      const isNotClosingBraceToken = negate$2(isClosingBraceToken$1);
      const isNotCommentToken = negate$2(isCommentToken$3);
      function getOpeningParenOfParams$1(node, sourceCode) {
        return node.id ? sourceCode.getTokenAfter(node.id, isOpeningParenToken$2) : sourceCode.getFirstToken(node, isOpeningParenToken$2);
      }
      function getFunctionHeadLocation(node, sourceCode) {
        const parent = node.parent;
        let start = null;
        let end = null;
        if (node.type === "ArrowFunctionExpression") {
          const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken$1);
          start = arrowToken.loc.start;
          end = arrowToken.loc.end;
        } else if (parent.type === "Property" || parent.type === "MethodDefinition") {
          start = parent.loc.start;
          end = getOpeningParenOfParams$1(node, sourceCode).loc.start;
        } else {
          start = node.loc.start;
          end = getOpeningParenOfParams$1(node, sourceCode).loc.start;
        }
        return {
          start: Object.assign({}, start),
          end: Object.assign({}, end)
        };
      }
      const globalObject = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof _global$9 !== "undefined" ? _global$9 : {};
      const builtinNames = Object.freeze(new Set([
        "Array",
        "ArrayBuffer",
        "BigInt",
        "BigInt64Array",
        "BigUint64Array",
        "Boolean",
        "DataView",
        "Date",
        "decodeURI",
        "decodeURIComponent",
        "encodeURI",
        "encodeURIComponent",
        "escape",
        "Float32Array",
        "Float64Array",
        "Function",
        "Infinity",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "isFinite",
        "isNaN",
        "isPrototypeOf",
        "JSON",
        "Map",
        "Math",
        "NaN",
        "Number",
        "Object",
        "parseFloat",
        "parseInt",
        "Promise",
        "Proxy",
        "Reflect",
        "RegExp",
        "Set",
        "String",
        "Symbol",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray",
        "undefined",
        "unescape",
        "WeakMap",
        "WeakSet"
      ]));
      const callAllowed = new Set([
        Array.isArray,
        typeof BigInt === "function" ? BigInt : undefined,
        Boolean,
        Date,
        Date.parse,
        decodeURI,
        decodeURIComponent,
        encodeURI,
        encodeURIComponent,
        escape,
        isFinite,
        isNaN,
        isPrototypeOf,
        ...Object.getOwnPropertyNames(Math).map(k => Math[k]).filter(f => typeof f === "function"),
        Number,
        Number.isFinite,
        Number.isNaN,
        Number.parseFloat,
        Number.parseInt,
        Object,
        Object.entries,
        Object.is,
        Object.isExtensible,
        Object.isFrozen,
        Object.isSealed,
        Object.keys,
        Object.values,
        parseFloat,
        parseInt,
        RegExp,
        String,
        String.fromCharCode,
        String.fromCodePoint,
        String.raw,
        Symbol,
        Symbol.for,
        Symbol.keyFor,
        unescape
      ].filter(f => typeof f === "function"));
      const callPassThrough = new Set([
        Object.freeze,
        Object.preventExtensions,
        Object.seal
      ]);
      function getPropertyDescriptor(object, name) {
        let x = object;
        while ((typeof x === "object" || typeof x === "function") && x !== null) {
          const d = Object.getOwnPropertyDescriptor(x, name);
          if (d) {
            return d;
          }
          x = Object.getPrototypeOf(x);
        }
        return null;
      }
      function isGetter(object, name) {
        const d = getPropertyDescriptor(object, name);
        return d != null && d.get != null;
      }
      function getElementValues(nodeList, initialScope) {
        const valueList = [];
        for (let i = 0; i < nodeList.length; ++i) {
          const elementNode = nodeList[i];
          if (elementNode == null) {
            valueList.length = i + 1;
          } else if (elementNode.type === "SpreadElement") {
            const argument = getStaticValueR(elementNode.argument, initialScope);
            if (argument == null) {
              return null;
            }
            valueList.push(...argument.value);
          } else {
            const element = getStaticValueR(elementNode, initialScope);
            if (element == null) {
              return null;
            }
            valueList.push(element.value);
          }
        }
        return valueList;
      }
      const operations = Object.freeze({
        ArrayExpression(node, initialScope) {
          const elements = getElementValues(node.elements, initialScope);
          return elements != null ? { value: elements } : null;
        },
        AssignmentExpression(node, initialScope) {
          if (node.operator === "=") {
            return getStaticValueR(node.right, initialScope);
          }
          return null;
        },
        BinaryExpression(node, initialScope) {
          if (node.operator === "in" || node.operator === "instanceof") {
            return null;
          }
          const left = getStaticValueR(node.left, initialScope);
          const right = getStaticValueR(node.right, initialScope);
          if (left != null && right != null) {
            switch (node.operator) {
            case "==":
              return { value: left.value == right.value };
            case "!=":
              return { value: left.value != right.value };
            case "===":
              return { value: left.value === right.value };
            case "!==":
              return { value: left.value !== right.value };
            case "<":
              return { value: left.value < right.value };
            case "<=":
              return { value: left.value <= right.value };
            case ">":
              return { value: left.value > right.value };
            case ">=":
              return { value: left.value >= right.value };
            case "<<":
              return { value: left.value << right.value };
            case ">>":
              return { value: left.value >> right.value };
            case ">>>":
              return { value: left.value >>> right.value };
            case "+":
              return { value: left.value + right.value };
            case "-":
              return { value: left.value - right.value };
            case "*":
              return { value: left.value * right.value };
            case "/":
              return { value: left.value / right.value };
            case "%":
              return { value: left.value % right.value };
            case "**":
              return { value: Math.pow(left.value, right.value) };
            case "|":
              return { value: left.value | right.value };
            case "^":
              return { value: left.value ^ right.value };
            case "&":
              return { value: left.value & right.value };
            }
          }
          return null;
        },
        CallExpression(node, initialScope) {
          const calleeNode = node.callee;
          const args = getElementValues(node.arguments, initialScope);
          if (args != null) {
            if (calleeNode.type === "MemberExpression") {
              const object = getStaticValueR(calleeNode.object, initialScope);
              if (object != null) {
                if (object.value == null && (object.optional || node.optional)) {
                  return {
                    value: undefined,
                    optional: true
                  };
                }
                const property = calleeNode.computed ? getStaticValueR(calleeNode.property, initialScope) : { value: calleeNode.property.name };
                if (property != null) {
                  const receiver = object.value;
                  const methodName = property.value;
                  if (callAllowed.has(receiver[methodName])) {
                    return { value: receiver[methodName](...args) };
                  }
                  if (callPassThrough.has(receiver[methodName])) {
                    return { value: args[0] };
                  }
                }
              }
            } else {
              const callee = getStaticValueR(calleeNode, initialScope);
              if (callee != null) {
                if (callee.value == null && node.optional) {
                  return {
                    value: undefined,
                    optional: true
                  };
                }
                const func = callee.value;
                if (callAllowed.has(func)) {
                  return { value: func(...args) };
                }
                if (callPassThrough.has(func)) {
                  return { value: args[0] };
                }
              }
            }
          }
          return null;
        },
        ConditionalExpression(node, initialScope) {
          const test = getStaticValueR(node.test, initialScope);
          if (test != null) {
            return test.value ? getStaticValueR(node.consequent, initialScope) : getStaticValueR(node.alternate, initialScope);
          }
          return null;
        },
        ExpressionStatement(node, initialScope) {
          return getStaticValueR(node.expression, initialScope);
        },
        Identifier(node, initialScope) {
          if (initialScope != null) {
            const variable = findVariable$4(initialScope, node);
            if (variable != null && variable.defs.length === 0 && builtinNames.has(variable.name) && variable.name in globalObject) {
              return { value: globalObject[variable.name] };
            }
            if (variable != null && variable.defs.length === 1) {
              const def = variable.defs[0];
              if (def.parent && def.parent.kind === "const" && def.node.id.type === "Identifier") {
                return getStaticValueR(def.node.init, initialScope);
              }
            }
          }
          return null;
        },
        Literal(node) {
          if ((node.regex != null || node.bigint != null) && node.value == null) {
            return null;
          }
          return { value: node.value };
        },
        LogicalExpression(node, initialScope) {
          const left = getStaticValueR(node.left, initialScope);
          if (left != null) {
            if (node.operator === "||" && Boolean(left.value) === true || node.operator === "&&" && Boolean(left.value) === false || node.operator === "??" && left.value != null) {
              return left;
            }
            const right = getStaticValueR(node.right, initialScope);
            if (right != null) {
              return right;
            }
          }
          return null;
        },
        MemberExpression(node, initialScope) {
          const object = getStaticValueR(node.object, initialScope);
          if (object != null) {
            if (object.value == null && (object.optional || node.optional)) {
              return {
                value: undefined,
                optional: true
              };
            }
            const property = node.computed ? getStaticValueR(node.property, initialScope) : { value: node.property.name };
            if (property != null && !isGetter(object.value, property.value)) {
              return { value: object.value[property.value] };
            }
          }
          return null;
        },
        ChainExpression(node, initialScope) {
          const expression = getStaticValueR(node.expression, initialScope);
          if (expression != null) {
            return { value: expression.value };
          }
          return null;
        },
        NewExpression(node, initialScope) {
          const callee = getStaticValueR(node.callee, initialScope);
          const args = getElementValues(node.arguments, initialScope);
          if (callee != null && args != null) {
            const Func = callee.value;
            if (callAllowed.has(Func)) {
              return { value: new Func(...args) };
            }
          }
          return null;
        },
        ObjectExpression(node, initialScope) {
          const object = {};
          for (const propertyNode of node.properties) {
            if (propertyNode.type === "Property") {
              if (propertyNode.kind !== "init") {
                return null;
              }
              const key = propertyNode.computed ? getStaticValueR(propertyNode.key, initialScope) : { value: propertyNode.key.name };
              const value = getStaticValueR(propertyNode.value, initialScope);
              if (key == null || value == null) {
                return null;
              }
              object[key.value] = value.value;
            } else if (propertyNode.type === "SpreadElement" || propertyNode.type === "ExperimentalSpreadProperty") {
              const argument = getStaticValueR(propertyNode.argument, initialScope);
              if (argument == null) {
                return null;
              }
              Object.assign(object, argument.value);
            } else {
              return null;
            }
          }
          return { value: object };
        },
        SequenceExpression(node, initialScope) {
          const last = node.expressions[node.expressions.length - 1];
          return getStaticValueR(last, initialScope);
        },
        TaggedTemplateExpression(node, initialScope) {
          const tag = getStaticValueR(node.tag, initialScope);
          const expressions = getElementValues(node.quasi.expressions, initialScope);
          if (tag != null && expressions != null) {
            const func = tag.value;
            const strings = node.quasi.quasis.map(q => q.value.cooked);
            strings.raw = node.quasi.quasis.map(q => q.value.raw);
            if (func === String.raw) {
              return { value: func(strings, ...expressions) };
            }
          }
          return null;
        },
        TemplateLiteral(node, initialScope) {
          const expressions = getElementValues(node.expressions, initialScope);
          if (expressions != null) {
            let value = node.quasis[0].value.cooked;
            for (let i = 0; i < expressions.length; ++i) {
              value += expressions[i];
              value += node.quasis[i + 1].value.cooked;
            }
            return { value };
          }
          return null;
        },
        UnaryExpression(node, initialScope) {
          if (node.operator === "delete") {
            return null;
          }
          if (node.operator === "void") {
            return { value: undefined };
          }
          const arg = getStaticValueR(node.argument, initialScope);
          if (arg != null) {
            switch (node.operator) {
            case "-":
              return { value: -arg.value };
            case "+":
              return { value: +arg.value };
            case "!":
              return { value: !arg.value };
            case "~":
              return { value: ~arg.value };
            case "typeof":
              return { value: typeof arg.value };
            }
          }
          return null;
        }
      });
      function getStaticValueR(node, initialScope) {
        if (node != null && Object.hasOwnProperty.call(operations, node.type)) {
          return operations[node.type](node, initialScope);
        }
        return null;
      }
      function getStaticValue$1(node, initialScope = null) {
        try {
          return getStaticValueR(node, initialScope);
        } catch (_error) {
          return null;
        }
      }
      function getStringIfConstant$4(node, initialScope = null) {
        if (node && node.type === "Literal" && node.value === null) {
          if (node.regex) {
            return `/${ node.regex.pattern }/${ node.regex.flags }`;
          }
          if (node.bigint) {
            return node.bigint;
          }
        }
        const evaluated = getStaticValue$1(node, initialScope);
        return evaluated && String(evaluated.value);
      }
      function getPropertyName$3(node, initialScope) {
        switch (node.type) {
        case "MemberExpression":
          if (node.computed) {
            return getStringIfConstant$4(node.property, initialScope);
          }
          return node.property.name;
        case "Property":
        case "MethodDefinition":
          if (node.computed) {
            return getStringIfConstant$4(node.key, initialScope);
          }
          if (node.key.type === "Literal") {
            return String(node.key.value);
          }
          return node.key.name;
        }
        return null;
      }
      function getFunctionNameWithKind(node) {
        const parent = node.parent;
        const tokens = [];
        if (parent.type === "MethodDefinition" && parent.static) {
          tokens.push("static");
        }
        if (node.async) {
          tokens.push("async");
        }
        if (node.generator) {
          tokens.push("generator");
        }
        if (node.type === "ArrowFunctionExpression") {
          tokens.push("arrow", "function");
        } else if (parent.type === "Property" || parent.type === "MethodDefinition") {
          if (parent.kind === "constructor") {
            return "constructor";
          }
          if (parent.kind === "get") {
            tokens.push("getter");
          } else if (parent.kind === "set") {
            tokens.push("setter");
          } else {
            tokens.push("method");
          }
        } else {
          tokens.push("function");
        }
        if (node.id) {
          tokens.push(`'${ node.id.name }'`);
        } else {
          const name = getPropertyName$3(parent);
          if (name) {
            tokens.push(`'${ name }'`);
          }
        }
        if (node.type === "ArrowFunctionExpression") {
          if (parent.type === "VariableDeclarator" && parent.id && parent.id.type === "Identifier") {
            tokens.push(`'${ parent.id.name }'`);
          }
          if (parent.type === "AssignmentExpression" && parent.left && parent.left.type === "Identifier") {
            tokens.push(`'${ parent.left.name }'`);
          }
        }
        return tokens.join(" ");
      }
      const typeConversionBinaryOps = Object.freeze(new Set([
        "==",
        "!=",
        "<",
        "<=",
        ">",
        ">=",
        "<<",
        ">>",
        ">>>",
        "+",
        "-",
        "*",
        "/",
        "%",
        "|",
        "^",
        "&",
        "in"
      ]));
      const typeConversionUnaryOps = Object.freeze(new Set([
        "-",
        "+",
        "!",
        "~"
      ]));
      function isNode(x) {
        return x !== null && typeof x === "object" && typeof x.type === "string";
      }
      const visitor = Object.freeze(Object.assign(Object.create(null), {
        $visit(node, options, visitorKeys) {
          const {type} = node;
          if (typeof this[type] === "function") {
            return this[type](node, options, visitorKeys);
          }
          return this.$visitChildren(node, options, visitorKeys);
        },
        $visitChildren(node, options, visitorKeys) {
          const {type} = node;
          for (const key of visitorKeys[type] || evk$1.getKeys(node)) {
            const value = node[key];
            if (Array.isArray(value)) {
              for (const element of value) {
                if (isNode(element) && this.$visit(element, options, visitorKeys)) {
                  return true;
                }
              }
            } else if (isNode(value) && this.$visit(value, options, visitorKeys)) {
              return true;
            }
          }
          return false;
        },
        ArrowFunctionExpression() {
          return false;
        },
        AssignmentExpression() {
          return true;
        },
        AwaitExpression() {
          return true;
        },
        BinaryExpression(node, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && typeConversionBinaryOps.has(node.operator) && (node.left.type !== "Literal" || node.right.type !== "Literal")) {
            return true;
          }
          return this.$visitChildren(node, options, visitorKeys);
        },
        CallExpression() {
          return true;
        },
        FunctionExpression() {
          return false;
        },
        ImportExpression() {
          return true;
        },
        MemberExpression(node, options, visitorKeys) {
          if (options.considerGetters) {
            return true;
          }
          if (options.considerImplicitTypeConversion && node.computed && node.property.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node, options, visitorKeys);
        },
        MethodDefinition(node, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && node.computed && node.key.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node, options, visitorKeys);
        },
        NewExpression() {
          return true;
        },
        Property(node, options, visitorKeys) {
          if (options.considerImplicitTypeConversion && node.computed && node.key.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node, options, visitorKeys);
        },
        UnaryExpression(node, options, visitorKeys) {
          if (node.operator === "delete") {
            return true;
          }
          if (options.considerImplicitTypeConversion && typeConversionUnaryOps.has(node.operator) && node.argument.type !== "Literal") {
            return true;
          }
          return this.$visitChildren(node, options, visitorKeys);
        },
        UpdateExpression() {
          return true;
        },
        YieldExpression() {
          return true;
        }
      }));
      function hasSideEffect(node, sourceCode, {considerGetters = false, considerImplicitTypeConversion = false} = {}) {
        return visitor.$visit(node, {
          considerGetters,
          considerImplicitTypeConversion
        }, sourceCode.visitorKeys || evk$1.KEYS);
      }
      function getParentSyntaxParen(node, sourceCode) {
        const parent = node.parent;
        switch (parent.type) {
        case "CallExpression":
        case "NewExpression":
          if (parent.arguments.length === 1 && parent.arguments[0] === node) {
            return sourceCode.getTokenAfter(parent.callee, isOpeningParenToken$2);
          }
          return null;
        case "DoWhileStatement":
          if (parent.test === node) {
            return sourceCode.getTokenAfter(parent.body, isOpeningParenToken$2);
          }
          return null;
        case "IfStatement":
        case "WhileStatement":
          if (parent.test === node) {
            return sourceCode.getFirstToken(parent, 1);
          }
          return null;
        case "ImportExpression":
          if (parent.source === node) {
            return sourceCode.getFirstToken(parent, 1);
          }
          return null;
        case "SwitchStatement":
          if (parent.discriminant === node) {
            return sourceCode.getFirstToken(parent, 1);
          }
          return null;
        case "WithStatement":
          if (parent.object === node) {
            return sourceCode.getFirstToken(parent, 1);
          }
          return null;
        default:
          return null;
        }
      }
      function isParenthesized(timesOrNode, nodeOrSourceCode, optionalSourceCode) {
        let times, node, sourceCode, maybeLeftParen, maybeRightParen;
        if (typeof timesOrNode === "number") {
          times = timesOrNode | 0;
          node = nodeOrSourceCode;
          sourceCode = optionalSourceCode;
          if (!(times >= 1)) {
            throw new TypeError("'times' should be a positive integer.");
          }
        } else {
          times = 1;
          node = timesOrNode;
          sourceCode = nodeOrSourceCode;
        }
        if (node == null) {
          return false;
        }
        maybeLeftParen = maybeRightParen = node;
        do {
          maybeLeftParen = sourceCode.getTokenBefore(maybeLeftParen);
          maybeRightParen = sourceCode.getTokenAfter(maybeRightParen);
        } while (maybeLeftParen != null && maybeRightParen != null && isOpeningParenToken$2(maybeLeftParen) && isClosingParenToken$2(maybeRightParen) && maybeLeftParen !== getParentSyntaxParen(node, sourceCode) && --times > 0);
        return times === 0;
      }
      const placeholder = /\$(?:[$&`']|[1-9][0-9]?)/gu;
      const internal = new WeakMap();
      function isEscaped(str, index) {
        let escaped = false;
        for (let i = index - 1; i >= 0 && str.charCodeAt(i) === 92; --i) {
          escaped = !escaped;
        }
        return escaped;
      }
      function replaceS(matcher, str, replacement) {
        const chunks = [];
        let index = 0;
        let match = null;
        function replacer(key) {
          switch (key) {
          case "$$":
            return "$";
          case "$&":
            return match[0];
          case "$`":
            return str.slice(0, match.index);
          case "$'":
            return str.slice(match.index + match[0].length);
          default: {
              const i = key.slice(1);
              if (i in match) {
                return match[i];
              }
              return key;
            }
          }
        }
        for (match of matcher.execAll(str)) {
          chunks.push(str.slice(index, match.index));
          chunks.push(replacement.replace(placeholder, replacer));
          index = match.index + match[0].length;
        }
        chunks.push(str.slice(index));
        return chunks.join("");
      }
      function replaceF(matcher, str, replace) {
        const chunks = [];
        let index = 0;
        for (const match of matcher.execAll(str)) {
          chunks.push(str.slice(index, match.index));
          chunks.push(String(replace(...match, match.index, match.input)));
          index = match.index + match[0].length;
        }
        chunks.push(str.slice(index));
        return chunks.join("");
      }
      class PatternMatcher {
        constructor(pattern, {
          escaped = false
        } = {}) {
          if (!(pattern instanceof RegExp)) {
            throw new TypeError("'pattern' should be a RegExp instance.");
          }
          if (!pattern.flags.includes("g")) {
            throw new Error("'pattern' should contains 'g' flag.");
          }
          internal.set(this, {
            pattern: new RegExp(pattern.source, pattern.flags),
            escaped: Boolean(escaped)
          });
        }
        *execAll(str) {
          const {pattern, escaped} = internal.get(this);
          let match = null;
          let lastIndex = 0;
          pattern.lastIndex = 0;
          while ((match = pattern.exec(str)) != null) {
            if (escaped || !isEscaped(str, match.index)) {
              lastIndex = pattern.lastIndex;
              yield match;
              pattern.lastIndex = lastIndex;
            }
          }
        }
        test(str) {
          const it = this.execAll(str);
          const ret = it.next();
          return !ret.done;
        }
        [Symbol.replace](str, replacer) {
          return typeof replacer === "function" ? replaceF(this, String(str), replacer) : replaceS(this, String(str), String(replacer));
        }
      }
      const IMPORT_TYPE = /^(?:Import|Export(?:All|Default|Named))Declaration$/u;
      const has = Function.call.bind(Object.hasOwnProperty);
      const READ = Symbol("read");
      const CALL$8 = Symbol("call");
      const CONSTRUCT$6 = Symbol("construct");
      const ESM = Symbol("esm");
      const requireCall = { require: { [CALL$8]: true } };
      function isModifiedGlobal(variable) {
        return variable == null || variable.defs.length !== 0 || variable.references.some(r => r.isWrite());
      }
      function isPassThrough(node) {
        const parent = node.parent;
        switch (parent && parent.type) {
        case "ConditionalExpression":
          return parent.consequent === node || parent.alternate === node;
        case "LogicalExpression":
          return true;
        case "SequenceExpression":
          return parent.expressions[parent.expressions.length - 1] === node;
        case "ChainExpression":
          return true;
        default:
          return false;
        }
      }
      class ReferenceTracker$8 {
        constructor(globalScope, {mode = "strict", globalObjectNames = [
            "global",
            "globalThis",
            "self",
            "window"
          ]} = {}) {
          this.variableStack = [];
          this.globalScope = globalScope;
          this.mode = mode;
          this.globalObjectNames = globalObjectNames.slice(0);
        }
        *iterateGlobalReferences(traceMap) {
          for (const key of Object.keys(traceMap)) {
            const nextTraceMap = traceMap[key];
            const path = [key];
            const variable = this.globalScope.set.get(key);
            if (isModifiedGlobal(variable)) {
              continue;
            }
            yield* this._iterateVariableReferences(variable, path, nextTraceMap, true);
          }
          for (const key of this.globalObjectNames) {
            const path = [];
            const variable = this.globalScope.set.get(key);
            if (isModifiedGlobal(variable)) {
              continue;
            }
            yield* this._iterateVariableReferences(variable, path, traceMap, false);
          }
        }
        *iterateCjsReferences(traceMap) {
          for (const {node} of this.iterateGlobalReferences(requireCall)) {
            const key = getStringIfConstant$4(node.arguments[0]);
            if (key == null || !has(traceMap, key)) {
              continue;
            }
            const nextTraceMap = traceMap[key];
            const path = [key];
            if (nextTraceMap[READ]) {
              yield {
                node,
                path,
                type: READ,
                info: nextTraceMap[READ]
              };
            }
            yield* this._iteratePropertyReferences(node, path, nextTraceMap);
          }
        }
        *iterateEsmReferences(traceMap) {
          const programNode = this.globalScope.block;
          for (const node of programNode.body) {
            if (!IMPORT_TYPE.test(node.type) || node.source == null) {
              continue;
            }
            const moduleId = node.source.value;
            if (!has(traceMap, moduleId)) {
              continue;
            }
            const nextTraceMap = traceMap[moduleId];
            const path = [moduleId];
            if (nextTraceMap[READ]) {
              yield {
                node,
                path,
                type: READ,
                info: nextTraceMap[READ]
              };
            }
            if (node.type === "ExportAllDeclaration") {
              for (const key of Object.keys(nextTraceMap)) {
                const exportTraceMap = nextTraceMap[key];
                if (exportTraceMap[READ]) {
                  yield {
                    node,
                    path: path.concat(key),
                    type: READ,
                    info: exportTraceMap[READ]
                  };
                }
              }
            } else {
              for (const specifier of node.specifiers) {
                const esm = has(nextTraceMap, ESM);
                const it = this._iterateImportReferences(specifier, path, esm ? nextTraceMap : this.mode === "legacy" ? Object.assign({ default: nextTraceMap }, nextTraceMap) : { default: nextTraceMap });
                if (esm) {
                  yield* it;
                } else {
                  for (const report of it) {
                    report.path = report.path.filter(exceptDefault);
                    if (report.path.length >= 2 || report.type !== READ) {
                      yield report;
                    }
                  }
                }
              }
            }
          }
        }
        *_iterateVariableReferences(variable, path, traceMap, shouldReport) {
          if (this.variableStack.includes(variable)) {
            return;
          }
          this.variableStack.push(variable);
          try {
            for (const reference of variable.references) {
              if (!reference.isRead()) {
                continue;
              }
              const node = reference.identifier;
              if (shouldReport && traceMap[READ]) {
                yield {
                  node,
                  path,
                  type: READ,
                  info: traceMap[READ]
                };
              }
              yield* this._iteratePropertyReferences(node, path, traceMap);
            }
          } finally {
            this.variableStack.pop();
          }
        }
        *_iteratePropertyReferences(rootNode, path, traceMap) {
          let node = rootNode;
          while (isPassThrough(node)) {
            node = node.parent;
          }
          const parent = node.parent;
          if (parent.type === "MemberExpression") {
            if (parent.object === node) {
              const key = getPropertyName$3(parent);
              if (key == null || !has(traceMap, key)) {
                return;
              }
              path = path.concat(key);
              const nextTraceMap = traceMap[key];
              if (nextTraceMap[READ]) {
                yield {
                  node: parent,
                  path,
                  type: READ,
                  info: nextTraceMap[READ]
                };
              }
              yield* this._iteratePropertyReferences(parent, path, nextTraceMap);
            }
            return;
          }
          if (parent.type === "CallExpression") {
            if (parent.callee === node && traceMap[CALL$8]) {
              yield {
                node: parent,
                path,
                type: CALL$8,
                info: traceMap[CALL$8]
              };
            }
            return;
          }
          if (parent.type === "NewExpression") {
            if (parent.callee === node && traceMap[CONSTRUCT$6]) {
              yield {
                node: parent,
                path,
                type: CONSTRUCT$6,
                info: traceMap[CONSTRUCT$6]
              };
            }
            return;
          }
          if (parent.type === "AssignmentExpression") {
            if (parent.right === node) {
              yield* this._iterateLhsReferences(parent.left, path, traceMap);
              yield* this._iteratePropertyReferences(parent, path, traceMap);
            }
            return;
          }
          if (parent.type === "AssignmentPattern") {
            if (parent.right === node) {
              yield* this._iterateLhsReferences(parent.left, path, traceMap);
            }
            return;
          }
          if (parent.type === "VariableDeclarator") {
            if (parent.init === node) {
              yield* this._iterateLhsReferences(parent.id, path, traceMap);
            }
          }
        }
        *_iterateLhsReferences(patternNode, path, traceMap) {
          if (patternNode.type === "Identifier") {
            const variable = findVariable$4(this.globalScope, patternNode);
            if (variable != null) {
              yield* this._iterateVariableReferences(variable, path, traceMap, false);
            }
            return;
          }
          if (patternNode.type === "ObjectPattern") {
            for (const property of patternNode.properties) {
              const key = getPropertyName$3(property);
              if (key == null || !has(traceMap, key)) {
                continue;
              }
              const nextPath = path.concat(key);
              const nextTraceMap = traceMap[key];
              if (nextTraceMap[READ]) {
                yield {
                  node: property,
                  path: nextPath,
                  type: READ,
                  info: nextTraceMap[READ]
                };
              }
              yield* this._iterateLhsReferences(property.value, nextPath, nextTraceMap);
            }
            return;
          }
          if (patternNode.type === "AssignmentPattern") {
            yield* this._iterateLhsReferences(patternNode.left, path, traceMap);
          }
        }
        *_iterateImportReferences(specifierNode, path, traceMap) {
          const type = specifierNode.type;
          if (type === "ImportSpecifier" || type === "ImportDefaultSpecifier") {
            const key = type === "ImportDefaultSpecifier" ? "default" : specifierNode.imported.name;
            if (!has(traceMap, key)) {
              return;
            }
            path = path.concat(key);
            const nextTraceMap = traceMap[key];
            if (nextTraceMap[READ]) {
              yield {
                node: specifierNode,
                path,
                type: READ,
                info: nextTraceMap[READ]
              };
            }
            yield* this._iterateVariableReferences(findVariable$4(this.globalScope, specifierNode.local), path, nextTraceMap, false);
            return;
          }
          if (type === "ImportNamespaceSpecifier") {
            yield* this._iterateVariableReferences(findVariable$4(this.globalScope, specifierNode.local), path, traceMap, false);
            return;
          }
          if (type === "ExportSpecifier") {
            const key = specifierNode.local.name;
            if (!has(traceMap, key)) {
              return;
            }
            path = path.concat(key);
            const nextTraceMap = traceMap[key];
            if (nextTraceMap[READ]) {
              yield {
                node: specifierNode,
                path,
                type: READ,
                info: nextTraceMap[READ]
              };
            }
          }
        }
      }
      ReferenceTracker$8.READ = READ;
      ReferenceTracker$8.CALL = CALL$8;
      ReferenceTracker$8.CONSTRUCT = CONSTRUCT$6;
      ReferenceTracker$8.ESM = ESM;
      function exceptDefault(name, index) {
        return !(index === 1 && name === "default");
      }
      var index = {
        CALL: CALL$8,
        CONSTRUCT: CONSTRUCT$6,
        ESM,
        findVariable: findVariable$4,
        getFunctionHeadLocation,
        getFunctionNameWithKind,
        getInnermostScope,
        getPropertyName: getPropertyName$3,
        getStaticValue: getStaticValue$1,
        getStringIfConstant: getStringIfConstant$4,
        hasSideEffect,
        isArrowToken: isArrowToken$1,
        isClosingBraceToken: isClosingBraceToken$1,
        isClosingBracketToken: isClosingBracketToken$1,
        isClosingParenToken: isClosingParenToken$2,
        isColonToken: isColonToken$1,
        isCommaToken: isCommaToken$2,
        isCommentToken: isCommentToken$3,
        isNotArrowToken,
        isNotClosingBraceToken,
        isNotClosingBracketToken,
        isNotClosingParenToken,
        isNotColonToken,
        isNotCommaToken,
        isNotCommentToken,
        isNotOpeningBraceToken,
        isNotOpeningBracketToken,
        isNotOpeningParenToken: isNotOpeningParenToken$1,
        isNotSemicolonToken,
        isOpeningBraceToken: isOpeningBraceToken$1,
        isOpeningBracketToken: isOpeningBracketToken$1,
        isOpeningParenToken: isOpeningParenToken$2,
        isParenthesized,
        isSemicolonToken: isSemicolonToken$1,
        PatternMatcher,
        READ,
        ReferenceTracker: ReferenceTracker$8
      };
      exports$4Q.CALL = CALL$8;
      exports$4Q.CONSTRUCT = CONSTRUCT$6;
      exports$4Q.ESM = ESM;
      exports$4Q.PatternMatcher = PatternMatcher;
      exports$4Q.READ = READ;
      exports$4Q.ReferenceTracker = ReferenceTracker$8;
      exports$4Q.default = index;
      exports$4Q.findVariable = findVariable$4;
      exports$4Q.getFunctionHeadLocation = getFunctionHeadLocation;
      exports$4Q.getFunctionNameWithKind = getFunctionNameWithKind;
      exports$4Q.getInnermostScope = getInnermostScope;
      exports$4Q.getPropertyName = getPropertyName$3;
      exports$4Q.getStaticValue = getStaticValue$1;
      exports$4Q.getStringIfConstant = getStringIfConstant$4;
      exports$4Q.hasSideEffect = hasSideEffect;
      exports$4Q.isArrowToken = isArrowToken$1;
      exports$4Q.isClosingBraceToken = isClosingBraceToken$1;
      exports$4Q.isClosingBracketToken = isClosingBracketToken$1;
      exports$4Q.isClosingParenToken = isClosingParenToken$2;
      exports$4Q.isColonToken = isColonToken$1;
      exports$4Q.isCommaToken = isCommaToken$2;
      exports$4Q.isCommentToken = isCommentToken$3;
      exports$4Q.isNotArrowToken = isNotArrowToken;
      exports$4Q.isNotClosingBraceToken = isNotClosingBraceToken;
      exports$4Q.isNotClosingBracketToken = isNotClosingBracketToken;
      exports$4Q.isNotClosingParenToken = isNotClosingParenToken;
      exports$4Q.isNotColonToken = isNotColonToken;
      exports$4Q.isNotCommaToken = isNotCommaToken;
      exports$4Q.isNotCommentToken = isNotCommentToken;
      exports$4Q.isNotOpeningBraceToken = isNotOpeningBraceToken;
      exports$4Q.isNotOpeningBracketToken = isNotOpeningBracketToken;
      exports$4Q.isNotOpeningParenToken = isNotOpeningParenToken$1;
      exports$4Q.isNotSemicolonToken = isNotSemicolonToken;
      exports$4Q.isOpeningBraceToken = isOpeningBraceToken$1;
      exports$4Q.isOpeningBracketToken = isOpeningBracketToken$1;
      exports$4Q.isOpeningParenToken = isOpeningParenToken$2;
      exports$4Q.isParenthesized = isParenthesized;
      exports$4Q.isSemicolonToken = isSemicolonToken$1;
      const __esModule$1 = exports$4Q.__esModule;
      const _CALL = exports$4Q.CALL, _CONSTRUCT = exports$4Q.CONSTRUCT, _ESM = exports$4Q.ESM, _PatternMatcher = exports$4Q.PatternMatcher, _READ = exports$4Q.READ, _ReferenceTracker = exports$4Q.ReferenceTracker, _findVariable = exports$4Q.findVariable, _getFunctionHeadLocation = exports$4Q.getFunctionHeadLocation, _getFunctionNameWithKind = exports$4Q.getFunctionNameWithKind, _getInnermostScope = exports$4Q.getInnermostScope, _getPropertyName = exports$4Q.getPropertyName, _getStaticValue = exports$4Q.getStaticValue, _getStringIfConstant = exports$4Q.getStringIfConstant, _hasSideEffect = exports$4Q.hasSideEffect, _isArrowToken = exports$4Q.isArrowToken, _isClosingBraceToken = exports$4Q.isClosingBraceToken, _isClosingBracketToken = exports$4Q.isClosingBracketToken, _isClosingParenToken = exports$4Q.isClosingParenToken, _isColonToken = exports$4Q.isColonToken, _isCommaToken = exports$4Q.isCommaToken, _isCommentToken = exports$4Q.isCommentToken, _isNotArrowToken = exports$4Q.isNotArrowToken, _isNotClosingBraceToken = exports$4Q.isNotClosingBraceToken, _isNotClosingBracketToken = exports$4Q.isNotClosingBracketToken, _isNotClosingParenToken = exports$4Q.isNotClosingParenToken, _isNotColonToken = exports$4Q.isNotColonToken, _isNotCommaToken = exports$4Q.isNotCommaToken, _isNotCommentToken = exports$4Q.isNotCommentToken, _isNotOpeningBraceToken = exports$4Q.isNotOpeningBraceToken, _isNotOpeningBracketToken = exports$4Q.isNotOpeningBracketToken, _isNotOpeningParenToken = exports$4Q.isNotOpeningParenToken, _isNotSemicolonToken = exports$4Q.isNotSemicolonToken, _isOpeningBraceToken = exports$4Q.isOpeningBraceToken, _isOpeningBracketToken = exports$4Q.isOpeningBracketToken, _isOpeningParenToken = exports$4Q.isOpeningParenToken, _isParenthesized = exports$4Q.isParenthesized, _isSemicolonToken = exports$4Q.isSemicolonToken;

      var _eslintUtils2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$4Q,
        CALL: _CALL,
        CONSTRUCT: _CONSTRUCT,
        ESM: _ESM,
        PatternMatcher: _PatternMatcher,
        READ: _READ,
        ReferenceTracker: _ReferenceTracker,
        __esModule: __esModule$1,
        findVariable: _findVariable,
        getFunctionHeadLocation: _getFunctionHeadLocation,
        getFunctionNameWithKind: _getFunctionNameWithKind,
        getInnermostScope: _getInnermostScope,
        getPropertyName: _getPropertyName,
        getStaticValue: _getStaticValue,
        getStringIfConstant: _getStringIfConstant,
        hasSideEffect: _hasSideEffect,
        isArrowToken: _isArrowToken,
        isClosingBraceToken: _isClosingBraceToken,
        isClosingBracketToken: _isClosingBracketToken,
        isClosingParenToken: _isClosingParenToken,
        isColonToken: _isColonToken,
        isCommaToken: _isCommaToken,
        isCommentToken: _isCommentToken,
        isNotArrowToken: _isNotArrowToken,
        isNotClosingBraceToken: _isNotClosingBraceToken,
        isNotClosingBracketToken: _isNotClosingBracketToken,
        isNotClosingParenToken: _isNotClosingParenToken,
        isNotColonToken: _isNotColonToken,
        isNotCommaToken: _isNotCommaToken,
        isNotCommentToken: _isNotCommentToken,
        isNotOpeningBraceToken: _isNotOpeningBraceToken,
        isNotOpeningBracketToken: _isNotOpeningBracketToken,
        isNotOpeningParenToken: _isNotOpeningParenToken,
        isNotSemicolonToken: _isNotSemicolonToken,
        isOpeningBraceToken: _isOpeningBraceToken,
        isOpeningBracketToken: _isOpeningBracketToken,
        isOpeningParenToken: _isOpeningParenToken,
        isParenthesized: _isParenthesized,
        isSemicolonToken: _isSemicolonToken
      });

      var exports$d$2 = {};
      exports$d$2 = class Cursor {
        constructor() {
          this.current = null;
        }
        getOneToken() {
          return this.moveNext() ? this.current : null;
        }
        getAllTokens() {
          const tokens = [];
          while (this.moveNext()) {
            tokens.push(this.current);
          }
          return tokens;
        }
        moveNext() {
          throw new Error("Not implemented.");
        }
      };
      var _cursor = exports$d$2;
      var exports$c$2 = {};
      function getStartLocation(token) {
        return token.range[0];
      }
      exports$c$2.search = function search(tokens, location) {
        const index = tokens.findIndex(el => location <= getStartLocation(el));
        return index === -1 ? tokens.length : index;
      };
      exports$c$2.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {
        if (startLoc in indexMap) {
          return indexMap[startLoc];
        }
        if (startLoc - 1 in indexMap) {
          const index = indexMap[startLoc - 1];
          const token = index >= 0 && index < tokens.length ? tokens[index] : null;
          if (token && token.range[0] >= startLoc) {
            return index;
          }
          return index + 1;
        }
        return 0;
      };
      exports$c$2.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {
        if (endLoc in indexMap) {
          return indexMap[endLoc] - 1;
        }
        if (endLoc - 1 in indexMap) {
          const index = indexMap[endLoc - 1];
          const token = index >= 0 && index < tokens.length ? tokens[index] : null;
          if (token && token.range[1] > endLoc) {
            return index - 1;
          }
          return index;
        }
        return tokens.length - 1;
      };
      var exports$b$2 = {};
      const Cursor$4 = _cursor;
      const utils$4 = exports$c$2;
      exports$b$2 = class BackwardTokenCommentCursor extends Cursor$4 {
        constructor(tokens, comments, indexMap, startLoc, endLoc) {
          super();
          this.tokens = tokens;
          this.comments = comments;
          this.tokenIndex = utils$4.getLastIndex(tokens, indexMap, endLoc);
          this.commentIndex = utils$4.search(comments, endLoc) - 1;
          this.border = startLoc;
        }
        moveNext() {
          const token = this.tokenIndex >= 0 ? this.tokens[this.tokenIndex] : null;
          const comment = this.commentIndex >= 0 ? this.comments[this.commentIndex] : null;
          if (token && (!comment || token.range[1] > comment.range[1])) {
            this.current = token;
            this.tokenIndex -= 1;
          } else if (comment) {
            this.current = comment;
            this.commentIndex -= 1;
          } else {
            this.current = null;
          }
          return Boolean(this.current) && (this.border === -1 || this.current.range[0] >= this.border);
        }
      };
      var _backwardTokenCommentCursor = exports$b$2;
      var exports$a$2 = {};
      const Cursor$3 = _cursor;
      const utils$3 = exports$c$2;
      exports$a$2 = class BackwardTokenCursor extends Cursor$3 {
        constructor(tokens, comments, indexMap, startLoc, endLoc) {
          super();
          this.tokens = tokens;
          this.index = utils$3.getLastIndex(tokens, indexMap, endLoc);
          this.indexEnd = utils$3.getFirstIndex(tokens, indexMap, startLoc);
        }
        moveNext() {
          if (this.index >= this.indexEnd) {
            this.current = this.tokens[this.index];
            this.index -= 1;
            return true;
          }
          return false;
        }
        getOneToken() {
          return this.index >= this.indexEnd ? this.tokens[this.index] : null;
        }
      };
      var _backwardTokenCursor = exports$a$2;
      var exports$9$2 = {};
      const Cursor$2 = _cursor;
      exports$9$2 = class DecorativeCursor extends Cursor$2 {
        constructor(cursor) {
          super();
          this.cursor = cursor;
        }
        moveNext() {
          const retv = this.cursor.moveNext();
          this.current = this.cursor.current;
          return retv;
        }
      };
      var _decorativeCursor = exports$9$2;
      var exports$8$2 = {};
      const DecorativeCursor$2 = _decorativeCursor;
      exports$8$2 = class FilterCursor extends DecorativeCursor$2 {
        constructor(cursor, predicate) {
          super(cursor);
          this.predicate = predicate;
        }
        moveNext() {
          const predicate = this.predicate;
          while (super.moveNext()) {
            if (predicate(this.current)) {
              return true;
            }
          }
          return false;
        }
      };
      var _filterCursor = exports$8$2;
      var exports$7$2 = {};
      const Cursor$1 = _cursor;
      const utils$2 = exports$c$2;
      exports$7$2 = class ForwardTokenCommentCursor extends Cursor$1 {
        constructor(tokens, comments, indexMap, startLoc, endLoc) {
          super();
          this.tokens = tokens;
          this.comments = comments;
          this.tokenIndex = utils$2.getFirstIndex(tokens, indexMap, startLoc);
          this.commentIndex = utils$2.search(comments, startLoc);
          this.border = endLoc;
        }
        moveNext() {
          const token = this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex] : null;
          const comment = this.commentIndex < this.comments.length ? this.comments[this.commentIndex] : null;
          if (token && (!comment || token.range[0] < comment.range[0])) {
            this.current = token;
            this.tokenIndex += 1;
          } else if (comment) {
            this.current = comment;
            this.commentIndex += 1;
          } else {
            this.current = null;
          }
          return Boolean(this.current) && (this.border === -1 || this.current.range[1] <= this.border);
        }
      };
      var _forwardTokenCommentCursor = exports$7$2;
      var exports$6$4 = {};
      const Cursor = _cursor;
      const utils$1 = exports$c$2;
      exports$6$4 = class ForwardTokenCursor extends Cursor {
        constructor(tokens, comments, indexMap, startLoc, endLoc) {
          super();
          this.tokens = tokens;
          this.index = utils$1.getFirstIndex(tokens, indexMap, startLoc);
          this.indexEnd = utils$1.getLastIndex(tokens, indexMap, endLoc);
        }
        moveNext() {
          if (this.index <= this.indexEnd) {
            this.current = this.tokens[this.index];
            this.index += 1;
            return true;
          }
          return false;
        }
        getOneToken() {
          return this.index <= this.indexEnd ? this.tokens[this.index] : null;
        }
        getAllTokens() {
          return this.tokens.slice(this.index, this.indexEnd + 1);
        }
      };
      var _forwardTokenCursor = exports$6$4;
      var exports$5$5 = {};
      const DecorativeCursor$1 = _decorativeCursor;
      exports$5$5 = class LimitCursor extends DecorativeCursor$1 {
        constructor(cursor, count) {
          super(cursor);
          this.count = count;
        }
        moveNext() {
          if (this.count > 0) {
            this.count -= 1;
            return super.moveNext();
          }
          return false;
        }
      };
      var _limitCursor = exports$5$5;
      var exports$4$5 = {};
      const DecorativeCursor = _decorativeCursor;
      exports$4$5 = class SkipCursor extends DecorativeCursor {
        constructor(cursor, count) {
          super(cursor);
          this.count = count;
        }
        moveNext() {
          while (this.count > 0) {
            this.count -= 1;
            if (!super.moveNext()) {
              return false;
            }
          }
          return super.moveNext();
        }
      };
      var _skipCursor = exports$4$5;
      var exports$3$a = {};
      const BackwardTokenCommentCursor = _backwardTokenCommentCursor;
      const BackwardTokenCursor = _backwardTokenCursor;
      const FilterCursor = _filterCursor;
      const ForwardTokenCommentCursor = _forwardTokenCommentCursor;
      const ForwardTokenCursor$2 = _forwardTokenCursor;
      const LimitCursor = _limitCursor;
      const SkipCursor = _skipCursor;
      class CursorFactory {
        constructor(TokenCursor, TokenCommentCursor) {
          this.TokenCursor = TokenCursor;
          this.TokenCommentCursor = TokenCommentCursor;
        }
        createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments) {
          const Cursor = includeComments ? this.TokenCommentCursor : this.TokenCursor;
          return new Cursor(tokens, comments, indexMap, startLoc, endLoc);
        }
        createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, count) {
          let cursor = this.createBaseCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments);
          if (filter) {
            cursor = new FilterCursor(cursor, filter);
          }
          if (skip >= 1) {
            cursor = new SkipCursor(cursor, skip);
          }
          if (count >= 0) {
            cursor = new LimitCursor(cursor, count);
          }
          return cursor;
        }
      }
      exports$3$a.forward = new CursorFactory(ForwardTokenCursor$2, ForwardTokenCommentCursor);
      exports$3$a.backward = new CursorFactory(BackwardTokenCursor, BackwardTokenCommentCursor);
      var exports$2$c = {};
      const ForwardTokenCursor$1 = _forwardTokenCursor;
      exports$2$c = class PaddedTokenCursor extends ForwardTokenCursor$1 {
        constructor(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {
          super(tokens, comments, indexMap, startLoc, endLoc);
          this.index = Math.max(0, this.index - beforeCount);
          this.indexEnd = Math.min(tokens.length - 1, this.indexEnd + afterCount);
        }
      };
      var _paddedTokenCursor = exports$2$c;
      var _assert$6 = "default" in _assert2 ? et : _assert2;
      var _eslintUtils$1$1 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$1$p = {};
      const assert$6 = _assert$6;
      const {isCommentToken: isCommentToken$1$1} = _eslintUtils$1$1;
      const cursors = exports$3$a;
      const ForwardTokenCursor = _forwardTokenCursor;
      const PaddedTokenCursor = _paddedTokenCursor;
      const utils$5 = exports$c$2;
      const TOKENS = Symbol("tokens");
      const COMMENTS = Symbol("comments");
      const INDEX_MAP = Symbol("indexMap");
      function createIndexMap(tokens, comments) {
        const map = Object.create(null);
        let tokenIndex = 0;
        let commentIndex = 0;
        let nextStart = 0;
        let range = null;
        while (tokenIndex < tokens.length || commentIndex < comments.length) {
          nextStart = commentIndex < comments.length ? comments[commentIndex].range[0] : Number.MAX_SAFE_INTEGER;
          while (tokenIndex < tokens.length && (range = tokens[tokenIndex].range)[0] < nextStart) {
            map[range[0]] = tokenIndex;
            map[range[1] - 1] = tokenIndex;
            tokenIndex += 1;
          }
          nextStart = tokenIndex < tokens.length ? tokens[tokenIndex].range[0] : Number.MAX_SAFE_INTEGER;
          while (commentIndex < comments.length && (range = comments[commentIndex].range)[0] < nextStart) {
            map[range[0]] = tokenIndex;
            map[range[1] - 1] = tokenIndex;
            commentIndex += 1;
          }
        }
        return map;
      }
      function createCursorWithSkip(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {
        let includeComments = false;
        let skip = 0;
        let filter = null;
        if (typeof opts === "number") {
          skip = opts | 0;
        } else if (typeof opts === "function") {
          filter = opts;
        } else if (opts) {
          includeComments = !!opts.includeComments;
          skip = opts.skip | 0;
          filter = opts.filter || null;
        }
        assert$6(skip >= 0, "options.skip should be zero or a positive integer.");
        assert$6(!filter || typeof filter === "function", "options.filter should be a function.");
        return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, skip, -1);
      }
      function createCursorWithCount(factory, tokens, comments, indexMap, startLoc, endLoc, opts) {
        let includeComments = false;
        let count = 0;
        let countExists = false;
        let filter = null;
        if (typeof opts === "number") {
          count = opts | 0;
          countExists = true;
        } else if (typeof opts === "function") {
          filter = opts;
        } else if (opts) {
          includeComments = !!opts.includeComments;
          count = opts.count | 0;
          countExists = typeof opts.count === "number";
          filter = opts.filter || null;
        }
        assert$6(count >= 0, "options.count should be zero or a positive integer.");
        assert$6(!filter || typeof filter === "function", "options.filter should be a function.");
        return factory.createCursor(tokens, comments, indexMap, startLoc, endLoc, includeComments, filter, 0, countExists ? count : -1);
      }
      function createCursorWithPadding(tokens, comments, indexMap, startLoc, endLoc, beforeCount, afterCount) {
        if (typeof beforeCount === "undefined" && typeof afterCount === "undefined") {
          return new ForwardTokenCursor(tokens, comments, indexMap, startLoc, endLoc);
        }
        if (typeof beforeCount === "number" || typeof beforeCount === "undefined") {
          return new PaddedTokenCursor(tokens, comments, indexMap, startLoc, endLoc, beforeCount | 0, afterCount | 0);
        }
        return createCursorWithCount(cursors.forward, tokens, comments, indexMap, startLoc, endLoc, beforeCount);
      }
      function getAdjacentCommentTokensFromCursor(cursor) {
        const tokens = [];
        let currentToken = cursor.getOneToken();
        while (currentToken && isCommentToken$1$1(currentToken)) {
          tokens.push(currentToken);
          currentToken = cursor.getOneToken();
        }
        return tokens;
      }
      exports$1$p = class TokenStore {
        constructor(tokens, comments) {
          this[TOKENS] = tokens;
          this[COMMENTS] = comments;
          this[INDEX_MAP] = createIndexMap(tokens, comments);
        }
        getTokenByRangeStart(offset, options) {
          const includeComments = options && options.includeComments;
          const token = cursors.forward.createBaseCursor(this[TOKENS], this[COMMENTS], this[INDEX_MAP], offset, -1, includeComments).getOneToken();
          if (token && token.range[0] === offset) {
            return token;
          }
          return null;
        }
        getFirstToken(node, options) {
          return createCursorWithSkip(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[0], node.range[1], options).getOneToken();
        }
        getLastToken(node, options) {
          return createCursorWithSkip(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[0], node.range[1], options).getOneToken();
        }
        getTokenBefore(node, options) {
          return createCursorWithSkip(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], -1, node.range[0], options).getOneToken();
        }
        getTokenAfter(node, options) {
          return createCursorWithSkip(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[1], -1, options).getOneToken();
        }
        getFirstTokenBetween(left, right, options) {
          return createCursorWithSkip(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], left.range[1], right.range[0], options).getOneToken();
        }
        getLastTokenBetween(left, right, options) {
          return createCursorWithSkip(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], left.range[1], right.range[0], options).getOneToken();
        }
        getTokenOrCommentBefore(node, skip) {
          return this.getTokenBefore(node, {
            includeComments: true,
            skip
          });
        }
        getTokenOrCommentAfter(node, skip) {
          return this.getTokenAfter(node, {
            includeComments: true,
            skip
          });
        }
        getFirstTokens(node, options) {
          return createCursorWithCount(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[0], node.range[1], options).getAllTokens();
        }
        getLastTokens(node, options) {
          return createCursorWithCount(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[0], node.range[1], options).getAllTokens().reverse();
        }
        getTokensBefore(node, options) {
          return createCursorWithCount(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], -1, node.range[0], options).getAllTokens().reverse();
        }
        getTokensAfter(node, options) {
          return createCursorWithCount(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[1], -1, options).getAllTokens();
        }
        getFirstTokensBetween(left, right, options) {
          return createCursorWithCount(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], left.range[1], right.range[0], options).getAllTokens();
        }
        getLastTokensBetween(left, right, options) {
          return createCursorWithCount(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], left.range[1], right.range[0], options).getAllTokens().reverse();
        }
        getTokens(node, beforeCount, afterCount) {
          return createCursorWithPadding(this[TOKENS], this[COMMENTS], this[INDEX_MAP], node.range[0], node.range[1], beforeCount, afterCount).getAllTokens();
        }
        getTokensBetween(left, right, padding) {
          return createCursorWithPadding(this[TOKENS], this[COMMENTS], this[INDEX_MAP], left.range[1], right.range[0], padding, padding).getAllTokens();
        }
        commentsExistBetween(left, right) {
          const index = utils$5.search(this[COMMENTS], left.range[1]);
          return index < this[COMMENTS].length && this[COMMENTS][index].range[1] <= right.range[0];
        }
        getCommentsBefore(nodeOrToken) {
          const cursor = createCursorWithCount(cursors.backward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], -1, nodeOrToken.range[0], { includeComments: true });
          return getAdjacentCommentTokensFromCursor(cursor).reverse();
        }
        getCommentsAfter(nodeOrToken) {
          const cursor = createCursorWithCount(cursors.forward, this[TOKENS], this[COMMENTS], this[INDEX_MAP], nodeOrToken.range[1], -1, { includeComments: true });
          return getAdjacentCommentTokensFromCursor(cursor);
        }
        getCommentsInside(node) {
          return this.getTokens(node, {
            includeComments: true,
            filter: isCommentToken$1$1
          });
        }
      };
      var _tokenStore = exports$1$p;
      var _eslintUtils$f = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$4P = {};
      const {isCommentToken: isCommentToken$2} = _eslintUtils$f, TokenStore = _tokenStore, astUtils$2p = _astUtils$1, Traverser$3 = _traverser;
      function validate$2(ast) {
        if (!ast.tokens) {
          throw new Error("AST is missing the tokens array.");
        }
        if (!ast.comments) {
          throw new Error("AST is missing the comments array.");
        }
        if (!ast.loc) {
          throw new Error("AST is missing location information.");
        }
        if (!ast.range) {
          throw new Error("AST is missing range information");
        }
      }
      function looksLikeExport(astNode) {
        return astNode.type === "ExportDefaultDeclaration" || astNode.type === "ExportNamedDeclaration" || astNode.type === "ExportAllDeclaration" || astNode.type === "ExportSpecifier";
      }
      function sortedMerge(tokens, comments) {
        const result = [];
        let tokenIndex = 0;
        let commentIndex = 0;
        while (tokenIndex < tokens.length || commentIndex < comments.length) {
          if (commentIndex >= comments.length || tokenIndex < tokens.length && tokens[tokenIndex].range[0] < comments[commentIndex].range[0]) {
            result.push(tokens[tokenIndex++]);
          } else {
            result.push(comments[commentIndex++]);
          }
        }
        return result;
      }
      function nodesOrTokensOverlap(first, second) {
        return first.range[0] <= second.range[0] && first.range[1] >= second.range[0] || second.range[0] <= first.range[0] && second.range[1] >= first.range[0];
      }
      function isSpaceBetween(sourceCode, first, second, checkInsideOfJSXText) {
        if (nodesOrTokensOverlap(first, second)) {
          return false;
        }
        const [startingNodeOrToken, endingNodeOrToken] = first.range[1] <= second.range[0] ? [
          first,
          second
        ] : [
          second,
          first
        ];
        const firstToken = sourceCode.getLastToken(startingNodeOrToken) || startingNodeOrToken;
        const finalToken = sourceCode.getFirstToken(endingNodeOrToken) || endingNodeOrToken;
        let currentToken = firstToken;
        while (currentToken !== finalToken) {
          const nextToken = sourceCode.getTokenAfter(currentToken, { includeComments: true });
          if (currentToken.range[1] !== nextToken.range[0] || checkInsideOfJSXText && nextToken !== finalToken && nextToken.type === "JSXText" && /\s/u.test(nextToken.value)) {
            return true;
          }
          currentToken = nextToken;
        }
        return false;
      }
      class SourceCode$2 extends TokenStore {
        constructor(textOrConfig, astIfNoConfig) {
          let text, ast, parserServices, scopeManager, visitorKeys;
          if (typeof textOrConfig === "string") {
            text = textOrConfig;
            ast = astIfNoConfig;
          } else if (typeof textOrConfig === "object" && textOrConfig !== null) {
            text = textOrConfig.text;
            ast = textOrConfig.ast;
            parserServices = textOrConfig.parserServices;
            scopeManager = textOrConfig.scopeManager;
            visitorKeys = textOrConfig.visitorKeys;
          }
          validate$2(ast);
          super(ast.tokens, ast.comments);
          this.hasBOM = text.charCodeAt(0) === 65279;
          this.text = this.hasBOM ? text.slice(1) : text;
          this.ast = ast;
          this.parserServices = parserServices || {};
          this.scopeManager = scopeManager || null;
          this.visitorKeys = visitorKeys || Traverser$3.DEFAULT_VISITOR_KEYS;
          const shebangMatched = this.text.match(astUtils$2p.shebangPattern);
          const hasShebang = shebangMatched && ast.comments.length && ast.comments[0].value === shebangMatched[1];
          if (hasShebang) {
            ast.comments[0].type = "Shebang";
          }
          this.tokensAndComments = sortedMerge(ast.tokens, ast.comments);
          this.lines = [];
          this.lineStartIndices = [0];
          const lineEndingPattern = astUtils$2p.createGlobalLinebreakMatcher();
          let match;
          while (match = lineEndingPattern.exec(this.text)) {
            this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1], match.index));
            this.lineStartIndices.push(match.index + match[0].length);
          }
          this.lines.push(this.text.slice(this.lineStartIndices[this.lineStartIndices.length - 1]));
          this._commentCache = new WeakMap();
          Object.freeze(this);
          Object.freeze(this.lines);
        }
        static splitLines(text) {
          return text.split(astUtils$2p.createGlobalLinebreakMatcher());
        }
        getText(node, beforeCount, afterCount) {
          if (node) {
            return this.text.slice(Math.max(node.range[0] - (beforeCount || 0), 0), node.range[1] + (afterCount || 0));
          }
          return this.text;
        }
        getLines() {
          return this.lines;
        }
        getAllComments() {
          return this.ast.comments;
        }
        getComments(node) {
          if (this._commentCache.has(node)) {
            return this._commentCache.get(node);
          }
          const comments = {
            leading: [],
            trailing: []
          };
          if (node.type === "Program") {
            if (node.body.length === 0) {
              comments.leading = node.comments;
            }
          } else {
            if ((node.type === "BlockStatement" || node.type === "ClassBody") && node.body.length === 0 || node.type === "ObjectExpression" && node.properties.length === 0 || node.type === "ArrayExpression" && node.elements.length === 0 || node.type === "SwitchStatement" && node.cases.length === 0) {
              comments.trailing = this.getTokens(node, {
                includeComments: true,
                filter: isCommentToken$2
              });
            }
            let currentToken = this.getTokenBefore(node, { includeComments: true });
            while (currentToken && isCommentToken$2(currentToken)) {
              if (node.parent && node.parent.type !== "Program" && currentToken.start < node.parent.start) {
                break;
              }
              comments.leading.push(currentToken);
              currentToken = this.getTokenBefore(currentToken, { includeComments: true });
            }
            comments.leading.reverse();
            currentToken = this.getTokenAfter(node, { includeComments: true });
            while (currentToken && isCommentToken$2(currentToken)) {
              if (node.parent && node.parent.type !== "Program" && currentToken.end > node.parent.end) {
                break;
              }
              comments.trailing.push(currentToken);
              currentToken = this.getTokenAfter(currentToken, { includeComments: true });
            }
          }
          this._commentCache.set(node, comments);
          return comments;
        }
        getJSDocComment(node) {
          const findJSDocComment = astNode => {
            const tokenBefore = this.getTokenBefore(astNode, { includeComments: true });
            if (tokenBefore && isCommentToken$2(tokenBefore) && tokenBefore.type === "Block" && tokenBefore.value.charAt(0) === "*" && astNode.loc.start.line - tokenBefore.loc.end.line <= 1) {
              return tokenBefore;
            }
            return null;
          };
          let parent = node.parent;
          switch (node.type) {
          case "ClassDeclaration":
          case "FunctionDeclaration":
            return findJSDocComment(looksLikeExport(parent) ? parent : node);
          case "ClassExpression":
            return findJSDocComment(parent.parent);
          case "ArrowFunctionExpression":
          case "FunctionExpression":
            if (parent.type !== "CallExpression" && parent.type !== "NewExpression") {
              while (!this.getCommentsBefore(parent).length && !/Function/u.test(parent.type) && parent.type !== "MethodDefinition" && parent.type !== "Property") {
                parent = parent.parent;
                if (!parent) {
                  break;
                }
              }
              if (parent && parent.type !== "FunctionDeclaration" && parent.type !== "Program") {
                return findJSDocComment(parent);
              }
            }
            return findJSDocComment(node);
          default:
            return null;
          }
        }
        getNodeByRangeIndex(index) {
          let result = null;
          Traverser$3.traverse(this.ast, {
            visitorKeys: this.visitorKeys,
            enter(node) {
              if (node.range[0] <= index && index < node.range[1]) {
                result = node;
              } else {
                this.skip();
              }
            },
            leave(node) {
              if (node === result) {
                this.break();
              }
            }
          });
          return result;
        }
        isSpaceBetween(first, second) {
          return isSpaceBetween(this, first, second, false);
        }
        isSpaceBetweenTokens(first, second) {
          return isSpaceBetween(this, first, second, true);
        }
        getLocFromIndex(index) {
          if (typeof index !== "number") {
            throw new TypeError("Expected `index` to be a number.");
          }
          if (index < 0 || index > this.text.length) {
            throw new RangeError(`Index out of range (requested index ${ index }, but source text has length ${ this.text.length }).`);
          }
          if (index === this.text.length) {
            return {
              line: this.lines.length,
              column: this.lines[this.lines.length - 1].length
            };
          }
          const lineNumber = index >= this.lineStartIndices[this.lineStartIndices.length - 1] ? this.lineStartIndices.length : this.lineStartIndices.findIndex(el => index < el);
          return {
            line: lineNumber,
            column: index - this.lineStartIndices[lineNumber - 1]
          };
        }
        getIndexFromLoc(loc) {
          if (typeof loc !== "object" || typeof loc.line !== "number" || typeof loc.column !== "number") {
            throw new TypeError("Expected `loc` to be an object with numeric `line` and `column` properties.");
          }
          if (loc.line <= 0) {
            throw new RangeError(`Line number out of range (line ${ loc.line } requested). Line numbers should be 1-based.`);
          }
          if (loc.line > this.lineStartIndices.length) {
            throw new RangeError(`Line number out of range (line ${ loc.line } requested, but only ${ this.lineStartIndices.length } lines present).`);
          }
          const lineStartIndex = this.lineStartIndices[loc.line - 1];
          const lineEndIndex = loc.line === this.lineStartIndices.length ? this.text.length : this.lineStartIndices[loc.line];
          const positionIndex = lineStartIndex + loc.column;
          if (loc.line === this.lineStartIndices.length && positionIndex > lineEndIndex || loc.line < this.lineStartIndices.length && positionIndex >= lineEndIndex) {
            throw new RangeError(`Column number out of range (column ${ loc.column } requested, but the length of line ${ loc.line } is ${ lineEndIndex - lineStartIndex }).`);
          }
          return positionIndex;
        }
      }
      exports$4P = SourceCode$2;
      var _sourceCode$1 = exports$4P;

      var exports$4O = {};
      exports$4O = { SourceCode: _sourceCode$1 };
      var _sourceCode = exports$4O;
      exports$4O.SourceCode;

      var _debug$5 = "default" in _debug2 ? _browser : _debug2;
      var exports$4N = {};
      const debug$7 = _debug$5("eslint:code-path");
      function getId(segment) {
        return segment.id + (segment.reachable ? "" : "!");
      }
      function nodeToString(node, label) {
        const suffix = label ? `:${ label }` : "";
        switch (node.type) {
        case "Identifier":
          return `${ node.type }${ suffix } (${ node.name })`;
        case "Literal":
          return `${ node.type }${ suffix } (${ node.value })`;
        default:
          return `${ node.type }${ suffix }`;
        }
      }
      exports$4N = {
        enabled: debug$7.enabled,
        dump: debug$7,
        dumpState: !debug$7.enabled ? debug$7 : function (node, state, leaving) {
          for (let i = 0; i < state.currentSegments.length; ++i) {
            const segInternal = state.currentSegments[i].internal;
            if (leaving) {
              const last = segInternal.nodes.length - 1;
              if (last >= 0 && segInternal.nodes[last] === nodeToString(node, "enter")) {
                segInternal.nodes[last] = nodeToString(node, void 0);
              } else {
                segInternal.nodes.push(nodeToString(node, "exit"));
              }
            } else {
              segInternal.nodes.push(nodeToString(node, "enter"));
            }
          }
          debug$7([
            `${ state.currentSegments.map(getId).join(",") })`,
            `${ node.type }${ leaving ? ":exit" : "" }`
          ].join(" "));
        },
        dumpDot: !debug$7.enabled ? debug$7 : function (codePath) {
          let text = "\n" + "digraph {\n" + "node[shape=box,style=\"rounded,filled\",fillcolor=white];\n" + "initial[label=\"\",shape=circle,style=filled,fillcolor=black,width=0.25,height=0.25];\n";
          if (codePath.returnedSegments.length > 0) {
            text += "final[label=\"\",shape=doublecircle,style=filled,fillcolor=black,width=0.25,height=0.25];\n";
          }
          if (codePath.thrownSegments.length > 0) {
            text += "thrown[label=\"\u2718\",shape=circle,width=0.3,height=0.3,fixedsize];\n";
          }
          const traceMap = Object.create(null);
          const arrows = this.makeDotArrows(codePath, traceMap);
          for (const id in traceMap) {
            const segment = traceMap[id];
            text += `${ id }[`;
            if (segment.reachable) {
              text += "label=\"";
            } else {
              text += "style=\"rounded,dashed,filled\",fillcolor=\"#FF9800\",label=\"<<unreachable>>\\n";
            }
            if (segment.internal.nodes.length > 0) {
              text += segment.internal.nodes.join("\\n");
            } else {
              text += "????";
            }
            text += "\"];\n";
          }
          text += `${ arrows }\n`;
          text += "}";
          debug$7("DOT", text);
        },
        makeDotArrows(codePath, traceMap) {
          const stack = [[
              codePath.initialSegment,
              0
            ]];
          const done = traceMap || Object.create(null);
          let lastId = codePath.initialSegment.id;
          let text = `initial->${ codePath.initialSegment.id }`;
          while (stack.length > 0) {
            const item = stack.pop();
            const segment = item[0];
            const index = item[1];
            if (done[segment.id] && index === 0) {
              continue;
            }
            done[segment.id] = segment;
            const nextSegment = segment.allNextSegments[index];
            if (!nextSegment) {
              continue;
            }
            if (lastId === segment.id) {
              text += `->${ nextSegment.id }`;
            } else {
              text += `;\n${ segment.id }->${ nextSegment.id }`;
            }
            lastId = nextSegment.id;
            stack.unshift([
              segment,
              1 + index
            ]);
            stack.push([
              nextSegment,
              0
            ]);
          }
          codePath.returnedSegments.forEach(finalSegment => {
            if (lastId === finalSegment.id) {
              text += "->final";
            } else {
              text += `;\n${ finalSegment.id }->final`;
            }
            lastId = null;
          });
          codePath.thrownSegments.forEach(finalSegment => {
            if (lastId === finalSegment.id) {
              text += "->thrown";
            } else {
              text += `;\n${ finalSegment.id }->thrown`;
            }
            lastId = null;
          });
          return `${ text };`;
        }
      };
      var _debugHelpers = exports$4N;
      exports$4N.enabled;

      var exports$4M = {};
      const debug$6 = _debugHelpers;
      function isReachable$5(segment) {
        return segment.reachable;
      }
      class CodePathSegment$3 {
        constructor(id, allPrevSegments, reachable) {
          this.id = id;
          this.nextSegments = [];
          this.prevSegments = allPrevSegments.filter(isReachable$5);
          this.allNextSegments = [];
          this.allPrevSegments = allPrevSegments;
          this.reachable = reachable;
          Object.defineProperty(this, "internal", {
            value: {
              used: false,
              loopedPrevSegments: []
            }
          });
          if (debug$6.enabled) {
            this.internal.nodes = [];
          }
        }
        isLoopedPrevSegment(segment) {
          return this.internal.loopedPrevSegments.indexOf(segment) !== -1;
        }
        static newRoot(id) {
          return new CodePathSegment$3(id, [], true);
        }
        static newNext(id, allPrevSegments) {
          return new CodePathSegment$3(id, CodePathSegment$3.flattenUnusedSegments(allPrevSegments), allPrevSegments.some(isReachable$5));
        }
        static newUnreachable(id, allPrevSegments) {
          const segment = new CodePathSegment$3(id, CodePathSegment$3.flattenUnusedSegments(allPrevSegments), false);
          CodePathSegment$3.markUsed(segment);
          return segment;
        }
        static newDisconnected(id, allPrevSegments) {
          return new CodePathSegment$3(id, [], allPrevSegments.some(isReachable$5));
        }
        static markUsed(segment) {
          if (segment.internal.used) {
            return;
          }
          segment.internal.used = true;
          let i;
          if (segment.reachable) {
            for (i = 0; i < segment.allPrevSegments.length; ++i) {
              const prevSegment = segment.allPrevSegments[i];
              prevSegment.allNextSegments.push(segment);
              prevSegment.nextSegments.push(segment);
            }
          } else {
            for (i = 0; i < segment.allPrevSegments.length; ++i) {
              segment.allPrevSegments[i].allNextSegments.push(segment);
            }
          }
        }
        static markPrevSegmentAsLooped(segment, prevSegment) {
          segment.internal.loopedPrevSegments.push(prevSegment);
        }
        static flattenUnusedSegments(segments) {
          const done = Object.create(null);
          const retv = [];
          for (let i = 0; i < segments.length; ++i) {
            const segment = segments[i];
            if (done[segment.id]) {
              continue;
            }
            if (!segment.internal.used) {
              for (let j = 0; j < segment.allPrevSegments.length; ++j) {
                const prevSegment = segment.allPrevSegments[j];
                if (!done[prevSegment.id]) {
                  done[prevSegment.id] = true;
                  retv.push(prevSegment);
                }
              }
            } else {
              done[segment.id] = true;
              retv.push(segment);
            }
          }
          return retv;
        }
      }
      exports$4M = CodePathSegment$3;
      var _codePathSegment = exports$4M;

      var exports$4L = {};
      class IdGenerator$2 {
        constructor(prefix) {
          this.prefix = String(prefix);
          this.n = 0;
        }
        next() {
          this.n = 1 + this.n | 0;
          if (this.n < 0) {
            this.n = 1;
          }
          return this.prefix + this.n;
        }
      }
      exports$4L = IdGenerator$2;
      var _idGenerator = exports$4L;

      var _assert$5 = "default" in _assert2 ? et : _assert2;
      var exports$2$b = {};
      const assert$5 = _assert$5, CodePathSegment$1 = _codePathSegment;
      function isReachable$4(segment) {
        return segment.reachable;
      }
      function makeSegments(context, begin, end, create) {
        const list = context.segmentsList;
        const normalizedBegin = begin >= 0 ? begin : list.length + begin;
        const normalizedEnd = end >= 0 ? end : list.length + end;
        const segments = [];
        for (let i = 0; i < context.count; ++i) {
          const allPrevSegments = [];
          for (let j = normalizedBegin; j <= normalizedEnd; ++j) {
            allPrevSegments.push(list[j][i]);
          }
          segments.push(create(context.idGenerator.next(), allPrevSegments));
        }
        return segments;
      }
      function mergeExtraSegments(context, segments) {
        let currentSegments = segments;
        while (currentSegments.length > context.count) {
          const merged = [];
          for (let i = 0, length = currentSegments.length / 2 | 0; i < length; ++i) {
            merged.push(CodePathSegment$1.newNext(context.idGenerator.next(), [
              currentSegments[i],
              currentSegments[i + length]
            ]));
          }
          currentSegments = merged;
        }
        return currentSegments;
      }
      class ForkContext$1 {
        constructor(idGenerator, upper, count) {
          this.idGenerator = idGenerator;
          this.upper = upper;
          this.count = count;
          this.segmentsList = [];
        }
        get head() {
          const list = this.segmentsList;
          return list.length === 0 ? [] : list[list.length - 1];
        }
        get empty() {
          return this.segmentsList.length === 0;
        }
        get reachable() {
          const segments = this.head;
          return segments.length > 0 && segments.some(isReachable$4);
        }
        makeNext(begin, end) {
          return makeSegments(this, begin, end, CodePathSegment$1.newNext);
        }
        makeUnreachable(begin, end) {
          return makeSegments(this, begin, end, CodePathSegment$1.newUnreachable);
        }
        makeDisconnected(begin, end) {
          return makeSegments(this, begin, end, CodePathSegment$1.newDisconnected);
        }
        add(segments) {
          assert$5(segments.length >= this.count, `${ segments.length } >= ${ this.count }`);
          this.segmentsList.push(mergeExtraSegments(this, segments));
        }
        replaceHead(segments) {
          assert$5(segments.length >= this.count, `${ segments.length } >= ${ this.count }`);
          this.segmentsList.splice(-1, 1, mergeExtraSegments(this, segments));
        }
        addAll(context) {
          assert$5(context.count === this.count);
          const source = context.segmentsList;
          for (let i = 0; i < source.length; ++i) {
            this.segmentsList.push(source[i]);
          }
        }
        clear() {
          this.segmentsList = [];
        }
        static newRoot(idGenerator) {
          const context = new ForkContext$1(idGenerator, null, 1);
          context.add([CodePathSegment$1.newRoot(idGenerator.next())]);
          return context;
        }
        static newEmpty(parentContext, forkLeavingPath) {
          return new ForkContext$1(parentContext.idGenerator, parentContext, (forkLeavingPath ? 2 : 1) * parentContext.count);
        }
      }
      exports$2$b = ForkContext$1;
      var _forkContext = exports$2$b;
      var exports$1$o = {};
      const CodePathSegment$2 = _codePathSegment, ForkContext = _forkContext;
      function addToReturnedOrThrown(dest, others, all, segments) {
        for (let i = 0; i < segments.length; ++i) {
          const segment = segments[i];
          dest.push(segment);
          if (others.indexOf(segment) === -1) {
            all.push(segment);
          }
        }
      }
      function getContinueContext(state, label) {
        if (!label) {
          return state.loopContext;
        }
        let context = state.loopContext;
        while (context) {
          if (context.label === label) {
            return context;
          }
          context = context.upper;
        }
        return null;
      }
      function getBreakContext(state, label) {
        let context = state.breakContext;
        while (context) {
          if (label ? context.label === label : context.breakable) {
            return context;
          }
          context = context.upper;
        }
        return null;
      }
      function getReturnContext(state) {
        let context = state.tryContext;
        while (context) {
          if (context.hasFinalizer && context.position !== "finally") {
            return context;
          }
          context = context.upper;
        }
        return state;
      }
      function getThrowContext(state) {
        let context = state.tryContext;
        while (context) {
          if (context.position === "try" || context.hasFinalizer && context.position === "catch") {
            return context;
          }
          context = context.upper;
        }
        return state;
      }
      function remove$2(xs, x) {
        xs.splice(xs.indexOf(x), 1);
      }
      function removeConnection(prevSegments, nextSegments) {
        for (let i = 0; i < prevSegments.length; ++i) {
          const prevSegment = prevSegments[i];
          const nextSegment = nextSegments[i];
          remove$2(prevSegment.nextSegments, nextSegment);
          remove$2(prevSegment.allNextSegments, nextSegment);
          remove$2(nextSegment.prevSegments, prevSegment);
          remove$2(nextSegment.allPrevSegments, prevSegment);
        }
      }
      function makeLooped(state, unflattenedFromSegments, unflattenedToSegments) {
        const fromSegments = CodePathSegment$2.flattenUnusedSegments(unflattenedFromSegments);
        const toSegments = CodePathSegment$2.flattenUnusedSegments(unflattenedToSegments);
        const end = Math.min(fromSegments.length, toSegments.length);
        for (let i = 0; i < end; ++i) {
          const fromSegment = fromSegments[i];
          const toSegment = toSegments[i];
          if (toSegment.reachable) {
            fromSegment.nextSegments.push(toSegment);
          }
          if (fromSegment.reachable) {
            toSegment.prevSegments.push(fromSegment);
          }
          fromSegment.allNextSegments.push(toSegment);
          toSegment.allPrevSegments.push(fromSegment);
          if (toSegment.allPrevSegments.length >= 2) {
            CodePathSegment$2.markPrevSegmentAsLooped(toSegment, fromSegment);
          }
          state.notifyLooped(fromSegment, toSegment);
        }
      }
      function finalizeTestSegmentsOfFor(context, choiceContext, head) {
        if (!choiceContext.processed) {
          choiceContext.trueForkContext.add(head);
          choiceContext.falseForkContext.add(head);
          choiceContext.qqForkContext.add(head);
        }
        if (context.test !== true) {
          context.brokenForkContext.addAll(choiceContext.falseForkContext);
        }
        context.endOfTestSegments = choiceContext.trueForkContext.makeNext(0, -1);
      }
      class CodePathState$1 {
        constructor(idGenerator, onLooped) {
          this.idGenerator = idGenerator;
          this.notifyLooped = onLooped;
          this.forkContext = ForkContext.newRoot(idGenerator);
          this.choiceContext = null;
          this.switchContext = null;
          this.tryContext = null;
          this.loopContext = null;
          this.breakContext = null;
          this.chainContext = null;
          this.currentSegments = [];
          this.initialSegment = this.forkContext.head[0];
          const final = this.finalSegments = [];
          const returned = this.returnedForkContext = [];
          const thrown = this.thrownForkContext = [];
          returned.add = addToReturnedOrThrown.bind(null, returned, thrown, final);
          thrown.add = addToReturnedOrThrown.bind(null, thrown, returned, final);
        }
        get headSegments() {
          return this.forkContext.head;
        }
        get parentForkContext() {
          const current = this.forkContext;
          return current && current.upper;
        }
        pushForkContext(forkLeavingPath) {
          this.forkContext = ForkContext.newEmpty(this.forkContext, forkLeavingPath);
          return this.forkContext;
        }
        popForkContext() {
          const lastContext = this.forkContext;
          this.forkContext = lastContext.upper;
          this.forkContext.replaceHead(lastContext.makeNext(0, -1));
          return lastContext;
        }
        forkPath() {
          this.forkContext.add(this.parentForkContext.makeNext(-1, -1));
        }
        forkBypassPath() {
          this.forkContext.add(this.parentForkContext.head);
        }
        pushChoiceContext(kind, isForkingAsResult) {
          this.choiceContext = {
            upper: this.choiceContext,
            kind,
            isForkingAsResult,
            trueForkContext: ForkContext.newEmpty(this.forkContext),
            falseForkContext: ForkContext.newEmpty(this.forkContext),
            qqForkContext: ForkContext.newEmpty(this.forkContext),
            processed: false
          };
        }
        popChoiceContext() {
          const context = this.choiceContext;
          this.choiceContext = context.upper;
          const forkContext = this.forkContext;
          const headSegments = forkContext.head;
          switch (context.kind) {
          case "&&":
          case "||":
          case "??":
            if (!context.processed) {
              context.trueForkContext.add(headSegments);
              context.falseForkContext.add(headSegments);
              context.qqForkContext.add(headSegments);
            }
            if (context.isForkingAsResult) {
              const parentContext = this.choiceContext;
              parentContext.trueForkContext.addAll(context.trueForkContext);
              parentContext.falseForkContext.addAll(context.falseForkContext);
              parentContext.qqForkContext.addAll(context.qqForkContext);
              parentContext.processed = true;
              return context;
            }
            break;
          case "test":
            if (!context.processed) {
              context.trueForkContext.clear();
              context.trueForkContext.add(headSegments);
            } else {
              context.falseForkContext.clear();
              context.falseForkContext.add(headSegments);
            }
            break;
          case "loop":
            return context;
          default:
            throw new Error("unreachable");
          }
          const prevForkContext = context.trueForkContext;
          prevForkContext.addAll(context.falseForkContext);
          forkContext.replaceHead(prevForkContext.makeNext(0, -1));
          return context;
        }
        makeLogicalRight() {
          const context = this.choiceContext;
          const forkContext = this.forkContext;
          if (context.processed) {
            let prevForkContext;
            switch (context.kind) {
            case "&&":
              prevForkContext = context.trueForkContext;
              break;
            case "||":
              prevForkContext = context.falseForkContext;
              break;
            case "??":
              prevForkContext = context.qqForkContext;
              break;
            default:
              throw new Error("unreachable");
            }
            forkContext.replaceHead(prevForkContext.makeNext(0, -1));
            prevForkContext.clear();
            context.processed = false;
          } else {
            switch (context.kind) {
            case "&&":
              context.falseForkContext.add(forkContext.head);
              break;
            case "||":
              context.trueForkContext.add(forkContext.head);
              break;
            case "??":
              context.trueForkContext.add(forkContext.head);
              context.falseForkContext.add(forkContext.head);
              break;
            default:
              throw new Error("unreachable");
            }
            forkContext.replaceHead(forkContext.makeNext(-1, -1));
          }
        }
        makeIfConsequent() {
          const context = this.choiceContext;
          const forkContext = this.forkContext;
          if (!context.processed) {
            context.trueForkContext.add(forkContext.head);
            context.falseForkContext.add(forkContext.head);
            context.qqForkContext.add(forkContext.head);
          }
          context.processed = false;
          forkContext.replaceHead(context.trueForkContext.makeNext(0, -1));
        }
        makeIfAlternate() {
          const context = this.choiceContext;
          const forkContext = this.forkContext;
          context.trueForkContext.clear();
          context.trueForkContext.add(forkContext.head);
          context.processed = true;
          forkContext.replaceHead(context.falseForkContext.makeNext(0, -1));
        }
        pushChainContext() {
          this.chainContext = {
            upper: this.chainContext,
            countChoiceContexts: 0
          };
        }
        popChainContext() {
          const context = this.chainContext;
          this.chainContext = context.upper;
          for (let i = context.countChoiceContexts; i > 0; --i) {
            this.popChoiceContext();
          }
        }
        makeOptionalNode() {
          if (this.chainContext) {
            this.chainContext.countChoiceContexts += 1;
            this.pushChoiceContext("??", false);
          }
        }
        makeOptionalRight() {
          if (this.chainContext) {
            this.makeLogicalRight();
          }
        }
        pushSwitchContext(hasCase, label) {
          this.switchContext = {
            upper: this.switchContext,
            hasCase,
            defaultSegments: null,
            defaultBodySegments: null,
            foundDefault: false,
            lastIsDefault: false,
            countForks: 0
          };
          this.pushBreakContext(true, label);
        }
        popSwitchContext() {
          const context = this.switchContext;
          this.switchContext = context.upper;
          const forkContext = this.forkContext;
          const brokenForkContext = this.popBreakContext().brokenForkContext;
          if (context.countForks === 0) {
            if (!brokenForkContext.empty) {
              brokenForkContext.add(forkContext.makeNext(-1, -1));
              forkContext.replaceHead(brokenForkContext.makeNext(0, -1));
            }
            return;
          }
          const lastSegments = forkContext.head;
          this.forkBypassPath();
          const lastCaseSegments = forkContext.head;
          brokenForkContext.add(lastSegments);
          if (!context.lastIsDefault) {
            if (context.defaultBodySegments) {
              removeConnection(context.defaultSegments, context.defaultBodySegments);
              makeLooped(this, lastCaseSegments, context.defaultBodySegments);
            } else {
              brokenForkContext.add(lastCaseSegments);
            }
          }
          for (let i = 0; i < context.countForks; ++i) {
            this.forkContext = this.forkContext.upper;
          }
          this.forkContext.replaceHead(brokenForkContext.makeNext(0, -1));
        }
        makeSwitchCaseBody(isEmpty, isDefault) {
          const context = this.switchContext;
          if (!context.hasCase) {
            return;
          }
          const parentForkContext = this.forkContext;
          const forkContext = this.pushForkContext();
          forkContext.add(parentForkContext.makeNext(0, -1));
          if (isDefault) {
            context.defaultSegments = parentForkContext.head;
            if (isEmpty) {
              context.foundDefault = true;
            } else {
              context.defaultBodySegments = forkContext.head;
            }
          } else {
            if (!isEmpty && context.foundDefault) {
              context.foundDefault = false;
              context.defaultBodySegments = forkContext.head;
            }
          }
          context.lastIsDefault = isDefault;
          context.countForks += 1;
        }
        pushTryContext(hasFinalizer) {
          this.tryContext = {
            upper: this.tryContext,
            position: "try",
            hasFinalizer,
            returnedForkContext: hasFinalizer ? ForkContext.newEmpty(this.forkContext) : null,
            thrownForkContext: ForkContext.newEmpty(this.forkContext),
            lastOfTryIsReachable: false,
            lastOfCatchIsReachable: false
          };
        }
        popTryContext() {
          const context = this.tryContext;
          this.tryContext = context.upper;
          if (context.position === "catch") {
            this.popForkContext();
            return;
          }
          const returned = context.returnedForkContext;
          const thrown = context.thrownForkContext;
          if (returned.empty && thrown.empty) {
            return;
          }
          const headSegments = this.forkContext.head;
          this.forkContext = this.forkContext.upper;
          const normalSegments = headSegments.slice(0, headSegments.length / 2 | 0);
          const leavingSegments = headSegments.slice(headSegments.length / 2 | 0);
          if (!returned.empty) {
            getReturnContext(this).returnedForkContext.add(leavingSegments);
          }
          if (!thrown.empty) {
            getThrowContext(this).thrownForkContext.add(leavingSegments);
          }
          this.forkContext.replaceHead(normalSegments);
          if (!context.lastOfTryIsReachable && !context.lastOfCatchIsReachable) {
            this.forkContext.makeUnreachable();
          }
        }
        makeCatchBlock() {
          const context = this.tryContext;
          const forkContext = this.forkContext;
          const thrown = context.thrownForkContext;
          context.position = "catch";
          context.thrownForkContext = ForkContext.newEmpty(forkContext);
          context.lastOfTryIsReachable = forkContext.reachable;
          thrown.add(forkContext.head);
          const thrownSegments = thrown.makeNext(0, -1);
          this.pushForkContext();
          this.forkBypassPath();
          this.forkContext.add(thrownSegments);
        }
        makeFinallyBlock() {
          const context = this.tryContext;
          let forkContext = this.forkContext;
          const returned = context.returnedForkContext;
          const thrown = context.thrownForkContext;
          const headOfLeavingSegments = forkContext.head;
          if (context.position === "catch") {
            this.popForkContext();
            forkContext = this.forkContext;
            context.lastOfCatchIsReachable = forkContext.reachable;
          } else {
            context.lastOfTryIsReachable = forkContext.reachable;
          }
          context.position = "finally";
          if (returned.empty && thrown.empty) {
            return;
          }
          const segments = forkContext.makeNext(-1, -1);
          for (let i = 0; i < forkContext.count; ++i) {
            const prevSegsOfLeavingSegment = [headOfLeavingSegments[i]];
            for (let j = 0; j < returned.segmentsList.length; ++j) {
              prevSegsOfLeavingSegment.push(returned.segmentsList[j][i]);
            }
            for (let j = 0; j < thrown.segmentsList.length; ++j) {
              prevSegsOfLeavingSegment.push(thrown.segmentsList[j][i]);
            }
            segments.push(CodePathSegment$2.newNext(this.idGenerator.next(), prevSegsOfLeavingSegment));
          }
          this.pushForkContext(true);
          this.forkContext.add(segments);
        }
        makeFirstThrowablePathInTryBlock() {
          const forkContext = this.forkContext;
          if (!forkContext.reachable) {
            return;
          }
          const context = getThrowContext(this);
          if (context === this || context.position !== "try" || !context.thrownForkContext.empty) {
            return;
          }
          context.thrownForkContext.add(forkContext.head);
          forkContext.replaceHead(forkContext.makeNext(-1, -1));
        }
        pushLoopContext(type, label) {
          const forkContext = this.forkContext;
          const breakContext = this.pushBreakContext(true, label);
          switch (type) {
          case "WhileStatement":
            this.pushChoiceContext("loop", false);
            this.loopContext = {
              upper: this.loopContext,
              type,
              label,
              test: void 0,
              continueDestSegments: null,
              brokenForkContext: breakContext.brokenForkContext
            };
            break;
          case "DoWhileStatement":
            this.pushChoiceContext("loop", false);
            this.loopContext = {
              upper: this.loopContext,
              type,
              label,
              test: void 0,
              entrySegments: null,
              continueForkContext: ForkContext.newEmpty(forkContext),
              brokenForkContext: breakContext.brokenForkContext
            };
            break;
          case "ForStatement":
            this.pushChoiceContext("loop", false);
            this.loopContext = {
              upper: this.loopContext,
              type,
              label,
              test: void 0,
              endOfInitSegments: null,
              testSegments: null,
              endOfTestSegments: null,
              updateSegments: null,
              endOfUpdateSegments: null,
              continueDestSegments: null,
              brokenForkContext: breakContext.brokenForkContext
            };
            break;
          case "ForInStatement":
          case "ForOfStatement":
            this.loopContext = {
              upper: this.loopContext,
              type,
              label,
              prevSegments: null,
              leftSegments: null,
              endOfLeftSegments: null,
              continueDestSegments: null,
              brokenForkContext: breakContext.brokenForkContext
            };
            break;
          default:
            throw new Error(`unknown type: "${ type }"`);
          }
        }
        popLoopContext() {
          const context = this.loopContext;
          this.loopContext = context.upper;
          const forkContext = this.forkContext;
          const brokenForkContext = this.popBreakContext().brokenForkContext;
          switch (context.type) {
          case "WhileStatement":
          case "ForStatement":
            this.popChoiceContext();
            makeLooped(this, forkContext.head, context.continueDestSegments);
            break;
          case "DoWhileStatement": {
              const choiceContext = this.popChoiceContext();
              if (!choiceContext.processed) {
                choiceContext.trueForkContext.add(forkContext.head);
                choiceContext.falseForkContext.add(forkContext.head);
              }
              if (context.test !== true) {
                brokenForkContext.addAll(choiceContext.falseForkContext);
              }
              const segmentsList = choiceContext.trueForkContext.segmentsList;
              for (let i = 0; i < segmentsList.length; ++i) {
                makeLooped(this, segmentsList[i], context.entrySegments);
              }
              break;
            }
          case "ForInStatement":
          case "ForOfStatement":
            brokenForkContext.add(forkContext.head);
            makeLooped(this, forkContext.head, context.leftSegments);
            break;
          default:
            throw new Error("unreachable");
          }
          if (brokenForkContext.empty) {
            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));
          } else {
            forkContext.replaceHead(brokenForkContext.makeNext(0, -1));
          }
        }
        makeWhileTest(test) {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          const testSegments = forkContext.makeNext(0, -1);
          context.test = test;
          context.continueDestSegments = testSegments;
          forkContext.replaceHead(testSegments);
        }
        makeWhileBody() {
          const context = this.loopContext;
          const choiceContext = this.choiceContext;
          const forkContext = this.forkContext;
          if (!choiceContext.processed) {
            choiceContext.trueForkContext.add(forkContext.head);
            choiceContext.falseForkContext.add(forkContext.head);
          }
          if (context.test !== true) {
            context.brokenForkContext.addAll(choiceContext.falseForkContext);
          }
          forkContext.replaceHead(choiceContext.trueForkContext.makeNext(0, -1));
        }
        makeDoWhileBody() {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          const bodySegments = forkContext.makeNext(-1, -1);
          context.entrySegments = bodySegments;
          forkContext.replaceHead(bodySegments);
        }
        makeDoWhileTest(test) {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          context.test = test;
          if (!context.continueForkContext.empty) {
            context.continueForkContext.add(forkContext.head);
            const testSegments = context.continueForkContext.makeNext(0, -1);
            forkContext.replaceHead(testSegments);
          }
        }
        makeForTest(test) {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          const endOfInitSegments = forkContext.head;
          const testSegments = forkContext.makeNext(-1, -1);
          context.test = test;
          context.endOfInitSegments = endOfInitSegments;
          context.continueDestSegments = context.testSegments = testSegments;
          forkContext.replaceHead(testSegments);
        }
        makeForUpdate() {
          const context = this.loopContext;
          const choiceContext = this.choiceContext;
          const forkContext = this.forkContext;
          if (context.testSegments) {
            finalizeTestSegmentsOfFor(context, choiceContext, forkContext.head);
          } else {
            context.endOfInitSegments = forkContext.head;
          }
          const updateSegments = forkContext.makeDisconnected(-1, -1);
          context.continueDestSegments = context.updateSegments = updateSegments;
          forkContext.replaceHead(updateSegments);
        }
        makeForBody() {
          const context = this.loopContext;
          const choiceContext = this.choiceContext;
          const forkContext = this.forkContext;
          if (context.updateSegments) {
            context.endOfUpdateSegments = forkContext.head;
            if (context.testSegments) {
              makeLooped(this, context.endOfUpdateSegments, context.testSegments);
            }
          } else if (context.testSegments) {
            finalizeTestSegmentsOfFor(context, choiceContext, forkContext.head);
          } else {
            context.endOfInitSegments = forkContext.head;
          }
          let bodySegments = context.endOfTestSegments;
          if (!bodySegments) {
            const prevForkContext = ForkContext.newEmpty(forkContext);
            prevForkContext.add(context.endOfInitSegments);
            if (context.endOfUpdateSegments) {
              prevForkContext.add(context.endOfUpdateSegments);
            }
            bodySegments = prevForkContext.makeNext(0, -1);
          }
          context.continueDestSegments = context.continueDestSegments || bodySegments;
          forkContext.replaceHead(bodySegments);
        }
        makeForInOfLeft() {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          const leftSegments = forkContext.makeDisconnected(-1, -1);
          context.prevSegments = forkContext.head;
          context.leftSegments = context.continueDestSegments = leftSegments;
          forkContext.replaceHead(leftSegments);
        }
        makeForInOfRight() {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          const temp = ForkContext.newEmpty(forkContext);
          temp.add(context.prevSegments);
          const rightSegments = temp.makeNext(-1, -1);
          context.endOfLeftSegments = forkContext.head;
          forkContext.replaceHead(rightSegments);
        }
        makeForInOfBody() {
          const context = this.loopContext;
          const forkContext = this.forkContext;
          const temp = ForkContext.newEmpty(forkContext);
          temp.add(context.endOfLeftSegments);
          const bodySegments = temp.makeNext(-1, -1);
          makeLooped(this, forkContext.head, context.leftSegments);
          context.brokenForkContext.add(forkContext.head);
          forkContext.replaceHead(bodySegments);
        }
        pushBreakContext(breakable, label) {
          this.breakContext = {
            upper: this.breakContext,
            breakable,
            label,
            brokenForkContext: ForkContext.newEmpty(this.forkContext)
          };
          return this.breakContext;
        }
        popBreakContext() {
          const context = this.breakContext;
          const forkContext = this.forkContext;
          this.breakContext = context.upper;
          if (!context.breakable) {
            const brokenForkContext = context.brokenForkContext;
            if (!brokenForkContext.empty) {
              brokenForkContext.add(forkContext.head);
              forkContext.replaceHead(brokenForkContext.makeNext(0, -1));
            }
          }
          return context;
        }
        makeBreak(label) {
          const forkContext = this.forkContext;
          if (!forkContext.reachable) {
            return;
          }
          const context = getBreakContext(this, label);
          if (context) {
            context.brokenForkContext.add(forkContext.head);
          }
          forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));
        }
        makeContinue(label) {
          const forkContext = this.forkContext;
          if (!forkContext.reachable) {
            return;
          }
          const context = getContinueContext(this, label);
          if (context) {
            if (context.continueDestSegments) {
              makeLooped(this, forkContext.head, context.continueDestSegments);
              if (context.type === "ForInStatement" || context.type === "ForOfStatement") {
                context.brokenForkContext.add(forkContext.head);
              }
            } else {
              context.continueForkContext.add(forkContext.head);
            }
          }
          forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));
        }
        makeReturn() {
          const forkContext = this.forkContext;
          if (forkContext.reachable) {
            getReturnContext(this).returnedForkContext.add(forkContext.head);
            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));
          }
        }
        makeThrow() {
          const forkContext = this.forkContext;
          if (forkContext.reachable) {
            getThrowContext(this).thrownForkContext.add(forkContext.head);
            forkContext.replaceHead(forkContext.makeUnreachable(-1, -1));
          }
        }
        makeFinal() {
          const segments = this.currentSegments;
          if (segments.length > 0 && segments[0].reachable) {
            this.returnedForkContext.add(segments);
          }
        }
      }
      exports$1$o = CodePathState$1;
      var _codePathState = exports$1$o;
      var exports$4K = {};
      const CodePathState = _codePathState;
      const IdGenerator$1 = _idGenerator;
      class CodePath$1 {
        constructor(id, upper, onLooped) {
          this.id = id;
          this.upper = upper;
          this.childCodePaths = [];
          Object.defineProperty(this, "internal", { value: new CodePathState(new IdGenerator$1(`${ id }_`), onLooped) });
          if (upper) {
            upper.childCodePaths.push(this);
          }
        }
        static getState(codePath) {
          return codePath.internal;
        }
        get initialSegment() {
          return this.internal.initialSegment;
        }
        get finalSegments() {
          return this.internal.finalSegments;
        }
        get returnedSegments() {
          return this.internal.returnedForkContext;
        }
        get thrownSegments() {
          return this.internal.thrownForkContext;
        }
        get currentSegments() {
          return this.internal.currentSegments;
        }
        traverseSegments(options, callback) {
          let resolvedOptions;
          let resolvedCallback;
          if (typeof options === "function") {
            resolvedCallback = options;
            resolvedOptions = {};
          } else {
            resolvedOptions = options || {};
            resolvedCallback = callback;
          }
          const startSegment = resolvedOptions.first || this.internal.initialSegment;
          const lastSegment = resolvedOptions.last;
          let item = null;
          let index = 0;
          let end = 0;
          let segment = null;
          const visited = Object.create(null);
          const stack = [[
              startSegment,
              0
            ]];
          let skippedSegment = null;
          let broken = false;
          const controller = {
            skip() {
              if (stack.length <= 1) {
                broken = true;
              } else {
                skippedSegment = stack[stack.length - 2][0];
              }
            },
            break() {
              broken = true;
            }
          };
          function isVisited(prevSegment) {
            return visited[prevSegment.id] || segment.isLoopedPrevSegment(prevSegment);
          }
          while (stack.length > 0) {
            item = stack[stack.length - 1];
            segment = item[0];
            index = item[1];
            if (index === 0) {
              if (visited[segment.id]) {
                stack.pop();
                continue;
              }
              if (segment !== startSegment && segment.prevSegments.length > 0 && !segment.prevSegments.every(isVisited)) {
                stack.pop();
                continue;
              }
              if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {
                skippedSegment = null;
              }
              visited[segment.id] = true;
              if (!skippedSegment) {
                resolvedCallback.call(this, segment, controller);
                if (segment === lastSegment) {
                  controller.skip();
                }
                if (broken) {
                  break;
                }
              }
            }
            end = segment.nextSegments.length - 1;
            if (index < end) {
              item[1] += 1;
              stack.push([
                segment.nextSegments[index],
                0
              ]);
            } else if (index === end) {
              item[0] = segment.nextSegments[index];
              item[1] = 0;
            } else {
              stack.pop();
            }
          }
        }
      }
      exports$4K = CodePath$1;
      var _codePath = exports$4K;

      var _assert$4 = "default" in _assert2 ? et : _assert2;
      var exports$4J = {};
      const assert$4 = _assert$4, {breakableTypePattern: breakableTypePattern$1} = _astUtils$1, CodePath = _codePath, CodePathSegment = _codePathSegment, IdGenerator = _idGenerator, debug$5 = _debugHelpers;
      function isCaseNode(node) {
        return Boolean(node.test);
      }
      function isHandledLogicalOperator(operator) {
        return operator === "&&" || operator === "||" || operator === "??";
      }
      function isLogicalAssignmentOperator$1(operator) {
        return operator === "&&=" || operator === "||=" || operator === "??=";
      }
      function getLabel(node) {
        if (node.parent.type === "LabeledStatement") {
          return node.parent.label.name;
        }
        return null;
      }
      function isForkingByTrueOrFalse(node) {
        const parent = node.parent;
        switch (parent.type) {
        case "ConditionalExpression":
        case "IfStatement":
        case "WhileStatement":
        case "DoWhileStatement":
        case "ForStatement":
          return parent.test === node;
        case "LogicalExpression":
          return isHandledLogicalOperator(parent.operator);
        case "AssignmentExpression":
          return isLogicalAssignmentOperator$1(parent.operator);
        default:
          return false;
        }
      }
      function getBooleanValueIfSimpleConstant(node) {
        if (node.type === "Literal") {
          return Boolean(node.value);
        }
        return void 0;
      }
      function isIdentifierReference(node) {
        const parent = node.parent;
        switch (parent.type) {
        case "LabeledStatement":
        case "BreakStatement":
        case "ContinueStatement":
        case "ArrayPattern":
        case "RestElement":
        case "ImportSpecifier":
        case "ImportDefaultSpecifier":
        case "ImportNamespaceSpecifier":
        case "CatchClause":
          return false;
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ArrowFunctionExpression":
        case "ClassDeclaration":
        case "ClassExpression":
        case "VariableDeclarator":
          return parent.id !== node;
        case "Property":
        case "MethodDefinition":
          return parent.key !== node || parent.computed || parent.shorthand;
        case "AssignmentPattern":
          return parent.key !== node;
        default:
          return true;
        }
      }
      function forwardCurrentToHead(analyzer, node) {
        const codePath = analyzer.codePath;
        const state = CodePath.getState(codePath);
        const currentSegments = state.currentSegments;
        const headSegments = state.headSegments;
        const end = Math.max(currentSegments.length, headSegments.length);
        let i, currentSegment, headSegment;
        for (i = 0; i < end; ++i) {
          currentSegment = currentSegments[i];
          headSegment = headSegments[i];
          if (currentSegment !== headSegment && currentSegment) {
            debug$5.dump(`onCodePathSegmentEnd ${ currentSegment.id }`);
            if (currentSegment.reachable) {
              analyzer.emitter.emit("onCodePathSegmentEnd", currentSegment, node);
            }
          }
        }
        state.currentSegments = headSegments;
        for (i = 0; i < end; ++i) {
          currentSegment = currentSegments[i];
          headSegment = headSegments[i];
          if (currentSegment !== headSegment && headSegment) {
            debug$5.dump(`onCodePathSegmentStart ${ headSegment.id }`);
            CodePathSegment.markUsed(headSegment);
            if (headSegment.reachable) {
              analyzer.emitter.emit("onCodePathSegmentStart", headSegment, node);
            }
          }
        }
      }
      function leaveFromCurrentSegment(analyzer, node) {
        const state = CodePath.getState(analyzer.codePath);
        const currentSegments = state.currentSegments;
        for (let i = 0; i < currentSegments.length; ++i) {
          const currentSegment = currentSegments[i];
          debug$5.dump(`onCodePathSegmentEnd ${ currentSegment.id }`);
          if (currentSegment.reachable) {
            analyzer.emitter.emit("onCodePathSegmentEnd", currentSegment, node);
          }
        }
        state.currentSegments = [];
      }
      function preprocess(analyzer, node) {
        const codePath = analyzer.codePath;
        const state = CodePath.getState(codePath);
        const parent = node.parent;
        switch (parent.type) {
        case "CallExpression":
          if (parent.optional === true && parent.arguments.length >= 1 && parent.arguments[0] === node) {
            state.makeOptionalRight();
          }
          break;
        case "MemberExpression":
          if (parent.optional === true && parent.property === node) {
            state.makeOptionalRight();
          }
          break;
        case "LogicalExpression":
          if (parent.right === node && isHandledLogicalOperator(parent.operator)) {
            state.makeLogicalRight();
          }
          break;
        case "AssignmentExpression":
          if (parent.right === node && isLogicalAssignmentOperator$1(parent.operator)) {
            state.makeLogicalRight();
          }
          break;
        case "ConditionalExpression":
        case "IfStatement":
          if (parent.consequent === node) {
            state.makeIfConsequent();
          } else if (parent.alternate === node) {
            state.makeIfAlternate();
          }
          break;
        case "SwitchCase":
          if (parent.consequent[0] === node) {
            state.makeSwitchCaseBody(false, !parent.test);
          }
          break;
        case "TryStatement":
          if (parent.handler === node) {
            state.makeCatchBlock();
          } else if (parent.finalizer === node) {
            state.makeFinallyBlock();
          }
          break;
        case "WhileStatement":
          if (parent.test === node) {
            state.makeWhileTest(getBooleanValueIfSimpleConstant(node));
          } else {
            assert$4(parent.body === node);
            state.makeWhileBody();
          }
          break;
        case "DoWhileStatement":
          if (parent.body === node) {
            state.makeDoWhileBody();
          } else {
            assert$4(parent.test === node);
            state.makeDoWhileTest(getBooleanValueIfSimpleConstant(node));
          }
          break;
        case "ForStatement":
          if (parent.test === node) {
            state.makeForTest(getBooleanValueIfSimpleConstant(node));
          } else if (parent.update === node) {
            state.makeForUpdate();
          } else if (parent.body === node) {
            state.makeForBody();
          }
          break;
        case "ForInStatement":
        case "ForOfStatement":
          if (parent.left === node) {
            state.makeForInOfLeft();
          } else if (parent.right === node) {
            state.makeForInOfRight();
          } else {
            assert$4(parent.body === node);
            state.makeForInOfBody();
          }
          break;
        case "AssignmentPattern":
          if (parent.right === node) {
            state.pushForkContext();
            state.forkBypassPath();
            state.forkPath();
          }
          break;
        }
      }
      function processCodePathToEnter(analyzer, node) {
        let codePath = analyzer.codePath;
        let state = codePath && CodePath.getState(codePath);
        const parent = node.parent;
        switch (node.type) {
        case "Program":
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ArrowFunctionExpression":
          if (codePath) {
            forwardCurrentToHead(analyzer, node);
            debug$5.dumpState(node, state, false);
          }
          codePath = analyzer.codePath = new CodePath(analyzer.idGenerator.next(), codePath, analyzer.onLooped);
          state = CodePath.getState(codePath);
          debug$5.dump(`onCodePathStart ${ codePath.id }`);
          analyzer.emitter.emit("onCodePathStart", codePath, node);
          break;
        case "ChainExpression":
          state.pushChainContext();
          break;
        case "CallExpression":
          if (node.optional === true) {
            state.makeOptionalNode();
          }
          break;
        case "MemberExpression":
          if (node.optional === true) {
            state.makeOptionalNode();
          }
          break;
        case "LogicalExpression":
          if (isHandledLogicalOperator(node.operator)) {
            state.pushChoiceContext(node.operator, isForkingByTrueOrFalse(node));
          }
          break;
        case "AssignmentExpression":
          if (isLogicalAssignmentOperator$1(node.operator)) {
            state.pushChoiceContext(node.operator.slice(0, -1), isForkingByTrueOrFalse(node));
          }
          break;
        case "ConditionalExpression":
        case "IfStatement":
          state.pushChoiceContext("test", false);
          break;
        case "SwitchStatement":
          state.pushSwitchContext(node.cases.some(isCaseNode), getLabel(node));
          break;
        case "TryStatement":
          state.pushTryContext(Boolean(node.finalizer));
          break;
        case "SwitchCase":
          if (parent.discriminant !== node && parent.cases[0] !== node) {
            state.forkPath();
          }
          break;
        case "WhileStatement":
        case "DoWhileStatement":
        case "ForStatement":
        case "ForInStatement":
        case "ForOfStatement":
          state.pushLoopContext(node.type, getLabel(node));
          break;
        case "LabeledStatement":
          if (!breakableTypePattern$1.test(node.body.type)) {
            state.pushBreakContext(false, node.label.name);
          }
          break;
        }
        forwardCurrentToHead(analyzer, node);
        debug$5.dumpState(node, state, false);
      }
      function processCodePathToExit(analyzer, node) {
        const codePath = analyzer.codePath;
        const state = CodePath.getState(codePath);
        let dontForward = false;
        switch (node.type) {
        case "ChainExpression":
          state.popChainContext();
          break;
        case "IfStatement":
        case "ConditionalExpression":
          state.popChoiceContext();
          break;
        case "LogicalExpression":
          if (isHandledLogicalOperator(node.operator)) {
            state.popChoiceContext();
          }
          break;
        case "AssignmentExpression":
          if (isLogicalAssignmentOperator$1(node.operator)) {
            state.popChoiceContext();
          }
          break;
        case "SwitchStatement":
          state.popSwitchContext();
          break;
        case "SwitchCase":
          if (node.consequent.length === 0) {
            state.makeSwitchCaseBody(true, !node.test);
          }
          if (state.forkContext.reachable) {
            dontForward = true;
          }
          break;
        case "TryStatement":
          state.popTryContext();
          break;
        case "BreakStatement":
          forwardCurrentToHead(analyzer, node);
          state.makeBreak(node.label && node.label.name);
          dontForward = true;
          break;
        case "ContinueStatement":
          forwardCurrentToHead(analyzer, node);
          state.makeContinue(node.label && node.label.name);
          dontForward = true;
          break;
        case "ReturnStatement":
          forwardCurrentToHead(analyzer, node);
          state.makeReturn();
          dontForward = true;
          break;
        case "ThrowStatement":
          forwardCurrentToHead(analyzer, node);
          state.makeThrow();
          dontForward = true;
          break;
        case "Identifier":
          if (isIdentifierReference(node)) {
            state.makeFirstThrowablePathInTryBlock();
            dontForward = true;
          }
          break;
        case "CallExpression":
        case "ImportExpression":
        case "MemberExpression":
        case "NewExpression":
        case "YieldExpression":
          state.makeFirstThrowablePathInTryBlock();
          break;
        case "WhileStatement":
        case "DoWhileStatement":
        case "ForStatement":
        case "ForInStatement":
        case "ForOfStatement":
          state.popLoopContext();
          break;
        case "AssignmentPattern":
          state.popForkContext();
          break;
        case "LabeledStatement":
          if (!breakableTypePattern$1.test(node.body.type)) {
            state.popBreakContext();
          }
          break;
        }
        if (!dontForward) {
          forwardCurrentToHead(analyzer, node);
        }
        debug$5.dumpState(node, state, true);
      }
      function postprocess(analyzer, node) {
        switch (node.type) {
        case "Program":
        case "FunctionDeclaration":
        case "FunctionExpression":
        case "ArrowFunctionExpression": {
            let codePath = analyzer.codePath;
            CodePath.getState(codePath).makeFinal();
            leaveFromCurrentSegment(analyzer, node);
            debug$5.dump(`onCodePathEnd ${ codePath.id }`);
            analyzer.emitter.emit("onCodePathEnd", codePath, node);
            debug$5.dumpDot(codePath);
            codePath = analyzer.codePath = analyzer.codePath.upper;
            if (codePath) {
              debug$5.dumpState(node, CodePath.getState(codePath), true);
            }
            break;
          }
        case "CallExpression":
          if (node.optional === true && node.arguments.length === 0) {
            CodePath.getState(analyzer.codePath).makeOptionalRight();
          }
          break;
        }
      }
      class CodePathAnalyzer$1 {
        constructor(eventGenerator) {
          this.original = eventGenerator;
          this.emitter = eventGenerator.emitter;
          this.codePath = null;
          this.idGenerator = new IdGenerator("s");
          this.currentNode = null;
          this.onLooped = this.onLooped.bind(this);
        }
        enterNode(node) {
          this.currentNode = node;
          if (node.parent) {
            preprocess(this, node);
          }
          processCodePathToEnter(this, node);
          this.original.enterNode(node);
          this.currentNode = null;
        }
        leaveNode(node) {
          this.currentNode = node;
          processCodePathToExit(this, node);
          this.original.leaveNode(node);
          postprocess(this, node);
          this.currentNode = null;
        }
        onLooped(fromSegment, toSegment) {
          if (fromSegment.reachable && toSegment.reachable) {
            debug$5.dump(`onCodePathSegmentLoop ${ fromSegment.id } -> ${ toSegment.id }`);
            this.emitter.emit("onCodePathSegmentLoop", fromSegment, toSegment, this.currentNode);
          }
        }
      }
      exports$4J = CodePathAnalyzer$1;
      var _codePathAnalyzer = exports$4J;

      var _global$8 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$4I = {};
      var apply, curry, flip, fix, over, memoize, toString$ = {}.toString;
      apply = curry$(function (f, list) {
        return f.apply(null, list);
      });
      curry = function (f) {
        return curry$(f);
      };
      flip = curry$(function (f, x, y) {
        return f(y, x);
      });
      fix = function (f) {
        return function (g) {
          return function () {
            return f(g(g)).apply(null, arguments);
          };
        }(function (g) {
          return function () {
            return f(g(g)).apply(null, arguments);
          };
        });
      };
      over = curry$(function (f, g, x, y) {
        return f(g(x), g(y));
      });
      memoize = function (f) {
        var memo;
        memo = {};
        return function () {
          var args, res$, i$, to$, key, arg;
          res$ = [];
          for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
            res$.push(arguments[i$]);
          }
          args = res$;
          key = function () {
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
              arg = ref$[i$];
              results$.push(arg + toString$.call(arg).slice(8, -1));
            }
            return results$;
          }().join("");
          return memo[key] = key in memo ? memo[key] : f.apply(null, args);
        };
      };
      exports$4I = {
        curry: curry,
        flip: flip,
        fix: fix,
        apply: apply,
        over: over,
        memoize: memoize
      };
      function curry$(f, bound) {
        var context, _curry = function (args) {
            return f.length > 1 ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this || _global$8 : this || _global$8;
              return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);
            } : f;
          };
        return _curry();
      }
      var _Func = exports$4I;
      var _global$1$3 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$1$n = {};
      var each, map, compact, filter, reject, remove$1, partition, find, head, first, tail, last$1, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection$1, union$2, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice$1, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$$1 = {}.toString;
      each = curry$$1(function (f, xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          f(x);
        }
        return xs;
      });
      map = curry$$1(function (f, xs) {
        var i$, len$, x, results$ = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          results$.push(f(x));
        }
        return results$;
      });
      compact = function (xs) {
        var i$, len$, x, results$ = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (x) {
            results$.push(x);
          }
        }
        return results$;
      };
      filter = curry$$1(function (f, xs) {
        var i$, len$, x, results$ = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (f(x)) {
            results$.push(x);
          }
        }
        return results$;
      });
      reject = curry$$1(function (f, xs) {
        var i$, len$, x, results$ = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (!f(x)) {
            results$.push(x);
          }
        }
        return results$;
      });
      remove$1 = curry$$1(function (el, xs) {
        var i, x$;
        i = elemIndex(el, xs);
        x$ = xs.slice();
        if (i != null) {
          x$.splice(i, 1);
        }
        return x$;
      });
      partition = curry$$1(function (f, xs) {
        var passed, failed, i$, len$, x;
        passed = [];
        failed = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          (f(x) ? passed : failed).push(x);
        }
        return [
          passed,
          failed
        ];
      });
      find = curry$$1(function (f, xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (f(x)) {
            return x;
          }
        }
      });
      head = first = function (xs) {
        return xs[0];
      };
      tail = function (xs) {
        if (!xs.length) {
          return;
        }
        return xs.slice(1);
      };
      last$1 = function (xs) {
        return xs[xs.length - 1];
      };
      initial = function (xs) {
        if (!xs.length) {
          return;
        }
        return xs.slice(0, -1);
      };
      empty = function (xs) {
        return !xs.length;
      };
      reverse = function (xs) {
        return xs.concat().reverse();
      };
      unique = function (xs) {
        var result, i$, len$, x;
        result = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (!in$(x, result)) {
            result.push(x);
          }
        }
        return result;
      };
      uniqueBy = curry$$1(function (f, xs) {
        var seen, i$, len$, x, val, results$ = [];
        seen = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          val = f(x);
          if (in$(val, seen)) {
            continue;
          }
          seen.push(val);
          results$.push(x);
        }
        return results$;
      });
      fold = foldl = curry$$1(function (f, memo, xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          memo = f(memo, x);
        }
        return memo;
      });
      fold1 = foldl1 = curry$$1(function (f, xs) {
        return fold(f, xs[0], xs.slice(1));
      });
      foldr = curry$$1(function (f, memo, xs) {
        var i$, x;
        for (i$ = xs.length - 1; i$ >= 0; --i$) {
          x = xs[i$];
          memo = f(x, memo);
        }
        return memo;
      });
      foldr1 = curry$$1(function (f, xs) {
        return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
      });
      unfoldr = curry$$1(function (f, b) {
        var result, x, that;
        result = [];
        x = b;
        while ((that = f(x)) != null) {
          result.push(that[0]);
          x = that[1];
        }
        return result;
      });
      concat = function (xss) {
        return [].concat.apply([], xss);
      };
      concatMap = curry$$1(function (f, xs) {
        var x;
        return [].concat.apply([], (function () {
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(f(x));
          }
          return results$;
        }()));
      });
      flatten = function (xs) {
        var x;
        return [].concat.apply([], (function () {
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
            x = ref$[i$];
            if (toString$$1.call(x).slice(8, -1) === "Array") {
              results$.push(flatten(x));
            } else {
              results$.push(x);
            }
          }
          return results$;
        }()));
      };
      difference = function (xs) {
        var yss, res$, i$, to$, results, len$, x, j$, len1$, ys;
        res$ = [];
        for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        yss = res$;
        results = [];
        outer:
          for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
            x = xs[i$];
            for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
              ys = yss[j$];
              if (in$(x, ys)) {
                continue outer;
              }
            }
            results.push(x);
          }
        return results;
      };
      intersection$1 = function (xs) {
        var yss, res$, i$, to$, results, len$, x, j$, len1$, ys;
        res$ = [];
        for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        yss = res$;
        results = [];
        outer:
          for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
            x = xs[i$];
            for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
              ys = yss[j$];
              if (!in$(x, ys)) {
                continue outer;
              }
            }
            results.push(x);
          }
        return results;
      };
      union$2 = function () {
        var xss, res$, i$, to$, results, len$, xs, j$, len1$, x;
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        xss = res$;
        results = [];
        for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
          xs = xss[i$];
          for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
            x = xs[j$];
            if (!in$(x, results)) {
              results.push(x);
            }
          }
        }
        return results;
      };
      countBy = curry$$1(function (f, xs) {
        var results, i$, len$, x, key;
        results = {};
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          key = f(x);
          if (key in results) {
            results[key] += 1;
          } else {
            results[key] = 1;
          }
        }
        return results;
      });
      groupBy = curry$$1(function (f, xs) {
        var results, i$, len$, x, key;
        results = {};
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          key = f(x);
          if (key in results) {
            results[key].push(x);
          } else {
            results[key] = [x];
          }
        }
        return results;
      });
      andList = function (xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (!x) {
            return false;
          }
        }
        return true;
      };
      orList = function (xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (x) {
            return true;
          }
        }
        return false;
      };
      any = curry$$1(function (f, xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (f(x)) {
            return true;
          }
        }
        return false;
      });
      all = curry$$1(function (f, xs) {
        var i$, len$, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          if (!f(x)) {
            return false;
          }
        }
        return true;
      });
      sort = function (xs) {
        return xs.concat().sort(function (x, y) {
          if (x > y) {
            return 1;
          } else if (x < y) {
            return -1;
          } else {
            return 0;
          }
        });
      };
      sortWith = curry$$1(function (f, xs) {
        return xs.concat().sort(f);
      });
      sortBy = curry$$1(function (f, xs) {
        return xs.concat().sort(function (x, y) {
          if (f(x) > f(y)) {
            return 1;
          } else if (f(x) < f(y)) {
            return -1;
          } else {
            return 0;
          }
        });
      });
      sum = function (xs) {
        var result, i$, len$, x;
        result = 0;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          result += x;
        }
        return result;
      };
      product = function (xs) {
        var result, i$, len$, x;
        result = 1;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          result *= x;
        }
        return result;
      };
      mean = average = function (xs) {
        var sum, i$, len$, x;
        sum = 0;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          x = xs[i$];
          sum += x;
        }
        return sum / xs.length;
      };
      maximum = function (xs) {
        var max, i$, ref$, len$, x;
        max = xs[0];
        for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
          x = ref$[i$];
          if (x > max) {
            max = x;
          }
        }
        return max;
      };
      minimum = function (xs) {
        var min, i$, ref$, len$, x;
        min = xs[0];
        for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
          x = ref$[i$];
          if (x < min) {
            min = x;
          }
        }
        return min;
      };
      maximumBy = curry$$1(function (f, xs) {
        var max, i$, ref$, len$, x;
        max = xs[0];
        for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
          x = ref$[i$];
          if (f(x) > f(max)) {
            max = x;
          }
        }
        return max;
      });
      minimumBy = curry$$1(function (f, xs) {
        var min, i$, ref$, len$, x;
        min = xs[0];
        for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
          x = ref$[i$];
          if (f(x) < f(min)) {
            min = x;
          }
        }
        return min;
      });
      scan = scanl = curry$$1(function (f, memo, xs) {
        var last, x;
        last = memo;
        return [memo].concat((function () {
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(last = f(last, x));
          }
          return results$;
        }()));
      });
      scan1 = scanl1 = curry$$1(function (f, xs) {
        if (!xs.length) {
          return;
        }
        return scan(f, xs[0], xs.slice(1));
      });
      scanr = curry$$1(function (f, memo, xs) {
        xs = xs.concat().reverse();
        return scan(f, memo, xs).reverse();
      });
      scanr1 = curry$$1(function (f, xs) {
        if (!xs.length) {
          return;
        }
        xs = xs.concat().reverse();
        return scan(f, xs[0], xs.slice(1)).reverse();
      });
      slice$1 = curry$$1(function (x, y, xs) {
        return xs.slice(x, y);
      });
      take = curry$$1(function (n, xs) {
        if (n <= 0) {
          return xs.slice(0, 0);
        } else {
          return xs.slice(0, n);
        }
      });
      drop = curry$$1(function (n, xs) {
        if (n <= 0) {
          return xs;
        } else {
          return xs.slice(n);
        }
      });
      splitAt = curry$$1(function (n, xs) {
        return [
          take(n, xs),
          drop(n, xs)
        ];
      });
      takeWhile = curry$$1(function (p, xs) {
        var len, i;
        len = xs.length;
        if (!len) {
          return xs;
        }
        i = 0;
        while (i < len && p(xs[i])) {
          i += 1;
        }
        return xs.slice(0, i);
      });
      dropWhile = curry$$1(function (p, xs) {
        var len, i;
        len = xs.length;
        if (!len) {
          return xs;
        }
        i = 0;
        while (i < len && p(xs[i])) {
          i += 1;
        }
        return xs.slice(i);
      });
      span = curry$$1(function (p, xs) {
        return [
          takeWhile(p, xs),
          dropWhile(p, xs)
        ];
      });
      breakList = curry$$1(function (p, xs) {
        return span(compose$(p, not$), xs);
      });
      zip = curry$$1(function (xs, ys) {
        var result, len, i$, len$, i, x;
        result = [];
        len = ys.length;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          i = i$;
          x = xs[i$];
          if (i === len) {
            break;
          }
          result.push([
            x,
            ys[i]
          ]);
        }
        return result;
      });
      zipWith = curry$$1(function (f, xs, ys) {
        var result, len, i$, len$, i, x;
        result = [];
        len = ys.length;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          i = i$;
          x = xs[i$];
          if (i === len) {
            break;
          }
          result.push(f(x, ys[i]));
        }
        return result;
      });
      zipAll = function () {
        var xss, res$, i$, to$, minLength, len$, xs, ref$, i, lresult$, j$, results$ = [];
        res$ = [];
        for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        xss = res$;
        minLength = undefined;
        for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
          xs = xss[i$];
          minLength <= (ref$ = xs.length) || (minLength = ref$);
        }
        for (i$ = 0; i$ < minLength; ++i$) {
          i = i$;
          lresult$ = [];
          for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
            xs = xss[j$];
            lresult$.push(xs[i]);
          }
          results$.push(lresult$);
        }
        return results$;
      };
      zipAllWith = function (f) {
        var xss, res$, i$, to$, minLength, len$, xs, ref$, i, results$ = [];
        res$ = [];
        for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
          res$.push(arguments[i$]);
        }
        xss = res$;
        minLength = undefined;
        for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
          xs = xss[i$];
          minLength <= (ref$ = xs.length) || (minLength = ref$);
        }
        for (i$ = 0; i$ < minLength; ++i$) {
          i = i$;
          results$.push(f.apply(null, fn$()));
        }
        return results$;
        function fn$() {
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
            xs = ref$[i$];
            results$.push(xs[i]);
          }
          return results$;
        }
      };
      at = curry$$1(function (n, xs) {
        if (n < 0) {
          return xs[xs.length + n];
        } else {
          return xs[n];
        }
      });
      elemIndex = curry$$1(function (el, xs) {
        var i$, len$, i, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          i = i$;
          x = xs[i$];
          if (x === el) {
            return i;
          }
        }
      });
      elemIndices = curry$$1(function (el, xs) {
        var i$, len$, i, x, results$ = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          i = i$;
          x = xs[i$];
          if (x === el) {
            results$.push(i);
          }
        }
        return results$;
      });
      findIndex = curry$$1(function (f, xs) {
        var i$, len$, i, x;
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          i = i$;
          x = xs[i$];
          if (f(x)) {
            return i;
          }
        }
      });
      findIndices = curry$$1(function (f, xs) {
        var i$, len$, i, x, results$ = [];
        for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
          i = i$;
          x = xs[i$];
          if (f(x)) {
            results$.push(i);
          }
        }
        return results$;
      });
      exports$1$n = {
        each: each,
        map: map,
        filter: filter,
        compact: compact,
        reject: reject,
        remove: remove$1,
        partition: partition,
        find: find,
        head: head,
        first: first,
        tail: tail,
        last: last$1,
        initial: initial,
        empty: empty,
        reverse: reverse,
        difference: difference,
        intersection: intersection$1,
        union: union$2,
        countBy: countBy,
        groupBy: groupBy,
        fold: fold,
        fold1: fold1,
        foldl: foldl,
        foldl1: foldl1,
        foldr: foldr,
        foldr1: foldr1,
        unfoldr: unfoldr,
        andList: andList,
        orList: orList,
        any: any,
        all: all,
        unique: unique,
        uniqueBy: uniqueBy,
        sort: sort,
        sortWith: sortWith,
        sortBy: sortBy,
        sum: sum,
        product: product,
        mean: mean,
        average: average,
        concat: concat,
        concatMap: concatMap,
        flatten: flatten,
        maximum: maximum,
        minimum: minimum,
        maximumBy: maximumBy,
        minimumBy: minimumBy,
        scan: scan,
        scan1: scan1,
        scanl: scanl,
        scanl1: scanl1,
        scanr: scanr,
        scanr1: scanr1,
        slice: slice$1,
        take: take,
        drop: drop,
        splitAt: splitAt,
        takeWhile: takeWhile,
        dropWhile: dropWhile,
        span: span,
        breakList: breakList,
        zip: zip,
        zipWith: zipWith,
        zipAll: zipAll,
        zipAllWith: zipAllWith,
        at: at,
        elemIndex: elemIndex,
        elemIndices: elemIndices,
        findIndex: findIndex,
        findIndices: findIndices
      };
      function curry$$1(f, bound) {
        var context, _curry = function (args) {
            return f.length > 1 ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this || _global$1$3 : this || _global$1$3;
              return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);
            } : f;
          };
        return _curry();
      }
      function in$(x, xs) {
        var i = -1, l = xs.length >>> 0;
        while (++i < l)
          if (x === xs[i])
            return true;
        return false;
      }
      function compose$() {
        var functions = arguments;
        return function () {
          var i, result;
          result = functions[0].apply(this || _global$1$3, arguments);
          for (i = 1; i < functions.length; ++i) {
            result = functions[i](result);
          }
          return result;
        };
      }
      function not$(x) {
        return !x;
      }
      var _List = exports$1$n;
      var _global$2$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$2$a = {};
      var values, keys$1, pairsToObj, objToPairs, listsToObj, objToLists, empty$1, each$1, map$1, compact$1, filter$1, reject$1, partition$1, find$1;
      values = function (object) {
        var i$, x, results$ = [];
        for (i$ in object) {
          x = object[i$];
          results$.push(x);
        }
        return results$;
      };
      keys$1 = function (object) {
        var x, results$ = [];
        for (x in object) {
          results$.push(x);
        }
        return results$;
      };
      pairsToObj = function (object) {
        var i$, len$, x, resultObj$ = {};
        for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
          x = object[i$];
          resultObj$[x[0]] = x[1];
        }
        return resultObj$;
      };
      objToPairs = function (object) {
        var key, value, results$ = [];
        for (key in object) {
          value = object[key];
          results$.push([
            key,
            value
          ]);
        }
        return results$;
      };
      listsToObj = curry$$2(function (keys, values) {
        var i$, len$, i, key, resultObj$ = {};
        for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
          i = i$;
          key = keys[i$];
          resultObj$[key] = values[i];
        }
        return resultObj$;
      });
      objToLists = function (object) {
        var keys, values, key, value;
        keys = [];
        values = [];
        for (key in object) {
          value = object[key];
          keys.push(key);
          values.push(value);
        }
        return [
          keys,
          values
        ];
      };
      empty$1 = function (object) {
        var x;
        for (x in object) {
          return false;
        }
        return true;
      };
      each$1 = curry$$2(function (f, object) {
        var i$, x;
        for (i$ in object) {
          x = object[i$];
          f(x);
        }
        return object;
      });
      map$1 = curry$$2(function (f, object) {
        var k, x, resultObj$ = {};
        for (k in object) {
          x = object[k];
          resultObj$[k] = f(x);
        }
        return resultObj$;
      });
      compact$1 = function (object) {
        var k, x, resultObj$ = {};
        for (k in object) {
          x = object[k];
          if (x) {
            resultObj$[k] = x;
          }
        }
        return resultObj$;
      };
      filter$1 = curry$$2(function (f, object) {
        var k, x, resultObj$ = {};
        for (k in object) {
          x = object[k];
          if (f(x)) {
            resultObj$[k] = x;
          }
        }
        return resultObj$;
      });
      reject$1 = curry$$2(function (f, object) {
        var k, x, resultObj$ = {};
        for (k in object) {
          x = object[k];
          if (!f(x)) {
            resultObj$[k] = x;
          }
        }
        return resultObj$;
      });
      partition$1 = curry$$2(function (f, object) {
        var passed, failed, k, x;
        passed = {};
        failed = {};
        for (k in object) {
          x = object[k];
          (f(x) ? passed : failed)[k] = x;
        }
        return [
          passed,
          failed
        ];
      });
      find$1 = curry$$2(function (f, object) {
        var i$, x;
        for (i$ in object) {
          x = object[i$];
          if (f(x)) {
            return x;
          }
        }
      });
      exports$2$a = {
        values: values,
        keys: keys$1,
        pairsToObj: pairsToObj,
        objToPairs: objToPairs,
        listsToObj: listsToObj,
        objToLists: objToLists,
        empty: empty$1,
        each: each$1,
        map: map$1,
        filter: filter$1,
        compact: compact$1,
        reject: reject$1,
        partition: partition$1,
        find: find$1
      };
      function curry$$2(f, bound) {
        var context, _curry = function (args) {
            return f.length > 1 ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this || _global$2$1 : this || _global$2$1;
              return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);
            } : f;
          };
        return _curry();
      }
      var _Obj = exports$2$a;
      var _global$3$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$3$9 = {};
      var split, join, lines, unlines, words, unwords, chars, unchars, reverse$1, repeat, capitalize, camelize, dasherize;
      split = curry$$3(function (sep, str) {
        return str.split(sep);
      });
      join = curry$$3(function (sep, xs) {
        return xs.join(sep);
      });
      lines = function (str) {
        if (!str.length) {
          return [];
        }
        return str.split("\n");
      };
      unlines = function (it) {
        return it.join("\n");
      };
      words = function (str) {
        if (!str.length) {
          return [];
        }
        return str.split(/[ ]+/);
      };
      unwords = function (it) {
        return it.join(" ");
      };
      chars = function (it) {
        return it.split("");
      };
      unchars = function (it) {
        return it.join("");
      };
      reverse$1 = function (str) {
        return str.split("").reverse().join("");
      };
      repeat = curry$$3(function (n, str) {
        var result, i$;
        result = "";
        for (i$ = 0; i$ < n; ++i$) {
          result += str;
        }
        return result;
      });
      capitalize = function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      };
      camelize = function (it) {
        return it.replace(/[-_]+(.)?/g, function (arg$, c) {
          return (c != null ? c : "").toUpperCase();
        });
      };
      dasherize = function (str) {
        return str.replace(/([^-A-Z])([A-Z]+)/g, function (arg$, lower, upper) {
          return lower + "-" + (upper.length > 1 ? upper : upper.toLowerCase());
        }).replace(/^([A-Z]+)/, function (arg$, upper) {
          if (upper.length > 1) {
            return upper + "-";
          } else {
            return upper.toLowerCase();
          }
        });
      };
      exports$3$9 = {
        split: split,
        join: join,
        lines: lines,
        unlines: unlines,
        words: words,
        unwords: unwords,
        chars: chars,
        unchars: unchars,
        reverse: reverse$1,
        repeat: repeat,
        capitalize: capitalize,
        camelize: camelize,
        dasherize: dasherize
      };
      function curry$$3(f, bound) {
        var context, _curry = function (args) {
            return f.length > 1 ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this || _global$3$1 : this || _global$3$1;
              return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);
            } : f;
          };
        return _curry();
      }
      var _Str = exports$3$9;
      var _global$4$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$4$4 = {};
      var max, min, negate$1, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
      max = curry$$4(function (x$, y$) {
        return x$ > y$ ? x$ : y$;
      });
      min = curry$$4(function (x$, y$) {
        return x$ < y$ ? x$ : y$;
      });
      negate$1 = function (x) {
        return -x;
      };
      abs = Math.abs;
      signum = function (x) {
        if (x < 0) {
          return -1;
        } else if (x > 0) {
          return 1;
        } else {
          return 0;
        }
      };
      quot = curry$$4(function (x, y) {
        return ~~(x / y);
      });
      rem = curry$$4(function (x$, y$) {
        return x$ % y$;
      });
      div = curry$$4(function (x, y) {
        return Math.floor(x / y);
      });
      mod = curry$$4(function (x$, y$) {
        var ref$;
        return (x$ % (ref$ = y$) + ref$) % ref$;
      });
      recip = function (it) {
        return 1 / it;
      };
      pi = Math.PI;
      tau = pi * 2;
      exp = Math.exp;
      sqrt = Math.sqrt;
      ln = Math.log;
      pow = curry$$4(function (x$, y$) {
        return Math.pow(x$, y$);
      });
      sin = Math.sin;
      tan = Math.tan;
      cos = Math.cos;
      asin = Math.asin;
      acos = Math.acos;
      atan = Math.atan;
      atan2 = curry$$4(function (x, y) {
        return Math.atan2(x, y);
      });
      truncate = function (x) {
        return ~~x;
      };
      round = Math.round;
      ceiling = Math.ceil;
      floor = Math.floor;
      isItNaN = function (x) {
        return x !== x;
      };
      even = function (x) {
        return x % 2 === 0;
      };
      odd = function (x) {
        return x % 2 !== 0;
      };
      gcd = curry$$4(function (x, y) {
        var z;
        x = Math.abs(x);
        y = Math.abs(y);
        while (y !== 0) {
          z = x % y;
          x = y;
          y = z;
        }
        return x;
      });
      lcm = curry$$4(function (x, y) {
        return Math.abs(Math.floor(x / gcd(x, y) * y));
      });
      exports$4$4 = {
        max: max,
        min: min,
        negate: negate$1,
        abs: abs,
        signum: signum,
        quot: quot,
        rem: rem,
        div: div,
        mod: mod,
        recip: recip,
        pi: pi,
        tau: tau,
        exp: exp,
        sqrt: sqrt,
        ln: ln,
        pow: pow,
        sin: sin,
        tan: tan,
        cos: cos,
        acos: acos,
        asin: asin,
        atan: atan,
        atan2: atan2,
        truncate: truncate,
        round: round,
        ceiling: ceiling,
        floor: floor,
        isItNaN: isItNaN,
        even: even,
        odd: odd,
        gcd: gcd,
        lcm: lcm
      };
      function curry$$4(f, bound) {
        var context, _curry = function (args) {
            return f.length > 1 ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this || _global$4$1 : this || _global$4$1;
              return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);
            } : f;
          };
        return _curry();
      }
      var _Num = exports$4$4;
      var _global$5$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$5$4 = {};
      var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$$2 = {}.toString;
      Func = _Func;
      List = _List;
      Obj = _Obj;
      Str = _Str;
      Num = _Num;
      id = function (x) {
        return x;
      };
      isType = curry$$5(function (type, x) {
        return toString$$2.call(x).slice(8, -1) === type;
      });
      replicate = curry$$5(function (n, x) {
        var i$, results$ = [];
        for (i$ = 0; i$ < n; ++i$) {
          results$.push(x);
        }
        return results$;
      });
      Str.empty = List.empty;
      Str.slice = List.slice;
      Str.take = List.take;
      Str.drop = List.drop;
      Str.splitAt = List.splitAt;
      Str.takeWhile = List.takeWhile;
      Str.dropWhile = List.dropWhile;
      Str.span = List.span;
      Str.breakStr = List.breakList;
      prelude = {
        Func: Func,
        List: List,
        Obj: Obj,
        Str: Str,
        Num: Num,
        id: id,
        isType: isType,
        replicate: replicate
      };
      prelude.each = List.each;
      prelude.map = List.map;
      prelude.filter = List.filter;
      prelude.compact = List.compact;
      prelude.reject = List.reject;
      prelude.partition = List.partition;
      prelude.find = List.find;
      prelude.head = List.head;
      prelude.first = List.first;
      prelude.tail = List.tail;
      prelude.last = List.last;
      prelude.initial = List.initial;
      prelude.empty = List.empty;
      prelude.reverse = List.reverse;
      prelude.difference = List.difference;
      prelude.intersection = List.intersection;
      prelude.union = List.union;
      prelude.countBy = List.countBy;
      prelude.groupBy = List.groupBy;
      prelude.fold = List.fold;
      prelude.foldl = List.foldl;
      prelude.fold1 = List.fold1;
      prelude.foldl1 = List.foldl1;
      prelude.foldr = List.foldr;
      prelude.foldr1 = List.foldr1;
      prelude.unfoldr = List.unfoldr;
      prelude.andList = List.andList;
      prelude.orList = List.orList;
      prelude.any = List.any;
      prelude.all = List.all;
      prelude.unique = List.unique;
      prelude.uniqueBy = List.uniqueBy;
      prelude.sort = List.sort;
      prelude.sortWith = List.sortWith;
      prelude.sortBy = List.sortBy;
      prelude.sum = List.sum;
      prelude.product = List.product;
      prelude.mean = List.mean;
      prelude.average = List.average;
      prelude.concat = List.concat;
      prelude.concatMap = List.concatMap;
      prelude.flatten = List.flatten;
      prelude.maximum = List.maximum;
      prelude.minimum = List.minimum;
      prelude.maximumBy = List.maximumBy;
      prelude.minimumBy = List.minimumBy;
      prelude.scan = List.scan;
      prelude.scanl = List.scanl;
      prelude.scan1 = List.scan1;
      prelude.scanl1 = List.scanl1;
      prelude.scanr = List.scanr;
      prelude.scanr1 = List.scanr1;
      prelude.slice = List.slice;
      prelude.take = List.take;
      prelude.drop = List.drop;
      prelude.splitAt = List.splitAt;
      prelude.takeWhile = List.takeWhile;
      prelude.dropWhile = List.dropWhile;
      prelude.span = List.span;
      prelude.breakList = List.breakList;
      prelude.zip = List.zip;
      prelude.zipWith = List.zipWith;
      prelude.zipAll = List.zipAll;
      prelude.zipAllWith = List.zipAllWith;
      prelude.at = List.at;
      prelude.elemIndex = List.elemIndex;
      prelude.elemIndices = List.elemIndices;
      prelude.findIndex = List.findIndex;
      prelude.findIndices = List.findIndices;
      prelude.apply = Func.apply;
      prelude.curry = Func.curry;
      prelude.flip = Func.flip;
      prelude.fix = Func.fix;
      prelude.over = Func.over;
      prelude.split = Str.split;
      prelude.join = Str.join;
      prelude.lines = Str.lines;
      prelude.unlines = Str.unlines;
      prelude.words = Str.words;
      prelude.unwords = Str.unwords;
      prelude.chars = Str.chars;
      prelude.unchars = Str.unchars;
      prelude.repeat = Str.repeat;
      prelude.capitalize = Str.capitalize;
      prelude.camelize = Str.camelize;
      prelude.dasherize = Str.dasherize;
      prelude.values = Obj.values;
      prelude.keys = Obj.keys;
      prelude.pairsToObj = Obj.pairsToObj;
      prelude.objToPairs = Obj.objToPairs;
      prelude.listsToObj = Obj.listsToObj;
      prelude.objToLists = Obj.objToLists;
      prelude.max = Num.max;
      prelude.min = Num.min;
      prelude.negate = Num.negate;
      prelude.abs = Num.abs;
      prelude.signum = Num.signum;
      prelude.quot = Num.quot;
      prelude.rem = Num.rem;
      prelude.div = Num.div;
      prelude.mod = Num.mod;
      prelude.recip = Num.recip;
      prelude.pi = Num.pi;
      prelude.tau = Num.tau;
      prelude.exp = Num.exp;
      prelude.sqrt = Num.sqrt;
      prelude.ln = Num.ln;
      prelude.pow = Num.pow;
      prelude.sin = Num.sin;
      prelude.tan = Num.tan;
      prelude.cos = Num.cos;
      prelude.acos = Num.acos;
      prelude.asin = Num.asin;
      prelude.atan = Num.atan;
      prelude.atan2 = Num.atan2;
      prelude.truncate = Num.truncate;
      prelude.round = Num.round;
      prelude.ceiling = Num.ceiling;
      prelude.floor = Num.floor;
      prelude.isItNaN = Num.isItNaN;
      prelude.even = Num.even;
      prelude.odd = Num.odd;
      prelude.gcd = Num.gcd;
      prelude.lcm = Num.lcm;
      prelude.VERSION = "1.2.1";
      exports$5$4 = prelude;
      function curry$$5(f, bound) {
        var context, _curry = function (args) {
            return f.length > 1 ? function () {
              var params = args ? args.concat() : [];
              context = bound ? context || this || _global$5$1 : this || _global$5$1;
              return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);
            } : f;
          };
        return _curry();
      }
      var exports$6$3 = exports$5$4;

      var exports$4H = {};
      (function () {
        var identifierRegex, tokenRegex;
        identifierRegex = /[\$\w]+/;
        function peek(tokens) {
          var token;
          token = tokens[0];
          if (token == null) {
            throw new Error("Unexpected end of input.");
          }
          return token;
        }
        function consumeIdent(tokens) {
          var token;
          token = peek(tokens);
          if (!identifierRegex.test(token)) {
            throw new Error("Expected text, got '" + token + "' instead.");
          }
          return tokens.shift();
        }
        function consumeOp(tokens, op) {
          var token;
          token = peek(tokens);
          if (token !== op) {
            throw new Error("Expected '" + op + "', got '" + token + "' instead.");
          }
          return tokens.shift();
        }
        function maybeConsumeOp(tokens, op) {
          var token;
          token = tokens[0];
          if (token === op) {
            return tokens.shift();
          } else {
            return null;
          }
        }
        function consumeArray(tokens) {
          var types;
          consumeOp(tokens, "[");
          if (peek(tokens) === "]") {
            throw new Error("Must specify type of Array - eg. [Type], got [] instead.");
          }
          types = consumeTypes(tokens);
          consumeOp(tokens, "]");
          return {
            structure: "array",
            of: types
          };
        }
        function consumeTuple(tokens) {
          var components;
          components = [];
          consumeOp(tokens, "(");
          if (peek(tokens) === ")") {
            throw new Error("Tuple must be of at least length 1 - eg. (Type), got () instead.");
          }
          for (;;) {
            components.push(consumeTypes(tokens));
            maybeConsumeOp(tokens, ",");
            if (")" === peek(tokens)) {
              break;
            }
          }
          consumeOp(tokens, ")");
          return {
            structure: "tuple",
            of: components
          };
        }
        function consumeFields(tokens) {
          var fields, subset, ref$, key, types;
          fields = {};
          consumeOp(tokens, "{");
          subset = false;
          for (;;) {
            if (maybeConsumeOp(tokens, "...")) {
              subset = true;
              break;
            }
            ref$ = consumeField(tokens), key = ref$[0], types = ref$[1];
            fields[key] = types;
            maybeConsumeOp(tokens, ",");
            if ("}" === peek(tokens)) {
              break;
            }
          }
          consumeOp(tokens, "}");
          return {
            structure: "fields",
            of: fields,
            subset: subset
          };
        }
        function consumeField(tokens) {
          var key, types;
          key = consumeIdent(tokens);
          consumeOp(tokens, ":");
          types = consumeTypes(tokens);
          return [
            key,
            types
          ];
        }
        function maybeConsumeStructure(tokens) {
          switch (tokens[0]) {
          case "[":
            return consumeArray(tokens);
          case "(":
            return consumeTuple(tokens);
          case "{":
            return consumeFields(tokens);
          }
        }
        function consumeType(tokens) {
          var token, wildcard, type, structure;
          token = peek(tokens);
          wildcard = token === "*";
          if (wildcard || identifierRegex.test(token)) {
            type = wildcard ? consumeOp(tokens, "*") : consumeIdent(tokens);
            structure = maybeConsumeStructure(tokens);
            if (structure) {
              return structure.type = type, structure;
            } else {
              return { type: type };
            }
          } else {
            structure = maybeConsumeStructure(tokens);
            if (!structure) {
              throw new Error("Unexpected character: " + token);
            }
            return structure;
          }
        }
        function consumeTypes(tokens) {
          var lookahead, types, typesSoFar, typeObj, type, structure;
          if ("::" === peek(tokens)) {
            throw new Error("No comment before comment separator '::' found.");
          }
          lookahead = tokens[1];
          if (lookahead != null && lookahead === "::") {
            tokens.shift();
            tokens.shift();
          }
          types = [];
          typesSoFar = {};
          if ("Maybe" === peek(tokens)) {
            tokens.shift();
            types = [
              { type: "Undefined" },
              { type: "Null" }
            ];
            typesSoFar = {
              Undefined: true,
              Null: true
            };
          }
          for (;;) {
            typeObj = consumeType(tokens), type = typeObj.type, structure = typeObj.structure;
            if (!typesSoFar[type]) {
              types.push(typeObj);
            }
            if (structure == null) {
              typesSoFar[type] = true;
            }
            if (!maybeConsumeOp(tokens, "|")) {
              break;
            }
          }
          return types;
        }
        tokenRegex = RegExp("\\.\\.\\.|::|->|" + identifierRegex.source + "|\\S", "g");
        exports$4H = function (input) {
          var tokens, e;
          if (!input.length) {
            throw new Error("No type specified.");
          }
          tokens = input.match(tokenRegex) || [];
          if (in$("->", tokens)) {
            throw new Error("Function types are not supported. To validate that something is a function, you may use 'Function'.");
          }
          try {
            return consumeTypes(tokens);
          } catch (e$) {
            e = e$;
            throw new Error(e.message + " - Remaining tokens: " + JSON.stringify(tokens) + " - Initial input: '" + input + "'");
          }
        };
        function in$(x, xs) {
          var i = -1, l = xs.length >>> 0;
          while (++i < l)
            if (x === xs[i])
              return true;
          return false;
        }
      }.call(exports$4H));
      var _parseType = exports$4H;
      var exports$1$m = {};
      (function () {
        var ref$, any, all, isItNaN, types, defaultType, toString$ = {}.toString;
        ref$ = exports$6$3, any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;
        types = {
          Number: {
            typeOf: "Number",
            validate: function (it) {
              return !isItNaN(it);
            }
          },
          NaN: {
            typeOf: "Number",
            validate: isItNaN
          },
          Int: {
            typeOf: "Number",
            validate: function (it) {
              return !isItNaN(it) && it % 1 === 0;
            }
          },
          Float: {
            typeOf: "Number",
            validate: function (it) {
              return !isItNaN(it);
            }
          },
          Date: {
            typeOf: "Date",
            validate: function (it) {
              return !isItNaN(it.getTime());
            }
          }
        };
        defaultType = {
          array: "Array",
          tuple: "Array"
        };
        function checkArray(input, type, options) {
          return all(function (it) {
            return checkMultiple(it, type.of, options);
          }, input);
        }
        function checkTuple(input, type, options) {
          var i, i$, ref$, len$, types;
          i = 0;
          for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {
            types = ref$[i$];
            if (!checkMultiple(input[i], types, options)) {
              return false;
            }
            i++;
          }
          return input.length <= i;
        }
        function checkFields(input, type, options) {
          var inputKeys, numInputKeys, k, numOfKeys, key, ref$, types;
          inputKeys = {};
          numInputKeys = 0;
          for (k in input) {
            inputKeys[k] = true;
            numInputKeys++;
          }
          numOfKeys = 0;
          for (key in ref$ = type.of) {
            types = ref$[key];
            if (!checkMultiple(input[key], types, options)) {
              return false;
            }
            if (inputKeys[key]) {
              numOfKeys++;
            }
          }
          return type.subset || numInputKeys === numOfKeys;
        }
        function checkStructure(input, type, options) {
          if (!(input instanceof Object)) {
            return false;
          }
          switch (type.structure) {
          case "fields":
            return checkFields(input, type, options);
          case "array":
            return checkArray(input, type, options);
          case "tuple":
            return checkTuple(input, type, options);
          }
        }
        function check(input, typeObj, options) {
          var type, structure, setting, that;
          type = typeObj.type, structure = typeObj.structure;
          if (type) {
            if (type === "*") {
              return true;
            }
            setting = options.customTypes[type] || types[type];
            if (setting) {
              return (setting.typeOf === void 8 || setting.typeOf === toString$.call(input).slice(8, -1)) && setting.validate(input);
            } else {
              return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj, options));
            }
          } else if (structure) {
            if (that = defaultType[structure]) {
              if (that !== toString$.call(input).slice(8, -1)) {
                return false;
              }
            }
            return checkStructure(input, typeObj, options);
          } else {
            throw new Error("No type defined. Input: " + input + ".");
          }
        }
        function checkMultiple(input, types, options) {
          if (toString$.call(types).slice(8, -1) !== "Array") {
            throw new Error("Types must be in an array. Input: " + input + ".");
          }
          return any(function (it) {
            return check(input, it, options);
          }, types);
        }
        exports$1$m = function (parsedType, input, options) {
          options == null && (options = {});
          if (options.customTypes == null) {
            options.customTypes = {};
          }
          return checkMultiple(input, parsedType, options);
        };
      }.call(exports$1$m));
      var _check = exports$1$m;
      var exports$2$9 = {};
      (function () {
        var VERSION, parseType, parsedTypeCheck, typeCheck;
        VERSION = "0.4.0";
        parseType = _parseType;
        parsedTypeCheck = _check;
        typeCheck = function (type, input, options) {
          return parsedTypeCheck(parseType(type), input, options);
        };
        exports$2$9 = {
          VERSION: VERSION,
          typeCheck: typeCheck,
          parsedTypeCheck: parsedTypeCheck,
          parseType: parseType
        };
      }.call(exports$2$9));
      var exports$3$8 = exports$2$9;
      exports$2$9.VERSION; exports$2$9.typeCheck; exports$2$9.parsedTypeCheck; exports$2$9.parseType;

      var exports$4G = {};
      (function () {
        var reject, special, tokenRegex;
        reject = exports$6$3.reject;
        function consumeOp(tokens, op) {
          if (tokens[0] === op) {
            return tokens.shift();
          } else {
            throw new Error("Expected '" + op + "', but got '" + tokens[0] + "' instead in " + JSON.stringify(tokens) + ".");
          }
        }
        function maybeConsumeOp(tokens, op) {
          if (tokens[0] === op) {
            return tokens.shift();
          }
        }
        function consumeList(tokens, arg$, hasDelimiters) {
          var open, close, result, untilTest;
          open = arg$[0], close = arg$[1];
          if (hasDelimiters) {
            consumeOp(tokens, open);
          }
          result = [];
          untilTest = "," + (hasDelimiters ? close : "");
          while (tokens.length && hasDelimiters && tokens[0] !== close) {
            result.push(consumeElement(tokens, untilTest));
            maybeConsumeOp(tokens, ",");
          }
          if (hasDelimiters) {
            consumeOp(tokens, close);
          }
          return result;
        }
        function consumeArray(tokens, hasDelimiters) {
          return consumeList(tokens, [
            "[",
            "]"
          ], hasDelimiters);
        }
        function consumeTuple(tokens, hasDelimiters) {
          return consumeList(tokens, [
            "(",
            ")"
          ], hasDelimiters);
        }
        function consumeFields(tokens, hasDelimiters) {
          var result, untilTest, key;
          if (hasDelimiters) {
            consumeOp(tokens, "{");
          }
          result = {};
          untilTest = "," + (hasDelimiters ? "}" : "");
          while (tokens.length && (!hasDelimiters || tokens[0] !== "}")) {
            key = consumeValue(tokens, ":");
            consumeOp(tokens, ":");
            result[key] = consumeElement(tokens, untilTest);
            maybeConsumeOp(tokens, ",");
          }
          if (hasDelimiters) {
            consumeOp(tokens, "}");
          }
          return result;
        }
        function consumeValue(tokens, untilTest) {
          var out;
          untilTest == null && (untilTest = "");
          out = "";
          while (tokens.length && -1 === untilTest.indexOf(tokens[0])) {
            out += tokens.shift();
          }
          return out;
        }
        function consumeElement(tokens, untilTest) {
          switch (tokens[0]) {
          case "[":
            return consumeArray(tokens, true);
          case "(":
            return consumeTuple(tokens, true);
          case "{":
            return consumeFields(tokens, true);
          default:
            return consumeValue(tokens, untilTest);
          }
        }
        function consumeTopLevel(tokens, types, options) {
          var ref$, type, structure, origTokens, result, finalResult, x$, y$;
          ref$ = types[0], type = ref$.type, structure = ref$.structure;
          origTokens = tokens.concat();
          if (!options.explicit && types.length === 1 && (!type && structure || type === "Array" || type === "Object")) {
            result = structure === "array" || type === "Array" ? consumeArray(tokens, tokens[0] === "[") : structure === "tuple" ? consumeTuple(tokens, tokens[0] === "(") : consumeFields(tokens, tokens[0] === "{");
            finalResult = tokens.length ? consumeElement(structure === "array" || type === "Array" ? (x$ = origTokens, x$.unshift("["), x$.push("]"), x$) : (y$ = origTokens, y$.unshift("("), y$.push(")"), y$)) : result;
          } else {
            finalResult = consumeElement(tokens);
          }
          return finalResult;
        }
        special = /\[\]\(\)}{:,/.source;
        tokenRegex = RegExp("(\"(?:\\\\\"|[^\"])*\")|('(?:\\\\'|[^'])*')|(/(?:\\\\/|[^/])*/[a-zA-Z]*)|(#.*#)|([" + special + "])|([^\\s" + special + "](?:\\s*[^\\s" + special + "]+)*)|\\s*");
        exports$4G = function (types, string, options) {
          var tokens, node;
          options == null && (options = {});
          if (!options.explicit && types.length === 1 && types[0].type === "String") {
            return string;
          }
          tokens = reject(not$, string.split(tokenRegex));
          node = consumeTopLevel(tokens, types, options);
          if (!node) {
            throw new Error("Error parsing '" + string + "'.");
          }
          return node;
        };
        function not$(x) {
          return !x;
        }
      }.call(exports$4G));
      var _parseString = exports$4G;
      var exports$1$l = {};
      (function () {
        var parsedTypeCheck, types, toString$ = {}.toString;
        parsedTypeCheck = exports$3$8.parsedTypeCheck;
        types = {
          "*": function (value, options) {
            switch (toString$.call(value).slice(8, -1)) {
            case "Array":
              return typeCast(value, { type: "Array" }, options);
            case "Object":
              return typeCast(value, { type: "Object" }, options);
            default:
              return {
                type: "Just",
                value: typesCast(value, [
                  { type: "Undefined" },
                  { type: "Null" },
                  { type: "NaN" },
                  { type: "Boolean" },
                  { type: "Number" },
                  { type: "Date" },
                  { type: "RegExp" },
                  { type: "Array" },
                  { type: "Object" },
                  { type: "String" }
                ], (options.explicit = true, options))
              };
            }
          },
          Undefined: function (it) {
            if (it === "undefined" || it === void 8) {
              return {
                type: "Just",
                value: void 8
              };
            } else {
              return { type: "Nothing" };
            }
          },
          Null: function (it) {
            if (it === "null") {
              return {
                type: "Just",
                value: null
              };
            } else {
              return { type: "Nothing" };
            }
          },
          NaN: function (it) {
            if (it === "NaN") {
              return {
                type: "Just",
                value: NaN
              };
            } else {
              return { type: "Nothing" };
            }
          },
          Boolean: function (it) {
            if (it === "true") {
              return {
                type: "Just",
                value: true
              };
            } else if (it === "false") {
              return {
                type: "Just",
                value: false
              };
            } else {
              return { type: "Nothing" };
            }
          },
          Number: function (it) {
            return {
              type: "Just",
              value: +it
            };
          },
          Int: function (it) {
            return {
              type: "Just",
              value: +it
            };
          },
          Float: function (it) {
            return {
              type: "Just",
              value: +it
            };
          },
          Date: function (value, options) {
            var that;
            if (that = /^\#([\s\S]*)\#$/.exec(value)) {
              return {
                type: "Just",
                value: new Date(+that[1] || that[1])
              };
            } else if (options.explicit) {
              return { type: "Nothing" };
            } else {
              return {
                type: "Just",
                value: new Date(+value || value)
              };
            }
          },
          RegExp: function (value, options) {
            var that;
            if (that = /^\/([\s\S]*)\/([gimy]*)$/.exec(value)) {
              return {
                type: "Just",
                value: new RegExp(that[1], that[2])
              };
            } else if (options.explicit) {
              return { type: "Nothing" };
            } else {
              return {
                type: "Just",
                value: new RegExp(value)
              };
            }
          },
          Array: function (value, options) {
            return castArray(value, { of: [{ type: "*" }] }, options);
          },
          Object: function (value, options) {
            return castFields(value, { of: {} }, options);
          },
          String: function (it) {
            var replace, that;
            if (toString$.call(it).slice(8, -1) !== "String") {
              return { type: "Nothing" };
            }
            replace = function (value, quote) {
              return value.replace(/\\([^u]|u[0-9a-fA-F]{4})/g, function (all, escaped) {
                switch (escaped[0]) {
                case quote:
                  return quote;
                case "\\":
                  return "\\";
                case "b":
                  return "\b";
                case "f":
                  return "\f";
                case "n":
                  return "\n";
                case "r":
                  return "\r";
                case "t":
                  return "\t";
                case "u":
                  return JSON.parse("\"" + all + "\"");
                default:
                  return escaped;
                }
              });
            };
            if (that = it.match(/^'([\s\S]*)'$/)) {
              return {
                type: "Just",
                value: replace(that[1], "'")
              };
            } else if (that = it.match(/^"([\s\S]*)"$/)) {
              return {
                type: "Just",
                value: replace(that[1], "\"")
              };
            } else {
              return {
                type: "Just",
                value: it
              };
            }
          }
        };
        function castArray(node, type, options) {
          var typeOf, element;
          if (toString$.call(node).slice(8, -1) !== "Array") {
            return { type: "Nothing" };
          }
          typeOf = type.of;
          return {
            type: "Just",
            value: (function () {
              var i$, ref$, len$, results$ = [];
              for (i$ = 0, len$ = (ref$ = node).length; i$ < len$; ++i$) {
                element = ref$[i$];
                results$.push(typesCast(element, typeOf, options));
              }
              return results$;
            }())
          };
        }
        function castTuple(node, type, options) {
          var result, i, i$, ref$, len$, types, cast;
          if (toString$.call(node).slice(8, -1) !== "Array") {
            return { type: "Nothing" };
          }
          result = [];
          i = 0;
          for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {
            types = ref$[i$];
            cast = typesCast(node[i], types, options);
            if (toString$.call(cast).slice(8, -1) !== "Undefined") {
              result.push(cast);
            }
            i++;
          }
          if (node.length <= i) {
            return {
              type: "Just",
              value: result
            };
          } else {
            return { type: "Nothing" };
          }
        }
        function castFields(node, type, options) {
          var typeOf, key, value;
          if (toString$.call(node).slice(8, -1) !== "Object") {
            return { type: "Nothing" };
          }
          typeOf = type.of;
          return {
            type: "Just",
            value: (function () {
              var ref$, resultObj$ = {};
              for (key in ref$ = node) {
                value = ref$[key];
                resultObj$[typesCast(key, [{ type: "String" }], options)] = typesCast(value, typeOf[key] || [{ type: "*" }], options);
              }
              return resultObj$;
            }())
          };
        }
        function typeCast(node, typeObj, options) {
          var type, structure, castFunc, ref$;
          type = typeObj.type, structure = typeObj.structure;
          if (type) {
            castFunc = ((ref$ = options.customTypes[type]) != null ? ref$.cast : void 8) || types[type];
            if (!castFunc) {
              throw new Error("Type not defined: " + type + ".");
            }
            return castFunc(node, options, typesCast);
          } else {
            switch (structure) {
            case "array":
              return castArray(node, typeObj, options);
            case "tuple":
              return castTuple(node, typeObj, options);
            case "fields":
              return castFields(node, typeObj, options);
            }
          }
        }
        function typesCast(node, types, options) {
          var i$, len$, type, ref$, valueType, value;
          for (i$ = 0, len$ = types.length; i$ < len$; ++i$) {
            type = types[i$];
            ref$ = typeCast(node, type, options), valueType = ref$.type, value = ref$.value;
            if (valueType === "Nothing") {
              continue;
            }
            if (parsedTypeCheck([type], value, { customTypes: options.customTypes })) {
              return value;
            }
          }
          throw new Error("Value " + JSON.stringify(node) + " does not type check against " + JSON.stringify(types) + ".");
        }
        exports$1$l = function (node, types, options) {
          if (!options.explicit && types.length === 1 && types[0].type === "String") {
            return node;
          }
          return typesCast(node, types, options);
        };
      }.call(exports$1$l));
      var _cast = exports$1$l;
      var exports$2$8 = {};
      (function () {
        var parseString, cast, parseType, VERSION, parsedTypeParse, parse;
        parseString = _parseString;
        cast = _cast;
        parseType = exports$3$8.parseType;
        VERSION = "0.4.1";
        parsedTypeParse = function (parsedType, string, options) {
          options == null && (options = {});
          options.explicit == null && (options.explicit = false);
          options.customTypes == null && (options.customTypes = {});
          return cast(parseString(parsedType, string, options), parsedType, options);
        };
        parse = function (type, string, options) {
          return parsedTypeParse(parseType(type), string, options);
        };
        exports$2$8 = {
          VERSION: VERSION,
          parse: parse,
          parsedTypeParse: parsedTypeParse
        };
      }.call(exports$2$8));
      var exports$3$7 = exports$2$8;
      const VERSION = exports$2$8.VERSION, parse$4 = exports$2$8.parse, parsedTypeParse = exports$2$8.parsedTypeParse;

      var _levn2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$3$7,
        VERSION: VERSION,
        parse: parse$4,
        parsedTypeParse: parsedTypeParse
      });

      function e(t) {
        return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(t);
      }
      function t(e, t) {
        return function (e) {
          if (Array.isArray(e))
            return e;
        }(e) || function (e, t) {
          var r = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
          if (null != r) {
            var n, a, o, i, s = [], u = !0, l = !1;
            try {
              if (o = (r = r.call(e)).next, 0 === t) {
                if (Object(r) !== r)
                  return;
                u = !1;
              } else
                for (; !(u = (n = o.call(r)).done) && (s.push(n.value), s.length !== t); u = !0);
            } catch (e) {
              l = !0, a = e;
            } finally {
              try {
                if (!u && null != r.return && (i = r.return(), Object(i) !== i))
                  return;
              } finally {
                if (l)
                  throw a;
              }
            }
            return s;
          }
        }(e, t) || n(e, t) || (function () {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }());
      }
      function r(e) {
        return function (e) {
          if (Array.isArray(e))
            return a(e);
        }(e) || function (e) {
          if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"])
            return Array.from(e);
        }(e) || n(e) || (function () {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }());
      }
      function n(e, t) {
        if (e) {
          if ("string" == typeof e)
            return a(e, t);
          var r = Object.prototype.toString.call(e).slice(8, -1);
          return "Object" === r && e.constructor && (r = e.constructor.name), "Map" === r || "Set" === r ? Array.from(e) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? a(e, t) : void 0;
        }
      }
      function a(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var r = 0, n = new Array(t); r < t; r++)
          n[r] = e[r];
        return n;
      }
      function o(e, t) {
        return e(t = { exports: {} }, t.exports), t.exports;
      }
      var i = o(function (e, t) {
          !function e(t) {
            var r, n, a, o, i, s;
            function u(e) {
              var t, r, n = {};
              for (t in e)
                e.hasOwnProperty(t) && (r = e[t], n[t] = "object" == typeof r && null !== r ? u(r) : r);
              return n;
            }
            function l(e, t) {
              this.parent = e, this.key = t;
            }
            function c(e, t, r, n) {
              this.node = e, this.path = t, this.wrap = r, this.ref = n;
            }
            function f() {
            }
            function p(e) {
              return null != e && ("object" == typeof e && "string" == typeof e.type);
            }
            function h(e, t) {
              return (e === r.ObjectExpression || e === r.ObjectPattern) && "properties" === t;
            }
            function y(e, t) {
              for (var r = e.length - 1; r >= 0; --r)
                if (e[r].node === t)
                  return !0;
              return !1;
            }
            function d(e, t) {
              return new f().traverse(e, t);
            }
            function m(e, t) {
              var r;
              return r = function (e, t) {
                var r, n, a, o;
                for (n = e.length, a = 0; n;)
                  t(e[o = a + (r = n >>> 1)]) ? n = r : (a = o + 1, n -= r + 1);
                return a;
              }(t, function (t) {
                return t.range[0] > e.range[0];
              }), e.extendedRange = [
                e.range[0],
                e.range[1]
              ], r !== t.length && (e.extendedRange[1] = t[r].range[0]), (r -= 1) >= 0 && (e.extendedRange[0] = t[r].range[1]), e;
            }
            return r = {
              AssignmentExpression: "AssignmentExpression",
              AssignmentPattern: "AssignmentPattern",
              ArrayExpression: "ArrayExpression",
              ArrayPattern: "ArrayPattern",
              ArrowFunctionExpression: "ArrowFunctionExpression",
              AwaitExpression: "AwaitExpression",
              BlockStatement: "BlockStatement",
              BinaryExpression: "BinaryExpression",
              BreakStatement: "BreakStatement",
              CallExpression: "CallExpression",
              CatchClause: "CatchClause",
              ChainExpression: "ChainExpression",
              ClassBody: "ClassBody",
              ClassDeclaration: "ClassDeclaration",
              ClassExpression: "ClassExpression",
              ComprehensionBlock: "ComprehensionBlock",
              ComprehensionExpression: "ComprehensionExpression",
              ConditionalExpression: "ConditionalExpression",
              ContinueStatement: "ContinueStatement",
              DebuggerStatement: "DebuggerStatement",
              DirectiveStatement: "DirectiveStatement",
              DoWhileStatement: "DoWhileStatement",
              EmptyStatement: "EmptyStatement",
              ExportAllDeclaration: "ExportAllDeclaration",
              ExportDefaultDeclaration: "ExportDefaultDeclaration",
              ExportNamedDeclaration: "ExportNamedDeclaration",
              ExportSpecifier: "ExportSpecifier",
              ExpressionStatement: "ExpressionStatement",
              ForStatement: "ForStatement",
              ForInStatement: "ForInStatement",
              ForOfStatement: "ForOfStatement",
              FunctionDeclaration: "FunctionDeclaration",
              FunctionExpression: "FunctionExpression",
              GeneratorExpression: "GeneratorExpression",
              Identifier: "Identifier",
              IfStatement: "IfStatement",
              ImportExpression: "ImportExpression",
              ImportDeclaration: "ImportDeclaration",
              ImportDefaultSpecifier: "ImportDefaultSpecifier",
              ImportNamespaceSpecifier: "ImportNamespaceSpecifier",
              ImportSpecifier: "ImportSpecifier",
              Literal: "Literal",
              LabeledStatement: "LabeledStatement",
              LogicalExpression: "LogicalExpression",
              MemberExpression: "MemberExpression",
              MetaProperty: "MetaProperty",
              MethodDefinition: "MethodDefinition",
              ModuleSpecifier: "ModuleSpecifier",
              NewExpression: "NewExpression",
              ObjectExpression: "ObjectExpression",
              ObjectPattern: "ObjectPattern",
              PrivateIdentifier: "PrivateIdentifier",
              Program: "Program",
              Property: "Property",
              PropertyDefinition: "PropertyDefinition",
              RestElement: "RestElement",
              ReturnStatement: "ReturnStatement",
              SequenceExpression: "SequenceExpression",
              SpreadElement: "SpreadElement",
              Super: "Super",
              SwitchStatement: "SwitchStatement",
              SwitchCase: "SwitchCase",
              TaggedTemplateExpression: "TaggedTemplateExpression",
              TemplateElement: "TemplateElement",
              TemplateLiteral: "TemplateLiteral",
              ThisExpression: "ThisExpression",
              ThrowStatement: "ThrowStatement",
              TryStatement: "TryStatement",
              UnaryExpression: "UnaryExpression",
              UpdateExpression: "UpdateExpression",
              VariableDeclaration: "VariableDeclaration",
              VariableDeclarator: "VariableDeclarator",
              WhileStatement: "WhileStatement",
              WithStatement: "WithStatement",
              YieldExpression: "YieldExpression"
            }, a = {
              AssignmentExpression: [
                "left",
                "right"
              ],
              AssignmentPattern: [
                "left",
                "right"
              ],
              ArrayExpression: ["elements"],
              ArrayPattern: ["elements"],
              ArrowFunctionExpression: [
                "params",
                "body"
              ],
              AwaitExpression: ["argument"],
              BlockStatement: ["body"],
              BinaryExpression: [
                "left",
                "right"
              ],
              BreakStatement: ["label"],
              CallExpression: [
                "callee",
                "arguments"
              ],
              CatchClause: [
                "param",
                "body"
              ],
              ChainExpression: ["expression"],
              ClassBody: ["body"],
              ClassDeclaration: [
                "id",
                "superClass",
                "body"
              ],
              ClassExpression: [
                "id",
                "superClass",
                "body"
              ],
              ComprehensionBlock: [
                "left",
                "right"
              ],
              ComprehensionExpression: [
                "blocks",
                "filter",
                "body"
              ],
              ConditionalExpression: [
                "test",
                "consequent",
                "alternate"
              ],
              ContinueStatement: ["label"],
              DebuggerStatement: [],
              DirectiveStatement: [],
              DoWhileStatement: [
                "body",
                "test"
              ],
              EmptyStatement: [],
              ExportAllDeclaration: ["source"],
              ExportDefaultDeclaration: ["declaration"],
              ExportNamedDeclaration: [
                "declaration",
                "specifiers",
                "source"
              ],
              ExportSpecifier: [
                "exported",
                "local"
              ],
              ExpressionStatement: ["expression"],
              ForStatement: [
                "init",
                "test",
                "update",
                "body"
              ],
              ForInStatement: [
                "left",
                "right",
                "body"
              ],
              ForOfStatement: [
                "left",
                "right",
                "body"
              ],
              FunctionDeclaration: [
                "id",
                "params",
                "body"
              ],
              FunctionExpression: [
                "id",
                "params",
                "body"
              ],
              GeneratorExpression: [
                "blocks",
                "filter",
                "body"
              ],
              Identifier: [],
              IfStatement: [
                "test",
                "consequent",
                "alternate"
              ],
              ImportExpression: ["source"],
              ImportDeclaration: [
                "specifiers",
                "source"
              ],
              ImportDefaultSpecifier: ["local"],
              ImportNamespaceSpecifier: ["local"],
              ImportSpecifier: [
                "imported",
                "local"
              ],
              Literal: [],
              LabeledStatement: [
                "label",
                "body"
              ],
              LogicalExpression: [
                "left",
                "right"
              ],
              MemberExpression: [
                "object",
                "property"
              ],
              MetaProperty: [
                "meta",
                "property"
              ],
              MethodDefinition: [
                "key",
                "value"
              ],
              ModuleSpecifier: [],
              NewExpression: [
                "callee",
                "arguments"
              ],
              ObjectExpression: ["properties"],
              ObjectPattern: ["properties"],
              PrivateIdentifier: [],
              Program: ["body"],
              Property: [
                "key",
                "value"
              ],
              PropertyDefinition: [
                "key",
                "value"
              ],
              RestElement: ["argument"],
              ReturnStatement: ["argument"],
              SequenceExpression: ["expressions"],
              SpreadElement: ["argument"],
              Super: [],
              SwitchStatement: [
                "discriminant",
                "cases"
              ],
              SwitchCase: [
                "test",
                "consequent"
              ],
              TaggedTemplateExpression: [
                "tag",
                "quasi"
              ],
              TemplateElement: [],
              TemplateLiteral: [
                "quasis",
                "expressions"
              ],
              ThisExpression: [],
              ThrowStatement: ["argument"],
              TryStatement: [
                "block",
                "handler",
                "finalizer"
              ],
              UnaryExpression: ["argument"],
              UpdateExpression: ["argument"],
              VariableDeclaration: ["declarations"],
              VariableDeclarator: [
                "id",
                "init"
              ],
              WhileStatement: [
                "test",
                "body"
              ],
              WithStatement: [
                "object",
                "body"
              ],
              YieldExpression: ["argument"]
            }, n = {
              Break: o = {},
              Skip: i = {},
              Remove: s = {}
            }, l.prototype.replace = function (e) {
              this.parent[this.key] = e;
            }, l.prototype.remove = function () {
              return Array.isArray(this.parent) ? (this.parent.splice(this.key, 1), !0) : (this.replace(null), !1);
            }, f.prototype.path = function () {
              var e, t, r, n, a;
              function o(e, t) {
                if (Array.isArray(t))
                  for (r = 0, n = t.length; r < n; ++r)
                    e.push(t[r]);
                else
                  e.push(t);
              }
              if (!this.__current.path)
                return null;
              for (a = [], e = 2, t = this.__leavelist.length; e < t; ++e)
                o(a, this.__leavelist[e].path);
              return o(a, this.__current.path), a;
            }, f.prototype.type = function () {
              return this.current().type || this.__current.wrap;
            }, f.prototype.parents = function () {
              var e, t, r;
              for (r = [], e = 1, t = this.__leavelist.length; e < t; ++e)
                r.push(this.__leavelist[e].node);
              return r;
            }, f.prototype.current = function () {
              return this.__current.node;
            }, f.prototype.__execute = function (e, t) {
              var r, n;
              return n = void 0, r = this.__current, this.__current = t, this.__state = null, e && (n = e.call(this, t.node, this.__leavelist[this.__leavelist.length - 1].node)), this.__current = r, n;
            }, f.prototype.notify = function (e) {
              this.__state = e;
            }, f.prototype.skip = function () {
              this.notify(i);
            }, f.prototype.break = function () {
              this.notify(o);
            }, f.prototype.remove = function () {
              this.notify(s);
            }, f.prototype.__initialize = function (e, t) {
              this.visitor = t, this.root = e, this.__worklist = [], this.__leavelist = [], this.__current = null, this.__state = null, this.__fallback = null, "iteration" === t.fallback ? this.__fallback = Object.keys : "function" == typeof t.fallback && (this.__fallback = t.fallback), this.__keys = a, t.keys && (this.__keys = Object.assign(Object.create(this.__keys), t.keys));
            }, f.prototype.traverse = function (e, t) {
              var r, n, a, s, u, l, f, d, m, x, v, g;
              for (this.__initialize(e, t), g = {}, r = this.__worklist, n = this.__leavelist, r.push(new c(e, null, null, null)), n.push(new c(null, null, null, null)); r.length;)
                if ((a = r.pop()) !== g) {
                  if (a.node) {
                    if (l = this.__execute(t.enter, a), this.__state === o || l === o)
                      return;
                    if (r.push(g), n.push(a), this.__state === i || l === i)
                      continue;
                    if (u = (s = a.node).type || a.wrap, !(x = this.__keys[u])) {
                      if (!this.__fallback)
                        throw new Error("Unknown node type " + u + ".");
                      x = this.__fallback(s);
                    }
                    for (d = x.length; (d -= 1) >= 0;)
                      if (v = s[f = x[d]])
                        if (Array.isArray(v)) {
                          for (m = v.length; (m -= 1) >= 0;)
                            if (v[m] && !y(n, v[m])) {
                              if (h(u, x[d]))
                                a = new c(v[m], [
                                  f,
                                  m
                                ], "Property", null);
                              else {
                                if (!p(v[m]))
                                  continue;
                                a = new c(v[m], [
                                  f,
                                  m
                                ], null, null);
                              }
                              r.push(a);
                            }
                        } else if (p(v)) {
                          if (y(n, v))
                            continue;
                          r.push(new c(v, f, null, null));
                        }
                  }
                } else if (a = n.pop(), l = this.__execute(t.leave, a), this.__state === o || l === o)
                  return;
            }, f.prototype.replace = function (e, t) {
              var r, n, a, u, f, y, d, m, x, v, g, A, E;
              function b(e) {
                var t, n, a, o;
                if (e.ref.remove())
                  for (n = e.ref.key, o = e.ref.parent, t = r.length; t--;)
                    if ((a = r[t]).ref && a.ref.parent === o) {
                      if (a.ref.key < n)
                        break;
                      --a.ref.key;
                    }
              }
              for (this.__initialize(e, t), g = {}, r = this.__worklist, n = this.__leavelist, y = new c(e, null, null, new l(A = { root: e }, "root")), r.push(y), n.push(y); r.length;)
                if ((y = r.pop()) !== g) {
                  if (void 0 !== (f = this.__execute(t.enter, y)) && f !== o && f !== i && f !== s && (y.ref.replace(f), y.node = f), this.__state !== s && f !== s || (b(y), y.node = null), this.__state === o || f === o)
                    return A.root;
                  if ((a = y.node) && (r.push(g), n.push(y), this.__state !== i && f !== i)) {
                    if (u = a.type || y.wrap, !(x = this.__keys[u])) {
                      if (!this.__fallback)
                        throw new Error("Unknown node type " + u + ".");
                      x = this.__fallback(a);
                    }
                    for (d = x.length; (d -= 1) >= 0;)
                      if (v = a[E = x[d]])
                        if (Array.isArray(v)) {
                          for (m = v.length; (m -= 1) >= 0;)
                            if (v[m]) {
                              if (h(u, x[d]))
                                y = new c(v[m], [
                                  E,
                                  m
                                ], "Property", new l(v, m));
                              else {
                                if (!p(v[m]))
                                  continue;
                                y = new c(v[m], [
                                  E,
                                  m
                                ], null, new l(v, m));
                              }
                              r.push(y);
                            }
                        } else
                          p(v) && r.push(new c(v, E, null, new l(a, E)));
                  }
                } else if (y = n.pop(), void 0 !== (f = this.__execute(t.leave, y)) && f !== o && f !== i && f !== s && y.ref.replace(f), this.__state !== s && f !== s || b(y), this.__state === o || f === o)
                  return A.root;
              return A.root;
            }, t.Syntax = r, t.traverse = d, t.replace = function (e, t) {
              return new f().replace(e, t);
            }, t.attachComments = function (e, t, r) {
              var a, o, i, s, l = [];
              if (!e.range)
                throw new Error("attachComments needs range information");
              if (!r.length) {
                if (t.length) {
                  for (i = 0, o = t.length; i < o; i += 1)
                    (a = u(t[i])).extendedRange = [
                      0,
                      e.range[0]
                    ], l.push(a);
                  e.leadingComments = l;
                }
                return e;
              }
              for (i = 0, o = t.length; i < o; i += 1)
                l.push(m(u(t[i]), r));
              return s = 0, d(e, {
                enter: function (e) {
                  for (var t; s < l.length && !((t = l[s]).extendedRange[1] > e.range[0]);)
                    t.extendedRange[1] === e.range[0] ? (e.leadingComments || (e.leadingComments = []), e.leadingComments.push(t), l.splice(s, 1)) : s += 1;
                  return s === l.length ? n.Break : l[s].extendedRange[0] > e.range[1] ? n.Skip : void 0;
                }
              }), s = 0, d(e, {
                leave: function (e) {
                  for (var t; s < l.length && (t = l[s], !(e.range[1] < t.extendedRange[0]));)
                    e.range[1] === t.extendedRange[0] ? (e.trailingComments || (e.trailingComments = []), e.trailingComments.push(t), l.splice(s, 1)) : s += 1;
                  return s === l.length ? n.Break : l[s].extendedRange[0] > e.range[1] ? n.Skip : void 0;
                }
              }), e;
            }, t.VisitorKeys = a, t.VisitorOption = n, t.Controller = f, t.cloneEnvironment = function () {
              return e({});
            }, t;
          }(t);
        }), s = o(function (e) {
          e.exports && (e.exports = (function () {
            function e(t, r, n, a) {
              this.message = t, this.expected = r, this.found = n, this.location = a, this.name = "SyntaxError", "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, e);
            }
            return function (e, t) {
              function r() {
                this.constructor = e;
              }
              r.prototype = t.prototype, e.prototype = new r();
            }(e, Error), e.buildMessage = function (e, t) {
              var r = {
                literal: function (e) {
                  return "\"" + a(e.text) + "\"";
                },
                class: function (e) {
                  var t, r = "";
                  for (t = 0; t < e.parts.length; t++)
                    r += e.parts[t] instanceof Array ? o(e.parts[t][0]) + "-" + o(e.parts[t][1]) : o(e.parts[t]);
                  return "[" + (e.inverted ? "^" : "") + r + "]";
                },
                any: function (e) {
                  return "any character";
                },
                end: function (e) {
                  return "end of input";
                },
                other: function (e) {
                  return e.description;
                }
              };
              function n(e) {
                return e.charCodeAt(0).toString(16).toUpperCase();
              }
              function a(e) {
                return e.replace(/\\/g, "\\\\").replace(/"/g, "\\\"").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (e) {
                  return "\\x0" + n(e);
                }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (e) {
                  return "\\x" + n(e);
                });
              }
              function o(e) {
                return e.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (e) {
                  return "\\x0" + n(e);
                }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (e) {
                  return "\\x" + n(e);
                });
              }
              return "Expected " + function (e) {
                var t, n, a, o = new Array(e.length);
                for (t = 0; t < e.length; t++)
                  o[t] = (a = e[t], r[a.type](a));
                if (o.sort(), o.length > 0) {
                  for (t = 1, n = 1; t < o.length; t++)
                    o[t - 1] !== o[t] && (o[n] = o[t], n++);
                  o.length = n;
                }
                switch (o.length) {
                case 1:
                  return o[0];
                case 2:
                  return o[0] + " or " + o[1];
                default:
                  return o.slice(0, -1).join(", ") + ", or " + o[o.length - 1];
                }
              }(e) + " but " + function (e) {
                return e ? "\"" + a(e) + "\"" : "end of input";
              }(t) + " found.";
            }, {
              SyntaxError: e,
              parse: function (t, r) {
                r = void 0 !== r ? r : {};
                var n, a, o, i, s = {}, u = { start: de }, l = de, c = ce(" ", !1), f = /^[^ [\],():#!=><~+.]/, p = fe([
                    " ",
                    "[",
                    "]",
                    ",",
                    "(",
                    ")",
                    ":",
                    "#",
                    "!",
                    "=",
                    ">",
                    "<",
                    "~",
                    "+",
                    "."
                  ], !0, !1), h = ce(">", !1), y = ce("~", !1), d = ce("+", !1), m = ce(",", !1), x = ce("!", !1), v = ce("*", !1), g = ce("#", !1), A = ce("[", !1), E = ce("]", !1), b = /^[><!]/, S = fe([
                    ">",
                    "<",
                    "!"
                  ], !1, !1), _ = ce("=", !1), C = function (e) {
                    return (e || "") + "=";
                  }, w = /^[><]/, P = fe([
                    ">",
                    "<"
                  ], !1, !1), k = ce(".", !1), D = function (e, t, r) {
                    return {
                      type: "attribute",
                      name: e,
                      operator: t,
                      value: r
                    };
                  }, I = ce("\"", !1), j = /^[^\\"]/, T = fe([
                    "\\",
                    "\""
                  ], !0, !1), F = ce("\\", !1), R = { type: "any" }, O = function (e, t) {
                    return e + t;
                  }, L = function (e) {
                    return {
                      type: "literal",
                      value: (t = e.join(""), t.replace(/\\(.)/g, function (e, t) {
                        switch (t) {
                        case "b":
                          return "\b";
                        case "f":
                          return "\f";
                        case "n":
                          return "\n";
                        case "r":
                          return "\r";
                        case "t":
                          return "\t";
                        case "v":
                          return "\x0B";
                        default:
                          return t;
                        }
                      }))
                    };
                    var t;
                  }, M = ce("'", !1), B = /^[^\\']/, U = fe([
                    "\\",
                    "'"
                  ], !0, !1), K = /^[0-9]/, W = fe([[
                      "0",
                      "9"
                    ]], !1, !1), V = ce("type(", !1), q = /^[^ )]/, N = fe([
                    " ",
                    ")"
                  ], !0, !1), G = ce(")", !1), z = /^[imsu]/, H = fe([
                    "i",
                    "m",
                    "s",
                    "u"
                  ], !1, !1), Y = ce("/", !1), $ = /^[^\/]/, J = fe(["/"], !0, !1), Q = ce(":not(", !1), X = ce(":matches(", !1), Z = ce(":has(", !1), ee = ce(":first-child", !1), te = ce(":last-child", !1), re = ce(":nth-child(", !1), ne = ce(":nth-last-child(", !1), ae = ce(":", !1), oe = 0, ie = [{
                      line: 1,
                      column: 1
                    }], se = 0, ue = [], le = {};
                if ("startRule" in r) {
                  if (!(r.startRule in u))
                    throw new Error("Can't start parsing from rule \"" + r.startRule + "\".");
                  l = u[r.startRule];
                }
                function ce(e, t) {
                  return {
                    type: "literal",
                    text: e,
                    ignoreCase: t
                  };
                }
                function fe(e, t, r) {
                  return {
                    type: "class",
                    parts: e,
                    inverted: t,
                    ignoreCase: r
                  };
                }
                function pe(e) {
                  var r, n = ie[e];
                  if (n)
                    return n;
                  for (r = e - 1; !ie[r];)
                    r--;
                  for (n = {
                      line: (n = ie[r]).line,
                      column: n.column
                    }; r < e;)
                    10 === t.charCodeAt(r) ? (n.line++, n.column = 1) : n.column++, r++;
                  return ie[e] = n, n;
                }
                function he(e, t) {
                  var r = pe(e), n = pe(t);
                  return {
                    start: {
                      offset: e,
                      line: r.line,
                      column: r.column
                    },
                    end: {
                      offset: t,
                      line: n.line,
                      column: n.column
                    }
                  };
                }
                function ye(e) {
                  oe < se || (oe > se && (se = oe, ue = []), ue.push(e));
                }
                function de() {
                  var e, t, r, n, a = 30 * oe + 0, o = le[a];
                  return o ? (oe = o.nextPos, o.result) : (e = oe, (t = me()) !== s && (r = ge()) !== s && me() !== s ? e = t = 1 === (n = r).length ? n[0] : {
                    type: "matches",
                    selectors: n
                  } : (oe = e, e = s), e === s && (e = oe, (t = me()) !== s && (t = void 0), e = t), le[a] = {
                    nextPos: oe,
                    result: e
                  }, e);
                }
                function me() {
                  var e, r, n = 30 * oe + 1, a = le[n];
                  if (a)
                    return oe = a.nextPos, a.result;
                  for (e = [], 32 === t.charCodeAt(oe) ? (r = " ", oe++) : (r = s, ye(c)); r !== s;)
                    e.push(r), 32 === t.charCodeAt(oe) ? (r = " ", oe++) : (r = s, ye(c));
                  return le[n] = {
                    nextPos: oe,
                    result: e
                  }, e;
                }
                function xe() {
                  var e, r, n, a = 30 * oe + 2, o = le[a];
                  if (o)
                    return oe = o.nextPos, o.result;
                  if (r = [], f.test(t.charAt(oe)) ? (n = t.charAt(oe), oe++) : (n = s, ye(p)), n !== s)
                    for (; n !== s;)
                      r.push(n), f.test(t.charAt(oe)) ? (n = t.charAt(oe), oe++) : (n = s, ye(p));
                  else
                    r = s;
                  return r !== s && (r = r.join("")), e = r, le[a] = {
                    nextPos: oe,
                    result: e
                  }, e;
                }
                function ve() {
                  var e, r, n, a = 30 * oe + 3, o = le[a];
                  return o ? (oe = o.nextPos, o.result) : (e = oe, (r = me()) !== s ? (62 === t.charCodeAt(oe) ? (n = ">", oe++) : (n = s, ye(h)), n !== s && me() !== s ? e = r = "child" : (oe = e, e = s)) : (oe = e, e = s), e === s && (e = oe, (r = me()) !== s ? (126 === t.charCodeAt(oe) ? (n = "~", oe++) : (n = s, ye(y)), n !== s && me() !== s ? e = r = "sibling" : (oe = e, e = s)) : (oe = e, e = s), e === s && (e = oe, (r = me()) !== s ? (43 === t.charCodeAt(oe) ? (n = "+", oe++) : (n = s, ye(d)), n !== s && me() !== s ? e = r = "adjacent" : (oe = e, e = s)) : (oe = e, e = s), e === s && (e = oe, 32 === t.charCodeAt(oe) ? (r = " ", oe++) : (r = s, ye(c)), r !== s && (n = me()) !== s ? e = r = "descendant" : (oe = e, e = s)))), le[a] = {
                    nextPos: oe,
                    result: e
                  }, e);
                }
                function ge() {
                  var e, r, n, a, o, i, u, l, c = 30 * oe + 4, f = le[c];
                  if (f)
                    return oe = f.nextPos, f.result;
                  if (e = oe, (r = Ae()) !== s) {
                    for (n = [], a = oe, (o = me()) !== s ? (44 === t.charCodeAt(oe) ? (i = ",", oe++) : (i = s, ye(m)), i !== s && (u = me()) !== s && (l = Ae()) !== s ? a = o = [
                        o,
                        i,
                        u,
                        l
                      ] : (oe = a, a = s)) : (oe = a, a = s); a !== s;)
                      n.push(a), a = oe, (o = me()) !== s ? (44 === t.charCodeAt(oe) ? (i = ",", oe++) : (i = s, ye(m)), i !== s && (u = me()) !== s && (l = Ae()) !== s ? a = o = [
                        o,
                        i,
                        u,
                        l
                      ] : (oe = a, a = s)) : (oe = a, a = s);
                    n !== s ? e = r = [r].concat(n.map(function (e) {
                      return e[3];
                    })) : (oe = e, e = s);
                  } else
                    oe = e, e = s;
                  return le[c] = {
                    nextPos: oe,
                    result: e
                  }, e;
                }
                function Ae() {
                  var e, t, r, n, a, o, i, u = 30 * oe + 5, l = le[u];
                  if (l)
                    return oe = l.nextPos, l.result;
                  if (e = oe, (t = Ee()) !== s) {
                    for (r = [], n = oe, (a = ve()) !== s && (o = Ee()) !== s ? n = a = [
                        a,
                        o
                      ] : (oe = n, n = s); n !== s;)
                      r.push(n), n = oe, (a = ve()) !== s && (o = Ee()) !== s ? n = a = [
                        a,
                        o
                      ] : (oe = n, n = s);
                    r !== s ? (i = t, e = t = r.reduce(function (e, t) {
                      return {
                        type: t[0],
                        left: e,
                        right: t[1]
                      };
                    }, i)) : (oe = e, e = s);
                  } else
                    oe = e, e = s;
                  return le[u] = {
                    nextPos: oe,
                    result: e
                  }, e;
                }
                function Ee() {
                  var e, r, n, a, o, i, u, l = 30 * oe + 6, c = le[l];
                  if (c)
                    return oe = c.nextPos, c.result;
                  if (e = oe, 33 === t.charCodeAt(oe) ? (r = "!", oe++) : (r = s, ye(x)), r === s && (r = null), r !== s) {
                    if (n = [], (a = be()) !== s)
                      for (; a !== s;)
                        n.push(a), a = be();
                    else
                      n = s;
                    n !== s ? (o = r, u = 1 === (i = n).length ? i[0] : {
                      type: "compound",
                      selectors: i
                    }, o && (u.subject = !0), e = r = u) : (oe = e, e = s);
                  } else
                    oe = e, e = s;
                  return le[l] = {
                    nextPos: oe,
                    result: e
                  }, e;
                }
                function be() {
                  var e, r = 30 * oe + 7, n = le[r];
                  return n ? (oe = n.nextPos, n.result) : ((e = (function () {
                    var e, r, n = 30 * oe + 8, a = le[n];
                    return a ? (oe = a.nextPos, a.result) : (42 === t.charCodeAt(oe) ? (r = "*", oe++) : (r = s, ye(v)), r !== s && (r = {
                      type: "wildcard",
                      value: r
                    }), e = r, le[n] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n, a = 30 * oe + 9, o = le[a];
                    return o ? (oe = o.nextPos, o.result) : (e = oe, 35 === t.charCodeAt(oe) ? (r = "#", oe++) : (r = s, ye(g)), r === s && (r = null), r !== s && (n = xe()) !== s ? e = r = {
                      type: "identifier",
                      value: n
                    } : (oe = e, e = s), le[a] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n, a, o = 30 * oe + 10, i = le[o];
                    return i ? (oe = i.nextPos, i.result) : (e = oe, 91 === t.charCodeAt(oe) ? (r = "[", oe++) : (r = s, ye(A)), r !== s && me() !== s && (n = (function () {
                      var e, r, n, a, o = 30 * oe + 14, i = le[o];
                      return i ? (oe = i.nextPos, i.result) : (e = oe, (r = Se()) !== s && me() !== s && (n = (function () {
                        var e, r, n, a = 30 * oe + 12, o = le[a];
                        return o ? (oe = o.nextPos, o.result) : (e = oe, 33 === t.charCodeAt(oe) ? (r = "!", oe++) : (r = s, ye(x)), r === s && (r = null), r !== s ? (61 === t.charCodeAt(oe) ? (n = "=", oe++) : (n = s, ye(_)), n !== s ? (r = C(r), e = r) : (oe = e, e = s)) : (oe = e, e = s), le[a] = {
                          nextPos: oe,
                          result: e
                        }, e);
                      }())) !== s && me() !== s ? ((a = (function () {
                        var e, r, n, a, o, i = 30 * oe + 18, u = le[i];
                        if (u)
                          return oe = u.nextPos, u.result;
                        if (e = oe, "type(" === t.substr(oe, 5) ? (r = "type(", oe += 5) : (r = s, ye(V)), r !== s)
                          if (me() !== s) {
                            if (n = [], q.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(N)), a !== s)
                              for (; a !== s;)
                                n.push(a), q.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(N));
                            else
                              n = s;
                            n !== s && (a = me()) !== s ? (41 === t.charCodeAt(oe) ? (o = ")", oe++) : (o = s, ye(G)), o !== s ? (r = {
                              type: "type",
                              value: n.join("")
                            }, e = r) : (oe = e, e = s)) : (oe = e, e = s);
                          } else
                            oe = e, e = s;
                        else
                          oe = e, e = s;
                        return le[i] = {
                          nextPos: oe,
                          result: e
                        }, e;
                      }())) === s && (a = (function () {
                        var e, r, n, a, o, i, u = 30 * oe + 20, l = le[u];
                        if (l)
                          return oe = l.nextPos, l.result;
                        if (e = oe, 47 === t.charCodeAt(oe) ? (r = "/", oe++) : (r = s, ye(Y)), r !== s) {
                          if (n = [], $.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(J)), a !== s)
                            for (; a !== s;)
                              n.push(a), $.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(J));
                          else
                            n = s;
                          n !== s ? (47 === t.charCodeAt(oe) ? (a = "/", oe++) : (a = s, ye(Y)), a !== s ? ((o = (function () {
                            var e, r, n = 30 * oe + 19, a = le[n];
                            if (a)
                              return oe = a.nextPos, a.result;
                            if (e = [], z.test(t.charAt(oe)) ? (r = t.charAt(oe), oe++) : (r = s, ye(H)), r !== s)
                              for (; r !== s;)
                                e.push(r), z.test(t.charAt(oe)) ? (r = t.charAt(oe), oe++) : (r = s, ye(H));
                            else
                              e = s;
                            return le[n] = {
                              nextPos: oe,
                              result: e
                            }, e;
                          }())) === s && (o = null), o !== s ? (i = o, r = {
                            type: "regexp",
                            value: new RegExp(n.join(""), i ? i.join("") : "")
                          }, e = r) : (oe = e, e = s)) : (oe = e, e = s)) : (oe = e, e = s);
                        } else
                          oe = e, e = s;
                        return le[u] = {
                          nextPos: oe,
                          result: e
                        }, e;
                      }())), a !== s ? (r = D(r, n, a), e = r) : (oe = e, e = s)) : (oe = e, e = s), e === s && (e = oe, (r = Se()) !== s && me() !== s && (n = (function () {
                        var e, r, n, a = 30 * oe + 11, o = le[a];
                        return o ? (oe = o.nextPos, o.result) : (e = oe, b.test(t.charAt(oe)) ? (r = t.charAt(oe), oe++) : (r = s, ye(S)), r === s && (r = null), r !== s ? (61 === t.charCodeAt(oe) ? (n = "=", oe++) : (n = s, ye(_)), n !== s ? (r = C(r), e = r) : (oe = e, e = s)) : (oe = e, e = s), e === s && (w.test(t.charAt(oe)) ? (e = t.charAt(oe), oe++) : (e = s, ye(P))), le[a] = {
                          nextPos: oe,
                          result: e
                        }, e);
                      }())) !== s && me() !== s ? ((a = (function () {
                        var e, r, n, a, o, i, u = 30 * oe + 15, l = le[u];
                        if (l)
                          return oe = l.nextPos, l.result;
                        if (e = oe, 34 === t.charCodeAt(oe) ? (r = "\"", oe++) : (r = s, ye(I)), r !== s) {
                          for (n = [], j.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(T)), a === s && (a = oe, 92 === t.charCodeAt(oe) ? (o = "\\", oe++) : (o = s, ye(F)), o !== s ? (t.length > oe ? (i = t.charAt(oe), oe++) : (i = s, ye(R)), i !== s ? (o = O(o, i), a = o) : (oe = a, a = s)) : (oe = a, a = s)); a !== s;)
                            n.push(a), j.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(T)), a === s && (a = oe, 92 === t.charCodeAt(oe) ? (o = "\\", oe++) : (o = s, ye(F)), o !== s ? (t.length > oe ? (i = t.charAt(oe), oe++) : (i = s, ye(R)), i !== s ? (o = O(o, i), a = o) : (oe = a, a = s)) : (oe = a, a = s));
                          n !== s ? (34 === t.charCodeAt(oe) ? (a = "\"", oe++) : (a = s, ye(I)), a !== s ? (r = L(n), e = r) : (oe = e, e = s)) : (oe = e, e = s);
                        } else
                          oe = e, e = s;
                        if (e === s)
                          if (e = oe, 39 === t.charCodeAt(oe) ? (r = "'", oe++) : (r = s, ye(M)), r !== s) {
                            for (n = [], B.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(U)), a === s && (a = oe, 92 === t.charCodeAt(oe) ? (o = "\\", oe++) : (o = s, ye(F)), o !== s ? (t.length > oe ? (i = t.charAt(oe), oe++) : (i = s, ye(R)), i !== s ? (o = O(o, i), a = o) : (oe = a, a = s)) : (oe = a, a = s)); a !== s;)
                              n.push(a), B.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(U)), a === s && (a = oe, 92 === t.charCodeAt(oe) ? (o = "\\", oe++) : (o = s, ye(F)), o !== s ? (t.length > oe ? (i = t.charAt(oe), oe++) : (i = s, ye(R)), i !== s ? (o = O(o, i), a = o) : (oe = a, a = s)) : (oe = a, a = s));
                            n !== s ? (39 === t.charCodeAt(oe) ? (a = "'", oe++) : (a = s, ye(M)), a !== s ? (r = L(n), e = r) : (oe = e, e = s)) : (oe = e, e = s);
                          } else
                            oe = e, e = s;
                        return le[u] = {
                          nextPos: oe,
                          result: e
                        }, e;
                      }())) === s && (a = (function () {
                        var e, r, n, a, o, i, u, l = 30 * oe + 16, c = le[l];
                        if (c)
                          return oe = c.nextPos, c.result;
                        for (e = oe, r = oe, n = [], K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W)); a !== s;)
                          n.push(a), K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W));
                        if (n !== s ? (46 === t.charCodeAt(oe) ? (a = ".", oe++) : (a = s, ye(k)), a !== s ? r = n = [
                            n,
                            a
                          ] : (oe = r, r = s)) : (oe = r, r = s), r === s && (r = null), r !== s) {
                          if (n = [], K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W)), a !== s)
                            for (; a !== s;)
                              n.push(a), K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W));
                          else
                            n = s;
                          n !== s ? (i = n, u = (o = r) ? [].concat.apply([], o).join("") : "", r = {
                            type: "literal",
                            value: parseFloat(u + i.join(""))
                          }, e = r) : (oe = e, e = s);
                        } else
                          oe = e, e = s;
                        return le[l] = {
                          nextPos: oe,
                          result: e
                        }, e;
                      }())) === s && (a = (function () {
                        var e, t, r = 30 * oe + 17, n = le[r];
                        return n ? (oe = n.nextPos, n.result) : ((t = xe()) !== s && (t = {
                          type: "literal",
                          value: t
                        }), e = t, le[r] = {
                          nextPos: oe,
                          result: e
                        }, e);
                      }())), a !== s ? (r = D(r, n, a), e = r) : (oe = e, e = s)) : (oe = e, e = s), e === s && (e = oe, (r = Se()) !== s && (r = {
                        type: "attribute",
                        name: r
                      }), e = r)), le[o] = {
                        nextPos: oe,
                        result: e
                      }, e);
                    }())) !== s && me() !== s ? (93 === t.charCodeAt(oe) ? (a = "]", oe++) : (a = s, ye(E)), a !== s ? e = r = n : (oe = e, e = s)) : (oe = e, e = s), le[o] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n, a, o, i, u, l, c = 30 * oe + 21, f = le[c];
                    if (f)
                      return oe = f.nextPos, f.result;
                    if (e = oe, 46 === t.charCodeAt(oe) ? (r = ".", oe++) : (r = s, ye(k)), r !== s)
                      if ((n = xe()) !== s) {
                        for (a = [], o = oe, 46 === t.charCodeAt(oe) ? (i = ".", oe++) : (i = s, ye(k)), i !== s && (u = xe()) !== s ? o = i = [
                            i,
                            u
                          ] : (oe = o, o = s); o !== s;)
                          a.push(o), o = oe, 46 === t.charCodeAt(oe) ? (i = ".", oe++) : (i = s, ye(k)), i !== s && (u = xe()) !== s ? o = i = [
                            i,
                            u
                          ] : (oe = o, o = s);
                        a !== s ? (l = n, r = {
                          type: "field",
                          name: a.reduce(function (e, t) {
                            return e + t[0] + t[1];
                          }, l)
                        }, e = r) : (oe = e, e = s);
                      } else
                        oe = e, e = s;
                    else
                      oe = e, e = s;
                    return le[c] = {
                      nextPos: oe,
                      result: e
                    }, e;
                  }())) === s && (e = (function () {
                    var e, r, n, a, o = 30 * oe + 22, i = le[o];
                    return i ? (oe = i.nextPos, i.result) : (e = oe, ":not(" === t.substr(oe, 5) ? (r = ":not(", oe += 5) : (r = s, ye(Q)), r !== s && me() !== s && (n = ge()) !== s && me() !== s ? (41 === t.charCodeAt(oe) ? (a = ")", oe++) : (a = s, ye(G)), a !== s ? e = r = {
                      type: "not",
                      selectors: n
                    } : (oe = e, e = s)) : (oe = e, e = s), le[o] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n, a, o = 30 * oe + 23, i = le[o];
                    return i ? (oe = i.nextPos, i.result) : (e = oe, ":matches(" === t.substr(oe, 9) ? (r = ":matches(", oe += 9) : (r = s, ye(X)), r !== s && me() !== s && (n = ge()) !== s && me() !== s ? (41 === t.charCodeAt(oe) ? (a = ")", oe++) : (a = s, ye(G)), a !== s ? e = r = {
                      type: "matches",
                      selectors: n
                    } : (oe = e, e = s)) : (oe = e, e = s), le[o] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n, a, o = 30 * oe + 24, i = le[o];
                    return i ? (oe = i.nextPos, i.result) : (e = oe, ":has(" === t.substr(oe, 5) ? (r = ":has(", oe += 5) : (r = s, ye(Z)), r !== s && me() !== s && (n = ge()) !== s && me() !== s ? (41 === t.charCodeAt(oe) ? (a = ")", oe++) : (a = s, ye(G)), a !== s ? e = r = {
                      type: "has",
                      selectors: n
                    } : (oe = e, e = s)) : (oe = e, e = s), le[o] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n = 30 * oe + 25, a = le[n];
                    return a ? (oe = a.nextPos, a.result) : (":first-child" === t.substr(oe, 12) ? (r = ":first-child", oe += 12) : (r = s, ye(ee)), r !== s && (r = _e(1)), e = r, le[n] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n = 30 * oe + 26, a = le[n];
                    return a ? (oe = a.nextPos, a.result) : (":last-child" === t.substr(oe, 11) ? (r = ":last-child", oe += 11) : (r = s, ye(te)), r !== s && (r = Ce(1)), e = r, le[n] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())) === s && (e = (function () {
                    var e, r, n, a, o, i = 30 * oe + 27, u = le[i];
                    if (u)
                      return oe = u.nextPos, u.result;
                    if (e = oe, ":nth-child(" === t.substr(oe, 11) ? (r = ":nth-child(", oe += 11) : (r = s, ye(re)), r !== s)
                      if (me() !== s) {
                        if (n = [], K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W)), a !== s)
                          for (; a !== s;)
                            n.push(a), K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W));
                        else
                          n = s;
                        n !== s && (a = me()) !== s ? (41 === t.charCodeAt(oe) ? (o = ")", oe++) : (o = s, ye(G)), o !== s ? (r = _e(parseInt(n.join(""), 10)), e = r) : (oe = e, e = s)) : (oe = e, e = s);
                      } else
                        oe = e, e = s;
                    else
                      oe = e, e = s;
                    return le[i] = {
                      nextPos: oe,
                      result: e
                    }, e;
                  }())) === s && (e = (function () {
                    var e, r, n, a, o, i = 30 * oe + 28, u = le[i];
                    if (u)
                      return oe = u.nextPos, u.result;
                    if (e = oe, ":nth-last-child(" === t.substr(oe, 16) ? (r = ":nth-last-child(", oe += 16) : (r = s, ye(ne)), r !== s)
                      if (me() !== s) {
                        if (n = [], K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W)), a !== s)
                          for (; a !== s;)
                            n.push(a), K.test(t.charAt(oe)) ? (a = t.charAt(oe), oe++) : (a = s, ye(W));
                        else
                          n = s;
                        n !== s && (a = me()) !== s ? (41 === t.charCodeAt(oe) ? (o = ")", oe++) : (o = s, ye(G)), o !== s ? (r = Ce(parseInt(n.join(""), 10)), e = r) : (oe = e, e = s)) : (oe = e, e = s);
                      } else
                        oe = e, e = s;
                    else
                      oe = e, e = s;
                    return le[i] = {
                      nextPos: oe,
                      result: e
                    }, e;
                  }())) === s && (e = (function () {
                    var e, r, n, a = 30 * oe + 29, o = le[a];
                    return o ? (oe = o.nextPos, o.result) : (e = oe, 58 === t.charCodeAt(oe) ? (r = ":", oe++) : (r = s, ye(ae)), r !== s && (n = xe()) !== s ? e = r = {
                      type: "class",
                      name: n
                    } : (oe = e, e = s), le[a] = {
                      nextPos: oe,
                      result: e
                    }, e);
                  }())), le[r] = {
                    nextPos: oe,
                    result: e
                  }, e);
                }
                function Se() {
                  var e, r, n, a, o, i, u, l, c = 30 * oe + 13, f = le[c];
                  if (f)
                    return oe = f.nextPos, f.result;
                  if (e = oe, (r = xe()) !== s) {
                    for (n = [], a = oe, 46 === t.charCodeAt(oe) ? (o = ".", oe++) : (o = s, ye(k)), o !== s && (i = xe()) !== s ? a = o = [
                        o,
                        i
                      ] : (oe = a, a = s); a !== s;)
                      n.push(a), a = oe, 46 === t.charCodeAt(oe) ? (o = ".", oe++) : (o = s, ye(k)), o !== s && (i = xe()) !== s ? a = o = [
                        o,
                        i
                      ] : (oe = a, a = s);
                    n !== s ? (u = r, l = n, e = r = [].concat.apply([u], l).join("")) : (oe = e, e = s);
                  } else
                    oe = e, e = s;
                  return le[c] = {
                    nextPos: oe,
                    result: e
                  }, e;
                }
                function _e(e) {
                  return {
                    type: "nth-child",
                    index: {
                      type: "literal",
                      value: e
                    }
                  };
                }
                function Ce(e) {
                  return {
                    type: "nth-last-child",
                    index: {
                      type: "literal",
                      value: e
                    }
                  };
                }
                if ((n = l()) !== s && oe === t.length)
                  return n;
                throw n !== s && oe < t.length && ye({ type: "end" }), a = ue, o = se < t.length ? t.charAt(se) : null, i = se < t.length ? he(se, se + 1) : he(se, se), new e(e.buildMessage(a, o), a, o, i);
              }
            };
          }()));
        });
      function u(e, t) {
        for (var r = 0; r < t.length; ++r) {
          if (null == e)
            return e;
          e = e[t[r]];
        }
        return e;
      }
      var l = "function" == typeof WeakMap ? new WeakMap() : null;
      function c(e) {
        if (null == e)
          return function () {
            return !0;
          };
        if (null != l) {
          var t = l.get(e);
          return null != t || (t = f(e), l.set(e, t)), t;
        }
        return f(e);
      }
      function f(t) {
        switch (t.type) {
        case "wildcard":
          return function () {
            return !0;
          };
        case "identifier":
          var r = t.value.toLowerCase();
          return function (e, t, n) {
            var a = n && n.nodeTypeKey || "type";
            return r === e[a].toLowerCase();
          };
        case "field":
          var n = t.name.split(".");
          return function (e, t) {
            return function e(t, r, n, a) {
              for (var o = r, i = a; i < n.length; ++i) {
                if (null == o)
                  return !1;
                var s = o[n[i]];
                if (Array.isArray(s)) {
                  for (var u = 0; u < s.length; ++u)
                    if (e(t, s[u], n, i + 1))
                      return !0;
                  return !1;
                }
                o = s;
              }
              return t === o;
            }(e, t[n.length - 1], n, 0);
          };
        case "matches":
          var a = t.selectors.map(c);
          return function (e, t, r) {
            for (var n = 0; n < a.length; ++n)
              if (a[n](e, t, r))
                return !0;
            return !1;
          };
        case "compound":
          var o = t.selectors.map(c);
          return function (e, t, r) {
            for (var n = 0; n < o.length; ++n)
              if (!o[n](e, t, r))
                return !1;
            return !0;
          };
        case "not":
          var s = t.selectors.map(c);
          return function (e, t, r) {
            for (var n = 0; n < s.length; ++n)
              if (s[n](e, t, r))
                return !1;
            return !0;
          };
        case "has":
          var l = t.selectors.map(c);
          return function (e, t, r) {
            var n = !1, a = [];
            return i.traverse(e, {
              enter: function (e, t) {
                null != t && a.unshift(t);
                for (var o = 0; o < l.length; ++o)
                  if (l[o](e, a, r))
                    return n = !0, void this.break();
              },
              leave: function () {
                a.shift();
              },
              keys: r && r.visitorKeys,
              fallback: r && r.fallback || "iteration"
            }), n;
          };
        case "child":
          var f = c(t.left), p = c(t.right);
          return function (e, t, r) {
            return !!(t.length > 0 && p(e, t, r)) && f(t[0], t.slice(1), r);
          };
        case "descendant":
          var h = c(t.left), x = c(t.right);
          return function (e, t, r) {
            if (x(e, t, r))
              for (var n = 0, a = t.length; n < a; ++n)
                if (h(t[n], t.slice(n + 1), r))
                  return !0;
            return !1;
          };
        case "attribute":
          var v = t.name.split(".");
          switch (t.operator) {
          case void 0:
            return function (e) {
              return null != u(e, v);
            };
          case "=":
            switch (t.value.type) {
            case "regexp":
              return function (e) {
                var r = u(e, v);
                return "string" == typeof r && t.value.value.test(r);
              };
            case "literal":
              var g = "".concat(t.value.value);
              return function (e) {
                return g === "".concat(u(e, v));
              };
            case "type":
              return function (r) {
                return t.value.value === e(u(r, v));
              };
            }
            throw new Error("Unknown selector value type: ".concat(t.value.type));
          case "!=":
            switch (t.value.type) {
            case "regexp":
              return function (e) {
                return !t.value.value.test(u(e, v));
              };
            case "literal":
              var A = "".concat(t.value.value);
              return function (e) {
                return A !== "".concat(u(e, v));
              };
            case "type":
              return function (r) {
                return t.value.value !== e(u(r, v));
              };
            }
            throw new Error("Unknown selector value type: ".concat(t.value.type));
          case "<=":
            return function (e) {
              return u(e, v) <= t.value.value;
            };
          case "<":
            return function (e) {
              return u(e, v) < t.value.value;
            };
          case ">":
            return function (e) {
              return u(e, v) > t.value.value;
            };
          case ">=":
            return function (e) {
              return u(e, v) >= t.value.value;
            };
          }
          throw new Error("Unknown operator: ".concat(t.operator));
        case "sibling":
          var E = c(t.left), b = c(t.right);
          return function (e, r, n) {
            return b(e, r, n) && y(e, E, r, "LEFT_SIDE", n) || t.left.subject && E(e, r, n) && y(e, b, r, "RIGHT_SIDE", n);
          };
        case "adjacent":
          var S = c(t.left), _ = c(t.right);
          return function (e, r, n) {
            return _(e, r, n) && d(e, S, r, "LEFT_SIDE", n) || t.right.subject && S(e, r, n) && d(e, _, r, "RIGHT_SIDE", n);
          };
        case "nth-child":
          var C = t.index.value, w = c(t.right);
          return function (e, t, r) {
            return w(e, t, r) && m(e, t, C, r);
          };
        case "nth-last-child":
          var P = -t.index.value, k = c(t.right);
          return function (e, t, r) {
            return k(e, t, r) && m(e, t, P, r);
          };
        case "class":
          return function (e, r, n) {
            if (n && n.matchClass)
              return n.matchClass(t.name, e, r);
            if (n && n.nodeTypeKey)
              return !1;
            switch (t.name.toLowerCase()) {
            case "statement":
              if ("Statement" === e.type.slice(-9))
                return !0;
            case "declaration":
              return "Declaration" === e.type.slice(-11);
            case "pattern":
              if ("Pattern" === e.type.slice(-7))
                return !0;
            case "expression":
              return "Expression" === e.type.slice(-10) || "Literal" === e.type.slice(-7) || "Identifier" === e.type && (0 === r.length || "MetaProperty" !== r[0].type) || "MetaProperty" === e.type;
            case "function":
              return "FunctionDeclaration" === e.type || "FunctionExpression" === e.type || "ArrowFunctionExpression" === e.type;
            }
            throw new Error("Unknown class name: ".concat(t.name));
          };
        }
        throw new Error("Unknown selector type: ".concat(t.type));
      }
      function p(e, t) {
        var r = t && t.nodeTypeKey || "type", n = e[r];
        return t && t.visitorKeys && t.visitorKeys[n] ? t.visitorKeys[n] : i.VisitorKeys[n] ? i.VisitorKeys[n] : t && "function" == typeof t.fallback ? t.fallback(e) : Object.keys(e).filter(function (e) {
          return e !== r;
        });
      }
      function h(t, r) {
        var n = r && r.nodeTypeKey || "type";
        return null !== t && "object" === e(t) && "string" == typeof t[n];
      }
      function y(e, r, n, a, o) {
        var i = t(n, 1)[0];
        if (!i)
          return !1;
        for (var s = p(i, o), u = 0; u < s.length; ++u) {
          var l = i[s[u]];
          if (Array.isArray(l)) {
            var c = l.indexOf(e);
            if (c < 0)
              continue;
            var f = void 0, y = void 0;
            "LEFT_SIDE" === a ? (f = 0, y = c) : (f = c + 1, y = l.length);
            for (var d = f; d < y; ++d)
              if (h(l[d], o) && r(l[d], n, o))
                return !0;
          }
        }
        return !1;
      }
      function d(e, r, n, a, o) {
        var i = t(n, 1)[0];
        if (!i)
          return !1;
        for (var s = p(i, o), u = 0; u < s.length; ++u) {
          var l = i[s[u]];
          if (Array.isArray(l)) {
            var c = l.indexOf(e);
            if (c < 0)
              continue;
            if ("LEFT_SIDE" === a && c > 0 && h(l[c - 1], o) && r(l[c - 1], n, o))
              return !0;
            if ("RIGHT_SIDE" === a && c < l.length - 1 && h(l[c + 1], o) && r(l[c + 1], n, o))
              return !0;
          }
        }
        return !1;
      }
      function m(e, r, n, a) {
        if (0 === n)
          return !1;
        var o = t(r, 1)[0];
        if (!o)
          return !1;
        for (var i = p(o, a), s = 0; s < i.length; ++s) {
          var u = o[i[s]];
          if (Array.isArray(u)) {
            var l = n < 0 ? u.length + n : n - 1;
            if (l >= 0 && l < u.length && u[l] === e)
              return !0;
          }
        }
        return !1;
      }
      function x(t, n, a, o) {
        if (n) {
          var s = [], u = c(n), l = function t(n, a) {
              if (null == n || "object" != e(n))
                return [];
              null == a && (a = n);
              for (var o = n.subject ? [a] : [], i = Object.keys(n), s = 0; s < i.length; ++s) {
                var u = i[s], l = n[u];
                o.push.apply(o, r(t(l, "left" === u ? l : a)));
              }
              return o;
            }(n).map(c);
          i.traverse(t, {
            enter: function (e, t) {
              if (null != t && s.unshift(t), u(e, s, o))
                if (l.length)
                  for (var r = 0, n = l.length; r < n; ++r) {
                    l[r](e, s, o) && a(e, t, s);
                    for (var i = 0, c = s.length; i < c; ++i) {
                      var f = s.slice(i + 1);
                      l[r](s[i], f, o) && a(s[i], t, f);
                    }
                  }
                else
                  a(e, t, s);
            },
            leave: function () {
              s.shift();
            },
            keys: o && o.visitorKeys,
            fallback: o && o.fallback || "iteration"
          });
        }
      }
      function v(e, t, r) {
        var n = [];
        return x(e, t, function (e) {
          n.push(e);
        }, r), n;
      }
      function g(e) {
        return s.parse(e);
      }
      function A(e, t, r) {
        return v(e, g(t), r);
      }
      A.parse = g, A.match = v, A.traverse = x, A.matches = function (e, t, r, n) {
        return !t || !!e && (r || (r = []), c(t)(e, r, n));
      }, A.query = A;

      var _esquery2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': A
      });

      var _esquery = "default" in _esquery2 ? A : _esquery2;
      var exports$4F = {};
      const esquery = _esquery;
      function union$1(...arrays) {
        return [...new Set([].concat(...arrays))];
      }
      function intersection(...arrays) {
        if (arrays.length === 0) {
          return [];
        }
        let result = [...new Set(arrays[0])];
        for (const array of arrays.slice(1)) {
          result = result.filter(x => array.includes(x));
        }
        return result;
      }
      function getPossibleTypes(parsedSelector) {
        switch (parsedSelector.type) {
        case "identifier":
          return [parsedSelector.value];
        case "matches": {
            const typesForComponents = parsedSelector.selectors.map(getPossibleTypes);
            if (typesForComponents.every(Boolean)) {
              return union$1(...typesForComponents);
            }
            return null;
          }
        case "compound": {
            const typesForComponents = parsedSelector.selectors.map(getPossibleTypes).filter(typesForComponent => typesForComponent);
            if (!typesForComponents.length) {
              return null;
            }
            return intersection(...typesForComponents);
          }
        case "child":
        case "descendant":
        case "sibling":
        case "adjacent":
          return getPossibleTypes(parsedSelector.right);
        default:
          return null;
        }
      }
      function countClassAttributes(parsedSelector) {
        switch (parsedSelector.type) {
        case "child":
        case "descendant":
        case "sibling":
        case "adjacent":
          return countClassAttributes(parsedSelector.left) + countClassAttributes(parsedSelector.right);
        case "compound":
        case "not":
        case "matches":
          return parsedSelector.selectors.reduce((sum, childSelector) => sum + countClassAttributes(childSelector), 0);
        case "attribute":
        case "field":
        case "nth-child":
        case "nth-last-child":
          return 1;
        default:
          return 0;
        }
      }
      function countIdentifiers(parsedSelector) {
        switch (parsedSelector.type) {
        case "child":
        case "descendant":
        case "sibling":
        case "adjacent":
          return countIdentifiers(parsedSelector.left) + countIdentifiers(parsedSelector.right);
        case "compound":
        case "not":
        case "matches":
          return parsedSelector.selectors.reduce((sum, childSelector) => sum + countIdentifiers(childSelector), 0);
        case "identifier":
          return 1;
        default:
          return 0;
        }
      }
      function compareSpecificity(selectorA, selectorB) {
        return selectorA.attributeCount - selectorB.attributeCount || selectorA.identifierCount - selectorB.identifierCount || (selectorA.rawSelector <= selectorB.rawSelector ? -1 : 1);
      }
      function tryParseSelector(rawSelector) {
        try {
          return esquery.parse(rawSelector.replace(/:exit$/u, ""));
        } catch (err) {
          if (err.location && err.location.start && typeof err.location.start.offset === "number") {
            throw new SyntaxError(`Syntax error in selector "${ rawSelector }" at position ${ err.location.start.offset }: ${ err.message }`);
          }
          throw err;
        }
      }
      const selectorCache = new Map();
      function parseSelector(rawSelector) {
        if (selectorCache.has(rawSelector)) {
          return selectorCache.get(rawSelector);
        }
        const parsedSelector = tryParseSelector(rawSelector);
        const result = {
          rawSelector,
          isExit: rawSelector.endsWith(":exit"),
          parsedSelector,
          listenerTypes: getPossibleTypes(parsedSelector),
          attributeCount: countClassAttributes(parsedSelector),
          identifierCount: countIdentifiers(parsedSelector)
        };
        selectorCache.set(rawSelector, result);
        return result;
      }
      class NodeEventGenerator$1 {
        constructor(emitter, esqueryOptions) {
          this.emitter = emitter;
          this.esqueryOptions = esqueryOptions;
          this.currentAncestry = [];
          this.enterSelectorsByNodeType = new Map();
          this.exitSelectorsByNodeType = new Map();
          this.anyTypeEnterSelectors = [];
          this.anyTypeExitSelectors = [];
          emitter.eventNames().forEach(rawSelector => {
            const selector = parseSelector(rawSelector);
            if (selector.listenerTypes) {
              const typeMap = selector.isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType;
              selector.listenerTypes.forEach(nodeType => {
                if (!typeMap.has(nodeType)) {
                  typeMap.set(nodeType, []);
                }
                typeMap.get(nodeType).push(selector);
              });
              return;
            }
            const selectors = selector.isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;
            selectors.push(selector);
          });
          this.anyTypeEnterSelectors.sort(compareSpecificity);
          this.anyTypeExitSelectors.sort(compareSpecificity);
          this.enterSelectorsByNodeType.forEach(selectorList => selectorList.sort(compareSpecificity));
          this.exitSelectorsByNodeType.forEach(selectorList => selectorList.sort(compareSpecificity));
        }
        applySelector(node, selector) {
          if (esquery.matches(node, selector.parsedSelector, this.currentAncestry, this.esqueryOptions)) {
            this.emitter.emit(selector.rawSelector, node);
          }
        }
        applySelectors(node, isExit) {
          const selectorsByNodeType = (isExit ? this.exitSelectorsByNodeType : this.enterSelectorsByNodeType).get(node.type) || [];
          const anyTypeSelectors = isExit ? this.anyTypeExitSelectors : this.anyTypeEnterSelectors;
          let selectorsByTypeIndex = 0;
          let anyTypeSelectorsIndex = 0;
          while (selectorsByTypeIndex < selectorsByNodeType.length || anyTypeSelectorsIndex < anyTypeSelectors.length) {
            if (selectorsByTypeIndex >= selectorsByNodeType.length || anyTypeSelectorsIndex < anyTypeSelectors.length && compareSpecificity(anyTypeSelectors[anyTypeSelectorsIndex], selectorsByNodeType[selectorsByTypeIndex]) < 0) {
              this.applySelector(node, anyTypeSelectors[anyTypeSelectorsIndex++]);
            } else {
              this.applySelector(node, selectorsByNodeType[selectorsByTypeIndex++]);
            }
          }
        }
        enterNode(node) {
          if (node.parent) {
            this.currentAncestry.unshift(node.parent);
          }
          this.applySelectors(node, false);
        }
        leaveNode(node) {
          this.applySelectors(node, true);
          this.currentAncestry.shift();
        }
      }
      exports$4F = NodeEventGenerator$1;
      var _nodeEventGenerator = exports$4F;

      var exports$4E = {};
      function insertTextAt(index, text) {
        return {
          range: [
            index,
            index
          ],
          text
        };
      }
      const ruleFixer$1 = Object.freeze({
        insertTextAfter(nodeOrToken, text) {
          return this.insertTextAfterRange(nodeOrToken.range, text);
        },
        insertTextAfterRange(range, text) {
          return insertTextAt(range[1], text);
        },
        insertTextBefore(nodeOrToken, text) {
          return this.insertTextBeforeRange(nodeOrToken.range, text);
        },
        insertTextBeforeRange(range, text) {
          return insertTextAt(range[0], text);
        },
        replaceText(nodeOrToken, text) {
          return this.replaceTextRange(nodeOrToken.range, text);
        },
        replaceTextRange(range, text) {
          return {
            range,
            text
          };
        },
        remove(nodeOrToken) {
          return this.removeRange(nodeOrToken.range);
        },
        removeRange(range) {
          return {
            range,
            text: ""
          };
        }
      });
      exports$4E = ruleFixer$1;
      var _ruleFixer = exports$4E;

      var _esutils2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$2$n,
        ast: ast$1,
        code: code,
        keyword: keyword
      });

      var _esutils$1 = "default" in _esutils2 ? exports$2$n : _esutils2;
      var _espree$2 = "default" in _espree2 ? exports$4$7 : _espree2;
      var _escapeStringRegexp$2 = "default" in _escapeStringRegexp2 ? exports$1$s : _escapeStringRegexp2;
      var exports$4D = {};
      const esutils$1 = _esutils$1;
      const espree$2 = _espree$2;
      const escapeRegExp$2 = _escapeStringRegexp$2;
      const {breakableTypePattern, createGlobalLinebreakMatcher, lineBreakPattern, shebangPattern} = _astUtils$1;
      const anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/u;
      const anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/u;
      const arrayOrTypedArrayPattern = /Array$/u;
      const arrayMethodPattern = /^(?:every|filter|find|findIndex|forEach|map|some)$/u;
      const bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/u;
      const thisTagPattern = /^[\s*]*@this/mu;
      const COMMENTS_IGNORE_PATTERN = /^\s*(?:eslint|jshint\s+|jslint\s+|istanbul\s+|globals?\s+|exported\s+|jscs)/u;
      const LINEBREAKS = new Set([
        "\r\n",
        "\r",
        "\n",
        "\u2028",
        "\u2029"
      ]);
      const STATEMENT_LIST_PARENTS = new Set([
        "Program",
        "BlockStatement",
        "SwitchCase"
      ]);
      const DECIMAL_INTEGER_PATTERN = /^(?:0|0[0-7]*[89]\d*|[1-9](?:_?\d)*)$/u;
      const OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN = /^(?:[^\\]|\\.)*\\(?:[1-9]|0[0-9])/su;
      const LOGICAL_ASSIGNMENT_OPERATORS = new Set([
        "&&=",
        "||=",
        "??="
      ]);
      function isModifyingReference(reference, index, references) {
        const identifier = reference.identifier;
        const modifyingDifferentIdentifier = index === 0 || references[index - 1].identifier !== identifier;
        return identifier && reference.init === false && reference.isWrite() && modifyingDifferentIdentifier;
      }
      function startsWithUpperCase(s) {
        return s[0] !== s[0].toLocaleLowerCase();
      }
      function isES5Constructor(node) {
        return node.id && startsWithUpperCase(node.id.name);
      }
      function getUpperFunction(node) {
        for (let currentNode = node; currentNode; currentNode = currentNode.parent) {
          if (anyFunctionPattern.test(currentNode.type)) {
            return currentNode;
          }
        }
        return null;
      }
      function isFunction$1(node) {
        return Boolean(node && anyFunctionPattern.test(node.type));
      }
      function isLoop(node) {
        return Boolean(node && anyLoopPattern.test(node.type));
      }
      function isInLoop$1(node) {
        for (let currentNode = node; currentNode && !isFunction$1(currentNode); currentNode = currentNode.parent) {
          if (isLoop(currentNode)) {
            return true;
          }
        }
        return false;
      }
      function isNullLiteral(node) {
        return node.type === "Literal" && node.value === null && !node.regex && !node.bigint;
      }
      function isNullOrUndefined(node) {
        return isNullLiteral(node) || node.type === "Identifier" && node.name === "undefined" || node.type === "UnaryExpression" && node.operator === "void";
      }
      function isCallee(node) {
        return node.parent.type === "CallExpression" && node.parent.callee === node;
      }
      function getStaticStringValue(node) {
        switch (node.type) {
        case "Literal":
          if (node.value === null) {
            if (isNullLiteral(node)) {
              return String(node.value);
            }
            if (node.regex) {
              return `/${ node.regex.pattern }/${ node.regex.flags }`;
            }
            if (node.bigint) {
              return node.bigint;
            }
          } else {
            return String(node.value);
          }
          break;
        case "TemplateLiteral":
          if (node.expressions.length === 0 && node.quasis.length === 1) {
            return node.quasis[0].value.cooked;
          }
          break;
        }
        return null;
      }
      function getStaticPropertyName$2(node) {
        let prop;
        switch (node && node.type) {
        case "ChainExpression":
          return getStaticPropertyName$2(node.expression);
        case "Property":
        case "MethodDefinition":
          prop = node.key;
          break;
        case "MemberExpression":
          prop = node.property;
          break;
        }
        if (prop) {
          if (prop.type === "Identifier" && !node.computed) {
            return prop.name;
          }
          return getStaticStringValue(prop);
        }
        return null;
      }
      function skipChainExpression$1(node) {
        return node && node.type === "ChainExpression" ? node.expression : node;
      }
      function checkText(actual, expected) {
        return typeof expected === "string" ? actual === expected : expected.test(actual);
      }
      function isSpecificId(node, name) {
        return node.type === "Identifier" && checkText(node.name, name);
      }
      function isSpecificMemberAccess(node, objectName, propertyName) {
        const checkNode = skipChainExpression$1(node);
        if (checkNode.type !== "MemberExpression") {
          return false;
        }
        if (objectName && !isSpecificId(checkNode.object, objectName)) {
          return false;
        }
        if (propertyName) {
          const actualPropertyName = getStaticPropertyName$2(checkNode);
          if (typeof actualPropertyName !== "string" || !checkText(actualPropertyName, propertyName)) {
            return false;
          }
        }
        return true;
      }
      function equalLiteralValue(left, right) {
        if (left.regex || right.regex) {
          return Boolean(left.regex && right.regex && left.regex.pattern === right.regex.pattern && left.regex.flags === right.regex.flags);
        }
        if (left.bigint || right.bigint) {
          return left.bigint === right.bigint;
        }
        return left.value === right.value;
      }
      function isSameReference(left, right, disableStaticComputedKey = false) {
        if (left.type !== right.type) {
          if (left.type === "ChainExpression") {
            return isSameReference(left.expression, right, disableStaticComputedKey);
          }
          if (right.type === "ChainExpression") {
            return isSameReference(left, right.expression, disableStaticComputedKey);
          }
          return false;
        }
        switch (left.type) {
        case "Super":
        case "ThisExpression":
          return true;
        case "Identifier":
          return left.name === right.name;
        case "Literal":
          return equalLiteralValue(left, right);
        case "ChainExpression":
          return isSameReference(left.expression, right.expression, disableStaticComputedKey);
        case "MemberExpression": {
            if (!disableStaticComputedKey) {
              const nameA = getStaticPropertyName$2(left);
              if (nameA !== null) {
                return isSameReference(left.object, right.object, disableStaticComputedKey) && nameA === getStaticPropertyName$2(right);
              }
            }
            return left.computed === right.computed && isSameReference(left.object, right.object, disableStaticComputedKey) && isSameReference(left.property, right.property, disableStaticComputedKey);
          }
        default:
          return false;
        }
      }
      function isReflectApply(node) {
        return isSpecificMemberAccess(node, "Reflect", "apply");
      }
      function isArrayFromMethod(node) {
        return isSpecificMemberAccess(node, arrayOrTypedArrayPattern, "from");
      }
      function isMethodWhichHasThisArg(node) {
        return isSpecificMemberAccess(node, null, arrayMethodPattern);
      }
      function negate(f) {
        return token => !f(token);
      }
      function hasJSDocThisTag(node, sourceCode) {
        const jsdocComment = sourceCode.getJSDocComment(node);
        if (jsdocComment && thisTagPattern.test(jsdocComment.value)) {
          return true;
        }
        return sourceCode.getCommentsBefore(node).some(comment => thisTagPattern.test(comment.value));
      }
      function isParenthesised$1(sourceCode, node) {
        const previousToken = sourceCode.getTokenBefore(node), nextToken = sourceCode.getTokenAfter(node);
        return Boolean(previousToken && nextToken) && previousToken.value === "(" && previousToken.range[1] <= node.range[0] && nextToken.value === ")" && nextToken.range[0] >= node.range[1];
      }
      function isArrowToken(token) {
        return token.value === "=>" && token.type === "Punctuator";
      }
      function isCommaToken$1(token) {
        return token.value === "," && token.type === "Punctuator";
      }
      function isDotToken(token) {
        return token.value === "." && token.type === "Punctuator";
      }
      function isQuestionDotToken(token) {
        return token.value === "?." && token.type === "Punctuator";
      }
      function isSemicolonToken(token) {
        return token.value === ";" && token.type === "Punctuator";
      }
      function isColonToken(token) {
        return token.value === ":" && token.type === "Punctuator";
      }
      function isOpeningParenToken$1(token) {
        return token.value === "(" && token.type === "Punctuator";
      }
      function isClosingParenToken$1(token) {
        return token.value === ")" && token.type === "Punctuator";
      }
      function isOpeningBracketToken(token) {
        return token.value === "[" && token.type === "Punctuator";
      }
      function isClosingBracketToken(token) {
        return token.value === "]" && token.type === "Punctuator";
      }
      function isOpeningBraceToken(token) {
        return token.value === "{" && token.type === "Punctuator";
      }
      function isClosingBraceToken(token) {
        return token.value === "}" && token.type === "Punctuator";
      }
      function isCommentToken$1(token) {
        return token.type === "Line" || token.type === "Block" || token.type === "Shebang";
      }
      function isKeywordToken(token) {
        return token.type === "Keyword";
      }
      function getOpeningParenOfParams(node, sourceCode) {
        return node.id ? sourceCode.getTokenAfter(node.id, isOpeningParenToken$1) : sourceCode.getFirstToken(node, isOpeningParenToken$1);
      }
      function equalTokens(left, right, sourceCode) {
        const tokensL = sourceCode.getTokens(left);
        const tokensR = sourceCode.getTokens(right);
        if (tokensL.length !== tokensR.length) {
          return false;
        }
        for (let i = 0; i < tokensL.length; ++i) {
          if (tokensL[i].type !== tokensR[i].type || tokensL[i].value !== tokensR[i].value) {
            return false;
          }
        }
        return true;
      }
      function isLogicalExpression(node) {
        return node.type === "LogicalExpression" && (node.operator === "&&" || node.operator === "||");
      }
      function isCoalesceExpression(node) {
        return node.type === "LogicalExpression" && node.operator === "??";
      }
      function isMixedLogicalAndCoalesceExpressions(left, right) {
        return isLogicalExpression(left) && isCoalesceExpression(right) || isCoalesceExpression(left) && isLogicalExpression(right);
      }
      function isLogicalAssignmentOperator(operator) {
        return LOGICAL_ASSIGNMENT_OPERATORS.has(operator);
      }
      exports$4D = {
        COMMENTS_IGNORE_PATTERN,
        LINEBREAKS,
        LINEBREAK_MATCHER: lineBreakPattern,
        SHEBANG_MATCHER: shebangPattern,
        STATEMENT_LIST_PARENTS,
        isTokenOnSameLine(left, right) {
          return left.loc.end.line === right.loc.start.line;
        },
        isNullOrUndefined,
        isCallee,
        isES5Constructor,
        getUpperFunction,
        isFunction: isFunction$1,
        isLoop,
        isInLoop: isInLoop$1,
        isArrayFromMethod,
        isParenthesised: isParenthesised$1,
        createGlobalLinebreakMatcher,
        equalTokens,
        isArrowToken,
        isClosingBraceToken,
        isClosingBracketToken,
        isClosingParenToken: isClosingParenToken$1,
        isColonToken,
        isCommaToken: isCommaToken$1,
        isCommentToken: isCommentToken$1,
        isDotToken,
        isQuestionDotToken,
        isKeywordToken,
        isNotClosingBraceToken: negate(isClosingBraceToken),
        isNotClosingBracketToken: negate(isClosingBracketToken),
        isNotClosingParenToken: negate(isClosingParenToken$1),
        isNotColonToken: negate(isColonToken),
        isNotCommaToken: negate(isCommaToken$1),
        isNotDotToken: negate(isDotToken),
        isNotQuestionDotToken: negate(isQuestionDotToken),
        isNotOpeningBraceToken: negate(isOpeningBraceToken),
        isNotOpeningBracketToken: negate(isOpeningBracketToken),
        isNotOpeningParenToken: negate(isOpeningParenToken$1),
        isNotSemicolonToken: negate(isSemicolonToken),
        isOpeningBraceToken,
        isOpeningBracketToken,
        isOpeningParenToken: isOpeningParenToken$1,
        isSemicolonToken,
        isStringLiteral(node) {
          return node.type === "Literal" && typeof node.value === "string" || node.type === "TemplateLiteral";
        },
        isBreakableStatement(node) {
          return breakableTypePattern.test(node.type);
        },
        getModifyingReferences(references) {
          return references.filter(isModifyingReference);
        },
        isSurroundedBy(val, character) {
          return val[0] === character && val[val.length - 1] === character;
        },
        isDirectiveComment(node) {
          const comment = node.value.trim();
          return node.type === "Line" && comment.indexOf("eslint-") === 0 || node.type === "Block" && (comment.indexOf("global ") === 0 || comment.indexOf("eslint ") === 0 || comment.indexOf("eslint-") === 0);
        },
        getTrailingStatement: esutils$1.ast.trailingStatement,
        getVariableByName(initScope, name) {
          let scope = initScope;
          while (scope) {
            const variable = scope.set.get(name);
            if (variable) {
              return variable;
            }
            scope = scope.upper;
          }
          return null;
        },
        isDefaultThisBinding(node, sourceCode, {
          capIsConstructor = true
        } = {}) {
          if (capIsConstructor && isES5Constructor(node) || hasJSDocThisTag(node, sourceCode)) {
            return false;
          }
          const isAnonymous = node.id === null;
          let currentNode = node;
          while (currentNode) {
            const parent = currentNode.parent;
            switch (parent.type) {
            case "LogicalExpression":
            case "ConditionalExpression":
            case "ChainExpression":
              currentNode = parent;
              break;
            case "ReturnStatement": {
                const func = getUpperFunction(parent);
                if (func === null || !isCallee(func)) {
                  return true;
                }
                currentNode = func.parent;
                break;
              }
            case "ArrowFunctionExpression":
              if (currentNode !== parent.body || !isCallee(parent)) {
                return true;
              }
              currentNode = parent.parent;
              break;
            case "Property":
            case "MethodDefinition":
              return parent.value !== currentNode;
            case "AssignmentExpression":
            case "AssignmentPattern":
              if (parent.left.type === "MemberExpression") {
                return false;
              }
              if (capIsConstructor && isAnonymous && parent.left.type === "Identifier" && startsWithUpperCase(parent.left.name)) {
                return false;
              }
              return true;
            case "VariableDeclarator":
              return !(capIsConstructor && isAnonymous && parent.init === currentNode && parent.id.type === "Identifier" && startsWithUpperCase(parent.id.name));
            case "MemberExpression":
              if (parent.object === currentNode && isSpecificMemberAccess(parent, null, bindOrCallOrApplyPattern)) {
                const maybeCalleeNode = parent.parent.type === "ChainExpression" ? parent.parent : parent;
                return !(isCallee(maybeCalleeNode) && maybeCalleeNode.parent.arguments.length >= 1 && !isNullOrUndefined(maybeCalleeNode.parent.arguments[0]));
              }
              return true;
            case "CallExpression":
              if (isReflectApply(parent.callee)) {
                return parent.arguments.length !== 3 || parent.arguments[0] !== currentNode || isNullOrUndefined(parent.arguments[1]);
              }
              if (isArrayFromMethod(parent.callee)) {
                return parent.arguments.length !== 3 || parent.arguments[1] !== currentNode || isNullOrUndefined(parent.arguments[2]);
              }
              if (isMethodWhichHasThisArg(parent.callee)) {
                return parent.arguments.length !== 2 || parent.arguments[0] !== currentNode || isNullOrUndefined(parent.arguments[1]);
              }
              return true;
            default:
              return true;
            }
          }
          return true;
        },
        getPrecedence(node) {
          switch (node.type) {
          case "SequenceExpression":
            return 0;
          case "AssignmentExpression":
          case "ArrowFunctionExpression":
          case "YieldExpression":
            return 1;
          case "ConditionalExpression":
            return 3;
          case "LogicalExpression":
            switch (node.operator) {
            case "||":
            case "??":
              return 4;
            case "&&":
              return 5;
            }
          case "BinaryExpression":
            switch (node.operator) {
            case "|":
              return 6;
            case "^":
              return 7;
            case "&":
              return 8;
            case "==":
            case "!=":
            case "===":
            case "!==":
              return 9;
            case "<":
            case "<=":
            case ">":
            case ">=":
            case "in":
            case "instanceof":
              return 10;
            case "<<":
            case ">>":
            case ">>>":
              return 11;
            case "+":
            case "-":
              return 12;
            case "*":
            case "/":
            case "%":
              return 13;
            case "**":
              return 15;
            }
          case "UnaryExpression":
          case "AwaitExpression":
            return 16;
          case "UpdateExpression":
            return 17;
          case "CallExpression":
          case "ChainExpression":
          case "ImportExpression":
            return 18;
          case "NewExpression":
            return 19;
          default:
            return 20;
          }
        },
        isEmptyBlock(node) {
          return Boolean(node && node.type === "BlockStatement" && node.body.length === 0);
        },
        isEmptyFunction(node) {
          return isFunction$1(node) && exports$4D.isEmptyBlock(node.body);
        },
        getDirectivePrologue(node) {
          const directives = [];
          if (node.type === "Program" || node.type === "FunctionDeclaration" || node.type === "FunctionExpression" || node.type === "ArrowFunctionExpression" && node.body.type === "BlockStatement") {
            const statements = node.type === "Program" ? node.body : node.body.body;
            for (const statement of statements) {
              if (statement.type === "ExpressionStatement" && statement.expression.type === "Literal") {
                directives.push(statement);
              } else {
                break;
              }
            }
          }
          return directives;
        },
        isDecimalInteger(node) {
          return node.type === "Literal" && typeof node.value === "number" && DECIMAL_INTEGER_PATTERN.test(node.raw);
        },
        isDecimalIntegerNumericToken(token) {
          return token.type === "Numeric" && DECIMAL_INTEGER_PATTERN.test(token.value);
        },
        getFunctionNameWithKind(node) {
          const parent = node.parent;
          const tokens = [];
          if (parent.type === "MethodDefinition" && parent.static) {
            tokens.push("static");
          }
          if (node.async) {
            tokens.push("async");
          }
          if (node.generator) {
            tokens.push("generator");
          }
          if (node.type === "ArrowFunctionExpression") {
            tokens.push("arrow", "function");
          } else if (parent.type === "Property" || parent.type === "MethodDefinition") {
            if (parent.kind === "constructor") {
              return "constructor";
            }
            if (parent.kind === "get") {
              tokens.push("getter");
            } else if (parent.kind === "set") {
              tokens.push("setter");
            } else {
              tokens.push("method");
            }
          } else {
            tokens.push("function");
          }
          if (node.id) {
            tokens.push(`'${ node.id.name }'`);
          } else {
            const name = getStaticPropertyName$2(parent);
            if (name !== null) {
              tokens.push(`'${ name }'`);
            }
          }
          return tokens.join(" ");
        },
        getFunctionHeadLoc(node, sourceCode) {
          const parent = node.parent;
          let start = null;
          let end = null;
          if (node.type === "ArrowFunctionExpression") {
            const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken);
            start = arrowToken.loc.start;
            end = arrowToken.loc.end;
          } else if (parent.type === "Property" || parent.type === "MethodDefinition") {
            start = parent.loc.start;
            end = getOpeningParenOfParams(node, sourceCode).loc.start;
          } else {
            start = node.loc.start;
            end = getOpeningParenOfParams(node, sourceCode).loc.start;
          }
          return {
            start: Object.assign({}, start),
            end: Object.assign({}, end)
          };
        },
        getNextLocation(sourceCode, {line, column}) {
          if (column < sourceCode.lines[line - 1].length) {
            return {
              line,
              column: column + 1
            };
          }
          if (line < sourceCode.lines.length) {
            return {
              line: line + 1,
              column: 0
            };
          }
          return null;
        },
        getParenthesisedText(sourceCode, node) {
          let leftToken = sourceCode.getFirstToken(node);
          let rightToken = sourceCode.getLastToken(node);
          while (sourceCode.getTokenBefore(leftToken) && sourceCode.getTokenBefore(leftToken).type === "Punctuator" && sourceCode.getTokenBefore(leftToken).value === "(" && sourceCode.getTokenAfter(rightToken) && sourceCode.getTokenAfter(rightToken).type === "Punctuator" && sourceCode.getTokenAfter(rightToken).value === ")") {
            leftToken = sourceCode.getTokenBefore(leftToken);
            rightToken = sourceCode.getTokenAfter(rightToken);
          }
          return sourceCode.getText().slice(leftToken.range[0], rightToken.range[1]);
        },
        couldBeError(node) {
          switch (node.type) {
          case "Identifier":
          case "CallExpression":
          case "NewExpression":
          case "MemberExpression":
          case "TaggedTemplateExpression":
          case "YieldExpression":
          case "AwaitExpression":
          case "ChainExpression":
            return true;
          case "AssignmentExpression":
            if ([
                "=",
                "&&="
              ].includes(node.operator)) {
              return exports$4D.couldBeError(node.right);
            }
            if ([
                "||=",
                "??="
              ].includes(node.operator)) {
              return exports$4D.couldBeError(node.left) || exports$4D.couldBeError(node.right);
            }
            return false;
          case "SequenceExpression": {
              const exprs = node.expressions;
              return exprs.length !== 0 && exports$4D.couldBeError(exprs[exprs.length - 1]);
            }
          case "LogicalExpression":
            if (node.operator === "&&") {
              return exports$4D.couldBeError(node.right);
            }
            return exports$4D.couldBeError(node.left) || exports$4D.couldBeError(node.right);
          case "ConditionalExpression":
            return exports$4D.couldBeError(node.consequent) || exports$4D.couldBeError(node.alternate);
          default:
            return false;
          }
        },
        isNumericLiteral(node) {
          return node.type === "Literal" && (typeof node.value === "number" || Boolean(node.bigint));
        },
        canTokensBeAdjacent(leftValue, rightValue) {
          const espreeOptions = {
            ecmaVersion: espree$2.latestEcmaVersion,
            comment: true,
            range: true
          };
          let leftToken;
          if (typeof leftValue === "string") {
            let tokens;
            try {
              tokens = espree$2.tokenize(leftValue, espreeOptions);
            } catch {
              return false;
            }
            const comments = tokens.comments;
            leftToken = tokens[tokens.length - 1];
            if (comments.length) {
              const lastComment = comments[comments.length - 1];
              if (lastComment.range[0] > leftToken.range[0]) {
                leftToken = lastComment;
              }
            }
          } else {
            leftToken = leftValue;
          }
          if (leftToken.type === "Shebang") {
            return false;
          }
          let rightToken;
          if (typeof rightValue === "string") {
            let tokens;
            try {
              tokens = espree$2.tokenize(rightValue, espreeOptions);
            } catch {
              return false;
            }
            const comments = tokens.comments;
            rightToken = tokens[0];
            if (comments.length) {
              const firstComment = comments[0];
              if (firstComment.range[0] < rightToken.range[0]) {
                rightToken = firstComment;
              }
            }
          } else {
            rightToken = rightValue;
          }
          if (leftToken.type === "Punctuator" || rightToken.type === "Punctuator") {
            if (leftToken.type === "Punctuator" && rightToken.type === "Punctuator") {
              const PLUS_TOKENS = new Set([
                "+",
                "++"
              ]);
              const MINUS_TOKENS = new Set([
                "-",
                "--"
              ]);
              return !(PLUS_TOKENS.has(leftToken.value) && PLUS_TOKENS.has(rightToken.value) || MINUS_TOKENS.has(leftToken.value) && MINUS_TOKENS.has(rightToken.value));
            }
            if (leftToken.type === "Punctuator" && leftToken.value === "/") {
              return ![
                "Block",
                "Line",
                "RegularExpression"
              ].includes(rightToken.type);
            }
            return true;
          }
          if (leftToken.type === "String" || rightToken.type === "String" || leftToken.type === "Template" || rightToken.type === "Template") {
            return true;
          }
          if (leftToken.type !== "Numeric" && rightToken.type === "Numeric" && rightToken.value.startsWith(".")) {
            return true;
          }
          if (leftToken.type === "Block" || rightToken.type === "Block" || rightToken.type === "Line") {
            return true;
          }
          return false;
        },
        getNameLocationInGlobalDirectiveComment(sourceCode, comment, name) {
          const namePattern = new RegExp(`[\\s,]${ escapeRegExp$2(name) }(?:$|[\\s,:])`, "gu");
          namePattern.lastIndex = comment.value.indexOf("global") + 6;
          const match = namePattern.exec(comment.value);
          const start = sourceCode.getLocFromIndex(comment.range[0] + "/*".length + (match ? match.index + 1 : 0));
          const end = {
            line: start.line,
            column: start.column + (match ? name.length : 1)
          };
          return {
            start,
            end
          };
        },
        hasOctalOrNonOctalDecimalEscapeSequence(rawString) {
          return OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN.test(rawString);
        },
        isLogicalExpression,
        isCoalesceExpression,
        isMixedLogicalAndCoalesceExpressions,
        isNullLiteral,
        getStaticStringValue,
        getStaticPropertyName: getStaticPropertyName$2,
        skipChainExpression: skipChainExpression$1,
        isSpecificId,
        isSpecificMemberAccess,
        equalLiteralValue,
        isSameReference,
        isLogicalAssignmentOperator
      };
      var _astUtils = exports$4D;
      exports$4D.LINEBREAK_MATCHER; exports$4D.SHEBANG_MATCHER; exports$4D.isTokenOnSameLine;
      exports$4D.COMMENTS_IGNORE_PATTERN; exports$4D.LINEBREAKS; exports$4D.STATEMENT_LIST_PARENTS;

      var exports$4C = {};
      const astUtils$2o = _astUtils;
      function areEqualTokenLists$1(left, right) {
        if (left.length !== right.length) {
          return false;
        }
        for (let i = 0; i < left.length; i++) {
          const leftToken = left[i], rightToken = right[i];
          if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {
            return false;
          }
        }
        return true;
      }
      function areEqualKeys$1(left, right) {
        if (typeof left === "string" && typeof right === "string") {
          return left === right;
        }
        if (Array.isArray(left) && Array.isArray(right)) {
          return areEqualTokenLists$1(left, right);
        }
        return false;
      }
      function isAccessorKind$1(node) {
        return node.kind === "get" || node.kind === "set";
      }
      function isArgumentOfMethodCall(node, index, object, property) {
        const parent = node.parent;
        return parent.type === "CallExpression" && astUtils$2o.isSpecificMemberAccess(parent.callee, object, property) && parent.arguments[index] === node;
      }
      function isPropertyDescriptor$1(node) {
        if (isArgumentOfMethodCall(node, 2, "Object", "defineProperty") || isArgumentOfMethodCall(node, 2, "Reflect", "defineProperty")) {
          return true;
        }
        const grandparent = node.parent.parent;
        return grandparent.type === "ObjectExpression" && (isArgumentOfMethodCall(grandparent, 1, "Object", "create") || isArgumentOfMethodCall(grandparent, 1, "Object", "defineProperties"));
      }
      exports$4C = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce getter and setter pairs in objects and classes",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/accessor-pairs"
          },
          schema: [{
              type: "object",
              properties: {
                getWithoutSet: {
                  type: "boolean",
                  default: false
                },
                setWithoutGet: {
                  type: "boolean",
                  default: true
                },
                enforceForClassMembers: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: {
            missingGetterInPropertyDescriptor: "Getter is not present in property descriptor.",
            missingSetterInPropertyDescriptor: "Setter is not present in property descriptor.",
            missingGetterInObjectLiteral: "Getter is not present for {{ name }}.",
            missingSetterInObjectLiteral: "Setter is not present for {{ name }}.",
            missingGetterInClass: "Getter is not present for class {{ name }}.",
            missingSetterInClass: "Setter is not present for class {{ name }}."
          }
        },
        create(context) {
          const config = context.options[0] || {};
          const checkGetWithoutSet = config.getWithoutSet === true;
          const checkSetWithoutGet = config.setWithoutGet !== false;
          const enforceForClassMembers = config.enforceForClassMembers !== false;
          const sourceCode = context.getSourceCode();
          function report(node, messageKind) {
            if (node.type === "Property") {
              context.report({
                node,
                messageId: `${ messageKind }InObjectLiteral`,
                loc: astUtils$2o.getFunctionHeadLoc(node.value, sourceCode),
                data: { name: astUtils$2o.getFunctionNameWithKind(node.value) }
              });
            } else if (node.type === "MethodDefinition") {
              context.report({
                node,
                messageId: `${ messageKind }InClass`,
                loc: astUtils$2o.getFunctionHeadLoc(node.value, sourceCode),
                data: { name: astUtils$2o.getFunctionNameWithKind(node.value) }
              });
            } else {
              context.report({
                node,
                messageId: `${ messageKind }InPropertyDescriptor`
              });
            }
          }
          function reportList(nodes, messageKind) {
            for (const node of nodes) {
              report(node, messageKind);
            }
          }
          function createAccessorData(node) {
            const name = astUtils$2o.getStaticPropertyName(node);
            const key = name !== null ? name : sourceCode.getTokens(node.key);
            return {
              key,
              getters: node.kind === "get" ? [node] : [],
              setters: node.kind === "set" ? [node] : []
            };
          }
          function mergeAccessorData(accessors, accessorData) {
            const equalKeyElement = accessors.find(a => areEqualKeys$1(a.key, accessorData.key));
            if (equalKeyElement) {
              equalKeyElement.getters.push(...accessorData.getters);
              equalKeyElement.setters.push(...accessorData.setters);
            } else {
              accessors.push(accessorData);
            }
            return accessors;
          }
          function checkList(nodes) {
            const accessors = nodes.filter(isAccessorKind$1).map(createAccessorData).reduce(mergeAccessorData, []);
            for (const {getters, setters} of accessors) {
              if (checkSetWithoutGet && setters.length && !getters.length) {
                reportList(setters, "missingGetter");
              }
              if (checkGetWithoutSet && getters.length && !setters.length) {
                reportList(getters, "missingSetter");
              }
            }
          }
          function checkObjectLiteral(node) {
            checkList(node.properties.filter(p => p.type === "Property"));
          }
          function checkPropertyDescriptor(node) {
            const namesToCheck = node.properties.filter(p => p.type === "Property" && p.kind === "init" && !p.computed).map(({key}) => key.name);
            const hasGetter = namesToCheck.includes("get");
            const hasSetter = namesToCheck.includes("set");
            if (checkSetWithoutGet && hasSetter && !hasGetter) {
              report(node, "missingGetter");
            }
            if (checkGetWithoutSet && hasGetter && !hasSetter) {
              report(node, "missingSetter");
            }
          }
          function checkObjectExpression(node) {
            checkObjectLiteral(node);
            if (isPropertyDescriptor$1(node)) {
              checkPropertyDescriptor(node);
            }
          }
          function checkClassBody(node) {
            const methodDefinitions = node.body.filter(m => m.type === "MethodDefinition");
            checkList(methodDefinitions.filter(m => m.static));
            checkList(methodDefinitions.filter(m => !m.static));
          }
          const listeners = {};
          if (checkSetWithoutGet || checkGetWithoutSet) {
            listeners.ObjectExpression = checkObjectExpression;
            if (enforceForClassMembers) {
              listeners.ClassBody = checkClassBody;
            }
          }
          return listeners;
        }
      };
      var _accessorPairs = exports$4C;

      var exports$4B = {};
      const astUtils$2n = _astUtils;
      exports$4B = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce linebreaks after opening and before closing array brackets",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/array-bracket-newline"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "always",
                    "never",
                    "consistent"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    multiline: { type: "boolean" },
                    minItems: {
                      type: [
                        "integer",
                        "null"
                      ],
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            unexpectedOpeningLinebreak: "There should be no linebreak after '['.",
            unexpectedClosingLinebreak: "There should be no linebreak before ']'.",
            missingOpeningLinebreak: "A linebreak is required after '['.",
            missingClosingLinebreak: "A linebreak is required before ']'."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function normalizeOptionValue(option) {
            let consistent = false;
            let multiline = false;
            let minItems = 0;
            if (option) {
              if (option === "consistent") {
                consistent = true;
                minItems = Number.POSITIVE_INFINITY;
              } else if (option === "always" || option.minItems === 0) {
                minItems = 0;
              } else if (option === "never") {
                minItems = Number.POSITIVE_INFINITY;
              } else {
                multiline = Boolean(option.multiline);
                minItems = option.minItems || Number.POSITIVE_INFINITY;
              }
            } else {
              consistent = false;
              multiline = true;
              minItems = Number.POSITIVE_INFINITY;
            }
            return {
              consistent,
              multiline,
              minItems
            };
          }
          function normalizeOptions(options) {
            const value = normalizeOptionValue(options);
            return {
              ArrayExpression: value,
              ArrayPattern: value
            };
          }
          function reportNoBeginningLinebreak(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "unexpectedOpeningLinebreak",
              fix(fixer) {
                const nextToken = sourceCode.getTokenAfter(token, { includeComments: true });
                if (astUtils$2n.isCommentToken(nextToken)) {
                  return null;
                }
                return fixer.removeRange([
                  token.range[1],
                  nextToken.range[0]
                ]);
              }
            });
          }
          function reportNoEndingLinebreak(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "unexpectedClosingLinebreak",
              fix(fixer) {
                const previousToken = sourceCode.getTokenBefore(token, { includeComments: true });
                if (astUtils$2n.isCommentToken(previousToken)) {
                  return null;
                }
                return fixer.removeRange([
                  previousToken.range[1],
                  token.range[0]
                ]);
              }
            });
          }
          function reportRequiredBeginningLinebreak(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "missingOpeningLinebreak",
              fix(fixer) {
                return fixer.insertTextAfter(token, "\n");
              }
            });
          }
          function reportRequiredEndingLinebreak(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "missingClosingLinebreak",
              fix(fixer) {
                return fixer.insertTextBefore(token, "\n");
              }
            });
          }
          function check(node) {
            const elements = node.elements;
            const normalizedOptions = normalizeOptions(context.options[0]);
            const options = normalizedOptions[node.type];
            const openBracket = sourceCode.getFirstToken(node);
            const closeBracket = sourceCode.getLastToken(node);
            const firstIncComment = sourceCode.getTokenAfter(openBracket, { includeComments: true });
            const lastIncComment = sourceCode.getTokenBefore(closeBracket, { includeComments: true });
            const first = sourceCode.getTokenAfter(openBracket);
            const last = sourceCode.getTokenBefore(closeBracket);
            const needsLinebreaks = elements.length >= options.minItems || options.multiline && elements.length > 0 && firstIncComment.loc.start.line !== lastIncComment.loc.end.line || elements.length === 0 && firstIncComment.type === "Block" && firstIncComment.loc.start.line !== lastIncComment.loc.end.line && firstIncComment === lastIncComment || options.consistent && openBracket.loc.end.line !== first.loc.start.line;
            if (needsLinebreaks) {
              if (astUtils$2n.isTokenOnSameLine(openBracket, first)) {
                reportRequiredBeginningLinebreak(node, openBracket);
              }
              if (astUtils$2n.isTokenOnSameLine(last, closeBracket)) {
                reportRequiredEndingLinebreak(node, closeBracket);
              }
            } else {
              if (!astUtils$2n.isTokenOnSameLine(openBracket, first)) {
                reportNoBeginningLinebreak(node, openBracket);
              }
              if (!astUtils$2n.isTokenOnSameLine(last, closeBracket)) {
                reportNoEndingLinebreak(node, closeBracket);
              }
            }
          }
          return {
            ArrayPattern: check,
            ArrayExpression: check
          };
        }
      };
      var _arrayBracketNewline = exports$4B;

      var exports$4A = {};
      const astUtils$2m = _astUtils;
      exports$4A = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing inside array brackets",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/array-bracket-spacing"
          },
          fixable: "whitespace",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                singleValue: { type: "boolean" },
                objectsInArrays: { type: "boolean" },
                arraysInArrays: { type: "boolean" }
              },
              additionalProperties: false
            }
          ],
          messages: {
            unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
            unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
            missingSpaceAfter: "A space is required after '{{tokenValue}}'.",
            missingSpaceBefore: "A space is required before '{{tokenValue}}'."
          }
        },
        create(context) {
          const spaced = context.options[0] === "always", sourceCode = context.getSourceCode();
          function isOptionSet(option) {
            return context.options[1] ? context.options[1][option] === !spaced : false;
          }
          const options = {
            spaced,
            singleElementException: isOptionSet("singleValue"),
            objectsInArraysException: isOptionSet("objectsInArrays"),
            arraysInArraysException: isOptionSet("arraysInArrays")
          };
          function reportNoBeginningSpace(node, token) {
            const nextToken = sourceCode.getTokenAfter(token);
            context.report({
              node,
              loc: {
                start: token.loc.end,
                end: nextToken.loc.start
              },
              messageId: "unexpectedSpaceAfter",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.removeRange([
                  token.range[1],
                  nextToken.range[0]
                ]);
              }
            });
          }
          function reportNoEndingSpace(node, token) {
            const previousToken = sourceCode.getTokenBefore(token);
            context.report({
              node,
              loc: {
                start: previousToken.loc.end,
                end: token.loc.start
              },
              messageId: "unexpectedSpaceBefore",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.removeRange([
                  previousToken.range[1],
                  token.range[0]
                ]);
              }
            });
          }
          function reportRequiredBeginningSpace(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "missingSpaceAfter",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.insertTextAfter(token, " ");
              }
            });
          }
          function reportRequiredEndingSpace(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "missingSpaceBefore",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.insertTextBefore(token, " ");
              }
            });
          }
          function isObjectType(node) {
            return node && (node.type === "ObjectExpression" || node.type === "ObjectPattern");
          }
          function isArrayType(node) {
            return node && (node.type === "ArrayExpression" || node.type === "ArrayPattern");
          }
          function validateArraySpacing(node) {
            if (options.spaced && node.elements.length === 0) {
              return;
            }
            const first = sourceCode.getFirstToken(node), second = sourceCode.getFirstToken(node, 1), last = node.typeAnnotation ? sourceCode.getTokenBefore(node.typeAnnotation) : sourceCode.getLastToken(node), penultimate = sourceCode.getTokenBefore(last), firstElement = node.elements[0], lastElement = node.elements[node.elements.length - 1];
            const openingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(firstElement) || options.arraysInArraysException && isArrayType(firstElement) || options.singleElementException && node.elements.length === 1 ? !options.spaced : options.spaced;
            const closingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(lastElement) || options.arraysInArraysException && isArrayType(lastElement) || options.singleElementException && node.elements.length === 1 ? !options.spaced : options.spaced;
            if (astUtils$2m.isTokenOnSameLine(first, second)) {
              if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {
                reportRequiredBeginningSpace(node, first);
              }
              if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {
                reportNoBeginningSpace(node, first);
              }
            }
            if (first !== penultimate && astUtils$2m.isTokenOnSameLine(penultimate, last)) {
              if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {
                reportRequiredEndingSpace(node, last);
              }
              if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {
                reportNoEndingSpace(node, last);
              }
            }
          }
          return {
            ArrayPattern: validateArraySpacing,
            ArrayExpression: validateArraySpacing
          };
        }
      };
      var _arrayBracketSpacing = exports$4A;

      var exports$4z = {};
      const astUtils$2l = _astUtils;
      exports$4z = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce line breaks after each array element",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/array-element-newline"
          },
          fixable: "whitespace",
          schema: {
            definitions: {
              basicConfig: {
                oneOf: [
                  {
                    enum: [
                      "always",
                      "never",
                      "consistent"
                    ]
                  },
                  {
                    type: "object",
                    properties: {
                      multiline: { type: "boolean" },
                      minItems: {
                        type: [
                          "integer",
                          "null"
                        ],
                        minimum: 0
                      }
                    },
                    additionalProperties: false
                  }
                ]
              }
            },
            items: [{
                oneOf: [
                  { $ref: "#/definitions/basicConfig" },
                  {
                    type: "object",
                    properties: {
                      ArrayExpression: { $ref: "#/definitions/basicConfig" },
                      ArrayPattern: { $ref: "#/definitions/basicConfig" }
                    },
                    additionalProperties: false,
                    minProperties: 1
                  }
                ]
              }]
          },
          messages: {
            unexpectedLineBreak: "There should be no linebreak here.",
            missingLineBreak: "There should be a linebreak after this element."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function normalizeOptionValue(providedOption) {
            let consistent = false;
            let multiline = false;
            let minItems;
            const option = providedOption || "always";
            if (!option || option === "always" || option.minItems === 0) {
              minItems = 0;
            } else if (option === "never") {
              minItems = Number.POSITIVE_INFINITY;
            } else if (option === "consistent") {
              consistent = true;
              minItems = Number.POSITIVE_INFINITY;
            } else {
              multiline = Boolean(option.multiline);
              minItems = option.minItems || Number.POSITIVE_INFINITY;
            }
            return {
              consistent,
              multiline,
              minItems
            };
          }
          function normalizeOptions(options) {
            if (options && (options.ArrayExpression || options.ArrayPattern)) {
              let expressionOptions, patternOptions;
              if (options.ArrayExpression) {
                expressionOptions = normalizeOptionValue(options.ArrayExpression);
              }
              if (options.ArrayPattern) {
                patternOptions = normalizeOptionValue(options.ArrayPattern);
              }
              return {
                ArrayExpression: expressionOptions,
                ArrayPattern: patternOptions
              };
            }
            const value = normalizeOptionValue(options);
            return {
              ArrayExpression: value,
              ArrayPattern: value
            };
          }
          function reportNoLineBreak(token) {
            const tokenBefore = sourceCode.getTokenBefore(token, { includeComments: true });
            context.report({
              loc: {
                start: tokenBefore.loc.end,
                end: token.loc.start
              },
              messageId: "unexpectedLineBreak",
              fix(fixer) {
                if (astUtils$2l.isCommentToken(tokenBefore)) {
                  return null;
                }
                if (!astUtils$2l.isTokenOnSameLine(tokenBefore, token)) {
                  return fixer.replaceTextRange([
                    tokenBefore.range[1],
                    token.range[0]
                  ], " ");
                }
                const twoTokensBefore = sourceCode.getTokenBefore(tokenBefore, { includeComments: true });
                if (astUtils$2l.isCommentToken(twoTokensBefore)) {
                  return null;
                }
                return fixer.replaceTextRange([
                  twoTokensBefore.range[1],
                  tokenBefore.range[0]
                ], "");
              }
            });
          }
          function reportRequiredLineBreak(token) {
            const tokenBefore = sourceCode.getTokenBefore(token, { includeComments: true });
            context.report({
              loc: {
                start: tokenBefore.loc.end,
                end: token.loc.start
              },
              messageId: "missingLineBreak",
              fix(fixer) {
                return fixer.replaceTextRange([
                  tokenBefore.range[1],
                  token.range[0]
                ], "\n");
              }
            });
          }
          function check(node) {
            const elements = node.elements;
            const normalizedOptions = normalizeOptions(context.options[0]);
            const options = normalizedOptions[node.type];
            if (!options) {
              return;
            }
            let elementBreak = false;
            if (options.multiline) {
              elementBreak = elements.filter(element => element !== null).some(element => element.loc.start.line !== element.loc.end.line);
            }
            const linebreaksCount = node.elements.map((element, i) => {
              const previousElement = elements[i - 1];
              if (i === 0 || element === null || previousElement === null) {
                return false;
              }
              const commaToken = sourceCode.getFirstTokenBetween(previousElement, element, astUtils$2l.isCommaToken);
              const lastTokenOfPreviousElement = sourceCode.getTokenBefore(commaToken);
              const firstTokenOfCurrentElement = sourceCode.getTokenAfter(commaToken);
              return !astUtils$2l.isTokenOnSameLine(lastTokenOfPreviousElement, firstTokenOfCurrentElement);
            }).filter(isBreak => isBreak === true).length;
            const needsLinebreaks = elements.length >= options.minItems || options.multiline && elementBreak || options.consistent && linebreaksCount > 0 && linebreaksCount < node.elements.length;
            elements.forEach((element, i) => {
              const previousElement = elements[i - 1];
              if (i === 0 || element === null || previousElement === null) {
                return;
              }
              const commaToken = sourceCode.getFirstTokenBetween(previousElement, element, astUtils$2l.isCommaToken);
              const lastTokenOfPreviousElement = sourceCode.getTokenBefore(commaToken);
              const firstTokenOfCurrentElement = sourceCode.getTokenAfter(commaToken);
              if (needsLinebreaks) {
                if (astUtils$2l.isTokenOnSameLine(lastTokenOfPreviousElement, firstTokenOfCurrentElement)) {
                  reportRequiredLineBreak(firstTokenOfCurrentElement);
                }
              } else {
                if (!astUtils$2l.isTokenOnSameLine(lastTokenOfPreviousElement, firstTokenOfCurrentElement)) {
                  reportNoLineBreak(firstTokenOfCurrentElement);
                }
              }
            });
          }
          return {
            ArrayPattern: check,
            ArrayExpression: check
          };
        }
      };
      var _arrayElementNewline = exports$4z;

      var exports$4y = {};
      const astUtils$2k = _astUtils;
      exports$4y = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require braces around arrow function bodies",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/arrow-body-style"
          },
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{
                    enum: [
                      "always",
                      "never"
                    ]
                  }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  { enum: ["as-needed"] },
                  {
                    type: "object",
                    properties: { requireReturnForObjectLiteral: { type: "boolean" } },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          fixable: "code",
          messages: {
            unexpectedOtherBlock: "Unexpected block statement surrounding arrow body.",
            unexpectedEmptyBlock: "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
            unexpectedObjectBlock: "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
            unexpectedSingleBlock: "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
            expectedBlock: "Expected block statement surrounding arrow body."
          }
        },
        create(context) {
          const options = context.options;
          const always = options[0] === "always";
          const asNeeded = !options[0] || options[0] === "as-needed";
          const never = options[0] === "never";
          const requireReturnForObjectLiteral = options[1] && options[1].requireReturnForObjectLiteral;
          const sourceCode = context.getSourceCode();
          let funcInfo = null;
          function hasASIProblem(token) {
            return token && token.type === "Punctuator" && /^[([/`+-]/u.test(token.value);
          }
          function findClosingParen(node) {
            let nodeToCheck = node;
            while (!astUtils$2k.isParenthesised(sourceCode, nodeToCheck)) {
              nodeToCheck = nodeToCheck.parent;
            }
            return sourceCode.getTokenAfter(nodeToCheck);
          }
          function isInsideForLoopInitializer(node) {
            if (node && node.parent) {
              if (node.parent.type === "ForStatement" && node.parent.init === node) {
                return true;
              }
              return isInsideForLoopInitializer(node.parent);
            }
            return false;
          }
          function validate(node) {
            const arrowBody = node.body;
            if (arrowBody.type === "BlockStatement") {
              const blockBody = arrowBody.body;
              if (blockBody.length !== 1 && !never) {
                return;
              }
              if (asNeeded && requireReturnForObjectLiteral && blockBody[0].type === "ReturnStatement" && blockBody[0].argument && blockBody[0].argument.type === "ObjectExpression") {
                return;
              }
              if (never || asNeeded && blockBody[0].type === "ReturnStatement") {
                let messageId;
                if (blockBody.length === 0) {
                  messageId = "unexpectedEmptyBlock";
                } else if (blockBody.length > 1) {
                  messageId = "unexpectedOtherBlock";
                } else if (blockBody[0].argument === null) {
                  messageId = "unexpectedSingleBlock";
                } else if (astUtils$2k.isOpeningBraceToken(sourceCode.getFirstToken(blockBody[0], { skip: 1 }))) {
                  messageId = "unexpectedObjectBlock";
                } else {
                  messageId = "unexpectedSingleBlock";
                }
                context.report({
                  node,
                  loc: arrowBody.loc,
                  messageId,
                  fix(fixer) {
                    const fixes = [];
                    if (blockBody.length !== 1 || blockBody[0].type !== "ReturnStatement" || !blockBody[0].argument || hasASIProblem(sourceCode.getTokenAfter(arrowBody))) {
                      return fixes;
                    }
                    const openingBrace = sourceCode.getFirstToken(arrowBody);
                    const closingBrace = sourceCode.getLastToken(arrowBody);
                    const firstValueToken = sourceCode.getFirstToken(blockBody[0], 1);
                    const lastValueToken = sourceCode.getLastToken(blockBody[0]);
                    const commentsExist = sourceCode.commentsExistBetween(openingBrace, firstValueToken) || sourceCode.commentsExistBetween(lastValueToken, closingBrace);
                    if (commentsExist) {
                      fixes.push(fixer.remove(openingBrace), fixer.remove(closingBrace), fixer.remove(sourceCode.getTokenAfter(openingBrace)));
                    } else {
                      fixes.push(fixer.removeRange([
                        openingBrace.range[0],
                        firstValueToken.range[0]
                      ]), fixer.removeRange([
                        lastValueToken.range[1],
                        closingBrace.range[1]
                      ]));
                    }
                    if (astUtils$2k.isOpeningBraceToken(firstValueToken) || blockBody[0].argument.type === "SequenceExpression" || funcInfo.hasInOperator && isInsideForLoopInitializer(node)) {
                      if (!astUtils$2k.isParenthesised(sourceCode, blockBody[0].argument)) {
                        fixes.push(fixer.insertTextBefore(firstValueToken, "("), fixer.insertTextAfter(lastValueToken, ")"));
                      }
                    }
                    if (astUtils$2k.isSemicolonToken(lastValueToken)) {
                      fixes.push(fixer.remove(lastValueToken));
                    }
                    return fixes;
                  }
                });
              }
            } else {
              if (always || asNeeded && requireReturnForObjectLiteral && arrowBody.type === "ObjectExpression") {
                context.report({
                  node,
                  loc: arrowBody.loc,
                  messageId: "expectedBlock",
                  fix(fixer) {
                    const fixes = [];
                    const arrowToken = sourceCode.getTokenBefore(arrowBody, astUtils$2k.isArrowToken);
                    const [firstTokenAfterArrow, secondTokenAfterArrow] = sourceCode.getTokensAfter(arrowToken, { count: 2 });
                    const lastToken = sourceCode.getLastToken(node);
                    let parenthesisedObjectLiteral = null;
                    if (astUtils$2k.isOpeningParenToken(firstTokenAfterArrow) && astUtils$2k.isOpeningBraceToken(secondTokenAfterArrow)) {
                      const braceNode = sourceCode.getNodeByRangeIndex(secondTokenAfterArrow.range[0]);
                      if (braceNode.type === "ObjectExpression") {
                        parenthesisedObjectLiteral = braceNode;
                      }
                    }
                    if (parenthesisedObjectLiteral) {
                      const openingParenToken = firstTokenAfterArrow;
                      const openingBraceToken = secondTokenAfterArrow;
                      if (astUtils$2k.isTokenOnSameLine(openingParenToken, openingBraceToken)) {
                        fixes.push(fixer.replaceText(openingParenToken, "{return "));
                      } else {
                        fixes.push(fixer.replaceText(openingParenToken, "{"), fixer.insertTextBefore(openingBraceToken, "return "));
                      }
                      fixes.push(fixer.remove(findClosingParen(parenthesisedObjectLiteral)));
                      fixes.push(fixer.insertTextAfter(lastToken, "}"));
                    } else {
                      fixes.push(fixer.insertTextBefore(firstTokenAfterArrow, "{return "));
                      fixes.push(fixer.insertTextAfter(lastToken, "}"));
                    }
                    return fixes;
                  }
                });
              }
            }
          }
          return {
            "BinaryExpression[operator='in']"() {
              let info = funcInfo;
              while (info) {
                info.hasInOperator = true;
                info = info.upper;
              }
            },
            ArrowFunctionExpression() {
              funcInfo = {
                upper: funcInfo,
                hasInOperator: false
              };
            },
            "ArrowFunctionExpression:exit"(node) {
              validate(node);
              funcInfo = funcInfo.upper;
            }
          };
        }
      };
      var _arrowBodyStyle = exports$4y;

      var exports$4x = {};
      const astUtils$2j = _astUtils;
      exports$4x = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before and after the arrow in arrow functions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/arrow-spacing"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                before: {
                  type: "boolean",
                  default: true
                },
                after: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: {
            expectedBefore: "Missing space before =>.",
            unexpectedBefore: "Unexpected space before =>.",
            expectedAfter: "Missing space after =>.",
            unexpectedAfter: "Unexpected space after =>."
          }
        },
        create(context) {
          const rule = Object.assign({}, context.options[0]);
          rule.before = rule.before !== false;
          rule.after = rule.after !== false;
          const sourceCode = context.getSourceCode();
          function getTokens(node) {
            const arrow = sourceCode.getTokenBefore(node.body, astUtils$2j.isArrowToken);
            return {
              before: sourceCode.getTokenBefore(arrow),
              arrow,
              after: sourceCode.getTokenAfter(arrow)
            };
          }
          function countSpaces(tokens) {
            const before = tokens.arrow.range[0] - tokens.before.range[1];
            const after = tokens.after.range[0] - tokens.arrow.range[1];
            return {
              before,
              after
            };
          }
          function spaces(node) {
            const tokens = getTokens(node);
            const countSpace = countSpaces(tokens);
            if (rule.before) {
              if (countSpace.before === 0) {
                context.report({
                  node: tokens.before,
                  messageId: "expectedBefore",
                  fix(fixer) {
                    return fixer.insertTextBefore(tokens.arrow, " ");
                  }
                });
              }
            } else {
              if (countSpace.before > 0) {
                context.report({
                  node: tokens.before,
                  messageId: "unexpectedBefore",
                  fix(fixer) {
                    return fixer.removeRange([
                      tokens.before.range[1],
                      tokens.arrow.range[0]
                    ]);
                  }
                });
              }
            }
            if (rule.after) {
              if (countSpace.after === 0) {
                context.report({
                  node: tokens.after,
                  messageId: "expectedAfter",
                  fix(fixer) {
                    return fixer.insertTextAfter(tokens.arrow, " ");
                  }
                });
              }
            } else {
              if (countSpace.after > 0) {
                context.report({
                  node: tokens.after,
                  messageId: "unexpectedAfter",
                  fix(fixer) {
                    return fixer.removeRange([
                      tokens.arrow.range[1],
                      tokens.after.range[0]
                    ]);
                  }
                });
              }
            }
          }
          return { ArrowFunctionExpression: spaces };
        }
      };
      var _arrowSpacing = exports$4x;

      var exports$4w = {};
      const util$2 = _astUtils;
      exports$4w = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow or enforce spaces inside of blocks after opening block and before closing block",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/block-spacing"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never"
              ]
            }],
          messages: {
            missing: "Requires a space {{location}} '{{token}}'.",
            extra: "Unexpected space(s) {{location}} '{{token}}'."
          }
        },
        create(context) {
          const always = context.options[0] !== "never", messageId = always ? "missing" : "extra", sourceCode = context.getSourceCode();
          function getOpenBrace(node) {
            if (node.type === "SwitchStatement") {
              if (node.cases.length > 0) {
                return sourceCode.getTokenBefore(node.cases[0]);
              }
              return sourceCode.getLastToken(node, 1);
            }
            return sourceCode.getFirstToken(node);
          }
          function isValid(left, right) {
            return !util$2.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === always;
          }
          function checkSpacingInsideBraces(node) {
            const openBrace = getOpenBrace(node);
            const closeBrace = sourceCode.getLastToken(node);
            const firstToken = sourceCode.getTokenAfter(openBrace, { includeComments: true });
            const lastToken = sourceCode.getTokenBefore(closeBrace, { includeComments: true });
            if (openBrace.type !== "Punctuator" || openBrace.value !== "{" || closeBrace.type !== "Punctuator" || closeBrace.value !== "}" || firstToken === closeBrace) {
              return;
            }
            if (!always && firstToken.type === "Line") {
              return;
            }
            if (!isValid(openBrace, firstToken)) {
              let loc = openBrace.loc;
              if (messageId === "extra") {
                loc = {
                  start: openBrace.loc.end,
                  end: firstToken.loc.start
                };
              }
              context.report({
                node,
                loc,
                messageId,
                data: {
                  location: "after",
                  token: openBrace.value
                },
                fix(fixer) {
                  if (always) {
                    return fixer.insertTextBefore(firstToken, " ");
                  }
                  return fixer.removeRange([
                    openBrace.range[1],
                    firstToken.range[0]
                  ]);
                }
              });
            }
            if (!isValid(lastToken, closeBrace)) {
              let loc = closeBrace.loc;
              if (messageId === "extra") {
                loc = {
                  start: lastToken.loc.end,
                  end: closeBrace.loc.start
                };
              }
              context.report({
                node,
                loc,
                messageId,
                data: {
                  location: "before",
                  token: closeBrace.value
                },
                fix(fixer) {
                  if (always) {
                    return fixer.insertTextAfter(lastToken, " ");
                  }
                  return fixer.removeRange([
                    lastToken.range[1],
                    closeBrace.range[0]
                  ]);
                }
              });
            }
          }
          return {
            BlockStatement: checkSpacingInsideBraces,
            SwitchStatement: checkSpacingInsideBraces
          };
        }
      };
      var _blockSpacing = exports$4w;

      var exports$4v = {};
      const astUtils$2i = _astUtils;
      exports$4v = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent brace style for blocks",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/brace-style"
          },
          schema: [
            {
              enum: [
                "1tbs",
                "stroustrup",
                "allman"
              ]
            },
            {
              type: "object",
              properties: {
                allowSingleLine: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          fixable: "whitespace",
          messages: {
            nextLineOpen: "Opening curly brace does not appear on the same line as controlling statement.",
            sameLineOpen: "Opening curly brace appears on the same line as controlling statement.",
            blockSameLine: "Statement inside of curly braces should be on next line.",
            nextLineClose: "Closing curly brace does not appear on the same line as the subsequent block.",
            singleLineClose: "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
            sameLineClose: "Closing curly brace appears on the same line as the subsequent block."
          }
        },
        create(context) {
          const style = context.options[0] || "1tbs", params = context.options[1] || {}, sourceCode = context.getSourceCode();
          function removeNewlineBetween(firstToken, secondToken) {
            const textRange = [
              firstToken.range[1],
              secondToken.range[0]
            ];
            const textBetween = sourceCode.text.slice(textRange[0], textRange[1]);
            if (textBetween.trim()) {
              return null;
            }
            return fixer => fixer.replaceTextRange(textRange, " ");
          }
          function validateCurlyPair(openingCurly, closingCurly) {
            const tokenBeforeOpeningCurly = sourceCode.getTokenBefore(openingCurly);
            const tokenAfterOpeningCurly = sourceCode.getTokenAfter(openingCurly);
            const tokenBeforeClosingCurly = sourceCode.getTokenBefore(closingCurly);
            const singleLineException = params.allowSingleLine && astUtils$2i.isTokenOnSameLine(openingCurly, closingCurly);
            if (style !== "allman" && !astUtils$2i.isTokenOnSameLine(tokenBeforeOpeningCurly, openingCurly)) {
              context.report({
                node: openingCurly,
                messageId: "nextLineOpen",
                fix: removeNewlineBetween(tokenBeforeOpeningCurly, openingCurly)
              });
            }
            if (style === "allman" && astUtils$2i.isTokenOnSameLine(tokenBeforeOpeningCurly, openingCurly) && !singleLineException) {
              context.report({
                node: openingCurly,
                messageId: "sameLineOpen",
                fix: fixer => fixer.insertTextBefore(openingCurly, "\n")
              });
            }
            if (astUtils$2i.isTokenOnSameLine(openingCurly, tokenAfterOpeningCurly) && tokenAfterOpeningCurly !== closingCurly && !singleLineException) {
              context.report({
                node: openingCurly,
                messageId: "blockSameLine",
                fix: fixer => fixer.insertTextAfter(openingCurly, "\n")
              });
            }
            if (tokenBeforeClosingCurly !== openingCurly && !singleLineException && astUtils$2i.isTokenOnSameLine(tokenBeforeClosingCurly, closingCurly)) {
              context.report({
                node: closingCurly,
                messageId: "singleLineClose",
                fix: fixer => fixer.insertTextBefore(closingCurly, "\n")
              });
            }
          }
          function validateCurlyBeforeKeyword(curlyToken) {
            const keywordToken = sourceCode.getTokenAfter(curlyToken);
            if (style === "1tbs" && !astUtils$2i.isTokenOnSameLine(curlyToken, keywordToken)) {
              context.report({
                node: curlyToken,
                messageId: "nextLineClose",
                fix: removeNewlineBetween(curlyToken, keywordToken)
              });
            }
            if (style !== "1tbs" && astUtils$2i.isTokenOnSameLine(curlyToken, keywordToken)) {
              context.report({
                node: curlyToken,
                messageId: "sameLineClose",
                fix: fixer => fixer.insertTextAfter(curlyToken, "\n")
              });
            }
          }
          return {
            BlockStatement(node) {
              if (!astUtils$2i.STATEMENT_LIST_PARENTS.has(node.parent.type)) {
                validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));
              }
            },
            ClassBody(node) {
              validateCurlyPair(sourceCode.getFirstToken(node), sourceCode.getLastToken(node));
            },
            SwitchStatement(node) {
              const closingCurly = sourceCode.getLastToken(node);
              const openingCurly = sourceCode.getTokenBefore(node.cases.length ? node.cases[0] : closingCurly);
              validateCurlyPair(openingCurly, closingCurly);
            },
            IfStatement(node) {
              if (node.consequent.type === "BlockStatement" && node.alternate) {
                validateCurlyBeforeKeyword(sourceCode.getLastToken(node.consequent));
              }
            },
            TryStatement(node) {
              validateCurlyBeforeKeyword(sourceCode.getLastToken(node.block));
              if (node.handler && node.finalizer) {
                validateCurlyBeforeKeyword(sourceCode.getLastToken(node.handler.body));
              }
            }
          };
        }
      };
      var _braceStyle = exports$4v;

      var exports$4u = {};
      exports$4u = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "require `return` statements after callbacks",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/callback-return"
          },
          schema: [{
              type: "array",
              items: { type: "string" }
            }],
          messages: { missingReturn: "Expected return with your callback function." }
        },
        create(context) {
          const callbacks = context.options[0] || [
              "callback",
              "cb",
              "next"
            ], sourceCode = context.getSourceCode();
          function findClosestParentOfType(node, types) {
            if (!node.parent) {
              return null;
            }
            if (types.indexOf(node.parent.type) === -1) {
              return findClosestParentOfType(node.parent, types);
            }
            return node.parent;
          }
          function containsOnlyIdentifiers(node) {
            if (node.type === "Identifier") {
              return true;
            }
            if (node.type === "MemberExpression") {
              if (node.object.type === "Identifier") {
                return true;
              }
              if (node.object.type === "MemberExpression") {
                return containsOnlyIdentifiers(node.object);
              }
            }
            return false;
          }
          function isCallback(node) {
            return containsOnlyIdentifiers(node.callee) && callbacks.indexOf(sourceCode.getText(node.callee)) > -1;
          }
          function isCallbackExpression(node, parentNode) {
            if (!parentNode || parentNode.type !== "ExpressionStatement") {
              return false;
            }
            if (parentNode.expression === node) {
              return true;
            }
            if (parentNode.expression.type === "BinaryExpression" || parentNode.expression.type === "LogicalExpression") {
              if (parentNode.expression.right === node) {
                return true;
              }
            }
            return false;
          }
          return {
            CallExpression(node) {
              if (!isCallback(node)) {
                return;
              }
              const closestBlock = findClosestParentOfType(node, [
                "BlockStatement",
                "ReturnStatement",
                "ArrowFunctionExpression"
              ]) || {};
              if (closestBlock.type === "ReturnStatement") {
                return;
              }
              if (closestBlock.type === "ArrowFunctionExpression") {
                return;
              }
              if (closestBlock.type === "BlockStatement") {
                const lastItem = closestBlock.body[closestBlock.body.length - 1];
                if (isCallbackExpression(node, lastItem)) {
                  const parentType = closestBlock.parent.type;
                  if (parentType === "FunctionExpression" || parentType === "FunctionDeclaration" || parentType === "ArrowFunctionExpression") {
                    return;
                  }
                }
                if (lastItem.type === "ReturnStatement") {
                  if (isCallbackExpression(node, closestBlock.body[closestBlock.body.length - 2])) {
                    return;
                  }
                }
              }
              if (findClosestParentOfType(node, [
                  "FunctionDeclaration",
                  "FunctionExpression",
                  "ArrowFunctionExpression"
                ])) {
                context.report({
                  node,
                  messageId: "missingReturn"
                });
              }
            }
          };
        }
      };
      var _callbackReturn = exports$4u;

      var exports$4t = {};
      exports$4t = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce camelcase naming convention",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/camelcase"
          },
          schema: [{
              type: "object",
              properties: {
                ignoreDestructuring: {
                  type: "boolean",
                  default: false
                },
                ignoreImports: {
                  type: "boolean",
                  default: false
                },
                ignoreGlobals: {
                  type: "boolean",
                  default: false
                },
                properties: {
                  enum: [
                    "always",
                    "never"
                  ]
                },
                allow: {
                  type: "array",
                  items: [{ type: "string" }],
                  minItems: 0,
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { notCamelCase: "Identifier '{{name}}' is not in camel case." }
        },
        create(context) {
          const options = context.options[0] || {};
          let properties = options.properties || "";
          const ignoreDestructuring = options.ignoreDestructuring;
          const ignoreImports = options.ignoreImports;
          const ignoreGlobals = options.ignoreGlobals;
          const allow = options.allow || [];
          let globalScope;
          if (properties !== "always" && properties !== "never") {
            properties = "always";
          }
          const reported = [];
          const ALLOWED_PARENT_TYPES = new Set([
            "CallExpression",
            "NewExpression"
          ]);
          function isUnderscored(name) {
            return name.includes("_") && name !== name.toUpperCase();
          }
          function isAllowed(name) {
            return allow.some(entry => name === entry || name.match(new RegExp(entry, "u")));
          }
          function isInsideObjectPattern(node) {
            let current = node;
            while (current) {
              const parent = current.parent;
              if (parent && parent.type === "Property" && parent.computed && parent.key === current) {
                return false;
              }
              if (current.type === "ObjectPattern") {
                return true;
              }
              current = parent;
            }
            return false;
          }
          function isAssignmentTargetPropertyInDestructuring(node) {
            if (node.parent.type === "MemberExpression" && node.parent.property === node && !node.parent.computed) {
              const effectiveParent = node.parent.parent;
              return effectiveParent.type === "Property" && effectiveParent.value === node.parent && effectiveParent.parent.type === "ObjectPattern" || effectiveParent.type === "ArrayPattern" || effectiveParent.type === "RestElement" || effectiveParent.type === "AssignmentPattern" && effectiveParent.left === node.parent;
            }
            return false;
          }
          function isReferenceToGlobalVariable(node) {
            const variable = globalScope.set.get(node.name);
            return variable && variable.defs.length === 0 && variable.references.some(ref => ref.identifier === node);
          }
          function isPropertyNameInObjectLiteral(node) {
            const parent = node.parent;
            return parent.type === "Property" && parent.parent.type === "ObjectExpression" && !parent.computed && parent.key === node;
          }
          function report(node) {
            if (!reported.includes(node)) {
              reported.push(node);
              context.report({
                node,
                messageId: "notCamelCase",
                data: { name: node.name }
              });
            }
          }
          return {
            Program() {
              globalScope = context.getScope();
            },
            Identifier(node) {
              const name = node.name, nameIsUnderscored = isUnderscored(name.replace(/^_+|_+$/gu, "")), effectiveParent = node.parent.type === "MemberExpression" ? node.parent.parent : node.parent;
              if (isAllowed(name)) {
                return;
              }
              if (ignoreGlobals && isReferenceToGlobalVariable(node) && !isPropertyNameInObjectLiteral(node)) {
                return;
              }
              if (node.parent.type === "MemberExpression") {
                if (properties === "never") {
                  return;
                }
                if (node.parent.object.type === "Identifier" && node.parent.object.name === node.name && nameIsUnderscored) {
                  report(node);
                } else if (effectiveParent.type === "AssignmentExpression" && nameIsUnderscored && (effectiveParent.right.type !== "MemberExpression" || effectiveParent.left.type === "MemberExpression" && effectiveParent.left.property.name === node.name)) {
                  report(node);
                } else if (isAssignmentTargetPropertyInDestructuring(node) && nameIsUnderscored) {
                  report(node);
                }
              } else if (node.parent.type === "Property" || node.parent.type === "AssignmentPattern") {
                if (node.parent.parent && node.parent.parent.type === "ObjectPattern") {
                  if (node.parent.shorthand && node.parent.value.left && nameIsUnderscored) {
                    report(node);
                  }
                  const assignmentKeyEqualsValue = node.parent.key.name === node.parent.value.name;
                  if (nameIsUnderscored && node.parent.computed) {
                    report(node);
                  }
                  if (node.parent.key === node && node.parent.value !== node) {
                    return;
                  }
                  const valueIsUnderscored = node.parent.value.name && nameIsUnderscored;
                  if (valueIsUnderscored && !(assignmentKeyEqualsValue && ignoreDestructuring)) {
                    report(node);
                  }
                }
                if (properties === "never" || ignoreDestructuring && isInsideObjectPattern(node)) {
                  return;
                }
                if (nameIsUnderscored && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && !(node.parent.right === node)) {
                  report(node);
                }
              } else if ([
                  "ImportSpecifier",
                  "ImportNamespaceSpecifier",
                  "ImportDefaultSpecifier"
                ].includes(node.parent.type)) {
                if (node.parent.type === "ImportSpecifier" && ignoreImports) {
                  return;
                }
                if (node.parent.local && node.parent.local.name === node.name && nameIsUnderscored) {
                  report(node);
                }
              } else if (nameIsUnderscored && !ALLOWED_PARENT_TYPES.has(effectiveParent.type)) {
                report(node);
              }
            }
          };
        }
      };
      var _camelcase = exports$4t;

      var exports$4s = {};
      exports$4s = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/u;
      var _letters = exports$4s;

      var exports$4r = {};
      const astUtils$2h = _astUtils;
      exports$4r = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce that class methods utilize `this`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/class-methods-use-this"
          },
          schema: [{
              type: "object",
              properties: {
                exceptMethods: {
                  type: "array",
                  items: { type: "string" }
                }
              },
              additionalProperties: false
            }],
          messages: { missingThis: "Expected 'this' to be used by class {{name}}." }
        },
        create(context) {
          const config = Object.assign({}, context.options[0]);
          const exceptMethods = new Set(config.exceptMethods || []);
          const stack = [];
          function enterFunction() {
            stack.push(false);
          }
          function isInstanceMethod(node) {
            return !node.static && node.kind !== "constructor" && node.type === "MethodDefinition";
          }
          function isIncludedInstanceMethod(node) {
            return isInstanceMethod(node) && (node.computed || !exceptMethods.has(node.key.name));
          }
          function exitFunction(node) {
            const methodUsesThis = stack.pop();
            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {
              context.report({
                node,
                messageId: "missingThis",
                data: { name: astUtils$2h.getFunctionNameWithKind(node) }
              });
            }
          }
          function markThisUsed() {
            if (stack.length) {
              stack[stack.length - 1] = true;
            }
          }
          return {
            FunctionDeclaration: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            FunctionExpression: enterFunction,
            "FunctionExpression:exit": exitFunction,
            ThisExpression: markThisUsed,
            Super: markThisUsed
          };
        }
      };
      var _classMethodsUseThis = exports$4r;

      var exports$4q = {};
      const astUtils$2g = _astUtils;
      const DEFAULT_OPTIONS$1 = Object.freeze({
        arrays: "never",
        objects: "never",
        imports: "never",
        exports: "never",
        functions: "never"
      });
      function isTrailingCommaAllowed(lastItem) {
        return !(lastItem.type === "RestElement" || lastItem.type === "RestProperty" || lastItem.type === "ExperimentalRestProperty");
      }
      function normalizeOptions$2(optionValue, ecmaVersion) {
        if (typeof optionValue === "string") {
          return {
            arrays: optionValue,
            objects: optionValue,
            imports: optionValue,
            exports: optionValue,
            functions: !ecmaVersion || ecmaVersion < 8 ? "ignore" : optionValue
          };
        }
        if (typeof optionValue === "object" && optionValue !== null) {
          return {
            arrays: optionValue.arrays || DEFAULT_OPTIONS$1.arrays,
            objects: optionValue.objects || DEFAULT_OPTIONS$1.objects,
            imports: optionValue.imports || DEFAULT_OPTIONS$1.imports,
            exports: optionValue.exports || DEFAULT_OPTIONS$1.exports,
            functions: optionValue.functions || DEFAULT_OPTIONS$1.functions
          };
        }
        return DEFAULT_OPTIONS$1;
      }
      exports$4q = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow trailing commas",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/comma-dangle"
          },
          fixable: "code",
          schema: {
            definitions: {
              value: {
                enum: [
                  "always-multiline",
                  "always",
                  "never",
                  "only-multiline"
                ]
              },
              valueWithIgnore: {
                enum: [
                  "always-multiline",
                  "always",
                  "ignore",
                  "never",
                  "only-multiline"
                ]
              }
            },
            type: "array",
            items: [{
                oneOf: [
                  { $ref: "#/definitions/value" },
                  {
                    type: "object",
                    properties: {
                      arrays: { $ref: "#/definitions/valueWithIgnore" },
                      objects: { $ref: "#/definitions/valueWithIgnore" },
                      imports: { $ref: "#/definitions/valueWithIgnore" },
                      exports: { $ref: "#/definitions/valueWithIgnore" },
                      functions: { $ref: "#/definitions/valueWithIgnore" }
                    },
                    additionalProperties: false
                  }
                ]
              }]
          },
          messages: {
            unexpected: "Unexpected trailing comma.",
            missing: "Missing trailing comma."
          }
        },
        create(context) {
          const options = normalizeOptions$2(context.options[0], context.parserOptions.ecmaVersion);
          const sourceCode = context.getSourceCode();
          function getLastItem(node) {
            function last(array) {
              return array[array.length - 1];
            }
            switch (node.type) {
            case "ObjectExpression":
            case "ObjectPattern":
              return last(node.properties);
            case "ArrayExpression":
            case "ArrayPattern":
              return last(node.elements);
            case "ImportDeclaration":
            case "ExportNamedDeclaration":
              return last(node.specifiers);
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ArrowFunctionExpression":
              return last(node.params);
            case "CallExpression":
            case "NewExpression":
              return last(node.arguments);
            default:
              return null;
            }
          }
          function getTrailingToken(node, lastItem) {
            switch (node.type) {
            case "ObjectExpression":
            case "ArrayExpression":
            case "CallExpression":
            case "NewExpression":
              return sourceCode.getLastToken(node, 1);
            default: {
                const nextToken = sourceCode.getTokenAfter(lastItem);
                if (astUtils$2g.isCommaToken(nextToken)) {
                  return nextToken;
                }
                return sourceCode.getLastToken(lastItem);
              }
            }
          }
          function isMultiline(node) {
            const lastItem = getLastItem(node);
            if (!lastItem) {
              return false;
            }
            const penultimateToken = getTrailingToken(node, lastItem);
            const lastToken = sourceCode.getTokenAfter(penultimateToken);
            return lastToken.loc.end.line !== penultimateToken.loc.end.line;
          }
          function forbidTrailingComma(node) {
            const lastItem = getLastItem(node);
            if (!lastItem || node.type === "ImportDeclaration" && lastItem.type !== "ImportSpecifier") {
              return;
            }
            const trailingToken = getTrailingToken(node, lastItem);
            if (astUtils$2g.isCommaToken(trailingToken)) {
              context.report({
                node: lastItem,
                loc: trailingToken.loc,
                messageId: "unexpected",
                fix(fixer) {
                  return fixer.remove(trailingToken);
                }
              });
            }
          }
          function forceTrailingComma(node) {
            const lastItem = getLastItem(node);
            if (!lastItem || node.type === "ImportDeclaration" && lastItem.type !== "ImportSpecifier") {
              return;
            }
            if (!isTrailingCommaAllowed(lastItem)) {
              forbidTrailingComma(node);
              return;
            }
            const trailingToken = getTrailingToken(node, lastItem);
            if (trailingToken.value !== ",") {
              context.report({
                node: lastItem,
                loc: {
                  start: trailingToken.loc.end,
                  end: astUtils$2g.getNextLocation(sourceCode, trailingToken.loc.end)
                },
                messageId: "missing",
                fix(fixer) {
                  return fixer.insertTextAfter(trailingToken, ",");
                }
              });
            }
          }
          function forceTrailingCommaIfMultiline(node) {
            if (isMultiline(node)) {
              forceTrailingComma(node);
            } else {
              forbidTrailingComma(node);
            }
          }
          function allowTrailingCommaIfMultiline(node) {
            if (!isMultiline(node)) {
              forbidTrailingComma(node);
            }
          }
          const predicate = {
            always: forceTrailingComma,
            "always-multiline": forceTrailingCommaIfMultiline,
            "only-multiline": allowTrailingCommaIfMultiline,
            never: forbidTrailingComma,
            ignore: () => {
            }
          };
          return {
            ObjectExpression: predicate[options.objects],
            ObjectPattern: predicate[options.objects],
            ArrayExpression: predicate[options.arrays],
            ArrayPattern: predicate[options.arrays],
            ImportDeclaration: predicate[options.imports],
            ExportNamedDeclaration: predicate[options.exports],
            FunctionDeclaration: predicate[options.functions],
            FunctionExpression: predicate[options.functions],
            ArrowFunctionExpression: predicate[options.functions],
            CallExpression: predicate[options.functions],
            NewExpression: predicate[options.functions]
          };
        }
      };
      var _commaDangle = exports$4q;

      var exports$4p = {};
      const astUtils$2f = _astUtils;
      exports$4p = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before and after commas",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/comma-spacing"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                before: {
                  type: "boolean",
                  default: false
                },
                after: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: {
            missing: "A space is required {{loc}} ','.",
            unexpected: "There should be no space {{loc}} ','."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const tokensAndComments = sourceCode.tokensAndComments;
          const options = {
            before: context.options[0] ? context.options[0].before : false,
            after: context.options[0] ? context.options[0].after : true
          };
          const commaTokensToIgnore = [];
          function report(node, loc, otherNode) {
            context.report({
              node,
              fix(fixer) {
                if (options[loc]) {
                  if (loc === "before") {
                    return fixer.insertTextBefore(node, " ");
                  }
                  return fixer.insertTextAfter(node, " ");
                }
                let start, end;
                const newText = "";
                if (loc === "before") {
                  start = otherNode.range[1];
                  end = node.range[0];
                } else {
                  start = node.range[1];
                  end = otherNode.range[0];
                }
                return fixer.replaceTextRange([
                  start,
                  end
                ], newText);
              },
              messageId: options[loc] ? "missing" : "unexpected",
              data: { loc }
            });
          }
          function validateCommaItemSpacing(tokens, reportItem) {
            if (tokens.left && astUtils$2f.isTokenOnSameLine(tokens.left, tokens.comma) && options.before !== sourceCode.isSpaceBetweenTokens(tokens.left, tokens.comma)) {
              report(reportItem, "before", tokens.left);
            }
            if (tokens.right && astUtils$2f.isClosingParenToken(tokens.right)) {
              return;
            }
            if (tokens.right && !options.after && tokens.right.type === "Line") {
              return;
            }
            if (tokens.right && astUtils$2f.isTokenOnSameLine(tokens.comma, tokens.right) && options.after !== sourceCode.isSpaceBetweenTokens(tokens.comma, tokens.right)) {
              report(reportItem, "after", tokens.right);
            }
          }
          function addNullElementsToIgnoreList(node) {
            let previousToken = sourceCode.getFirstToken(node);
            node.elements.forEach(element => {
              let token;
              if (element === null) {
                token = sourceCode.getTokenAfter(previousToken);
                if (astUtils$2f.isCommaToken(token)) {
                  commaTokensToIgnore.push(token);
                }
              } else {
                token = sourceCode.getTokenAfter(element);
              }
              previousToken = token;
            });
          }
          return {
            "Program:exit"() {
              tokensAndComments.forEach((token, i) => {
                if (!astUtils$2f.isCommaToken(token)) {
                  return;
                }
                if (token && token.type === "JSXText") {
                  return;
                }
                const previousToken = tokensAndComments[i - 1];
                const nextToken = tokensAndComments[i + 1];
                validateCommaItemSpacing({
                  comma: token,
                  left: astUtils$2f.isCommaToken(previousToken) || commaTokensToIgnore.includes(token) ? null : previousToken,
                  right: astUtils$2f.isCommaToken(nextToken) ? null : nextToken
                }, token);
              });
            },
            ArrayExpression: addNullElementsToIgnoreList,
            ArrayPattern: addNullElementsToIgnoreList
          };
        }
      };
      var _commaSpacing = exports$4p;

      var exports$4o = {};
      const astUtils$2e = _astUtils;
      exports$4o = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent comma style",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/comma-style"
          },
          fixable: "code",
          schema: [
            {
              enum: [
                "first",
                "last"
              ]
            },
            {
              type: "object",
              properties: {
                exceptions: {
                  type: "object",
                  additionalProperties: { type: "boolean" }
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            unexpectedLineBeforeAndAfterComma: "Bad line breaking before and after ','.",
            expectedCommaFirst: "',' should be placed first.",
            expectedCommaLast: "',' should be placed last."
          }
        },
        create(context) {
          const style = context.options[0] || "last", sourceCode = context.getSourceCode();
          const exceptions = {
            ArrayPattern: true,
            ArrowFunctionExpression: true,
            CallExpression: true,
            FunctionDeclaration: true,
            FunctionExpression: true,
            ImportDeclaration: true,
            ObjectPattern: true,
            NewExpression: true
          };
          if (context.options.length === 2 && Object.prototype.hasOwnProperty.call(context.options[1], "exceptions")) {
            const keys = Object.keys(context.options[1].exceptions);
            for (let i = 0; i < keys.length; i++) {
              exceptions[keys[i]] = context.options[1].exceptions[keys[i]];
            }
          }
          function getReplacedText(styleType, text) {
            switch (styleType) {
            case "between":
              return `,${ text.replace(astUtils$2e.LINEBREAK_MATCHER, "") }`;
            case "first":
              return `${ text },`;
            case "last":
              return `,${ text }`;
            default:
              return "";
            }
          }
          function getFixerFunction(styleType, previousItemToken, commaToken, currentItemToken) {
            const text = sourceCode.text.slice(previousItemToken.range[1], commaToken.range[0]) + sourceCode.text.slice(commaToken.range[1], currentItemToken.range[0]);
            const range = [
              previousItemToken.range[1],
              currentItemToken.range[0]
            ];
            return function (fixer) {
              return fixer.replaceTextRange(range, getReplacedText(styleType, text));
            };
          }
          function validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem) {
            if (astUtils$2e.isTokenOnSameLine(commaToken, currentItemToken) && astUtils$2e.isTokenOnSameLine(previousItemToken, commaToken)) ; else if (!astUtils$2e.isTokenOnSameLine(commaToken, currentItemToken) && !astUtils$2e.isTokenOnSameLine(previousItemToken, commaToken)) {
              const comment = sourceCode.getCommentsAfter(commaToken)[0];
              const styleType = comment && comment.type === "Block" && astUtils$2e.isTokenOnSameLine(commaToken, comment) ? style : "between";
              context.report({
                node: reportItem,
                loc: commaToken.loc,
                messageId: "unexpectedLineBeforeAndAfterComma",
                fix: getFixerFunction(styleType, previousItemToken, commaToken, currentItemToken)
              });
            } else if (style === "first" && !astUtils$2e.isTokenOnSameLine(commaToken, currentItemToken)) {
              context.report({
                node: reportItem,
                loc: commaToken.loc,
                messageId: "expectedCommaFirst",
                fix: getFixerFunction(style, previousItemToken, commaToken, currentItemToken)
              });
            } else if (style === "last" && astUtils$2e.isTokenOnSameLine(commaToken, currentItemToken)) {
              context.report({
                node: reportItem,
                loc: commaToken.loc,
                messageId: "expectedCommaLast",
                fix: getFixerFunction(style, previousItemToken, commaToken, currentItemToken)
              });
            }
          }
          function validateComma(node, property) {
            const items = node[property], arrayLiteral = node.type === "ArrayExpression" || node.type === "ArrayPattern";
            if (items.length > 1 || arrayLiteral) {
              let previousItemToken = sourceCode.getFirstToken(node);
              items.forEach(item => {
                const commaToken = item ? sourceCode.getTokenBefore(item) : previousItemToken, currentItemToken = item ? sourceCode.getFirstToken(item) : sourceCode.getTokenAfter(commaToken), reportItem = item || currentItemToken;
                if (astUtils$2e.isCommaToken(commaToken)) {
                  validateCommaItemSpacing(previousItemToken, commaToken, currentItemToken, reportItem);
                }
                if (item) {
                  const tokenAfterItem = sourceCode.getTokenAfter(item, astUtils$2e.isNotClosingParenToken);
                  previousItemToken = tokenAfterItem ? sourceCode.getTokenBefore(tokenAfterItem) : sourceCode.ast.tokens[sourceCode.ast.tokens.length - 1];
                } else {
                  previousItemToken = currentItemToken;
                }
              });
              if (arrayLiteral) {
                const lastToken = sourceCode.getLastToken(node), nextToLastToken = sourceCode.getTokenBefore(lastToken);
                if (astUtils$2e.isCommaToken(nextToLastToken)) {
                  validateCommaItemSpacing(sourceCode.getTokenBefore(nextToLastToken), nextToLastToken, lastToken, lastToken);
                }
              }
            }
          }
          const nodes = {};
          if (!exceptions.VariableDeclaration) {
            nodes.VariableDeclaration = function (node) {
              validateComma(node, "declarations");
            };
          }
          if (!exceptions.ObjectExpression) {
            nodes.ObjectExpression = function (node) {
              validateComma(node, "properties");
            };
          }
          if (!exceptions.ObjectPattern) {
            nodes.ObjectPattern = function (node) {
              validateComma(node, "properties");
            };
          }
          if (!exceptions.ArrayExpression) {
            nodes.ArrayExpression = function (node) {
              validateComma(node, "elements");
            };
          }
          if (!exceptions.ArrayPattern) {
            nodes.ArrayPattern = function (node) {
              validateComma(node, "elements");
            };
          }
          if (!exceptions.FunctionDeclaration) {
            nodes.FunctionDeclaration = function (node) {
              validateComma(node, "params");
            };
          }
          if (!exceptions.FunctionExpression) {
            nodes.FunctionExpression = function (node) {
              validateComma(node, "params");
            };
          }
          if (!exceptions.ArrowFunctionExpression) {
            nodes.ArrowFunctionExpression = function (node) {
              validateComma(node, "params");
            };
          }
          if (!exceptions.CallExpression) {
            nodes.CallExpression = function (node) {
              validateComma(node, "arguments");
            };
          }
          if (!exceptions.ImportDeclaration) {
            nodes.ImportDeclaration = function (node) {
              validateComma(node, "specifiers");
            };
          }
          if (!exceptions.NewExpression) {
            nodes.NewExpression = function (node) {
              validateComma(node, "arguments");
            };
          }
          return nodes;
        }
      };
      var _commaStyle = exports$4o;

      var exports$4n = {};

      function upperCaseFirst$5(string) {
        if (string.length <= 1) {
          return string.toUpperCase();
        }

        return string[0].toUpperCase() + string.slice(1);
      }

      exports$4n = {
        upperCaseFirst: upperCaseFirst$5
      };
      var _stringUtils = exports$4n;

      var exports$4m = {};
      const astUtils$2d = _astUtils;
      const {upperCaseFirst: upperCaseFirst$4} = _stringUtils;
      exports$4m = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum cyclomatic complexity allowed in a program",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/complexity"
          },
          schema: [{
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    maximum: {
                      type: "integer",
                      minimum: 0
                    },
                    max: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { complex: "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}." }
        },
        create(context) {
          const option = context.options[0];
          let THRESHOLD = 20;
          if (typeof option === "object" && (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))) {
            THRESHOLD = option.maximum || option.max;
          } else if (typeof option === "number") {
            THRESHOLD = option;
          }
          const fns = [];
          function startFunction() {
            fns.push(1);
          }
          function endFunction(node) {
            const name = upperCaseFirst$4(astUtils$2d.getFunctionNameWithKind(node));
            const complexity = fns.pop();
            if (complexity > THRESHOLD) {
              context.report({
                node,
                messageId: "complex",
                data: {
                  name,
                  complexity,
                  max: THRESHOLD
                }
              });
            }
          }
          function increaseComplexity() {
            if (fns.length) {
              fns[fns.length - 1]++;
            }
          }
          function increaseSwitchComplexity(node) {
            if (node.test) {
              increaseComplexity();
            }
          }
          return {
            FunctionDeclaration: startFunction,
            FunctionExpression: startFunction,
            ArrowFunctionExpression: startFunction,
            "FunctionDeclaration:exit": endFunction,
            "FunctionExpression:exit": endFunction,
            "ArrowFunctionExpression:exit": endFunction,
            CatchClause: increaseComplexity,
            ConditionalExpression: increaseComplexity,
            LogicalExpression: increaseComplexity,
            ForStatement: increaseComplexity,
            ForInStatement: increaseComplexity,
            ForOfStatement: increaseComplexity,
            IfStatement: increaseComplexity,
            SwitchCase: increaseSwitchComplexity,
            WhileStatement: increaseComplexity,
            DoWhileStatement: increaseComplexity,
            AssignmentExpression(node) {
              if (astUtils$2d.isLogicalAssignmentOperator(node.operator)) {
                increaseComplexity();
              }
            }
          };
        }
      };
      var _complexity = exports$4m;

      var exports$4l = {};
      const astUtils$2c = _astUtils;
      exports$4l = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing inside computed property brackets",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/computed-property-spacing"
          },
          fixable: "whitespace",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                enforceForClassMembers: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            unexpectedSpaceBefore: "There should be no space before '{{tokenValue}}'.",
            unexpectedSpaceAfter: "There should be no space after '{{tokenValue}}'.",
            missingSpaceBefore: "A space is required before '{{tokenValue}}'.",
            missingSpaceAfter: "A space is required after '{{tokenValue}}'."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const propertyNameMustBeSpaced = context.options[0] === "always";
          const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;
          function reportNoBeginningSpace(node, token, tokenAfter) {
            context.report({
              node,
              loc: {
                start: token.loc.end,
                end: tokenAfter.loc.start
              },
              messageId: "unexpectedSpaceAfter",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.removeRange([
                  token.range[1],
                  tokenAfter.range[0]
                ]);
              }
            });
          }
          function reportNoEndingSpace(node, token, tokenBefore) {
            context.report({
              node,
              loc: {
                start: tokenBefore.loc.end,
                end: token.loc.start
              },
              messageId: "unexpectedSpaceBefore",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.removeRange([
                  tokenBefore.range[1],
                  token.range[0]
                ]);
              }
            });
          }
          function reportRequiredBeginningSpace(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "missingSpaceAfter",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.insertTextAfter(token, " ");
              }
            });
          }
          function reportRequiredEndingSpace(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "missingSpaceBefore",
              data: { tokenValue: token.value },
              fix(fixer) {
                return fixer.insertTextBefore(token, " ");
              }
            });
          }
          function checkSpacing(propertyName) {
            return function (node) {
              if (!node.computed) {
                return;
              }
              const property = node[propertyName];
              const before = sourceCode.getTokenBefore(property, astUtils$2c.isOpeningBracketToken), first = sourceCode.getTokenAfter(before, { includeComments: true }), after = sourceCode.getTokenAfter(property, astUtils$2c.isClosingBracketToken), last = sourceCode.getTokenBefore(after, { includeComments: true });
              if (astUtils$2c.isTokenOnSameLine(before, first)) {
                if (propertyNameMustBeSpaced) {
                  if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils$2c.isTokenOnSameLine(before, first)) {
                    reportRequiredBeginningSpace(node, before);
                  }
                } else {
                  if (sourceCode.isSpaceBetweenTokens(before, first)) {
                    reportNoBeginningSpace(node, before, first);
                  }
                }
              }
              if (astUtils$2c.isTokenOnSameLine(last, after)) {
                if (propertyNameMustBeSpaced) {
                  if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils$2c.isTokenOnSameLine(last, after)) {
                    reportRequiredEndingSpace(node, after);
                  }
                } else {
                  if (sourceCode.isSpaceBetweenTokens(last, after)) {
                    reportNoEndingSpace(node, after, last);
                  }
                }
              }
            };
          }
          const listeners = {
            Property: checkSpacing("key"),
            MemberExpression: checkSpacing("property")
          };
          if (enforceForClassMembers) {
            listeners.MethodDefinition = checkSpacing("key");
          }
          return listeners;
        }
      };
      var _computedPropertySpacing = exports$4l;

      var exports$4k = {};
      function isReachable$3(segment) {
        return segment.reachable;
      }
      function isConstructorFunction$1(node) {
        return node.type === "FunctionExpression" && node.parent.type === "MethodDefinition" && node.parent.kind === "constructor";
      }
      function isPossibleConstructor(node) {
        if (!node) {
          return false;
        }
        switch (node.type) {
        case "ClassExpression":
        case "FunctionExpression":
        case "ThisExpression":
        case "MemberExpression":
        case "CallExpression":
        case "NewExpression":
        case "ChainExpression":
        case "YieldExpression":
        case "TaggedTemplateExpression":
        case "MetaProperty":
          return true;
        case "Identifier":
          return node.name !== "undefined";
        case "AssignmentExpression":
          if ([
              "=",
              "&&="
            ].includes(node.operator)) {
            return isPossibleConstructor(node.right);
          }
          if ([
              "||=",
              "??="
            ].includes(node.operator)) {
            return isPossibleConstructor(node.left) || isPossibleConstructor(node.right);
          }
          return false;
        case "LogicalExpression":
          if (node.operator === "&&") {
            return isPossibleConstructor(node.right);
          }
          return isPossibleConstructor(node.left) || isPossibleConstructor(node.right);
        case "ConditionalExpression":
          return isPossibleConstructor(node.alternate) || isPossibleConstructor(node.consequent);
        case "SequenceExpression": {
            const lastExpression = node.expressions[node.expressions.length - 1];
            return isPossibleConstructor(lastExpression);
          }
        default:
          return false;
        }
      }
      exports$4k = {
        meta: {
          type: "problem",
          docs: {
            description: "require `super()` calls in constructors",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/constructor-super"
          },
          schema: [],
          messages: {
            missingSome: "Lacked a call of 'super()' in some code paths.",
            missingAll: "Expected to call 'super()'.",
            duplicate: "Unexpected duplicate 'super()'.",
            badSuper: "Unexpected 'super()' because 'super' is not a constructor.",
            unexpected: "Unexpected 'super()'."
          }
        },
        create(context) {
          let funcInfo = null;
          let segInfoMap = Object.create(null);
          function isCalledInSomePath(segment) {
            return segment.reachable && segInfoMap[segment.id].calledInSomePaths;
          }
          function isCalledInEveryPath(segment) {
            if (segment.nextSegments.length === 1 && segment.nextSegments[0].isLoopedPrevSegment(segment)) {
              return true;
            }
            return segment.reachable && segInfoMap[segment.id].calledInEveryPaths;
          }
          return {
            onCodePathStart(codePath, node) {
              if (isConstructorFunction$1(node)) {
                const classNode = node.parent.parent.parent;
                const superClass = classNode.superClass;
                funcInfo = {
                  upper: funcInfo,
                  isConstructor: true,
                  hasExtends: Boolean(superClass),
                  superIsConstructor: isPossibleConstructor(superClass),
                  codePath
                };
              } else {
                funcInfo = {
                  upper: funcInfo,
                  isConstructor: false,
                  hasExtends: false,
                  superIsConstructor: false,
                  codePath
                };
              }
            },
            onCodePathEnd(codePath, node) {
              const hasExtends = funcInfo.hasExtends;
              funcInfo = funcInfo.upper;
              if (!hasExtends) {
                return;
              }
              const segments = codePath.returnedSegments;
              const calledInEveryPaths = segments.every(isCalledInEveryPath);
              const calledInSomePaths = segments.some(isCalledInSomePath);
              if (!calledInEveryPaths) {
                context.report({
                  messageId: calledInSomePaths ? "missingSome" : "missingAll",
                  node: node.parent
                });
              }
            },
            onCodePathSegmentStart(segment) {
              if (!(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends)) {
                return;
              }
              const info = segInfoMap[segment.id] = {
                calledInSomePaths: false,
                calledInEveryPaths: false,
                validNodes: []
              };
              const prevSegments = segment.prevSegments;
              if (prevSegments.length > 0) {
                info.calledInSomePaths = prevSegments.some(isCalledInSomePath);
                info.calledInEveryPaths = prevSegments.every(isCalledInEveryPath);
              }
            },
            onCodePathSegmentLoop(fromSegment, toSegment) {
              if (!(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends)) {
                return;
              }
              const isRealLoop = toSegment.prevSegments.length >= 2;
              funcInfo.codePath.traverseSegments({
                first: toSegment,
                last: fromSegment
              }, segment => {
                const info = segInfoMap[segment.id];
                const prevSegments = segment.prevSegments;
                info.calledInSomePaths = prevSegments.some(isCalledInSomePath);
                info.calledInEveryPaths = prevSegments.every(isCalledInEveryPath);
                if (info.calledInSomePaths || isRealLoop) {
                  const nodes = info.validNodes;
                  info.validNodes = [];
                  for (let i = 0; i < nodes.length; ++i) {
                    const node = nodes[i];
                    context.report({
                      messageId: "duplicate",
                      node
                    });
                  }
                }
              });
            },
            "CallExpression:exit"(node) {
              if (!(funcInfo && funcInfo.isConstructor)) {
                return;
              }
              if (node.callee.type !== "Super") {
                return;
              }
              if (funcInfo.hasExtends) {
                const segments = funcInfo.codePath.currentSegments;
                let duplicate = false;
                let info = null;
                for (let i = 0; i < segments.length; ++i) {
                  const segment = segments[i];
                  if (segment.reachable) {
                    info = segInfoMap[segment.id];
                    duplicate = duplicate || info.calledInSomePaths;
                    info.calledInSomePaths = info.calledInEveryPaths = true;
                  }
                }
                if (info) {
                  if (duplicate) {
                    context.report({
                      messageId: "duplicate",
                      node
                    });
                  } else if (!funcInfo.superIsConstructor) {
                    context.report({
                      messageId: "badSuper",
                      node
                    });
                  } else {
                    info.validNodes.push(node);
                  }
                }
              } else if (funcInfo.codePath.currentSegments.some(isReachable$3)) {
                context.report({
                  messageId: "unexpected",
                  node
                });
              }
            },
            ReturnStatement(node) {
              if (!(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends)) {
                return;
              }
              if (!node.argument) {
                return;
              }
              const segments = funcInfo.codePath.currentSegments;
              for (let i = 0; i < segments.length; ++i) {
                const segment = segments[i];
                if (segment.reachable) {
                  const info = segInfoMap[segment.id];
                  info.calledInSomePaths = info.calledInEveryPaths = true;
                }
              }
            },
            "Program:exit"() {
              segInfoMap = Object.create(null);
            }
          };
        }
      };
      var _constructorSuper = exports$4k;

      var exports$4j = {};
      const DEFAULT_COMMENT_PATTERN = /^no default$/iu;
      exports$4j = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `default` cases in `switch` statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/default-case"
          },
          schema: [{
              type: "object",
              properties: { commentPattern: { type: "string" } },
              additionalProperties: false
            }],
          messages: { missingDefaultCase: "Expected a default case." }
        },
        create(context) {
          const options = context.options[0] || {};
          const commentPattern = options.commentPattern ? new RegExp(options.commentPattern, "u") : DEFAULT_COMMENT_PATTERN;
          const sourceCode = context.getSourceCode();
          function last(collection) {
            return collection[collection.length - 1];
          }
          return {
            SwitchStatement(node) {
              if (!node.cases.length) {
                return;
              }
              const hasDefault = node.cases.some(v => v.test === null);
              if (!hasDefault) {
                let comment;
                const lastCase = last(node.cases);
                const comments = sourceCode.getCommentsAfter(lastCase);
                if (comments.length) {
                  comment = last(comments);
                }
                if (!comment || !commentPattern.test(comment.value.trim())) {
                  context.report({
                    node,
                    messageId: "missingDefaultCase"
                  });
                }
              }
            }
          };
        }
      };
      var _defaultCase = exports$4j;

      var exports$4i = {};
      const astUtils$2b = _astUtils;
      exports$4i = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent newlines before and after dots",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/dot-location"
          },
          schema: [{
              enum: [
                "object",
                "property"
              ]
            }],
          fixable: "code",
          messages: {
            expectedDotAfterObject: "Expected dot to be on same line as object.",
            expectedDotBeforeProperty: "Expected dot to be on same line as property."
          }
        },
        create(context) {
          const config = context.options[0];
          const onObject = config === "object" || !config;
          const sourceCode = context.getSourceCode();
          function checkDotLocation(node) {
            const property = node.property;
            const dotToken = sourceCode.getTokenBefore(property);
            if (onObject) {
              const tokenBeforeDot = sourceCode.getTokenBefore(dotToken);
              if (!astUtils$2b.isTokenOnSameLine(tokenBeforeDot, dotToken)) {
                context.report({
                  node,
                  loc: dotToken.loc,
                  messageId: "expectedDotAfterObject",
                  *fix(fixer) {
                    if (dotToken.value.startsWith(".") && astUtils$2b.isDecimalIntegerNumericToken(tokenBeforeDot)) {
                      yield fixer.insertTextAfter(tokenBeforeDot, ` ${ dotToken.value }`);
                    } else {
                      yield fixer.insertTextAfter(tokenBeforeDot, dotToken.value);
                    }
                    yield fixer.remove(dotToken);
                  }
                });
              }
            } else if (!astUtils$2b.isTokenOnSameLine(dotToken, property)) {
              context.report({
                node,
                loc: dotToken.loc,
                messageId: "expectedDotBeforeProperty",
                *fix(fixer) {
                  yield fixer.remove(dotToken);
                  yield fixer.insertTextBefore(property, dotToken.value);
                }
              });
            }
          }
          function checkNode(node) {
            if (!node.computed) {
              checkDotLocation(node);
            }
          }
          return { MemberExpression: checkNode };
        }
      };
      var _dotLocation = exports$4i;

      var exports$4h = {};
      exports$4h = [
        "abstract",
        "boolean",
        "break",
        "byte",
        "case",
        "catch",
        "char",
        "class",
        "const",
        "continue",
        "debugger",
        "default",
        "delete",
        "do",
        "double",
        "else",
        "enum",
        "export",
        "extends",
        "false",
        "final",
        "finally",
        "float",
        "for",
        "function",
        "goto",
        "if",
        "implements",
        "import",
        "in",
        "instanceof",
        "int",
        "interface",
        "long",
        "native",
        "new",
        "null",
        "package",
        "private",
        "protected",
        "public",
        "return",
        "short",
        "static",
        "super",
        "switch",
        "synchronized",
        "this",
        "throw",
        "throws",
        "transient",
        "true",
        "try",
        "typeof",
        "var",
        "void",
        "volatile",
        "while",
        "with"
      ];
      var _keywords = exports$4h;

      var exports$4g = {};
      const astUtils$2a = _astUtils;
      const keywords$2 = _keywords;
      const validIdentifier = /^[a-zA-Z_$][a-zA-Z0-9_$]*$/u;
      const literalTypesToCheck = new Set([
        "string",
        "boolean"
      ]);
      exports$4g = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce dot notation whenever possible",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/dot-notation"
          },
          schema: [{
              type: "object",
              properties: {
                allowKeywords: {
                  type: "boolean",
                  default: true
                },
                allowPattern: {
                  type: "string",
                  default: ""
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: {
            useDot: "[{{key}}] is better written in dot notation.",
            useBrackets: ".{{key}} is a syntax error."
          }
        },
        create(context) {
          const options = context.options[0] || {};
          const allowKeywords = options.allowKeywords === void 0 || options.allowKeywords;
          const sourceCode = context.getSourceCode();
          let allowPattern;
          if (options.allowPattern) {
            allowPattern = new RegExp(options.allowPattern, "u");
          }
          function checkComputedProperty(node, value) {
            if (validIdentifier.test(value) && (allowKeywords || keywords$2.indexOf(String(value)) === -1) && !(allowPattern && allowPattern.test(value))) {
              const formattedValue = node.property.type === "Literal" ? JSON.stringify(value) : `\`${ value }\``;
              context.report({
                node: node.property,
                messageId: "useDot",
                data: { key: formattedValue },
                *fix(fixer) {
                  const leftBracket = sourceCode.getTokenAfter(node.object, astUtils$2a.isOpeningBracketToken);
                  const rightBracket = sourceCode.getLastToken(node);
                  const nextToken = sourceCode.getTokenAfter(node);
                  if (sourceCode.commentsExistBetween(leftBracket, rightBracket)) {
                    return;
                  }
                  if (!node.optional) {
                    yield fixer.insertTextBefore(leftBracket, astUtils$2a.isDecimalInteger(node.object) ? " ." : ".");
                  }
                  yield fixer.replaceTextRange([
                    leftBracket.range[0],
                    rightBracket.range[1]
                  ], value);
                  if (nextToken && rightBracket.range[1] === nextToken.range[0] && !astUtils$2a.canTokensBeAdjacent(String(value), nextToken)) {
                    yield fixer.insertTextAfter(node, " ");
                  }
                }
              });
            }
          }
          return {
            MemberExpression(node) {
              if (node.computed && node.property.type === "Literal" && (literalTypesToCheck.has(typeof node.property.value) || astUtils$2a.isNullLiteral(node.property))) {
                checkComputedProperty(node, node.property.value);
              }
              if (node.computed && node.property.type === "TemplateLiteral" && node.property.expressions.length === 0) {
                checkComputedProperty(node, node.property.quasis[0].value.cooked);
              }
              if (!allowKeywords && !node.computed && keywords$2.indexOf(String(node.property.name)) !== -1) {
                context.report({
                  node: node.property,
                  messageId: "useBrackets",
                  data: { key: node.property.name },
                  *fix(fixer) {
                    const dotToken = sourceCode.getTokenBefore(node.property);
                    if (node.object.type === "Identifier" && node.object.name === "let" && !node.optional) {
                      return;
                    }
                    if (sourceCode.commentsExistBetween(dotToken, node.property)) {
                      return;
                    }
                    if (!node.optional) {
                      yield fixer.remove(dotToken);
                    }
                    yield fixer.replaceText(node.property, `["${ node.property.name }"]`);
                  }
                });
              }
            }
          };
        }
      };
      var _dotNotation = exports$4g;

      var exports$4f = {};
      exports$4f = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow newline at the end of files",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/eol-last"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never",
                "unix",
                "windows"
              ]
            }],
          messages: {
            missing: "Newline required at end of file but not found.",
            unexpected: "Newline not allowed at end of file."
          }
        },
        create(context) {
          return {
            Program: function checkBadEOF(node) {
              const sourceCode = context.getSourceCode(), src = sourceCode.getText(), lastLine = sourceCode.lines[sourceCode.lines.length - 1], location = {
                  column: lastLine.length,
                  line: sourceCode.lines.length
                }, LF = "\n", CRLF = `\r${ LF }`, endsWithNewline = src.endsWith(LF);
              if (!src.length) {
                return;
              }
              let mode = context.options[0] || "always", appendCRLF = false;
              if (mode === "unix") {
                mode = "always";
              }
              if (mode === "windows") {
                mode = "always";
                appendCRLF = true;
              }
              if (mode === "always" && !endsWithNewline) {
                context.report({
                  node,
                  loc: location,
                  messageId: "missing",
                  fix(fixer) {
                    return fixer.insertTextAfterRange([
                      0,
                      src.length
                    ], appendCRLF ? CRLF : LF);
                  }
                });
              } else if (mode === "never" && endsWithNewline) {
                context.report({
                  node,
                  loc: location,
                  messageId: "unexpected",
                  fix(fixer) {
                    const finalEOLs = /(?:\r?\n)+$/u, match = finalEOLs.exec(sourceCode.text), start = match.index, end = sourceCode.text.length;
                    return fixer.replaceTextRange([
                      start,
                      end
                    ], "");
                  }
                });
              }
            }
          };
        }
      };
      var _eolLast = exports$4f;

      var exports$4e = {};
      const astUtils$29 = _astUtils;
      exports$4e = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require the use of `===` and `!==`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/eqeqeq"
          },
          schema: {
            anyOf: [
              {
                type: "array",
                items: [
                  { enum: ["always"] },
                  {
                    type: "object",
                    properties: {
                      null: {
                        enum: [
                          "always",
                          "never",
                          "ignore"
                        ]
                      }
                    },
                    additionalProperties: false
                  }
                ],
                additionalItems: false
              },
              {
                type: "array",
                items: [{
                    enum: [
                      "smart",
                      "allow-null"
                    ]
                  }],
                additionalItems: false
              }
            ]
          },
          fixable: "code",
          messages: { unexpected: "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'." }
        },
        create(context) {
          const config = context.options[0] || "always";
          const options = context.options[1] || {};
          const sourceCode = context.getSourceCode();
          const nullOption = config === "always" ? options.null || "always" : "ignore";
          const enforceRuleForNull = nullOption === "always";
          const enforceInverseRuleForNull = nullOption === "never";
          function isTypeOf(node) {
            return node.type === "UnaryExpression" && node.operator === "typeof";
          }
          function isTypeOfBinary(node) {
            return isTypeOf(node.left) || isTypeOf(node.right);
          }
          function areLiteralsAndSameType(node) {
            return node.left.type === "Literal" && node.right.type === "Literal" && typeof node.left.value === typeof node.right.value;
          }
          function isNullCheck(node) {
            return astUtils$29.isNullLiteral(node.right) || astUtils$29.isNullLiteral(node.left);
          }
          function report(node, expectedOperator) {
            const operatorToken = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);
            context.report({
              node,
              loc: operatorToken.loc,
              messageId: "unexpected",
              data: {
                expectedOperator,
                actualOperator: node.operator
              },
              fix(fixer) {
                if (isTypeOfBinary(node) || areLiteralsAndSameType(node)) {
                  return fixer.replaceText(operatorToken, expectedOperator);
                }
                return null;
              }
            });
          }
          return {
            BinaryExpression(node) {
              const isNull = isNullCheck(node);
              if (node.operator !== "==" && node.operator !== "!=") {
                if (enforceInverseRuleForNull && isNull) {
                  report(node, node.operator.slice(0, -1));
                }
                return;
              }
              if (config === "smart" && (isTypeOfBinary(node) || areLiteralsAndSameType(node) || isNull)) {
                return;
              }
              if (!enforceRuleForNull && isNull) {
                return;
              }
              report(node, `${ node.operator }=`);
            }
          };
        }
      };
      var _eqeqeq = exports$4e;

      var exports$4d = {};
      const astUtils$28 = _astUtils;
      exports$4d = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow spacing between function identifiers and their invocations",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/func-call-spacing"
          },
          fixable: "whitespace",
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{ enum: ["never"] }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  { enum: ["always"] },
                  {
                    type: "object",
                    properties: { allowNewlines: { type: "boolean" } },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          messages: {
            unexpectedWhitespace: "Unexpected whitespace between function name and paren.",
            unexpectedNewline: "Unexpected newline between function name and paren.",
            missing: "Missing space between function name and paren."
          }
        },
        create(context) {
          const never = context.options[0] !== "always";
          const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;
          const sourceCode = context.getSourceCode();
          const text = sourceCode.getText();
          function checkSpacing(node, leftToken, rightToken) {
            const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\/\*.*?\*\//gu, "");
            const hasWhitespace = /\s/u.test(textBetweenTokens);
            const hasNewline = hasWhitespace && astUtils$28.LINEBREAK_MATCHER.test(textBetweenTokens);
            if (never && hasWhitespace) {
              context.report({
                node,
                loc: {
                  start: leftToken.loc.end,
                  end: {
                    line: rightToken.loc.start.line,
                    column: rightToken.loc.start.column - 1
                  }
                },
                messageId: "unexpectedWhitespace",
                fix(fixer) {
                  if (sourceCode.commentsExistBetween(leftToken, rightToken)) {
                    return null;
                  }
                  if (node.optional) {
                    return fixer.replaceTextRange([
                      leftToken.range[1],
                      rightToken.range[0]
                    ], "?.");
                  }
                  if (hasNewline) {
                    return null;
                  }
                  return fixer.removeRange([
                    leftToken.range[1],
                    rightToken.range[0]
                  ]);
                }
              });
            } else if (!never && !hasWhitespace) {
              context.report({
                node,
                loc: {
                  start: {
                    line: leftToken.loc.end.line,
                    column: leftToken.loc.end.column - 1
                  },
                  end: rightToken.loc.start
                },
                messageId: "missing",
                fix(fixer) {
                  if (node.optional) {
                    return null;
                  }
                  return fixer.insertTextBefore(rightToken, " ");
                }
              });
            } else if (!never && !allowNewlines && hasNewline) {
              context.report({
                node,
                loc: {
                  start: leftToken.loc.end,
                  end: rightToken.loc.start
                },
                messageId: "unexpectedNewline",
                fix(fixer) {
                  if (!node.optional) {
                    return null;
                  }
                  if (sourceCode.commentsExistBetween(leftToken, rightToken)) {
                    return null;
                  }
                  const range = [
                    leftToken.range[1],
                    rightToken.range[0]
                  ];
                  const qdToken = sourceCode.getTokenAfter(leftToken);
                  if (qdToken.range[0] === leftToken.range[1]) {
                    return fixer.replaceTextRange(range, "?. ");
                  }
                  if (qdToken.range[1] === rightToken.range[0]) {
                    return fixer.replaceTextRange(range, " ?.");
                  }
                  return fixer.replaceTextRange(range, " ?. ");
                }
              });
            }
          }
          return {
            "CallExpression, NewExpression"(node) {
              const lastToken = sourceCode.getLastToken(node);
              const lastCalleeToken = sourceCode.getLastToken(node.callee);
              const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils$28.isOpeningParenToken);
              const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils$28.isNotQuestionDotToken);
              if (!(parenToken && parenToken.range[1] < node.range[1])) {
                return;
              }
              checkSpacing(node, prevToken, parenToken);
            },
            ImportExpression(node) {
              const leftToken = sourceCode.getFirstToken(node);
              const rightToken = sourceCode.getTokenAfter(leftToken);
              checkSpacing(node, leftToken, rightToken);
            }
          };
        }
      };
      var _funcCallSpacing = exports$4d;

      var exports$4c = {};
      const ACCEPTABLE_PARENTS = [
        "AssignmentExpression",
        "VariableDeclarator",
        "MemberExpression",
        "ExpressionStatement",
        "CallExpression",
        "ConditionalExpression",
        "Program",
        "VariableDeclaration",
        "ChainExpression"
      ];
      function findReference$1(scope, node) {
        const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);
        if (references.length === 1) {
          return references[0];
        }
        return null;
      }
      function isShadowed$2(scope, node) {
        const reference = findReference$1(scope, node);
        return reference && reference.resolved && reference.resolved.defs.length > 0;
      }
      exports$4c = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "require `require()` calls to be placed at top-level module scope",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/global-require"
          },
          schema: [],
          messages: { unexpected: "Unexpected require()." }
        },
        create(context) {
          return {
            CallExpression(node) {
              const currentScope = context.getScope();
              if (node.callee.name === "require" && !isShadowed$2(currentScope, node.callee)) {
                const isGoodRequire = context.getAncestors().every(parent => ACCEPTABLE_PARENTS.indexOf(parent.type) > -1);
                if (!isGoodRequire) {
                  context.report({
                    node,
                    messageId: "unexpected"
                  });
                }
              }
            }
          };
        }
      };
      var _globalRequire = exports$4c;

      var exports$4b = {};
      exports$4b = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "require error handling in callbacks",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/handle-callback-err"
          },
          schema: [{ type: "string" }],
          messages: { expected: "Expected error to be handled." }
        },
        create(context) {
          const errorArgument = context.options[0] || "err";
          function isPattern(stringToCheck) {
            const firstChar = stringToCheck[0];
            return firstChar === "^";
          }
          function matchesConfiguredErrorName(name) {
            if (isPattern(errorArgument)) {
              const regexp = new RegExp(errorArgument, "u");
              return regexp.test(name);
            }
            return name === errorArgument;
          }
          function getParameters(scope) {
            return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === "Parameter");
          }
          function checkForError(node) {
            const scope = context.getScope(), parameters = getParameters(scope), firstParameter = parameters[0];
            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {
              if (firstParameter.references.length === 0) {
                context.report({
                  node,
                  messageId: "expected"
                });
              }
            }
          }
          return {
            FunctionDeclaration: checkForError,
            FunctionExpression: checkForError,
            ArrowFunctionExpression: checkForError
          };
        }
      };
      var _handleCallbackErr = exports$4b;

      var exports$4a = {};
      function isAssignmentTarget$1(node) {
        const parent = node.parent;
        return parent.type === "AssignmentExpression" && parent.left === node || parent.type === "ArrayPattern" || parent.type === "RestElement" || parent.type === "Property" && parent.value === node && parent.parent.type === "ObjectPattern" || parent.type === "AssignmentPattern" && parent.left === node;
      }
      function isRenamedImport$1(node) {
        const parent = node.parent;
        return parent.type === "ImportSpecifier" && parent.imported !== parent.local && parent.imported === node || parent.type === "ExportSpecifier" && parent.parent.source && parent.local !== parent.exported && parent.local === node;
      }
      function isRenamedInDestructuring$1(node) {
        const parent = node.parent;
        return !parent.computed && parent.type === "Property" && parent.parent.type === "ObjectPattern" && parent.value !== node && parent.key === node;
      }
      function isShorthandPropertyDefinition$1(node) {
        const parent = node.parent;
        return parent.type === "Property" && parent.parent.type === "ObjectExpression" && parent.shorthand;
      }
      exports$4a = {
        meta: {
          deprecated: true,
          replacedBy: ["id-denylist"],
          type: "suggestion",
          docs: {
            description: "disallow specified identifiers",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/id-blacklist"
          },
          schema: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true
          },
          messages: { restricted: "Identifier '{{name}}' is restricted." }
        },
        create(context) {
          const denyList = new Set(context.options);
          const reportedNodes = new Set();
          let globalScope;
          function isRestricted(name) {
            return denyList.has(name);
          }
          function isReferenceToGlobalVariable(node) {
            const variable = globalScope.set.get(node.name);
            return variable && variable.defs.length === 0 && variable.references.some(ref => ref.identifier === node);
          }
          function shouldCheck(node) {
            const parent = node.parent;
            if (parent.type === "MemberExpression" && parent.property === node && !parent.computed) {
              return isAssignmentTarget$1(parent);
            }
            return parent.type !== "CallExpression" && parent.type !== "NewExpression" && !isRenamedImport$1(node) && !isRenamedInDestructuring$1(node) && !(isReferenceToGlobalVariable(node) && !isShorthandPropertyDefinition$1(node));
          }
          function report(node) {
            if (!reportedNodes.has(node)) {
              context.report({
                node,
                messageId: "restricted",
                data: { name: node.name }
              });
              reportedNodes.add(node);
            }
          }
          return {
            Program() {
              globalScope = context.getScope();
            },
            Identifier(node) {
              if (isRestricted(node.name) && shouldCheck(node)) {
                report(node);
              }
            }
          };
        }
      };
      var _idBlacklist = exports$4a;

      var _functionalRedBlackTree = "default" in _functionalRedBlackTree2 ? exports$1$Z : _functionalRedBlackTree2;
      var exports$49 = {};
      const createTree = _functionalRedBlackTree;
      const astUtils$27 = _astUtils;
      const KNOWN_NODES = new Set([
        "AssignmentExpression",
        "AssignmentPattern",
        "ArrayExpression",
        "ArrayPattern",
        "ArrowFunctionExpression",
        "AwaitExpression",
        "BlockStatement",
        "BinaryExpression",
        "BreakStatement",
        "CallExpression",
        "CatchClause",
        "ChainExpression",
        "ClassBody",
        "ClassDeclaration",
        "ClassExpression",
        "ConditionalExpression",
        "ContinueStatement",
        "DoWhileStatement",
        "DebuggerStatement",
        "EmptyStatement",
        "ExperimentalRestProperty",
        "ExperimentalSpreadProperty",
        "ExpressionStatement",
        "ForStatement",
        "ForInStatement",
        "ForOfStatement",
        "FunctionDeclaration",
        "FunctionExpression",
        "Identifier",
        "IfStatement",
        "Literal",
        "LabeledStatement",
        "LogicalExpression",
        "MemberExpression",
        "MetaProperty",
        "MethodDefinition",
        "NewExpression",
        "ObjectExpression",
        "ObjectPattern",
        "Program",
        "Property",
        "RestElement",
        "ReturnStatement",
        "SequenceExpression",
        "SpreadElement",
        "Super",
        "SwitchCase",
        "SwitchStatement",
        "TaggedTemplateExpression",
        "TemplateElement",
        "TemplateLiteral",
        "ThisExpression",
        "ThrowStatement",
        "TryStatement",
        "UnaryExpression",
        "UpdateExpression",
        "VariableDeclaration",
        "VariableDeclarator",
        "WhileStatement",
        "WithStatement",
        "YieldExpression",
        "JSXFragment",
        "JSXOpeningFragment",
        "JSXClosingFragment",
        "JSXIdentifier",
        "JSXNamespacedName",
        "JSXMemberExpression",
        "JSXEmptyExpression",
        "JSXExpressionContainer",
        "JSXElement",
        "JSXClosingElement",
        "JSXOpeningElement",
        "JSXAttribute",
        "JSXSpreadAttribute",
        "JSXText",
        "ExportDefaultDeclaration",
        "ExportNamedDeclaration",
        "ExportAllDeclaration",
        "ExportSpecifier",
        "ImportDeclaration",
        "ImportSpecifier",
        "ImportDefaultSpecifier",
        "ImportNamespaceSpecifier",
        "ImportExpression"
      ]);
      class BinarySearchTree {
        constructor() {
          this._rbTree = createTree();
        }
        insert(key, value) {
          const iterator = this._rbTree.find(key);
          if (iterator.valid) {
            this._rbTree = iterator.update(value);
          } else {
            this._rbTree = this._rbTree.insert(key, value);
          }
        }
        findLe(key) {
          const iterator = this._rbTree.le(key);
          return iterator && {
            key: iterator.key,
            value: iterator.value
          };
        }
        deleteRange(start, end) {
          if (start === end) {
            return;
          }
          const iterator = this._rbTree.ge(start);
          while (iterator.valid && iterator.key < end) {
            this._rbTree = this._rbTree.remove(iterator.key);
            iterator.next();
          }
        }
      }
      class TokenInfo {
        constructor(sourceCode) {
          this.sourceCode = sourceCode;
          this.firstTokensByLineNumber = sourceCode.tokensAndComments.reduce((map, token) => {
            if (!map.has(token.loc.start.line)) {
              map.set(token.loc.start.line, token);
            }
            if (!map.has(token.loc.end.line) && sourceCode.text.slice(token.range[1] - token.loc.end.column, token.range[1]).trim()) {
              map.set(token.loc.end.line, token);
            }
            return map;
          }, new Map());
        }
        getFirstTokenOfLine(token) {
          return this.firstTokensByLineNumber.get(token.loc.start.line);
        }
        isFirstTokenOfLine(token) {
          return this.getFirstTokenOfLine(token) === token;
        }
        getTokenIndent(token) {
          return this.sourceCode.text.slice(token.range[0] - token.loc.start.column, token.range[0]);
        }
      }
      class OffsetStorage {
        constructor(tokenInfo, indentSize, indentType) {
          this._tokenInfo = tokenInfo;
          this._indentSize = indentSize;
          this._indentType = indentType;
          this._tree = new BinarySearchTree();
          this._tree.insert(0, {
            offset: 0,
            from: null,
            force: false
          });
          this._lockedFirstTokens = new WeakMap();
          this._desiredIndentCache = new WeakMap();
          this._ignoredTokens = new WeakSet();
        }
        _getOffsetDescriptor(token) {
          return this._tree.findLe(token.range[0]).value;
        }
        matchOffsetOf(baseToken, offsetToken) {
          this._lockedFirstTokens.set(offsetToken, baseToken);
        }
        setDesiredOffset(token, fromToken, offset) {
          return this.setDesiredOffsets(token.range, fromToken, offset);
        }
        setDesiredOffsets(range, fromToken, offset, force) {
          const descriptorToInsert = {
            offset,
            from: fromToken,
            force
          };
          const descriptorAfterRange = this._tree.findLe(range[1]).value;
          const fromTokenIsInRange = fromToken && fromToken.range[0] >= range[0] && fromToken.range[1] <= range[1];
          const fromTokenDescriptor = fromTokenIsInRange && this._getOffsetDescriptor(fromToken);
          this._tree.deleteRange(range[0] + 1, range[1]);
          this._tree.insert(range[0], descriptorToInsert);
          if (fromTokenIsInRange) {
            this._tree.insert(fromToken.range[0], fromTokenDescriptor);
            this._tree.insert(fromToken.range[1], descriptorToInsert);
          }
          this._tree.insert(range[1], descriptorAfterRange);
        }
        getDesiredIndent(token) {
          if (!this._desiredIndentCache.has(token)) {
            if (this._ignoredTokens.has(token)) {
              this._desiredIndentCache.set(token, this._tokenInfo.getTokenIndent(token));
            } else if (this._lockedFirstTokens.has(token)) {
              const firstToken = this._lockedFirstTokens.get(token);
              this._desiredIndentCache.set(token, this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(firstToken)) + this._indentType.repeat(firstToken.loc.start.column - this._tokenInfo.getFirstTokenOfLine(firstToken).loc.start.column));
            } else {
              const offsetInfo = this._getOffsetDescriptor(token);
              const offset = offsetInfo.from && offsetInfo.from.loc.start.line === token.loc.start.line && !/^\s*?\n/u.test(token.value) && !offsetInfo.force ? 0 : offsetInfo.offset * this._indentSize;
              this._desiredIndentCache.set(token, (offsetInfo.from ? this.getDesiredIndent(offsetInfo.from) : "") + this._indentType.repeat(offset));
            }
          }
          return this._desiredIndentCache.get(token);
        }
        ignoreToken(token) {
          if (this._tokenInfo.isFirstTokenOfLine(token)) {
            this._ignoredTokens.add(token);
          }
        }
        getFirstDependency(token) {
          return this._getOffsetDescriptor(token).from;
        }
      }
      const ELEMENT_LIST_SCHEMA = {
        oneOf: [
          {
            type: "integer",
            minimum: 0
          },
          {
            enum: [
              "first",
              "off"
            ]
          }
        ]
      };
      exports$49 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent indentation",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/indent"
          },
          fixable: "whitespace",
          schema: [
            {
              oneOf: [
                { enum: ["tab"] },
                {
                  type: "integer",
                  minimum: 0
                }
              ]
            },
            {
              type: "object",
              properties: {
                SwitchCase: {
                  type: "integer",
                  minimum: 0,
                  default: 0
                },
                VariableDeclarator: {
                  oneOf: [
                    ELEMENT_LIST_SCHEMA,
                    {
                      type: "object",
                      properties: {
                        var: ELEMENT_LIST_SCHEMA,
                        let: ELEMENT_LIST_SCHEMA,
                        const: ELEMENT_LIST_SCHEMA
                      },
                      additionalProperties: false
                    }
                  ]
                },
                outerIIFEBody: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    { enum: ["off"] }
                  ]
                },
                MemberExpression: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    { enum: ["off"] }
                  ]
                },
                FunctionDeclaration: {
                  type: "object",
                  properties: {
                    parameters: ELEMENT_LIST_SCHEMA,
                    body: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                },
                FunctionExpression: {
                  type: "object",
                  properties: {
                    parameters: ELEMENT_LIST_SCHEMA,
                    body: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                },
                CallExpression: {
                  type: "object",
                  properties: { arguments: ELEMENT_LIST_SCHEMA },
                  additionalProperties: false
                },
                ArrayExpression: ELEMENT_LIST_SCHEMA,
                ObjectExpression: ELEMENT_LIST_SCHEMA,
                ImportDeclaration: ELEMENT_LIST_SCHEMA,
                flatTernaryExpressions: {
                  type: "boolean",
                  default: false
                },
                offsetTernaryExpressions: {
                  type: "boolean",
                  default: false
                },
                ignoredNodes: {
                  type: "array",
                  items: {
                    type: "string",
                    not: { pattern: ":exit$" }
                  }
                },
                ignoreComments: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: { wrongIndentation: "Expected indentation of {{expected}} but found {{actual}}." }
        },
        create(context) {
          const DEFAULT_VARIABLE_INDENT = 1;
          const DEFAULT_PARAMETER_INDENT = 1;
          const DEFAULT_FUNCTION_BODY_INDENT = 1;
          let indentType = "space";
          let indentSize = 4;
          const options = {
            SwitchCase: 0,
            VariableDeclarator: {
              var: DEFAULT_VARIABLE_INDENT,
              let: DEFAULT_VARIABLE_INDENT,
              const: DEFAULT_VARIABLE_INDENT
            },
            outerIIFEBody: 1,
            FunctionDeclaration: {
              parameters: DEFAULT_PARAMETER_INDENT,
              body: DEFAULT_FUNCTION_BODY_INDENT
            },
            FunctionExpression: {
              parameters: DEFAULT_PARAMETER_INDENT,
              body: DEFAULT_FUNCTION_BODY_INDENT
            },
            CallExpression: { arguments: DEFAULT_PARAMETER_INDENT },
            MemberExpression: 1,
            ArrayExpression: 1,
            ObjectExpression: 1,
            ImportDeclaration: 1,
            flatTernaryExpressions: false,
            ignoredNodes: [],
            ignoreComments: false
          };
          if (context.options.length) {
            if (context.options[0] === "tab") {
              indentSize = 1;
              indentType = "tab";
            } else {
              indentSize = context.options[0];
              indentType = "space";
            }
            if (context.options[1]) {
              Object.assign(options, context.options[1]);
              if (typeof options.VariableDeclarator === "number" || options.VariableDeclarator === "first") {
                options.VariableDeclarator = {
                  var: options.VariableDeclarator,
                  let: options.VariableDeclarator,
                  const: options.VariableDeclarator
                };
              }
            }
          }
          const sourceCode = context.getSourceCode();
          const tokenInfo = new TokenInfo(sourceCode);
          const offsets = new OffsetStorage(tokenInfo, indentSize, indentType === "space" ? " " : "\t");
          const parameterParens = new WeakSet();
          function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {
            const expectedStatement = `${ expectedAmount } ${ indentType }${ expectedAmount === 1 ? "" : "s" }`;
            const foundSpacesWord = `space${ actualSpaces === 1 ? "" : "s" }`;
            const foundTabsWord = `tab${ actualTabs === 1 ? "" : "s" }`;
            let foundStatement;
            if (actualSpaces > 0) {
              foundStatement = indentType === "space" ? actualSpaces : `${ actualSpaces } ${ foundSpacesWord }`;
            } else if (actualTabs > 0) {
              foundStatement = indentType === "tab" ? actualTabs : `${ actualTabs } ${ foundTabsWord }`;
            } else {
              foundStatement = "0";
            }
            return {
              expected: expectedStatement,
              actual: foundStatement
            };
          }
          function report(token, neededIndent) {
            const actualIndent = Array.from(tokenInfo.getTokenIndent(token));
            const numSpaces = actualIndent.filter(char => char === " ").length;
            const numTabs = actualIndent.filter(char => char === "\t").length;
            context.report({
              node: token,
              messageId: "wrongIndentation",
              data: createErrorMessageData(neededIndent.length, numSpaces, numTabs),
              loc: {
                start: {
                  line: token.loc.start.line,
                  column: 0
                },
                end: {
                  line: token.loc.start.line,
                  column: token.loc.start.column
                }
              },
              fix(fixer) {
                const range = [
                  token.range[0] - token.loc.start.column,
                  token.range[0]
                ];
                const newText = neededIndent;
                return fixer.replaceTextRange(range, newText);
              }
            });
          }
          function validateTokenIndent(token, desiredIndent) {
            const indentation = tokenInfo.getTokenIndent(token);
            return indentation === desiredIndent || indentation.includes(" ") && indentation.includes("\t");
          }
          function isOuterIIFE(node) {
            if (!node.parent || node.parent.type !== "CallExpression" || node.parent.callee !== node) {
              return false;
            }
            let statement = node.parent && node.parent.parent;
            while (statement.type === "UnaryExpression" && [
                "!",
                "~",
                "+",
                "-"
              ].indexOf(statement.operator) > -1 || statement.type === "AssignmentExpression" || statement.type === "LogicalExpression" || statement.type === "SequenceExpression" || statement.type === "VariableDeclarator") {
              statement = statement.parent;
            }
            return (statement.type === "ExpressionStatement" || statement.type === "VariableDeclaration") && statement.parent.type === "Program";
          }
          function countTrailingLinebreaks(string) {
            const trailingWhitespace = string.match(/\s*$/u)[0];
            const linebreakMatches = trailingWhitespace.match(astUtils$27.createGlobalLinebreakMatcher());
            return linebreakMatches === null ? 0 : linebreakMatches.length;
          }
          function addElementListIndent(elements, startToken, endToken, offset) {
            function getFirstToken(element) {
              let token = sourceCode.getTokenBefore(element);
              while (astUtils$27.isOpeningParenToken(token) && token !== startToken) {
                token = sourceCode.getTokenBefore(token);
              }
              return sourceCode.getTokenAfter(token);
            }
            offsets.setDesiredOffsets([
              startToken.range[1],
              endToken.range[0]
            ], startToken, typeof offset === "number" ? offset : 1);
            offsets.setDesiredOffset(endToken, startToken, 0);
            if (offset === "first" && elements.length && !elements[0]) {
              return;
            }
            elements.forEach((element, index) => {
              if (!element) {
                return;
              }
              if (offset === "off") {
                offsets.ignoreToken(getFirstToken(element));
              }
              if (index === 0) {
                return;
              }
              if (offset === "first" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {
                offsets.matchOffsetOf(getFirstToken(elements[0]), getFirstToken(element));
              } else {
                const previousElement = elements[index - 1];
                const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);
                const previousElementLastToken = previousElement && sourceCode.getLastToken(previousElement);
                if (previousElement && previousElementLastToken.loc.end.line - countTrailingLinebreaks(previousElementLastToken.value) > startToken.loc.end.line) {
                  offsets.setDesiredOffsets([
                    previousElement.range[1],
                    element.range[1]
                  ], firstTokenOfPreviousElement, 0);
                }
              }
            });
          }
          function addBlocklessNodeIndent(node) {
            if (node.type !== "BlockStatement") {
              const lastParentToken = sourceCode.getTokenBefore(node, astUtils$27.isNotOpeningParenToken);
              let firstBodyToken = sourceCode.getFirstToken(node);
              let lastBodyToken = sourceCode.getLastToken(node);
              while (astUtils$27.isOpeningParenToken(sourceCode.getTokenBefore(firstBodyToken)) && astUtils$27.isClosingParenToken(sourceCode.getTokenAfter(lastBodyToken))) {
                firstBodyToken = sourceCode.getTokenBefore(firstBodyToken);
                lastBodyToken = sourceCode.getTokenAfter(lastBodyToken);
              }
              offsets.setDesiredOffsets([
                firstBodyToken.range[0],
                lastBodyToken.range[1]
              ], lastParentToken, 1);
              const lastToken = sourceCode.getLastToken(node);
              if (node.type !== "EmptyStatement" && astUtils$27.isSemicolonToken(lastToken)) {
                offsets.setDesiredOffset(lastToken, lastParentToken, 0);
              }
            }
          }
          function addFunctionCallIndent(node) {
            let openingParen;
            if (node.arguments.length) {
              openingParen = sourceCode.getFirstTokenBetween(node.callee, node.arguments[0], astUtils$27.isOpeningParenToken);
            } else {
              openingParen = sourceCode.getLastToken(node, 1);
            }
            const closingParen = sourceCode.getLastToken(node);
            parameterParens.add(openingParen);
            parameterParens.add(closingParen);
            if (node.optional) {
              const dotToken = sourceCode.getTokenAfter(node.callee, astUtils$27.isQuestionDotToken);
              const calleeParenCount = sourceCode.getTokensBetween(node.callee, dotToken, { filter: astUtils$27.isClosingParenToken }).length;
              const firstTokenOfCallee = calleeParenCount ? sourceCode.getTokenBefore(node.callee, { skip: calleeParenCount - 1 }) : sourceCode.getFirstToken(node.callee);
              const lastTokenOfCallee = sourceCode.getTokenBefore(dotToken);
              const offsetBase = lastTokenOfCallee.loc.end.line === openingParen.loc.start.line ? lastTokenOfCallee : firstTokenOfCallee;
              offsets.setDesiredOffset(dotToken, offsetBase, 1);
            }
            const offsetAfterToken = node.callee.type === "TaggedTemplateExpression" ? sourceCode.getFirstToken(node.callee.quasi) : openingParen;
            const offsetToken = sourceCode.getTokenBefore(offsetAfterToken);
            offsets.setDesiredOffset(openingParen, offsetToken, 0);
            addElementListIndent(node.arguments, openingParen, closingParen, options.CallExpression.arguments);
          }
          function addParensIndent(tokens) {
            const parenStack = [];
            const parenPairs = [];
            tokens.forEach(nextToken => {
              if (astUtils$27.isOpeningParenToken(nextToken)) {
                parenStack.push(nextToken);
              } else if (astUtils$27.isClosingParenToken(nextToken)) {
                parenPairs.unshift({
                  left: parenStack.pop(),
                  right: nextToken
                });
              }
            });
            parenPairs.forEach(pair => {
              const leftParen = pair.left;
              const rightParen = pair.right;
              if (!parameterParens.has(leftParen) && !parameterParens.has(rightParen)) {
                const parenthesizedTokens = new Set(sourceCode.getTokensBetween(leftParen, rightParen));
                parenthesizedTokens.forEach(token => {
                  if (!parenthesizedTokens.has(offsets.getFirstDependency(token))) {
                    offsets.setDesiredOffset(token, leftParen, 1);
                  }
                });
              }
              offsets.setDesiredOffset(rightParen, leftParen, 0);
            });
          }
          function ignoreNode(node) {
            const unknownNodeTokens = new Set(sourceCode.getTokens(node, { includeComments: true }));
            unknownNodeTokens.forEach(token => {
              if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) {
                const firstTokenOfLine = tokenInfo.getFirstTokenOfLine(token);
                if (token === firstTokenOfLine) {
                  offsets.ignoreToken(token);
                } else {
                  offsets.setDesiredOffset(token, firstTokenOfLine, 0);
                }
              }
            });
          }
          function isOnFirstLineOfStatement(token, leafNode) {
            let node = leafNode;
            while (node.parent && !node.parent.type.endsWith("Statement") && !node.parent.type.endsWith("Declaration")) {
              node = node.parent;
            }
            node = node.parent;
            return !node || node.loc.start.line === token.loc.start.line;
          }
          function hasBlankLinesBetween(firstToken, secondToken) {
            const firstTokenLine = firstToken.loc.end.line;
            const secondTokenLine = secondToken.loc.start.line;
            if (firstTokenLine === secondTokenLine || firstTokenLine === secondTokenLine - 1) {
              return false;
            }
            for (let line = firstTokenLine + 1; line < secondTokenLine; ++line) {
              if (!tokenInfo.firstTokensByLineNumber.has(line)) {
                return true;
              }
            }
            return false;
          }
          const ignoredNodeFirstTokens = new Set();
          const baseOffsetListeners = {
            "ArrayExpression, ArrayPattern"(node) {
              const openingBracket = sourceCode.getFirstToken(node);
              const closingBracket = sourceCode.getTokenAfter([...node.elements].reverse().find(_ => _) || openingBracket, astUtils$27.isClosingBracketToken);
              addElementListIndent(node.elements, openingBracket, closingBracket, options.ArrayExpression);
            },
            "ObjectExpression, ObjectPattern"(node) {
              const openingCurly = sourceCode.getFirstToken(node);
              const closingCurly = sourceCode.getTokenAfter(node.properties.length ? node.properties[node.properties.length - 1] : openingCurly, astUtils$27.isClosingBraceToken);
              addElementListIndent(node.properties, openingCurly, closingCurly, options.ObjectExpression);
            },
            ArrowFunctionExpression(node) {
              const maybeOpeningParen = sourceCode.getFirstToken(node, { skip: node.async ? 1 : 0 });
              if (astUtils$27.isOpeningParenToken(maybeOpeningParen)) {
                const openingParen = maybeOpeningParen;
                const closingParen = sourceCode.getTokenBefore(node.body, astUtils$27.isClosingParenToken);
                parameterParens.add(openingParen);
                parameterParens.add(closingParen);
                addElementListIndent(node.params, openingParen, closingParen, options.FunctionExpression.parameters);
              }
              addBlocklessNodeIndent(node.body);
            },
            AssignmentExpression(node) {
              const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);
              offsets.setDesiredOffsets([
                operator.range[0],
                node.range[1]
              ], sourceCode.getLastToken(node.left), 1);
              offsets.ignoreToken(operator);
              offsets.ignoreToken(sourceCode.getTokenAfter(operator));
            },
            "BinaryExpression, LogicalExpression"(node) {
              const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);
              const tokenAfterOperator = sourceCode.getTokenAfter(operator);
              offsets.ignoreToken(operator);
              offsets.ignoreToken(tokenAfterOperator);
              offsets.setDesiredOffset(tokenAfterOperator, operator, 0);
            },
            "BlockStatement, ClassBody"(node) {
              let blockIndentLevel;
              if (node.parent && isOuterIIFE(node.parent)) {
                blockIndentLevel = options.outerIIFEBody;
              } else if (node.parent && (node.parent.type === "FunctionExpression" || node.parent.type === "ArrowFunctionExpression")) {
                blockIndentLevel = options.FunctionExpression.body;
              } else if (node.parent && node.parent.type === "FunctionDeclaration") {
                blockIndentLevel = options.FunctionDeclaration.body;
              } else {
                blockIndentLevel = 1;
              }
              if (!astUtils$27.STATEMENT_LIST_PARENTS.has(node.parent.type)) {
                offsets.setDesiredOffset(sourceCode.getFirstToken(node), sourceCode.getFirstToken(node.parent), 0);
              }
              addElementListIndent(node.body, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), blockIndentLevel);
            },
            CallExpression: addFunctionCallIndent,
            "ClassDeclaration[superClass], ClassExpression[superClass]"(node) {
              const classToken = sourceCode.getFirstToken(node);
              const extendsToken = sourceCode.getTokenBefore(node.superClass, astUtils$27.isNotOpeningParenToken);
              offsets.setDesiredOffsets([
                extendsToken.range[0],
                node.body.range[0]
              ], classToken, 1);
            },
            ConditionalExpression(node) {
              const firstToken = sourceCode.getFirstToken(node);
              if (!options.flatTernaryExpressions || !astUtils$27.isTokenOnSameLine(node.test, node.consequent) || isOnFirstLineOfStatement(firstToken, node)) {
                const questionMarkToken = sourceCode.getFirstTokenBetween(node.test, node.consequent, token => token.type === "Punctuator" && token.value === "?");
                const colonToken = sourceCode.getFirstTokenBetween(node.consequent, node.alternate, token => token.type === "Punctuator" && token.value === ":");
                const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken);
                const lastConsequentToken = sourceCode.getTokenBefore(colonToken);
                const firstAlternateToken = sourceCode.getTokenAfter(colonToken);
                offsets.setDesiredOffset(questionMarkToken, firstToken, 1);
                offsets.setDesiredOffset(colonToken, firstToken, 1);
                offsets.setDesiredOffset(firstConsequentToken, firstToken, firstConsequentToken.type === "Punctuator" && options.offsetTernaryExpressions ? 2 : 1);
                if (lastConsequentToken.loc.end.line === firstAlternateToken.loc.start.line) {
                  offsets.setDesiredOffset(firstAlternateToken, firstConsequentToken, 0);
                } else {
                  offsets.setDesiredOffset(firstAlternateToken, firstToken, firstAlternateToken.type === "Punctuator" && options.offsetTernaryExpressions ? 2 : 1);
                }
              }
            },
            "DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement": node => addBlocklessNodeIndent(node.body),
            ExportNamedDeclaration(node) {
              if (node.declaration === null) {
                const closingCurly = sourceCode.getLastToken(node, astUtils$27.isClosingBraceToken);
                addElementListIndent(node.specifiers, sourceCode.getFirstToken(node, { skip: 1 }), closingCurly, 1);
                if (node.source) {
                  offsets.setDesiredOffsets([
                    closingCurly.range[1],
                    node.range[1]
                  ], sourceCode.getFirstToken(node), 1);
                }
              }
            },
            ForStatement(node) {
              const forOpeningParen = sourceCode.getFirstToken(node, 1);
              if (node.init) {
                offsets.setDesiredOffsets(node.init.range, forOpeningParen, 1);
              }
              if (node.test) {
                offsets.setDesiredOffsets(node.test.range, forOpeningParen, 1);
              }
              if (node.update) {
                offsets.setDesiredOffsets(node.update.range, forOpeningParen, 1);
              }
              addBlocklessNodeIndent(node.body);
            },
            "FunctionDeclaration, FunctionExpression"(node) {
              const closingParen = sourceCode.getTokenBefore(node.body);
              const openingParen = sourceCode.getTokenBefore(node.params.length ? node.params[0] : closingParen);
              parameterParens.add(openingParen);
              parameterParens.add(closingParen);
              addElementListIndent(node.params, openingParen, closingParen, options[node.type].parameters);
            },
            IfStatement(node) {
              addBlocklessNodeIndent(node.consequent);
              if (node.alternate && node.alternate.type !== "IfStatement") {
                addBlocklessNodeIndent(node.alternate);
              }
            },
            ImportDeclaration(node) {
              if (node.specifiers.some(specifier => specifier.type === "ImportSpecifier")) {
                const openingCurly = sourceCode.getFirstToken(node, astUtils$27.isOpeningBraceToken);
                const closingCurly = sourceCode.getLastToken(node, astUtils$27.isClosingBraceToken);
                addElementListIndent(node.specifiers.filter(specifier => specifier.type === "ImportSpecifier"), openingCurly, closingCurly, options.ImportDeclaration);
              }
              const fromToken = sourceCode.getLastToken(node, token => token.type === "Identifier" && token.value === "from");
              const sourceToken = sourceCode.getLastToken(node, token => token.type === "String");
              const semiToken = sourceCode.getLastToken(node, token => token.type === "Punctuator" && token.value === ";");
              if (fromToken) {
                const end = semiToken && semiToken.range[1] === sourceToken.range[1] ? node.range[1] : sourceToken.range[1];
                offsets.setDesiredOffsets([
                  fromToken.range[0],
                  end
                ], sourceCode.getFirstToken(node), 1);
              }
            },
            ImportExpression(node) {
              const openingParen = sourceCode.getFirstToken(node, 1);
              const closingParen = sourceCode.getLastToken(node);
              parameterParens.add(openingParen);
              parameterParens.add(closingParen);
              offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);
              addElementListIndent([node.source], openingParen, closingParen, options.CallExpression.arguments);
            },
            "MemberExpression, JSXMemberExpression, MetaProperty"(node) {
              const object = node.type === "MetaProperty" ? node.meta : node.object;
              const firstNonObjectToken = sourceCode.getFirstTokenBetween(object, node.property, astUtils$27.isNotClosingParenToken);
              const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);
              const objectParenCount = sourceCode.getTokensBetween(object, node.property, { filter: astUtils$27.isClosingParenToken }).length;
              const firstObjectToken = objectParenCount ? sourceCode.getTokenBefore(object, { skip: objectParenCount - 1 }) : sourceCode.getFirstToken(object);
              const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);
              const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;
              if (node.computed) {
                offsets.setDesiredOffset(sourceCode.getLastToken(node), firstNonObjectToken, 0);
                offsets.setDesiredOffsets(node.property.range, firstNonObjectToken, 1);
              }
              const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line ? lastObjectToken : firstObjectToken;
              if (typeof options.MemberExpression === "number") {
                offsets.setDesiredOffset(firstNonObjectToken, offsetBase, options.MemberExpression);
                offsets.setDesiredOffset(secondNonObjectToken, node.computed ? firstNonObjectToken : offsetBase, options.MemberExpression);
              } else {
                offsets.ignoreToken(firstNonObjectToken);
                offsets.ignoreToken(secondNonObjectToken);
                offsets.setDesiredOffset(firstNonObjectToken, offsetBase, 0);
                offsets.setDesiredOffset(secondNonObjectToken, firstNonObjectToken, 0);
              }
            },
            NewExpression(node) {
              if (node.arguments.length > 0 || astUtils$27.isClosingParenToken(sourceCode.getLastToken(node)) && astUtils$27.isOpeningParenToken(sourceCode.getLastToken(node, 1))) {
                addFunctionCallIndent(node);
              }
            },
            Property(node) {
              if (!node.shorthand && !node.method && node.kind === "init") {
                const colon = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils$27.isColonToken);
                offsets.ignoreToken(sourceCode.getTokenAfter(colon));
              }
            },
            SwitchStatement(node) {
              const openingCurly = sourceCode.getTokenAfter(node.discriminant, astUtils$27.isOpeningBraceToken);
              const closingCurly = sourceCode.getLastToken(node);
              offsets.setDesiredOffsets([
                openingCurly.range[1],
                closingCurly.range[0]
              ], openingCurly, options.SwitchCase);
              if (node.cases.length) {
                sourceCode.getTokensBetween(node.cases[node.cases.length - 1], closingCurly, {
                  includeComments: true,
                  filter: astUtils$27.isCommentToken
                }).forEach(token => offsets.ignoreToken(token));
              }
            },
            SwitchCase(node) {
              if (!(node.consequent.length === 1 && node.consequent[0].type === "BlockStatement")) {
                const caseKeyword = sourceCode.getFirstToken(node);
                const tokenAfterCurrentCase = sourceCode.getTokenAfter(node);
                offsets.setDesiredOffsets([
                  caseKeyword.range[1],
                  tokenAfterCurrentCase.range[0]
                ], caseKeyword, 1);
              }
            },
            TemplateLiteral(node) {
              node.expressions.forEach((expression, index) => {
                const previousQuasi = node.quasis[index];
                const nextQuasi = node.quasis[index + 1];
                const tokenToAlignFrom = previousQuasi.loc.start.line === previousQuasi.loc.end.line ? sourceCode.getFirstToken(previousQuasi) : null;
                offsets.setDesiredOffsets([
                  previousQuasi.range[1],
                  nextQuasi.range[0]
                ], tokenToAlignFrom, 1);
                offsets.setDesiredOffset(sourceCode.getFirstToken(nextQuasi), tokenToAlignFrom, 0);
              });
            },
            VariableDeclaration(node) {
              let variableIndent = Object.prototype.hasOwnProperty.call(options.VariableDeclarator, node.kind) ? options.VariableDeclarator[node.kind] : DEFAULT_VARIABLE_INDENT;
              const firstToken = sourceCode.getFirstToken(node), lastToken = sourceCode.getLastToken(node);
              if (options.VariableDeclarator[node.kind] === "first") {
                if (node.declarations.length > 1) {
                  addElementListIndent(node.declarations, firstToken, lastToken, "first");
                  return;
                }
                variableIndent = DEFAULT_VARIABLE_INDENT;
              }
              if (node.declarations[node.declarations.length - 1].loc.start.line > node.loc.start.line) {
                offsets.setDesiredOffsets(node.range, firstToken, variableIndent, true);
              } else {
                offsets.setDesiredOffsets(node.range, firstToken, variableIndent);
              }
              if (astUtils$27.isSemicolonToken(lastToken)) {
                offsets.ignoreToken(lastToken);
              }
            },
            VariableDeclarator(node) {
              if (node.init) {
                const equalOperator = sourceCode.getTokenBefore(node.init, astUtils$27.isNotOpeningParenToken);
                const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);
                offsets.ignoreToken(equalOperator);
                offsets.ignoreToken(tokenAfterOperator);
                offsets.setDesiredOffsets([
                  tokenAfterOperator.range[0],
                  node.range[1]
                ], equalOperator, 1);
                offsets.setDesiredOffset(equalOperator, sourceCode.getLastToken(node.id), 0);
              }
            },
            "JSXAttribute[value]"(node) {
              const equalsToken = sourceCode.getFirstTokenBetween(node.name, node.value, token => token.type === "Punctuator" && token.value === "=");
              offsets.setDesiredOffsets([
                equalsToken.range[0],
                node.value.range[1]
              ], sourceCode.getFirstToken(node.name), 1);
            },
            JSXElement(node) {
              if (node.closingElement) {
                addElementListIndent(node.children, sourceCode.getFirstToken(node.openingElement), sourceCode.getFirstToken(node.closingElement), 1);
              }
            },
            JSXOpeningElement(node) {
              const firstToken = sourceCode.getFirstToken(node);
              let closingToken;
              if (node.selfClosing) {
                closingToken = sourceCode.getLastToken(node, { skip: 1 });
                offsets.setDesiredOffset(sourceCode.getLastToken(node), closingToken, 0);
              } else {
                closingToken = sourceCode.getLastToken(node);
              }
              offsets.setDesiredOffsets(node.name.range, sourceCode.getFirstToken(node));
              addElementListIndent(node.attributes, firstToken, closingToken, 1);
            },
            JSXClosingElement(node) {
              const firstToken = sourceCode.getFirstToken(node);
              offsets.setDesiredOffsets(node.name.range, firstToken, 1);
            },
            JSXFragment(node) {
              const firstOpeningToken = sourceCode.getFirstToken(node.openingFragment);
              const firstClosingToken = sourceCode.getFirstToken(node.closingFragment);
              addElementListIndent(node.children, firstOpeningToken, firstClosingToken, 1);
            },
            JSXOpeningFragment(node) {
              const firstToken = sourceCode.getFirstToken(node);
              const closingToken = sourceCode.getLastToken(node);
              offsets.setDesiredOffsets(node.range, firstToken, 1);
              offsets.matchOffsetOf(firstToken, closingToken);
            },
            JSXClosingFragment(node) {
              const firstToken = sourceCode.getFirstToken(node);
              const slashToken = sourceCode.getLastToken(node, { skip: 1 });
              const closingToken = sourceCode.getLastToken(node);
              const tokenToMatch = astUtils$27.isTokenOnSameLine(slashToken, closingToken) ? slashToken : closingToken;
              offsets.setDesiredOffsets(node.range, firstToken, 1);
              offsets.matchOffsetOf(firstToken, tokenToMatch);
            },
            JSXExpressionContainer(node) {
              const openingCurly = sourceCode.getFirstToken(node);
              const closingCurly = sourceCode.getLastToken(node);
              offsets.setDesiredOffsets([
                openingCurly.range[1],
                closingCurly.range[0]
              ], openingCurly, 1);
            },
            JSXSpreadAttribute(node) {
              const openingCurly = sourceCode.getFirstToken(node);
              const closingCurly = sourceCode.getLastToken(node);
              offsets.setDesiredOffsets([
                openingCurly.range[1],
                closingCurly.range[0]
              ], openingCurly, 1);
            },
            "*"(node) {
              const firstToken = sourceCode.getFirstToken(node);
              if (firstToken && !ignoredNodeFirstTokens.has(firstToken)) {
                offsets.setDesiredOffsets(node.range, firstToken, 0);
              }
            }
          };
          const listenerCallQueue = [];
          const offsetListeners = {};
          for (const [selector, listener] of Object.entries(baseOffsetListeners)) {
            offsetListeners[selector] = node => listenerCallQueue.push({
              listener,
              node
            });
          }
          const ignoredNodes = new Set();
          function addToIgnoredNodes(node) {
            ignoredNodes.add(node);
            ignoredNodeFirstTokens.add(sourceCode.getFirstToken(node));
          }
          const ignoredNodeListeners = options.ignoredNodes.reduce((listeners, ignoredSelector) => Object.assign(listeners, { [ignoredSelector]: addToIgnoredNodes }), {});
          return Object.assign(offsetListeners, ignoredNodeListeners, {
            "*:exit"(node) {
              if (!KNOWN_NODES.has(node.type)) {
                addToIgnoredNodes(node);
              }
            },
            "Program:exit"() {
              if (options.ignoreComments) {
                sourceCode.getAllComments().forEach(comment => offsets.ignoreToken(comment));
              }
              listenerCallQueue.filter(nodeInfo => !ignoredNodes.has(nodeInfo.node)).forEach(nodeInfo => nodeInfo.listener(nodeInfo.node));
              ignoredNodes.forEach(ignoreNode);
              addParensIndent(sourceCode.ast.tokens);
              const precedingTokens = sourceCode.ast.comments.reduce((commentMap, comment) => {
                const tokenOrCommentBefore = sourceCode.getTokenBefore(comment, { includeComments: true });
                return commentMap.set(comment, commentMap.has(tokenOrCommentBefore) ? commentMap.get(tokenOrCommentBefore) : tokenOrCommentBefore);
              }, new WeakMap());
              sourceCode.lines.forEach((line, lineIndex) => {
                const lineNumber = lineIndex + 1;
                if (!tokenInfo.firstTokensByLineNumber.has(lineNumber)) {
                  return;
                }
                const firstTokenOfLine = tokenInfo.firstTokensByLineNumber.get(lineNumber);
                if (firstTokenOfLine.loc.start.line !== lineNumber) {
                  return;
                }
                if (astUtils$27.isCommentToken(firstTokenOfLine)) {
                  const tokenBefore = precedingTokens.get(firstTokenOfLine);
                  const tokenAfter = tokenBefore ? sourceCode.getTokenAfter(tokenBefore) : sourceCode.ast.tokens[0];
                  const mayAlignWithBefore = tokenBefore && !hasBlankLinesBetween(tokenBefore, firstTokenOfLine);
                  const mayAlignWithAfter = tokenAfter && !hasBlankLinesBetween(firstTokenOfLine, tokenAfter);
                  if (tokenAfter && astUtils$27.isSemicolonToken(tokenAfter) && !astUtils$27.isTokenOnSameLine(firstTokenOfLine, tokenAfter)) {
                    offsets.setDesiredOffset(firstTokenOfLine, tokenAfter, 0);
                  }
                  if (mayAlignWithBefore && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenBefore)) || mayAlignWithAfter && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenAfter))) {
                    return;
                  }
                }
                if (validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine))) {
                  return;
                }
                report(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine));
              });
            }
          });
        }
      };
      var _indent = exports$49;

      var exports$48 = {};
      function isForLoop(block) {
        return block.type === "ForInStatement" || block.type === "ForOfStatement" || block.type === "ForStatement";
      }
      function isInitialized$1(node) {
        const declaration = node.parent;
        const block = declaration.parent;
        if (isForLoop(block)) {
          if (block.type === "ForStatement") {
            return block.init === declaration;
          }
          return block.left === declaration;
        }
        return Boolean(node.init);
      }
      exports$48 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow initialization in variable declarations",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/init-declarations"
          },
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{ enum: ["always"] }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  { enum: ["never"] },
                  {
                    type: "object",
                    properties: { ignoreForLoopInit: { type: "boolean" } },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          messages: {
            initialized: "Variable '{{idName}}' should be initialized on declaration.",
            notInitialized: "Variable '{{idName}}' should not be initialized on declaration."
          }
        },
        create(context) {
          const MODE_ALWAYS = "always", MODE_NEVER = "never";
          const mode = context.options[0] || MODE_ALWAYS;
          const params = context.options[1] || {};
          return {
            "VariableDeclaration:exit"(node) {
              const kind = node.kind, declarations = node.declarations;
              for (let i = 0; i < declarations.length; ++i) {
                const declaration = declarations[i], id = declaration.id, initialized = isInitialized$1(declaration), isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);
                let messageId = "";
                if (mode === MODE_ALWAYS && !initialized) {
                  messageId = "initialized";
                } else if (mode === MODE_NEVER && kind !== "const" && initialized && !isIgnoredForLoop) {
                  messageId = "notInitialized";
                }
                if (id.type === "Identifier" && messageId) {
                  context.report({
                    node: declaration,
                    messageId,
                    data: { idName: id.name }
                  });
                }
              }
            }
          };
        }
      };
      var _initDeclarations = exports$48;

      var exports$47 = {};
      const astUtils$26 = _astUtils;
      const QUOTE_SETTINGS$1 = {
        "prefer-double": {
          quote: "\"",
          description: "singlequote",
          convert(str) {
            return str.replace(/'/gu, "\"");
          }
        },
        "prefer-single": {
          quote: "'",
          description: "doublequote",
          convert(str) {
            return str.replace(/"/gu, "'");
          }
        }
      };
      exports$47 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce the consistent use of either double or single quotes in JSX attributes",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/jsx-quotes"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "prefer-single",
                "prefer-double"
              ]
            }],
          messages: { unexpected: "Unexpected usage of {{description}}." }
        },
        create(context) {
          const quoteOption = context.options[0] || "prefer-double", setting = QUOTE_SETTINGS$1[quoteOption];
          function usesExpectedQuotes(node) {
            return node.value.indexOf(setting.quote) !== -1 || astUtils$26.isSurroundedBy(node.raw, setting.quote);
          }
          return {
            JSXAttribute(node) {
              const attributeValue = node.value;
              if (attributeValue && astUtils$26.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {
                context.report({
                  node: attributeValue,
                  messageId: "unexpected",
                  data: { description: setting.description },
                  fix(fixer) {
                    return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));
                  }
                });
              }
            }
          };
        }
      };
      var _jsxQuotes = exports$47;

      var exports$46 = {};
      const astUtils$25 = _astUtils;
      function containsLineTerminator(str) {
        return astUtils$25.LINEBREAK_MATCHER.test(str);
      }
      function last(arr) {
        return arr[arr.length - 1];
      }
      function isSingleLine(node) {
        return node.loc.end.line === node.loc.start.line;
      }
      function isSingleLineProperties(properties) {
        const [firstProp] = properties, lastProp = last(properties);
        return firstProp.loc.start.line === lastProp.loc.end.line;
      }
      function initOptionProperty(toOptions, fromOptions) {
        toOptions.mode = fromOptions.mode || "strict";
        if (typeof fromOptions.beforeColon !== "undefined") {
          toOptions.beforeColon = +fromOptions.beforeColon;
        } else {
          toOptions.beforeColon = 0;
        }
        if (typeof fromOptions.afterColon !== "undefined") {
          toOptions.afterColon = +fromOptions.afterColon;
        } else {
          toOptions.afterColon = 1;
        }
        if (typeof fromOptions.align !== "undefined") {
          if (typeof fromOptions.align === "object") {
            toOptions.align = fromOptions.align;
          } else {
            toOptions.align = {
              on: fromOptions.align,
              mode: toOptions.mode,
              beforeColon: toOptions.beforeColon,
              afterColon: toOptions.afterColon
            };
          }
        }
        return toOptions;
      }
      function initOptions(toOptions, fromOptions) {
        if (typeof fromOptions.align === "object") {
          toOptions.align = initOptionProperty({}, fromOptions.align);
          toOptions.align.on = fromOptions.align.on || "colon";
          toOptions.align.mode = fromOptions.align.mode || "strict";
          toOptions.multiLine = initOptionProperty({}, fromOptions.multiLine || fromOptions);
          toOptions.singleLine = initOptionProperty({}, fromOptions.singleLine || fromOptions);
        } else {
          toOptions.multiLine = initOptionProperty({}, fromOptions.multiLine || fromOptions);
          toOptions.singleLine = initOptionProperty({}, fromOptions.singleLine || fromOptions);
          if (toOptions.multiLine.align) {
            toOptions.align = {
              on: toOptions.multiLine.align.on,
              mode: toOptions.multiLine.align.mode || toOptions.multiLine.mode,
              beforeColon: toOptions.multiLine.align.beforeColon,
              afterColon: toOptions.multiLine.align.afterColon
            };
          }
        }
        return toOptions;
      }
      exports$46 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing between keys and values in object literal properties",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/key-spacing"
          },
          fixable: "whitespace",
          schema: [{
              anyOf: [
                {
                  type: "object",
                  properties: {
                    align: {
                      anyOf: [
                        {
                          enum: [
                            "colon",
                            "value"
                          ]
                        },
                        {
                          type: "object",
                          properties: {
                            mode: {
                              enum: [
                                "strict",
                                "minimum"
                              ]
                            },
                            on: {
                              enum: [
                                "colon",
                                "value"
                              ]
                            },
                            beforeColon: { type: "boolean" },
                            afterColon: { type: "boolean" }
                          },
                          additionalProperties: false
                        }
                      ]
                    },
                    mode: {
                      enum: [
                        "strict",
                        "minimum"
                      ]
                    },
                    beforeColon: { type: "boolean" },
                    afterColon: { type: "boolean" }
                  },
                  additionalProperties: false
                },
                {
                  type: "object",
                  properties: {
                    singleLine: {
                      type: "object",
                      properties: {
                        mode: {
                          enum: [
                            "strict",
                            "minimum"
                          ]
                        },
                        beforeColon: { type: "boolean" },
                        afterColon: { type: "boolean" }
                      },
                      additionalProperties: false
                    },
                    multiLine: {
                      type: "object",
                      properties: {
                        align: {
                          anyOf: [
                            {
                              enum: [
                                "colon",
                                "value"
                              ]
                            },
                            {
                              type: "object",
                              properties: {
                                mode: {
                                  enum: [
                                    "strict",
                                    "minimum"
                                  ]
                                },
                                on: {
                                  enum: [
                                    "colon",
                                    "value"
                                  ]
                                },
                                beforeColon: { type: "boolean" },
                                afterColon: { type: "boolean" }
                              },
                              additionalProperties: false
                            }
                          ]
                        },
                        mode: {
                          enum: [
                            "strict",
                            "minimum"
                          ]
                        },
                        beforeColon: { type: "boolean" },
                        afterColon: { type: "boolean" }
                      },
                      additionalProperties: false
                    }
                  },
                  additionalProperties: false
                },
                {
                  type: "object",
                  properties: {
                    singleLine: {
                      type: "object",
                      properties: {
                        mode: {
                          enum: [
                            "strict",
                            "minimum"
                          ]
                        },
                        beforeColon: { type: "boolean" },
                        afterColon: { type: "boolean" }
                      },
                      additionalProperties: false
                    },
                    multiLine: {
                      type: "object",
                      properties: {
                        mode: {
                          enum: [
                            "strict",
                            "minimum"
                          ]
                        },
                        beforeColon: { type: "boolean" },
                        afterColon: { type: "boolean" }
                      },
                      additionalProperties: false
                    },
                    align: {
                      type: "object",
                      properties: {
                        mode: {
                          enum: [
                            "strict",
                            "minimum"
                          ]
                        },
                        on: {
                          enum: [
                            "colon",
                            "value"
                          ]
                        },
                        beforeColon: { type: "boolean" },
                        afterColon: { type: "boolean" }
                      },
                      additionalProperties: false
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            extraKey: "Extra space after {{computed}}key '{{key}}'.",
            extraValue: "Extra space before value for {{computed}}key '{{key}}'.",
            missingKey: "Missing space after {{computed}}key '{{key}}'.",
            missingValue: "Missing space before value for {{computed}}key '{{key}}'."
          }
        },
        create(context) {
          const options = context.options[0] || {}, ruleOptions = initOptions({}, options), multiLineOptions = ruleOptions.multiLine, singleLineOptions = ruleOptions.singleLine, alignmentOptions = ruleOptions.align || null;
          const sourceCode = context.getSourceCode();
          function continuesPropertyGroup(lastMember, candidate) {
            const groupEndLine = lastMember.loc.start.line, candidateStartLine = candidate.loc.start.line;
            if (candidateStartLine - groupEndLine <= 1) {
              return true;
            }
            const leadingComments = sourceCode.getCommentsBefore(candidate);
            if (leadingComments.length && leadingComments[0].loc.start.line - groupEndLine <= 1 && candidateStartLine - last(leadingComments).loc.end.line <= 1) {
              for (let i = 1; i < leadingComments.length; i++) {
                if (leadingComments[i].loc.start.line - leadingComments[i - 1].loc.end.line > 1) {
                  return false;
                }
              }
              return true;
            }
            return false;
          }
          function isKeyValueProperty(property) {
            return !(property.method || property.shorthand || property.kind !== "init" || property.type !== "Property");
          }
          function getLastTokenBeforeColon(node) {
            const colonToken = sourceCode.getTokenAfter(node, astUtils$25.isColonToken);
            return sourceCode.getTokenBefore(colonToken);
          }
          function getNextColon(node) {
            return sourceCode.getTokenAfter(node, astUtils$25.isColonToken);
          }
          function getKey(property) {
            const key = property.key;
            if (property.computed) {
              return sourceCode.getText().slice(key.range[0], key.range[1]);
            }
            return astUtils$25.getStaticPropertyName(property);
          }
          function report(property, side, whitespace, expected, mode) {
            const diff = whitespace.length - expected, nextColon = getNextColon(property.key), tokenBeforeColon = sourceCode.getTokenBefore(nextColon, { includeComments: true }), tokenAfterColon = sourceCode.getTokenAfter(nextColon, { includeComments: true }), isKeySide = side === "key", isExtra = diff > 0, diffAbs = Math.abs(diff), spaces = Array(diffAbs + 1).join(" ");
            const locStart = isKeySide ? tokenBeforeColon.loc.end : nextColon.loc.start;
            const locEnd = isKeySide ? nextColon.loc.start : tokenAfterColon.loc.start;
            const missingLoc = isKeySide ? tokenBeforeColon.loc : tokenAfterColon.loc;
            const loc = isExtra ? {
              start: locStart,
              end: locEnd
            } : missingLoc;
            if ((diff && mode === "strict" || diff < 0 && mode === "minimum" || diff > 0 && !expected && mode === "minimum") && !(expected && containsLineTerminator(whitespace))) {
              let fix;
              if (isExtra) {
                let range;
                if (isKeySide) {
                  range = [
                    tokenBeforeColon.range[1],
                    tokenBeforeColon.range[1] + diffAbs
                  ];
                } else {
                  range = [
                    tokenAfterColon.range[0] - diffAbs,
                    tokenAfterColon.range[0]
                  ];
                }
                fix = function (fixer) {
                  return fixer.removeRange(range);
                };
              } else {
                if (isKeySide) {
                  fix = function (fixer) {
                    return fixer.insertTextAfter(tokenBeforeColon, spaces);
                  };
                } else {
                  fix = function (fixer) {
                    return fixer.insertTextBefore(tokenAfterColon, spaces);
                  };
                }
              }
              let messageId = "";
              if (isExtra) {
                messageId = side === "key" ? "extraKey" : "extraValue";
              } else {
                messageId = side === "key" ? "missingKey" : "missingValue";
              }
              context.report({
                node: property[side],
                loc,
                messageId,
                data: {
                  computed: property.computed ? "computed " : "",
                  key: getKey(property)
                },
                fix
              });
            }
          }
          function getKeyWidth(property) {
            const startToken = sourceCode.getFirstToken(property);
            const endToken = getLastTokenBeforeColon(property.key);
            return endToken.range[1] - startToken.range[0];
          }
          function getPropertyWhitespace(property) {
            const whitespace = /(\s*):(\s*)/u.exec(sourceCode.getText().slice(property.key.range[1], property.value.range[0]));
            if (whitespace) {
              return {
                beforeColon: whitespace[1],
                afterColon: whitespace[2]
              };
            }
            return null;
          }
          function createGroups(node) {
            if (node.properties.length === 1) {
              return [node.properties];
            }
            return node.properties.reduce((groups, property) => {
              const currentGroup = last(groups), prev = last(currentGroup);
              if (!prev || continuesPropertyGroup(prev, property)) {
                currentGroup.push(property);
              } else {
                groups.push([property]);
              }
              return groups;
            }, [[]]);
          }
          function verifyGroupAlignment(properties) {
            const length = properties.length, widths = properties.map(getKeyWidth), align = alignmentOptions.on;
            let targetWidth = Math.max(...widths), beforeColon, afterColon, mode;
            if (alignmentOptions && length > 1) {
              beforeColon = alignmentOptions.beforeColon;
              afterColon = alignmentOptions.afterColon;
              mode = alignmentOptions.mode;
            } else {
              beforeColon = multiLineOptions.beforeColon;
              afterColon = multiLineOptions.afterColon;
              mode = alignmentOptions.mode;
            }
            targetWidth += align === "colon" ? beforeColon : afterColon;
            for (let i = 0; i < length; i++) {
              const property = properties[i];
              const whitespace = getPropertyWhitespace(property);
              if (whitespace) {
                const width = widths[i];
                if (align === "value") {
                  report(property, "key", whitespace.beforeColon, beforeColon, mode);
                  report(property, "value", whitespace.afterColon, targetWidth - width, mode);
                } else {
                  report(property, "key", whitespace.beforeColon, targetWidth - width, mode);
                  report(property, "value", whitespace.afterColon, afterColon, mode);
                }
              }
            }
          }
          function verifySpacing(node, lineOptions) {
            const actual = getPropertyWhitespace(node);
            if (actual) {
              report(node, "key", actual.beforeColon, lineOptions.beforeColon, lineOptions.mode);
              report(node, "value", actual.afterColon, lineOptions.afterColon, lineOptions.mode);
            }
          }
          function verifyListSpacing(properties, lineOptions) {
            const length = properties.length;
            for (let i = 0; i < length; i++) {
              verifySpacing(properties[i], lineOptions);
            }
          }
          function verifyAlignment(node) {
            createGroups(node).forEach(group => {
              const properties = group.filter(isKeyValueProperty);
              if (properties.length > 0 && isSingleLineProperties(properties)) {
                verifyListSpacing(properties, multiLineOptions);
              } else {
                verifyGroupAlignment(properties);
              }
            });
          }
          if (alignmentOptions) {
            return {
              ObjectExpression(node) {
                if (isSingleLine(node)) {
                  verifyListSpacing(node.properties.filter(isKeyValueProperty), singleLineOptions);
                } else {
                  verifyAlignment(node);
                }
              }
            };
          }
          return {
            Property(node) {
              verifySpacing(node, isSingleLine(node.parent) ? singleLineOptions : multiLineOptions);
            }
          };
        }
      };
      var _keySpacing = exports$46;

      var exports$45 = {};
      const astUtils$24 = _astUtils, keywords$1 = _keywords;
      const PREV_TOKEN = /^[)\]}>]$/u;
      const NEXT_TOKEN = /^(?:[([{<~!]|\+\+?|--?)$/u;
      const PREV_TOKEN_M = /^[)\]}>*]$/u;
      const NEXT_TOKEN_M = /^[{*]$/u;
      const TEMPLATE_OPEN_PAREN = /\$\{$/u;
      const TEMPLATE_CLOSE_PAREN = /^\}/u;
      const CHECK_TYPE = /^(?:JSXElement|RegularExpression|String|Template)$/u;
      const KEYS = keywords$1.concat([
        "as",
        "async",
        "await",
        "from",
        "get",
        "let",
        "of",
        "set",
        "yield"
      ]);
      (function () {
        KEYS.sort();
        for (let i = 1; i < KEYS.length; ++i) {
          if (KEYS[i] === KEYS[i - 1]) {
            throw new Error(`Duplication was found in the keyword list: ${ KEYS[i] }`);
          }
        }
      }());
      function isOpenParenOfTemplate(token) {
        return token.type === "Template" && TEMPLATE_OPEN_PAREN.test(token.value);
      }
      function isCloseParenOfTemplate(token) {
        return token.type === "Template" && TEMPLATE_CLOSE_PAREN.test(token.value);
      }
      exports$45 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before and after keywords",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/keyword-spacing"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                before: {
                  type: "boolean",
                  default: true
                },
                after: {
                  type: "boolean",
                  default: true
                },
                overrides: {
                  type: "object",
                  properties: KEYS.reduce((retv, key) => {
                    retv[key] = {
                      type: "object",
                      properties: {
                        before: { type: "boolean" },
                        after: { type: "boolean" }
                      },
                      additionalProperties: false
                    };
                    return retv;
                  }, {}),
                  additionalProperties: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            expectedBefore: "Expected space(s) before \"{{value}}\".",
            expectedAfter: "Expected space(s) after \"{{value}}\".",
            unexpectedBefore: "Unexpected space(s) before \"{{value}}\".",
            unexpectedAfter: "Unexpected space(s) after \"{{value}}\"."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function expectSpaceBefore(token, pattern) {
            const prevToken = sourceCode.getTokenBefore(token);
            if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && astUtils$24.isTokenOnSameLine(prevToken, token) && !sourceCode.isSpaceBetweenTokens(prevToken, token)) {
              context.report({
                loc: token.loc,
                messageId: "expectedBefore",
                data: token,
                fix(fixer) {
                  return fixer.insertTextBefore(token, " ");
                }
              });
            }
          }
          function unexpectSpaceBefore(token, pattern) {
            const prevToken = sourceCode.getTokenBefore(token);
            if (prevToken && (CHECK_TYPE.test(prevToken.type) || pattern.test(prevToken.value)) && !isOpenParenOfTemplate(prevToken) && astUtils$24.isTokenOnSameLine(prevToken, token) && sourceCode.isSpaceBetweenTokens(prevToken, token)) {
              context.report({
                loc: {
                  start: prevToken.loc.end,
                  end: token.loc.start
                },
                messageId: "unexpectedBefore",
                data: token,
                fix(fixer) {
                  return fixer.removeRange([
                    prevToken.range[1],
                    token.range[0]
                  ]);
                }
              });
            }
          }
          function expectSpaceAfter(token, pattern) {
            const nextToken = sourceCode.getTokenAfter(token);
            if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && astUtils$24.isTokenOnSameLine(token, nextToken) && !sourceCode.isSpaceBetweenTokens(token, nextToken)) {
              context.report({
                loc: token.loc,
                messageId: "expectedAfter",
                data: token,
                fix(fixer) {
                  return fixer.insertTextAfter(token, " ");
                }
              });
            }
          }
          function unexpectSpaceAfter(token, pattern) {
            const nextToken = sourceCode.getTokenAfter(token);
            if (nextToken && (CHECK_TYPE.test(nextToken.type) || pattern.test(nextToken.value)) && !isCloseParenOfTemplate(nextToken) && astUtils$24.isTokenOnSameLine(token, nextToken) && sourceCode.isSpaceBetweenTokens(token, nextToken)) {
              context.report({
                loc: {
                  start: token.loc.end,
                  end: nextToken.loc.start
                },
                messageId: "unexpectedAfter",
                data: token,
                fix(fixer) {
                  return fixer.removeRange([
                    token.range[1],
                    nextToken.range[0]
                  ]);
                }
              });
            }
          }
          function parseOptions(options = {}) {
            const before = options.before !== false;
            const after = options.after !== false;
            const defaultValue = {
              before: before ? expectSpaceBefore : unexpectSpaceBefore,
              after: after ? expectSpaceAfter : unexpectSpaceAfter
            };
            const overrides = options && options.overrides || {};
            const retv = Object.create(null);
            for (let i = 0; i < KEYS.length; ++i) {
              const key = KEYS[i];
              const override = overrides[key];
              if (override) {
                const thisBefore = "before" in override ? override.before : before;
                const thisAfter = "after" in override ? override.after : after;
                retv[key] = {
                  before: thisBefore ? expectSpaceBefore : unexpectSpaceBefore,
                  after: thisAfter ? expectSpaceAfter : unexpectSpaceAfter
                };
              } else {
                retv[key] = defaultValue;
              }
            }
            return retv;
          }
          const checkMethodMap = parseOptions(context.options[0]);
          function checkSpacingBefore(token, pattern) {
            checkMethodMap[token.value].before(token, pattern || PREV_TOKEN);
          }
          function checkSpacingAfter(token, pattern) {
            checkMethodMap[token.value].after(token, pattern || NEXT_TOKEN);
          }
          function checkSpacingAround(token) {
            checkSpacingBefore(token);
            checkSpacingAfter(token);
          }
          function checkSpacingAroundFirstToken(node) {
            const firstToken = node && sourceCode.getFirstToken(node);
            if (firstToken && firstToken.type === "Keyword") {
              checkSpacingAround(firstToken);
            }
          }
          function checkSpacingBeforeFirstToken(node) {
            const firstToken = node && sourceCode.getFirstToken(node);
            if (firstToken && firstToken.type === "Keyword") {
              checkSpacingBefore(firstToken);
            }
          }
          function checkSpacingAroundTokenBefore(node) {
            if (node) {
              const token = sourceCode.getTokenBefore(node, astUtils$24.isKeywordToken);
              checkSpacingAround(token);
            }
          }
          function checkSpacingForFunction(node) {
            const firstToken = node && sourceCode.getFirstToken(node);
            if (firstToken && (firstToken.type === "Keyword" && firstToken.value === "function" || firstToken.value === "async")) {
              checkSpacingBefore(firstToken);
            }
          }
          function checkSpacingForClass(node) {
            checkSpacingAroundFirstToken(node);
            checkSpacingAroundTokenBefore(node.superClass);
          }
          function checkSpacingForIfStatement(node) {
            checkSpacingAroundFirstToken(node);
            checkSpacingAroundTokenBefore(node.alternate);
          }
          function checkSpacingForTryStatement(node) {
            checkSpacingAroundFirstToken(node);
            checkSpacingAroundFirstToken(node.handler);
            checkSpacingAroundTokenBefore(node.finalizer);
          }
          function checkSpacingForDoWhileStatement(node) {
            checkSpacingAroundFirstToken(node);
            checkSpacingAroundTokenBefore(node.test);
          }
          function checkSpacingForForInStatement(node) {
            checkSpacingAroundFirstToken(node);
            checkSpacingAroundTokenBefore(node.right);
          }
          function checkSpacingForForOfStatement(node) {
            if (node.await) {
              checkSpacingBefore(sourceCode.getFirstToken(node, 0));
              checkSpacingAfter(sourceCode.getFirstToken(node, 1));
            } else {
              checkSpacingAroundFirstToken(node);
            }
            checkSpacingAround(sourceCode.getTokenBefore(node.right, astUtils$24.isNotOpeningParenToken));
          }
          function checkSpacingForModuleDeclaration(node) {
            const firstToken = sourceCode.getFirstToken(node);
            checkSpacingBefore(firstToken, PREV_TOKEN_M);
            checkSpacingAfter(firstToken, NEXT_TOKEN_M);
            if (node.type === "ExportDefaultDeclaration") {
              checkSpacingAround(sourceCode.getTokenAfter(firstToken));
            }
            if (node.type === "ExportAllDeclaration" && node.exported) {
              const asToken = sourceCode.getTokenBefore(node.exported);
              checkSpacingBefore(asToken, PREV_TOKEN_M);
            }
            if (node.source) {
              const fromToken = sourceCode.getTokenBefore(node.source);
              checkSpacingBefore(fromToken, PREV_TOKEN_M);
              checkSpacingAfter(fromToken, NEXT_TOKEN_M);
            }
          }
          function checkSpacingForImportNamespaceSpecifier(node) {
            const asToken = sourceCode.getFirstToken(node, 1);
            checkSpacingBefore(asToken, PREV_TOKEN_M);
          }
          function checkSpacingForProperty(node) {
            if (node.static) {
              checkSpacingAroundFirstToken(node);
            }
            if (node.kind === "get" || node.kind === "set" || (node.method || node.type === "MethodDefinition") && node.value.async) {
              const token = sourceCode.getTokenBefore(node.key, tok => {
                switch (tok.value) {
                case "get":
                case "set":
                case "async":
                  return true;
                default:
                  return false;
                }
              });
              if (!token) {
                throw new Error("Failed to find token get, set, or async beside method name");
              }
              checkSpacingAround(token);
            }
          }
          function checkSpacingForAwaitExpression(node) {
            checkSpacingBefore(sourceCode.getFirstToken(node));
          }
          return {
            DebuggerStatement: checkSpacingAroundFirstToken,
            WithStatement: checkSpacingAroundFirstToken,
            BreakStatement: checkSpacingAroundFirstToken,
            ContinueStatement: checkSpacingAroundFirstToken,
            ReturnStatement: checkSpacingAroundFirstToken,
            ThrowStatement: checkSpacingAroundFirstToken,
            TryStatement: checkSpacingForTryStatement,
            IfStatement: checkSpacingForIfStatement,
            SwitchStatement: checkSpacingAroundFirstToken,
            SwitchCase: checkSpacingAroundFirstToken,
            DoWhileStatement: checkSpacingForDoWhileStatement,
            ForInStatement: checkSpacingForForInStatement,
            ForOfStatement: checkSpacingForForOfStatement,
            ForStatement: checkSpacingAroundFirstToken,
            WhileStatement: checkSpacingAroundFirstToken,
            ClassDeclaration: checkSpacingForClass,
            ExportNamedDeclaration: checkSpacingForModuleDeclaration,
            ExportDefaultDeclaration: checkSpacingForModuleDeclaration,
            ExportAllDeclaration: checkSpacingForModuleDeclaration,
            FunctionDeclaration: checkSpacingForFunction,
            ImportDeclaration: checkSpacingForModuleDeclaration,
            VariableDeclaration: checkSpacingAroundFirstToken,
            ArrowFunctionExpression: checkSpacingForFunction,
            AwaitExpression: checkSpacingForAwaitExpression,
            ClassExpression: checkSpacingForClass,
            FunctionExpression: checkSpacingForFunction,
            NewExpression: checkSpacingBeforeFirstToken,
            Super: checkSpacingBeforeFirstToken,
            ThisExpression: checkSpacingBeforeFirstToken,
            UnaryExpression: checkSpacingBeforeFirstToken,
            YieldExpression: checkSpacingBeforeFirstToken,
            ImportNamespaceSpecifier: checkSpacingForImportNamespaceSpecifier,
            MethodDefinition: checkSpacingForProperty,
            Property: checkSpacingForProperty
          };
        }
      };
      var _keywordSpacing = exports$45;

      var exports$44 = {};
      const astUtils$23 = _astUtils;
      exports$44 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce position of line comments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/line-comment-position"
          },
          schema: [{
              oneOf: [
                {
                  enum: [
                    "above",
                    "beside"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    position: {
                      enum: [
                        "above",
                        "beside"
                      ]
                    },
                    ignorePattern: { type: "string" },
                    applyDefaultPatterns: { type: "boolean" },
                    applyDefaultIgnorePatterns: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            above: "Expected comment to be above code.",
            beside: "Expected comment to be beside code."
          }
        },
        create(context) {
          const options = context.options[0];
          let above, ignorePattern, applyDefaultIgnorePatterns = true;
          if (!options || typeof options === "string") {
            above = !options || options === "above";
          } else {
            above = !options.position || options.position === "above";
            ignorePattern = options.ignorePattern;
            if (Object.prototype.hasOwnProperty.call(options, "applyDefaultIgnorePatterns")) {
              applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;
            } else {
              applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;
            }
          }
          const defaultIgnoreRegExp = astUtils$23.COMMENTS_IGNORE_PATTERN;
          const fallThroughRegExp = /^\s*falls?\s?through/u;
          const customIgnoreRegExp = new RegExp(ignorePattern, "u");
          const sourceCode = context.getSourceCode();
          return {
            Program() {
              const comments = sourceCode.getAllComments();
              comments.filter(token => token.type === "Line").forEach(node => {
                if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {
                  return;
                }
                if (ignorePattern && customIgnoreRegExp.test(node.value)) {
                  return;
                }
                const previous = sourceCode.getTokenBefore(node, { includeComments: true });
                const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;
                if (above) {
                  if (isOnSameLine) {
                    context.report({
                      node,
                      messageId: "above"
                    });
                  }
                } else {
                  if (!isOnSameLine) {
                    context.report({
                      node,
                      messageId: "beside"
                    });
                  }
                }
              });
            }
          };
        }
      };
      var _lineCommentPosition = exports$44;

      var exports$43 = {};
      const astUtils$22 = _astUtils;
      exports$43 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent linebreak style",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/linebreak-style"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "unix",
                "windows"
              ]
            }],
          messages: {
            expectedLF: "Expected linebreaks to be 'LF' but found 'CRLF'.",
            expectedCRLF: "Expected linebreaks to be 'CRLF' but found 'LF'."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function createFix(range, text) {
            return function (fixer) {
              return fixer.replaceTextRange(range, text);
            };
          }
          return {
            Program: function checkForLinebreakStyle(node) {
              const linebreakStyle = context.options[0] || "unix", expectedLF = linebreakStyle === "unix", expectedLFChars = expectedLF ? "\n" : "\r\n", source = sourceCode.getText(), pattern = astUtils$22.createGlobalLinebreakMatcher();
              let match;
              let i = 0;
              while ((match = pattern.exec(source)) !== null) {
                i++;
                if (match[0] === expectedLFChars) {
                  continue;
                }
                const index = match.index;
                const range = [
                  index,
                  index + match[0].length
                ];
                context.report({
                  node,
                  loc: {
                    start: {
                      line: i,
                      column: sourceCode.lines[i - 1].length
                    },
                    end: {
                      line: i + 1,
                      column: 0
                    }
                  },
                  messageId: expectedLF ? "expectedLF" : "expectedCRLF",
                  fix: createFix(range, expectedLFChars)
                });
              }
            }
          };
        }
      };
      var _linebreakStyle = exports$43;

      var exports$42 = {};
      const astUtils$21 = _astUtils;
      function getEmptyLineNums(lines) {
        const emptyLines = lines.map((line, i) => ({
          code: line.trim(),
          num: i + 1
        })).filter(line => !line.code).map(line => line.num);
        return emptyLines;
      }
      function getCommentLineNums(comments) {
        const lines = [];
        comments.forEach(token => {
          const start = token.loc.start.line;
          const end = token.loc.end.line;
          lines.push(start, end);
        });
        return lines;
      }
      exports$42 = {
        meta: {
          type: "layout",
          docs: {
            description: "require empty lines around comments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/lines-around-comment"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                beforeBlockComment: {
                  type: "boolean",
                  default: true
                },
                afterBlockComment: {
                  type: "boolean",
                  default: false
                },
                beforeLineComment: {
                  type: "boolean",
                  default: false
                },
                afterLineComment: {
                  type: "boolean",
                  default: false
                },
                allowBlockStart: {
                  type: "boolean",
                  default: false
                },
                allowBlockEnd: {
                  type: "boolean",
                  default: false
                },
                allowClassStart: { type: "boolean" },
                allowClassEnd: { type: "boolean" },
                allowObjectStart: { type: "boolean" },
                allowObjectEnd: { type: "boolean" },
                allowArrayStart: { type: "boolean" },
                allowArrayEnd: { type: "boolean" },
                ignorePattern: { type: "string" },
                applyDefaultIgnorePatterns: { type: "boolean" }
              },
              additionalProperties: false
            }],
          messages: {
            after: "Expected line after comment.",
            before: "Expected line before comment."
          }
        },
        create(context) {
          const options = Object.assign({}, context.options[0]);
          const ignorePattern = options.ignorePattern;
          const defaultIgnoreRegExp = astUtils$21.COMMENTS_IGNORE_PATTERN;
          const customIgnoreRegExp = new RegExp(ignorePattern, "u");
          const applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns !== false;
          options.beforeBlockComment = typeof options.beforeBlockComment !== "undefined" ? options.beforeBlockComment : true;
          const sourceCode = context.getSourceCode();
          const lines = sourceCode.lines, numLines = lines.length + 1, comments = sourceCode.getAllComments(), commentLines = getCommentLineNums(comments), emptyLines = getEmptyLineNums(lines), commentAndEmptyLines = commentLines.concat(emptyLines);
          function codeAroundComment(token) {
            let currentToken = token;
            do {
              currentToken = sourceCode.getTokenBefore(currentToken, { includeComments: true });
            } while (currentToken && astUtils$21.isCommentToken(currentToken));
            if (currentToken && astUtils$21.isTokenOnSameLine(currentToken, token)) {
              return true;
            }
            currentToken = token;
            do {
              currentToken = sourceCode.getTokenAfter(currentToken, { includeComments: true });
            } while (currentToken && astUtils$21.isCommentToken(currentToken));
            if (currentToken && astUtils$21.isTokenOnSameLine(token, currentToken)) {
              return true;
            }
            return false;
          }
          function isParentNodeType(parent, nodeType) {
            return parent.type === nodeType || parent.body && parent.body.type === nodeType || parent.consequent && parent.consequent.type === nodeType;
          }
          function getParentNodeOfToken(token) {
            return sourceCode.getNodeByRangeIndex(token.range[0]);
          }
          function isCommentAtParentStart(token, nodeType) {
            const parent = getParentNodeOfToken(token);
            return parent && isParentNodeType(parent, nodeType) && token.loc.start.line - parent.loc.start.line === 1;
          }
          function isCommentAtParentEnd(token, nodeType) {
            const parent = getParentNodeOfToken(token);
            return parent && isParentNodeType(parent, nodeType) && parent.loc.end.line - token.loc.end.line === 1;
          }
          function isCommentAtBlockStart(token) {
            return isCommentAtParentStart(token, "ClassBody") || isCommentAtParentStart(token, "BlockStatement") || isCommentAtParentStart(token, "SwitchCase");
          }
          function isCommentAtBlockEnd(token) {
            return isCommentAtParentEnd(token, "ClassBody") || isCommentAtParentEnd(token, "BlockStatement") || isCommentAtParentEnd(token, "SwitchCase") || isCommentAtParentEnd(token, "SwitchStatement");
          }
          function isCommentAtClassStart(token) {
            return isCommentAtParentStart(token, "ClassBody");
          }
          function isCommentAtClassEnd(token) {
            return isCommentAtParentEnd(token, "ClassBody");
          }
          function isCommentAtObjectStart(token) {
            return isCommentAtParentStart(token, "ObjectExpression") || isCommentAtParentStart(token, "ObjectPattern");
          }
          function isCommentAtObjectEnd(token) {
            return isCommentAtParentEnd(token, "ObjectExpression") || isCommentAtParentEnd(token, "ObjectPattern");
          }
          function isCommentAtArrayStart(token) {
            return isCommentAtParentStart(token, "ArrayExpression") || isCommentAtParentStart(token, "ArrayPattern");
          }
          function isCommentAtArrayEnd(token) {
            return isCommentAtParentEnd(token, "ArrayExpression") || isCommentAtParentEnd(token, "ArrayPattern");
          }
          function checkForEmptyLine(token, opts) {
            if (applyDefaultIgnorePatterns && defaultIgnoreRegExp.test(token.value)) {
              return;
            }
            if (ignorePattern && customIgnoreRegExp.test(token.value)) {
              return;
            }
            let after = opts.after, before = opts.before;
            const prevLineNum = token.loc.start.line - 1, nextLineNum = token.loc.end.line + 1, commentIsNotAlone = codeAroundComment(token);
            const blockStartAllowed = options.allowBlockStart && isCommentAtBlockStart(token) && !(options.allowClassStart === false && isCommentAtClassStart(token)), blockEndAllowed = options.allowBlockEnd && isCommentAtBlockEnd(token) && !(options.allowClassEnd === false && isCommentAtClassEnd(token)), classStartAllowed = options.allowClassStart && isCommentAtClassStart(token), classEndAllowed = options.allowClassEnd && isCommentAtClassEnd(token), objectStartAllowed = options.allowObjectStart && isCommentAtObjectStart(token), objectEndAllowed = options.allowObjectEnd && isCommentAtObjectEnd(token), arrayStartAllowed = options.allowArrayStart && isCommentAtArrayStart(token), arrayEndAllowed = options.allowArrayEnd && isCommentAtArrayEnd(token);
            const exceptionStartAllowed = blockStartAllowed || classStartAllowed || objectStartAllowed || arrayStartAllowed;
            const exceptionEndAllowed = blockEndAllowed || classEndAllowed || objectEndAllowed || arrayEndAllowed;
            if (prevLineNum < 1) {
              before = false;
            }
            if (nextLineNum >= numLines) {
              after = false;
            }
            if (commentIsNotAlone) {
              return;
            }
            const previousTokenOrComment = sourceCode.getTokenBefore(token, { includeComments: true });
            const nextTokenOrComment = sourceCode.getTokenAfter(token, { includeComments: true });
            if (!exceptionStartAllowed && before && !commentAndEmptyLines.includes(prevLineNum) && !(astUtils$21.isCommentToken(previousTokenOrComment) && astUtils$21.isTokenOnSameLine(previousTokenOrComment, token))) {
              const lineStart = token.range[0] - token.loc.start.column;
              const range = [
                lineStart,
                lineStart
              ];
              context.report({
                node: token,
                messageId: "before",
                fix(fixer) {
                  return fixer.insertTextBeforeRange(range, "\n");
                }
              });
            }
            if (!exceptionEndAllowed && after && !commentAndEmptyLines.includes(nextLineNum) && !(astUtils$21.isCommentToken(nextTokenOrComment) && astUtils$21.isTokenOnSameLine(token, nextTokenOrComment))) {
              context.report({
                node: token,
                messageId: "after",
                fix(fixer) {
                  return fixer.insertTextAfter(token, "\n");
                }
              });
            }
          }
          return {
            Program() {
              comments.forEach(token => {
                if (token.type === "Line") {
                  if (options.beforeLineComment || options.afterLineComment) {
                    checkForEmptyLine(token, {
                      after: options.afterLineComment,
                      before: options.beforeLineComment
                    });
                  }
                } else if (token.type === "Block") {
                  if (options.beforeBlockComment || options.afterBlockComment) {
                    checkForEmptyLine(token, {
                      after: options.afterBlockComment,
                      before: options.beforeBlockComment
                    });
                  }
                }
              });
            }
          };
        }
      };
      var _linesAroundComment = exports$42;

      var exports$41 = {};
      const astUtils$20 = _astUtils;
      exports$41 = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow an empty line between class members",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/lines-between-class-members"
          },
          fixable: "whitespace",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                exceptAfterSingleLine: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            never: "Unexpected blank line between class members.",
            always: "Expected blank line between class members."
          }
        },
        create(context) {
          const options = [];
          options[0] = context.options[0] || "always";
          options[1] = context.options[1] || { exceptAfterSingleLine: false };
          const sourceCode = context.getSourceCode();
          function findLastConsecutiveTokenAfter(prevLastToken, nextFirstToken, maxLine) {
            const after = sourceCode.getTokenAfter(prevLastToken, { includeComments: true });
            if (after !== nextFirstToken && after.loc.start.line - prevLastToken.loc.end.line <= maxLine) {
              return findLastConsecutiveTokenAfter(after, nextFirstToken, maxLine);
            }
            return prevLastToken;
          }
          function findFirstConsecutiveTokenBefore(nextFirstToken, prevLastToken, maxLine) {
            const before = sourceCode.getTokenBefore(nextFirstToken, { includeComments: true });
            if (before !== prevLastToken && nextFirstToken.loc.start.line - before.loc.end.line <= maxLine) {
              return findFirstConsecutiveTokenBefore(before, prevLastToken, maxLine);
            }
            return nextFirstToken;
          }
          function hasTokenOrCommentBetween(before, after) {
            return sourceCode.getTokensBetween(before, after, { includeComments: true }).length !== 0;
          }
          return {
            ClassBody(node) {
              const body = node.body;
              for (let i = 0; i < body.length - 1; i++) {
                const curFirst = sourceCode.getFirstToken(body[i]);
                const curLast = sourceCode.getLastToken(body[i]);
                const nextFirst = sourceCode.getFirstToken(body[i + 1]);
                const isMulti = !astUtils$20.isTokenOnSameLine(curFirst, curLast);
                const skip = !isMulti && options[1].exceptAfterSingleLine;
                const beforePadding = findLastConsecutiveTokenAfter(curLast, nextFirst, 1);
                const afterPadding = findFirstConsecutiveTokenBefore(nextFirst, curLast, 1);
                const isPadded = afterPadding.loc.start.line - beforePadding.loc.end.line > 1;
                const hasTokenInPadding = hasTokenOrCommentBetween(beforePadding, afterPadding);
                const curLineLastToken = findLastConsecutiveTokenAfter(curLast, nextFirst, 0);
                if (options[0] === "always" && !skip && !isPadded || options[0] === "never" && isPadded) {
                  context.report({
                    node: body[i + 1],
                    messageId: isPadded ? "never" : "always",
                    fix(fixer) {
                      if (hasTokenInPadding) {
                        return null;
                      }
                      return isPadded ? fixer.replaceTextRange([
                        beforePadding.range[1],
                        afterPadding.range[0]
                      ], "\n") : fixer.insertTextAfter(curLineLastToken, "\n");
                    }
                  });
                }
              }
            }
          };
        }
      };
      var _linesBetweenClassMembers = exports$41;

      var exports$40 = {};
      exports$40 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum number of classes per file",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-classes-per-file"
          },
          schema: [{
              type: "integer",
              minimum: 1
            }],
          messages: { maximumExceeded: "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}." }
        },
        create(context) {
          const maxClasses = context.options[0] || 1;
          let classCount = 0;
          return {
            Program() {
              classCount = 0;
            },
            "Program:exit"(node) {
              if (classCount > maxClasses) {
                context.report({
                  node,
                  messageId: "maximumExceeded",
                  data: {
                    classCount,
                    max: maxClasses
                  }
                });
              }
            },
            "ClassDeclaration, ClassExpression"() {
              classCount++;
            }
          };
        }
      };
      var _maxClassesPerFile = exports$40;

      var exports$3$ = {};
      exports$3$ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum depth that blocks can be nested",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-depth"
          },
          schema: [{
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    maximum: {
                      type: "integer",
                      minimum: 0
                    },
                    max: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { tooDeeply: "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}." }
        },
        create(context) {
          const functionStack = [], option = context.options[0];
          let maxDepth = 4;
          if (typeof option === "object" && (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))) {
            maxDepth = option.maximum || option.max;
          }
          if (typeof option === "number") {
            maxDepth = option;
          }
          function startFunction() {
            functionStack.push(0);
          }
          function endFunction() {
            functionStack.pop();
          }
          function pushBlock(node) {
            const len = ++functionStack[functionStack.length - 1];
            if (len > maxDepth) {
              context.report({
                node,
                messageId: "tooDeeply",
                data: {
                  depth: len,
                  maxDepth
                }
              });
            }
          }
          function popBlock() {
            functionStack[functionStack.length - 1]--;
          }
          return {
            Program: startFunction,
            FunctionDeclaration: startFunction,
            FunctionExpression: startFunction,
            ArrowFunctionExpression: startFunction,
            IfStatement(node) {
              if (node.parent.type !== "IfStatement") {
                pushBlock(node);
              }
            },
            SwitchStatement: pushBlock,
            TryStatement: pushBlock,
            DoWhileStatement: pushBlock,
            WhileStatement: pushBlock,
            WithStatement: pushBlock,
            ForStatement: pushBlock,
            ForInStatement: pushBlock,
            ForOfStatement: pushBlock,
            "IfStatement:exit": popBlock,
            "SwitchStatement:exit": popBlock,
            "TryStatement:exit": popBlock,
            "DoWhileStatement:exit": popBlock,
            "WhileStatement:exit": popBlock,
            "WithStatement:exit": popBlock,
            "ForStatement:exit": popBlock,
            "ForInStatement:exit": popBlock,
            "ForOfStatement:exit": popBlock,
            "FunctionDeclaration:exit": endFunction,
            "FunctionExpression:exit": endFunction,
            "ArrowFunctionExpression:exit": endFunction,
            "Program:exit": endFunction
          };
        }
      };
      var _maxDepth = exports$3$;

      var exports$3_ = {};
      const OPTIONS_SCHEMA$1 = {
        type: "object",
        properties: {
          code: {
            type: "integer",
            minimum: 0
          },
          comments: {
            type: "integer",
            minimum: 0
          },
          tabWidth: {
            type: "integer",
            minimum: 0
          },
          ignorePattern: { type: "string" },
          ignoreComments: { type: "boolean" },
          ignoreStrings: { type: "boolean" },
          ignoreUrls: { type: "boolean" },
          ignoreTemplateLiterals: { type: "boolean" },
          ignoreRegExpLiterals: { type: "boolean" },
          ignoreTrailingComments: { type: "boolean" }
        },
        additionalProperties: false
      };
      const OPTIONS_OR_INTEGER_SCHEMA$1 = {
        anyOf: [
          OPTIONS_SCHEMA$1,
          {
            type: "integer",
            minimum: 0
          }
        ]
      };
      exports$3_ = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce a maximum line length",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-len"
          },
          schema: [
            OPTIONS_OR_INTEGER_SCHEMA$1,
            OPTIONS_OR_INTEGER_SCHEMA$1,
            OPTIONS_SCHEMA$1
          ],
          messages: {
            max: "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
            maxComment: "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
          }
        },
        create(context) {
          const URL_REGEXP = /[^:/?#]:\/\/[^?#]/u;
          const sourceCode = context.getSourceCode();
          function computeLineLength(line, tabWidth) {
            let extraCharacterCount = 0;
            line.replace(/\t/gu, (match, offset) => {
              const totalOffset = offset + extraCharacterCount, previousTabStopOffset = tabWidth ? totalOffset % tabWidth : 0, spaceCount = tabWidth - previousTabStopOffset;
              extraCharacterCount += spaceCount - 1;
            });
            return Array.from(line).length + extraCharacterCount;
          }
          const options = Object.assign({}, context.options[context.options.length - 1]);
          if (typeof context.options[0] === "number") {
            options.code = context.options[0];
          }
          if (typeof context.options[1] === "number") {
            options.tabWidth = context.options[1];
          }
          const maxLength = typeof options.code === "number" ? options.code : 80, tabWidth = typeof options.tabWidth === "number" ? options.tabWidth : 4, ignoreComments = !!options.ignoreComments, ignoreStrings = !!options.ignoreStrings, ignoreTemplateLiterals = !!options.ignoreTemplateLiterals, ignoreRegExpLiterals = !!options.ignoreRegExpLiterals, ignoreTrailingComments = !!options.ignoreTrailingComments || !!options.ignoreComments, ignoreUrls = !!options.ignoreUrls, maxCommentLength = options.comments;
          let ignorePattern = options.ignorePattern || null;
          if (ignorePattern) {
            ignorePattern = new RegExp(ignorePattern, "u");
          }
          function isTrailingComment(line, lineNumber, comment) {
            return comment && comment.loc.start.line === lineNumber && lineNumber <= comment.loc.end.line && (comment.loc.end.line > lineNumber || comment.loc.end.column === line.length);
          }
          function isFullLineComment(line, lineNumber, comment) {
            const start = comment.loc.start, end = comment.loc.end, isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();
            return comment && (start.line < lineNumber || start.line === lineNumber && isFirstTokenOnLine) && (end.line > lineNumber || end.line === lineNumber && end.column === line.length);
          }
          function isJSXEmptyExpressionInSingleLineContainer(node) {
            if (!node || !node.parent || node.type !== "JSXEmptyExpression" || node.parent.type !== "JSXExpressionContainer") {
              return false;
            }
            const parent = node.parent;
            return parent.loc.start.line === parent.loc.end.line;
          }
          function stripTrailingComment(line, comment) {
            return line.slice(0, comment.loc.start.column).replace(/\s+$/u, "");
          }
          function ensureArrayAndPush(object, key, value) {
            if (!Array.isArray(object[key])) {
              object[key] = [];
            }
            object[key].push(value);
          }
          function getAllStrings() {
            return sourceCode.ast.tokens.filter(token => token.type === "String" || token.type === "JSXText" && sourceCode.getNodeByRangeIndex(token.range[0] - 1).type === "JSXAttribute");
          }
          function getAllTemplateLiterals() {
            return sourceCode.ast.tokens.filter(token => token.type === "Template");
          }
          function getAllRegExpLiterals() {
            return sourceCode.ast.tokens.filter(token => token.type === "RegularExpression");
          }
          function groupByLineNumber(acc, node) {
            for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {
              ensureArrayAndPush(acc, i, node);
            }
            return acc;
          }
          function getAllComments() {
            const comments = [];
            sourceCode.getAllComments().forEach(commentNode => {
              const containingNode = sourceCode.getNodeByRangeIndex(commentNode.range[0]);
              if (isJSXEmptyExpressionInSingleLineContainer(containingNode)) {
                if (comments[comments.length - 1] !== containingNode.parent) {
                  comments.push(containingNode.parent);
                }
              } else {
                comments.push(commentNode);
              }
            });
            return comments;
          }
          function checkProgramForMaxLength(node) {
            const lines = sourceCode.lines, comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? getAllComments() : [];
            let commentsIndex = 0;
            const strings = getAllStrings();
            const stringsByLine = strings.reduce(groupByLineNumber, {});
            const templateLiterals = getAllTemplateLiterals();
            const templateLiteralsByLine = templateLiterals.reduce(groupByLineNumber, {});
            const regExpLiterals = getAllRegExpLiterals();
            const regExpLiteralsByLine = regExpLiterals.reduce(groupByLineNumber, {});
            lines.forEach((line, i) => {
              const lineNumber = i + 1;
              let lineIsComment = false;
              let textToMeasure;
              if (commentsIndex < comments.length) {
                let comment = null;
                do {
                  comment = comments[++commentsIndex];
                } while (comment && comment.loc.start.line <= lineNumber);
                comment = comments[--commentsIndex];
                if (isFullLineComment(line, lineNumber, comment)) {
                  lineIsComment = true;
                  textToMeasure = line;
                } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment)) {
                  textToMeasure = stripTrailingComment(line, comment);
                  let lastIndex = commentsIndex;
                  while (isTrailingComment(textToMeasure, lineNumber, comments[--lastIndex])) {
                    textToMeasure = stripTrailingComment(textToMeasure, comments[lastIndex]);
                  }
                } else {
                  textToMeasure = line;
                }
              } else {
                textToMeasure = line;
              }
              if (ignorePattern && ignorePattern.test(textToMeasure) || ignoreUrls && URL_REGEXP.test(textToMeasure) || ignoreStrings && stringsByLine[lineNumber] || ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] || ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]) {
                return;
              }
              const lineLength = computeLineLength(textToMeasure, tabWidth);
              const commentLengthApplies = lineIsComment && maxCommentLength;
              if (lineIsComment && ignoreComments) {
                return;
              }
              const loc = {
                start: {
                  line: lineNumber,
                  column: 0
                },
                end: {
                  line: lineNumber,
                  column: textToMeasure.length
                }
              };
              if (commentLengthApplies) {
                if (lineLength > maxCommentLength) {
                  context.report({
                    node,
                    loc,
                    messageId: "maxComment",
                    data: {
                      lineLength,
                      maxCommentLength
                    }
                  });
                }
              } else if (lineLength > maxLength) {
                context.report({
                  node,
                  loc,
                  messageId: "max",
                  data: {
                    lineLength,
                    maxLength
                  }
                });
              }
            });
          }
          return { Program: checkProgramForMaxLength };
        }
      };
      var _maxLen = exports$3_;

      var exports$3Z = {};
      const astUtils$1$ = _astUtils;
      function range(start, end) {
        return [...Array(end - start).keys()].map(x => x + start);
      }
      exports$3Z = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum number of lines per file",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-lines"
          },
          schema: [{
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    max: {
                      type: "integer",
                      minimum: 0
                    },
                    skipComments: { type: "boolean" },
                    skipBlankLines: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { exceed: "File has too many lines ({{actual}}). Maximum allowed is {{max}}." }
        },
        create(context) {
          const option = context.options[0];
          let max = 300;
          if (typeof option === "object" && Object.prototype.hasOwnProperty.call(option, "max")) {
            max = option.max;
          } else if (typeof option === "number") {
            max = option;
          }
          const skipComments = option && option.skipComments;
          const skipBlankLines = option && option.skipBlankLines;
          const sourceCode = context.getSourceCode();
          function isCommentNodeType(token) {
            return token && (token.type === "Block" || token.type === "Line");
          }
          function getLinesWithoutCode(comment) {
            let start = comment.loc.start.line;
            let end = comment.loc.end.line;
            let token;
            token = comment;
            do {
              token = sourceCode.getTokenBefore(token, { includeComments: true });
            } while (isCommentNodeType(token));
            if (token && astUtils$1$.isTokenOnSameLine(token, comment)) {
              start += 1;
            }
            token = comment;
            do {
              token = sourceCode.getTokenAfter(token, { includeComments: true });
            } while (isCommentNodeType(token));
            if (token && astUtils$1$.isTokenOnSameLine(comment, token)) {
              end -= 1;
            }
            if (start <= end) {
              return range(start, end + 1);
            }
            return [];
          }
          function flatMap(array, fn) {
            const mapped = array.map(fn);
            const flattened = [].concat(...mapped);
            return flattened;
          }
          return {
            "Program:exit"() {
              let lines = sourceCode.lines.map((text, i) => ({
                lineNumber: i + 1,
                text
              }));
              if (lines.length > 1 && lines[lines.length - 1].text === "") {
                lines.pop();
              }
              if (skipBlankLines) {
                lines = lines.filter(l => l.text.trim() !== "");
              }
              if (skipComments) {
                const comments = sourceCode.getAllComments();
                const commentLines = flatMap(comments, comment => getLinesWithoutCode(comment));
                lines = lines.filter(l => !commentLines.includes(l.lineNumber));
              }
              if (lines.length > max) {
                const loc = {
                  start: {
                    line: lines[max].lineNumber,
                    column: 0
                  },
                  end: {
                    line: sourceCode.lines.length,
                    column: sourceCode.lines[sourceCode.lines.length - 1].length
                  }
                };
                context.report({
                  loc,
                  messageId: "exceed",
                  data: {
                    max,
                    actual: lines.length
                  }
                });
              }
            }
          };
        }
      };
      var _maxLines = exports$3Z;

      var exports$3Y = {};
      const astUtils$1_ = _astUtils;
      const {upperCaseFirst: upperCaseFirst$3} = _stringUtils;
      const OPTIONS_SCHEMA = {
        type: "object",
        properties: {
          max: {
            type: "integer",
            minimum: 0
          },
          skipComments: { type: "boolean" },
          skipBlankLines: { type: "boolean" },
          IIFEs: { type: "boolean" }
        },
        additionalProperties: false
      };
      const OPTIONS_OR_INTEGER_SCHEMA = {
        oneOf: [
          OPTIONS_SCHEMA,
          {
            type: "integer",
            minimum: 1
          }
        ]
      };
      function getCommentLineNumbers(comments) {
        const map = new Map();
        comments.forEach(comment => {
          for (let i = comment.loc.start.line; i <= comment.loc.end.line; i++) {
            map.set(i, comment);
          }
        });
        return map;
      }
      exports$3Y = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum number of lines of code in a function",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-lines-per-function"
          },
          schema: [OPTIONS_OR_INTEGER_SCHEMA],
          messages: { exceed: "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const lines = sourceCode.lines;
          const option = context.options[0];
          let maxLines = 50;
          let skipComments = false;
          let skipBlankLines = false;
          let IIFEs = false;
          if (typeof option === "object") {
            maxLines = typeof option.max === "number" ? option.max : 50;
            skipComments = !!option.skipComments;
            skipBlankLines = !!option.skipBlankLines;
            IIFEs = !!option.IIFEs;
          } else if (typeof option === "number") {
            maxLines = option;
          }
          const commentLineNumbers = getCommentLineNumbers(sourceCode.getAllComments());
          function isFullLineComment(line, lineNumber, comment) {
            const start = comment.loc.start, end = comment.loc.end, isFirstTokenOnLine = start.line === lineNumber && !line.slice(0, start.column).trim(), isLastTokenOnLine = end.line === lineNumber && !line.slice(end.column).trim();
            return comment && (start.line < lineNumber || isFirstTokenOnLine) && (end.line > lineNumber || isLastTokenOnLine);
          }
          function isIIFE(node) {
            return (node.type === "FunctionExpression" || node.type === "ArrowFunctionExpression") && node.parent && node.parent.type === "CallExpression" && node.parent.callee === node;
          }
          function isEmbedded(node) {
            if (!node.parent) {
              return false;
            }
            if (node !== node.parent.value) {
              return false;
            }
            if (node.parent.type === "MethodDefinition") {
              return true;
            }
            if (node.parent.type === "Property") {
              return node.parent.method === true || node.parent.kind === "get" || node.parent.kind === "set";
            }
            return false;
          }
          function processFunction(funcNode) {
            const node = isEmbedded(funcNode) ? funcNode.parent : funcNode;
            if (!IIFEs && isIIFE(node)) {
              return;
            }
            let lineCount = 0;
            for (let i = node.loc.start.line - 1; i < node.loc.end.line; ++i) {
              const line = lines[i];
              if (skipComments) {
                if (commentLineNumbers.has(i + 1) && isFullLineComment(line, i + 1, commentLineNumbers.get(i + 1))) {
                  continue;
                }
              }
              if (skipBlankLines) {
                if (line.match(/^\s*$/u)) {
                  continue;
                }
              }
              lineCount++;
            }
            if (lineCount > maxLines) {
              const name = upperCaseFirst$3(astUtils$1_.getFunctionNameWithKind(funcNode));
              context.report({
                node,
                messageId: "exceed",
                data: {
                  name,
                  lineCount,
                  maxLines
                }
              });
            }
          }
          return {
            FunctionDeclaration: processFunction,
            FunctionExpression: processFunction,
            ArrowFunctionExpression: processFunction
          };
        }
      };
      var _maxLinesPerFunction = exports$3Y;

      var exports$3X = {};
      exports$3X = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum depth that callbacks can be nested",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-nested-callbacks"
          },
          schema: [{
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    maximum: {
                      type: "integer",
                      minimum: 0
                    },
                    max: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { exceed: "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}." }
        },
        create(context) {
          const option = context.options[0];
          let THRESHOLD = 10;
          if (typeof option === "object" && (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))) {
            THRESHOLD = option.maximum || option.max;
          } else if (typeof option === "number") {
            THRESHOLD = option;
          }
          const callbackStack = [];
          function checkFunction(node) {
            const parent = node.parent;
            if (parent.type === "CallExpression") {
              callbackStack.push(node);
            }
            if (callbackStack.length > THRESHOLD) {
              const opts = {
                num: callbackStack.length,
                max: THRESHOLD
              };
              context.report({
                node,
                messageId: "exceed",
                data: opts
              });
            }
          }
          function popStack() {
            callbackStack.pop();
          }
          return {
            ArrowFunctionExpression: checkFunction,
            "ArrowFunctionExpression:exit": popStack,
            FunctionExpression: checkFunction,
            "FunctionExpression:exit": popStack
          };
        }
      };
      var _maxNestedCallbacks = exports$3X;

      var exports$3W = {};
      const astUtils$1Z = _astUtils;
      const {upperCaseFirst: upperCaseFirst$2} = _stringUtils;
      exports$3W = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum number of parameters in function definitions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-params"
          },
          schema: [{
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    maximum: {
                      type: "integer",
                      minimum: 0
                    },
                    max: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { exceed: "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const option = context.options[0];
          let numParams = 3;
          if (typeof option === "object" && (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))) {
            numParams = option.maximum || option.max;
          }
          if (typeof option === "number") {
            numParams = option;
          }
          function checkFunction(node) {
            if (node.params.length > numParams) {
              context.report({
                loc: astUtils$1Z.getFunctionHeadLoc(node, sourceCode),
                node,
                messageId: "exceed",
                data: {
                  name: upperCaseFirst$2(astUtils$1Z.getFunctionNameWithKind(node)),
                  count: node.params.length,
                  max: numParams
                }
              });
            }
          }
          return {
            FunctionDeclaration: checkFunction,
            ArrowFunctionExpression: checkFunction,
            FunctionExpression: checkFunction
          };
        }
      };
      var _maxParams = exports$3W;

      var exports$3V = {};
      const astUtils$1Y = _astUtils;
      const {upperCaseFirst: upperCaseFirst$1} = _stringUtils;
      exports$3V = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a maximum number of statements allowed in function blocks",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-statements"
          },
          schema: [
            {
              oneOf: [
                {
                  type: "integer",
                  minimum: 0
                },
                {
                  type: "object",
                  properties: {
                    maximum: {
                      type: "integer",
                      minimum: 0
                    },
                    max: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            },
            {
              type: "object",
              properties: { ignoreTopLevelFunctions: { type: "boolean" } },
              additionalProperties: false
            }
          ],
          messages: { exceed: "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}." }
        },
        create(context) {
          const functionStack = [], option = context.options[0], ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false, topLevelFunctions = [];
          let maxStatements = 10;
          if (typeof option === "object" && (Object.prototype.hasOwnProperty.call(option, "maximum") || Object.prototype.hasOwnProperty.call(option, "max"))) {
            maxStatements = option.maximum || option.max;
          } else if (typeof option === "number") {
            maxStatements = option;
          }
          function reportIfTooManyStatements(node, count, max) {
            if (count > max) {
              const name = upperCaseFirst$1(astUtils$1Y.getFunctionNameWithKind(node));
              context.report({
                node,
                messageId: "exceed",
                data: {
                  name,
                  count,
                  max
                }
              });
            }
          }
          function startFunction() {
            functionStack.push(0);
          }
          function endFunction(node) {
            const count = functionStack.pop();
            if (ignoreTopLevelFunctions && functionStack.length === 0) {
              topLevelFunctions.push({
                node,
                count
              });
            } else {
              reportIfTooManyStatements(node, count, maxStatements);
            }
          }
          function countStatements(node) {
            functionStack[functionStack.length - 1] += node.body.length;
          }
          return {
            FunctionDeclaration: startFunction,
            FunctionExpression: startFunction,
            ArrowFunctionExpression: startFunction,
            BlockStatement: countStatements,
            "FunctionDeclaration:exit": endFunction,
            "FunctionExpression:exit": endFunction,
            "ArrowFunctionExpression:exit": endFunction,
            "Program:exit"() {
              if (topLevelFunctions.length === 1) {
                return;
              }
              topLevelFunctions.forEach(element => {
                const count = element.count;
                const node = element.node;
                reportIfTooManyStatements(node, count, maxStatements);
              });
            }
          };
        }
      };
      var _maxStatements = exports$3V;

      var exports$3U = {};
      const astUtils$1X = _astUtils;
      const CAPS_ALLOWED = [
        "Array",
        "Boolean",
        "Date",
        "Error",
        "Function",
        "Number",
        "Object",
        "RegExp",
        "String",
        "Symbol",
        "BigInt"
      ];
      function checkArray(obj, key, fallback) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && !Array.isArray(obj[key])) {
          throw new TypeError(`${ key }, if provided, must be an Array`);
        }
        return obj[key] || fallback;
      }
      function invert(map, key) {
        map[key] = true;
        return map;
      }
      function calculateCapIsNewExceptions(config) {
        let capIsNewExceptions = checkArray(config, "capIsNewExceptions", CAPS_ALLOWED);
        if (capIsNewExceptions !== CAPS_ALLOWED) {
          capIsNewExceptions = capIsNewExceptions.concat(CAPS_ALLOWED);
        }
        return capIsNewExceptions.reduce(invert, {});
      }
      exports$3U = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require constructor names to begin with a capital letter",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/new-cap"
          },
          schema: [{
              type: "object",
              properties: {
                newIsCap: {
                  type: "boolean",
                  default: true
                },
                capIsNew: {
                  type: "boolean",
                  default: true
                },
                newIsCapExceptions: {
                  type: "array",
                  items: { type: "string" }
                },
                newIsCapExceptionPattern: { type: "string" },
                capIsNewExceptions: {
                  type: "array",
                  items: { type: "string" }
                },
                capIsNewExceptionPattern: { type: "string" },
                properties: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: {
            upper: "A function with a name starting with an uppercase letter should only be used as a constructor.",
            lower: "A constructor name should not start with a lowercase letter."
          }
        },
        create(context) {
          const config = Object.assign({}, context.options[0]);
          config.newIsCap = config.newIsCap !== false;
          config.capIsNew = config.capIsNew !== false;
          const skipProperties = config.properties === false;
          const newIsCapExceptions = checkArray(config, "newIsCapExceptions", []).reduce(invert, {});
          const newIsCapExceptionPattern = config.newIsCapExceptionPattern ? new RegExp(config.newIsCapExceptionPattern, "u") : null;
          const capIsNewExceptions = calculateCapIsNewExceptions(config);
          const capIsNewExceptionPattern = config.capIsNewExceptionPattern ? new RegExp(config.capIsNewExceptionPattern, "u") : null;
          const listeners = {};
          const sourceCode = context.getSourceCode();
          function extractNameFromExpression(node) {
            return node.callee.type === "Identifier" ? node.callee.name : astUtils$1X.getStaticPropertyName(node.callee) || "";
          }
          function getCap(str) {
            const firstChar = str.charAt(0);
            const firstCharLower = firstChar.toLowerCase();
            const firstCharUpper = firstChar.toUpperCase();
            if (firstCharLower === firstCharUpper) {
              return "non-alpha";
            }
            if (firstChar === firstCharLower) {
              return "lower";
            }
            return "upper";
          }
          function isCapAllowed(allowedMap, node, calleeName, pattern) {
            const sourceText = sourceCode.getText(node.callee);
            if (allowedMap[calleeName] || allowedMap[sourceText]) {
              return true;
            }
            if (pattern && pattern.test(sourceText)) {
              return true;
            }
            const callee = astUtils$1X.skipChainExpression(node.callee);
            if (calleeName === "UTC" && callee.type === "MemberExpression") {
              return callee.object.type === "Identifier" && callee.object.name === "Date";
            }
            return skipProperties && callee.type === "MemberExpression";
          }
          function report(node, messageId) {
            let callee = astUtils$1X.skipChainExpression(node.callee);
            if (callee.type === "MemberExpression") {
              callee = callee.property;
            }
            context.report({
              node,
              loc: callee.loc,
              messageId
            });
          }
          if (config.newIsCap) {
            listeners.NewExpression = function (node) {
              const constructorName = extractNameFromExpression(node);
              if (constructorName) {
                const capitalization = getCap(constructorName);
                const isAllowed = capitalization !== "lower" || isCapAllowed(newIsCapExceptions, node, constructorName, newIsCapExceptionPattern);
                if (!isAllowed) {
                  report(node, "lower");
                }
              }
            };
          }
          if (config.capIsNew) {
            listeners.CallExpression = function (node) {
              const calleeName = extractNameFromExpression(node);
              if (calleeName) {
                const capitalization = getCap(calleeName);
                const isAllowed = capitalization !== "upper" || isCapAllowed(capIsNewExceptions, node, calleeName, capIsNewExceptionPattern);
                if (!isAllowed) {
                  report(node, "upper");
                }
              }
            };
          }
          return listeners;
        }
      };
      var _newCap = exports$3U;

      var exports$3T = {};
      const astUtils$1W = _astUtils;
      exports$3T = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce or disallow parentheses when invoking a constructor with no arguments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/new-parens"
          },
          fixable: "code",
          schema: {
            anyOf: [{
                type: "array",
                items: [{
                    enum: [
                      "always",
                      "never"
                    ]
                  }],
                minItems: 0,
                maxItems: 1
              }]
          },
          messages: {
            missing: "Missing '()' invoking a constructor.",
            unnecessary: "Unnecessary '()' invoking a constructor with no arguments."
          }
        },
        create(context) {
          const options = context.options;
          const always = options[0] !== "never";
          const sourceCode = context.getSourceCode();
          return {
            NewExpression(node) {
              if (node.arguments.length !== 0) {
                return;
              }
              const lastToken = sourceCode.getLastToken(node);
              const hasLastParen = lastToken && astUtils$1W.isClosingParenToken(lastToken);
              const hasParens = hasLastParen && astUtils$1W.isOpeningParenToken(sourceCode.getTokenBefore(lastToken)) && node.callee.range[1] < node.range[1];
              if (always) {
                if (!hasParens) {
                  context.report({
                    node,
                    messageId: "missing",
                    fix: fixer => fixer.insertTextAfter(node, "()")
                  });
                }
              } else {
                if (hasParens) {
                  context.report({
                    node,
                    messageId: "unnecessary",
                    fix: fixer => [
                      fixer.remove(sourceCode.getTokenBefore(lastToken)),
                      fixer.remove(lastToken),
                      fixer.insertTextBefore(node, "("),
                      fixer.insertTextAfter(node, ")")
                    ]
                  });
                }
              }
            }
          };
        }
      };
      var _newParens = exports$3T;

      var exports$3S = {};
      const {
        getStaticPropertyName: getPropertyName$2,
        getVariableByName,
        skipChainExpression
      } = _astUtils;
      function isProhibitedIdentifier(name) {
        return /^(alert|confirm|prompt)$/u.test(name);
      }
      function findReference(scope, node) {
        const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);
        if (references.length === 1) {
          return references[0];
        }
        return null;
      }
      function isShadowed$1(scope, node) {
        const reference = findReference(scope, node);
        return reference && reference.resolved && reference.resolved.defs.length > 0;
      }
      function isGlobalThisReferenceOrGlobalWindow(scope, node) {
        if (scope.type === "global" && node.type === "ThisExpression") {
          return true;
        }
        if (node.type === "Identifier" && (node.name === "window" || node.name === "globalThis" && getVariableByName(scope, "globalThis"))) {
          return !isShadowed$1(scope, node);
        }
        return false;
      }
      exports$3S = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `alert`, `confirm`, and `prompt`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-alert"
          },
          schema: [],
          messages: { unexpected: "Unexpected {{name}}." }
        },
        create(context) {
          return {
            CallExpression(node) {
              const callee = skipChainExpression(node.callee), currentScope = context.getScope();
              if (callee.type === "Identifier") {
                const name = callee.name;
                if (!isShadowed$1(currentScope, callee) && isProhibitedIdentifier(callee.name)) {
                  context.report({
                    node,
                    messageId: "unexpected",
                    data: { name }
                  });
                }
              } else if (callee.type === "MemberExpression" && isGlobalThisReferenceOrGlobalWindow(currentScope, callee.object)) {
                const name = getPropertyName$2(callee);
                if (isProhibitedIdentifier(name)) {
                  context.report({
                    node,
                    messageId: "unexpected",
                    data: { name }
                  });
                }
              }
            }
          };
        }
      };
      var _noAlert = exports$3S;

      var exports$3R = {};
      exports$3R = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `Array` constructors",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-array-constructor"
          },
          schema: [],
          messages: { preferLiteral: "The array literal notation [] is preferable." }
        },
        create(context) {
          function check(node) {
            if (node.arguments.length !== 1 && node.callee.type === "Identifier" && node.callee.name === "Array") {
              context.report({
                node,
                messageId: "preferLiteral"
              });
            }
          }
          return {
            CallExpression: check,
            NewExpression: check
          };
        }
      };
      var _noArrayConstructor = exports$3R;

      var exports$3Q = {};
      const BITWISE_OPERATORS$1 = [
        "^",
        "|",
        "&",
        "<<",
        ">>",
        ">>>",
        "^=",
        "|=",
        "&=",
        "<<=",
        ">>=",
        ">>>=",
        "~"
      ];
      exports$3Q = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow bitwise operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-bitwise"
          },
          schema: [{
              type: "object",
              properties: {
                allow: {
                  type: "array",
                  items: { enum: BITWISE_OPERATORS$1 },
                  uniqueItems: true
                },
                int32Hint: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "Unexpected use of '{{operator}}'." }
        },
        create(context) {
          const options = context.options[0] || {};
          const allowed = options.allow || [];
          const int32Hint = options.int32Hint === true;
          function report(node) {
            context.report({
              node,
              messageId: "unexpected",
              data: { operator: node.operator }
            });
          }
          function hasBitwiseOperator(node) {
            return BITWISE_OPERATORS$1.indexOf(node.operator) !== -1;
          }
          function allowedOperator(node) {
            return allowed.indexOf(node.operator) !== -1;
          }
          function isInt32Hint(node) {
            return int32Hint && node.operator === "|" && node.right && node.right.type === "Literal" && node.right.value === 0;
          }
          function checkNodeForBitwiseOperator(node) {
            if (hasBitwiseOperator(node) && !allowedOperator(node) && !isInt32Hint(node)) {
              report(node);
            }
          }
          return {
            AssignmentExpression: checkNodeForBitwiseOperator,
            BinaryExpression: checkNodeForBitwiseOperator,
            UnaryExpression: checkNodeForBitwiseOperator
          };
        }
      };
      var _noBitwise = exports$3Q;

      var exports$3P = {};
      exports$3P = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "problem",
          docs: {
            description: "disallow use of the `Buffer()` constructor",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-buffer-constructor"
          },
          schema: [],
          messages: { deprecated: "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead." }
        },
        create(context) {
          return {
            "CallExpression[callee.name='Buffer'], NewExpression[callee.name='Buffer']"(node) {
              context.report({
                node,
                messageId: "deprecated",
                data: { expr: node.type === "CallExpression" ? "Buffer()" : "new Buffer()" }
              });
            }
          };
        }
      };
      var _noBufferConstructor = exports$3P;

      var exports$3O = {};
      exports$3O = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `arguments.caller` or `arguments.callee`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-caller"
          },
          schema: [],
          messages: { unexpected: "Avoid arguments.{{prop}}." }
        },
        create(context) {
          return {
            MemberExpression(node) {
              const objectName = node.object.name, propertyName = node.property.name;
              if (objectName === "arguments" && !node.computed && propertyName && propertyName.match(/^calle[er]$/u)) {
                context.report({
                  node,
                  messageId: "unexpected",
                  data: { prop: propertyName }
                });
              }
            }
          };
        }
      };
      var _noCaller = exports$3O;

      var exports$3N = {};
      const astUtils$1V = _astUtils;
      exports$3N = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `catch` clause parameters from shadowing variables in the outer scope",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-catch-shadow"
          },
          replacedBy: ["no-shadow"],
          deprecated: true,
          schema: [],
          messages: { mutable: "Value of '{{name}}' may be overwritten in IE 8 and earlier." }
        },
        create(context) {
          function paramIsShadowing(scope, name) {
            return astUtils$1V.getVariableByName(scope, name) !== null;
          }
          return {
            "CatchClause[param!=null]"(node) {
              let scope = context.getScope();
              if (scope.block === node) {
                scope = scope.upper;
              }
              if (paramIsShadowing(scope, node.param.name)) {
                context.report({
                  node,
                  messageId: "mutable",
                  data: { name: node.param.name }
                });
              }
            }
          };
        }
      };
      var _noCatchShadow = exports$3N;

      var exports$3M = {};
      const astUtils$1U = _astUtils;
      exports$3M = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow reassigning class members",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-class-assign"
          },
          schema: [],
          messages: { class: "'{{name}}' is a class." }
        },
        create(context) {
          function checkVariable(variable) {
            astUtils$1U.getModifyingReferences(variable.references).forEach(reference => {
              context.report({
                node: reference.identifier,
                messageId: "class",
                data: { name: reference.identifier.name }
              });
            });
          }
          function checkForClass(node) {
            context.getDeclaredVariables(node).forEach(checkVariable);
          }
          return {
            ClassDeclaration: checkForClass,
            ClassExpression: checkForClass
          };
        }
      };
      var _noClassAssign = exports$3M;

      var exports$3L = {};
      const astUtils$1T = _astUtils;
      exports$3L = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `console`",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-console"
          },
          schema: [{
              type: "object",
              properties: {
                allow: {
                  type: "array",
                  items: { type: "string" },
                  minItems: 1,
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "Unexpected console statement." }
        },
        create(context) {
          const options = context.options[0] || {};
          const allowed = options.allow || [];
          function isConsole(reference) {
            const id = reference.identifier;
            return id && id.name === "console";
          }
          function isAllowed(node) {
            const propertyName = astUtils$1T.getStaticPropertyName(node);
            return propertyName && allowed.indexOf(propertyName) !== -1;
          }
          function isMemberAccessExceptAllowed(reference) {
            const node = reference.identifier;
            const parent = node.parent;
            return parent.type === "MemberExpression" && parent.object === node && !isAllowed(parent);
          }
          function report(reference) {
            const node = reference.identifier.parent;
            context.report({
              node,
              loc: node.loc,
              messageId: "unexpected"
            });
          }
          return {
            "Program:exit"() {
              const scope = context.getScope();
              const consoleVar = astUtils$1T.getVariableByName(scope, "console");
              const shadowed = consoleVar && consoleVar.defs.length > 0;
              const references = consoleVar ? consoleVar.references : scope.through.filter(isConsole);
              if (!shadowed) {
                references.filter(isMemberAccessExceptAllowed).forEach(report);
              }
            }
          };
        }
      };
      var _noConsole = exports$3L;

      var exports$3K = {};
      exports$3K = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `continue` statements",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-continue"
          },
          schema: [],
          messages: { unexpected: "Unexpected use of continue statement." }
        },
        create(context) {
          return {
            ContinueStatement(node) {
              context.report({
                node,
                messageId: "unexpected"
              });
            }
          };
        }
      };
      var _noContinue = exports$3K;

      var exports$3J = {};
      Object.defineProperty(exports$3J, "__esModule", { value: true });
      var ast = Object.freeze({});
      let largeIdStartRanges = undefined;
      let largeIdContinueRanges = undefined;
      function isIdStart(cp) {
        if (cp < 65)
          return false;
        if (cp < 91)
          return true;
        if (cp < 97)
          return false;
        if (cp < 123)
          return true;
        return isLargeIdStart(cp);
      }
      function isIdContinue(cp) {
        if (cp < 48)
          return false;
        if (cp < 58)
          return true;
        if (cp < 65)
          return false;
        if (cp < 91)
          return true;
        if (cp === 95)
          return true;
        if (cp < 97)
          return false;
        if (cp < 123)
          return true;
        return isLargeIdStart(cp) || isLargeIdContinue(cp);
      }
      function isLargeIdStart(cp) {
        return isInRange$2(cp, largeIdStartRanges || (largeIdStartRanges = initLargeIdStartRanges()));
      }
      function isLargeIdContinue(cp) {
        return isInRange$2(cp, largeIdContinueRanges || (largeIdContinueRanges = initLargeIdContinueRanges()));
      }
      function initLargeIdStartRanges() {
        return restoreRanges("4q 0 b 0 5 0 6 m 2 u 2 cp 5 b f 4 8 0 2 0 3m 4 2 1 3 3 2 0 7 0 2 2 2 0 2 j 2 2a 2 3u 9 4l 2 11 3 0 7 14 20 q 5 3 1a 16 10 1 2 2q 2 0 g 1 8 1 b 2 3 0 h 0 2 t u 2g c 0 p w a 1 5 0 6 l 5 0 a 0 4 0 o o 8 a 1i k 2 h 1p 1h 4 0 j 0 8 9 g f 5 7 3 1 3 l 2 6 2 0 4 3 4 0 h 0 e 1 2 2 f 1 b 0 9 5 5 1 3 l 2 6 2 1 2 1 2 1 w 3 2 0 k 2 h 8 2 2 2 l 2 6 2 1 2 4 4 0 j 0 g 1 o 0 c 7 3 1 3 l 2 6 2 1 2 4 4 0 v 1 2 2 g 0 i 0 2 5 4 2 2 3 4 1 2 0 2 1 4 1 4 2 4 b n 0 1h 7 2 2 2 m 2 f 4 0 r 2 6 1 v 0 5 7 2 2 2 m 2 9 2 4 4 0 x 0 2 1 g 1 i 8 2 2 2 14 3 0 h 0 6 2 9 2 p 5 6 h 4 n 2 8 2 0 3 6 1n 1b 2 1 d 6 1n 1 2 0 2 4 2 n 2 0 2 9 2 1 a 0 3 4 2 0 m 3 x 0 1s 7 2 z s 4 38 16 l 0 h 5 5 3 4 0 4 1 8 2 5 c d 0 i 11 2 0 6 0 3 16 2 98 2 3 3 6 2 0 2 3 3 14 2 3 3 w 2 3 3 6 2 0 2 3 3 e 2 1k 2 3 3 1u 12 f h 2d 3 5 4 h7 3 g 2 p 6 22 4 a 8 c 2 3 f h f h f c 2 2 g 1f 10 0 5 0 1w 2g 8 14 2 0 6 1x b u 1e t 3 4 c 17 5 p 1j m a 1g 2b 0 2m 1a i 6 1k t e 1 b 17 r z 16 2 b z 3 8 8 16 3 2 16 3 2 5 2 1 4 0 6 5b 1t 7p 3 5 3 11 3 5 3 7 2 0 2 0 2 0 2 u 3 1g 2 6 2 0 4 2 2 6 4 3 3 5 5 c 6 2 2 6 39 0 e 0 h c 2u 0 5 0 3 9 2 0 3 5 7 0 2 0 2 0 2 f 3 3 6 4 5 0 i 14 22g 1a 2 1a 2 3o 7 3 4 1 d 11 2 0 6 0 3 1j 8 0 h m a 6 2 6 2 6 2 6 2 6 2 6 2 6 2 6 fb 2 q 8 8 4 3 4 5 2d 5 4 2 2h 2 3 6 16 2 2l i v 1d f e9 533 1t g70 4 wc 1w 19 3 7g 4 f b 1 l 1a h u 3 27 14 8 3 2u 3 1g 3 8 17 c 2 2 2 3 2 m u 1f f 1d 1r 5 4 0 2 1 c r b m q s 8 1a t 0 h 4 2 9 b 4 2 14 o 2 2 7 l m 4 0 4 1d 2 0 4 1 3 4 3 0 2 0 p 2 3 a 8 2 d 5 3 5 3 5 a 6 2 6 2 16 2 d 7 36 u 8mb d m 5 1c 6it a5 3 2x 13 6 d 4 6 0 2 9 2 c 2 4 2 0 2 1 2 1 2 2z y a2 j 1r 3 1h 15 b 39 4 2 3q 11 p 7 p c 2g 4 5 3 5 3 5 3 2 10 b 2 p 2 i 2 1 2 e 3 d z 3e 1y 1g 7g s 4 1c 1c v e t 6 11 b t 3 z 5 7 2 4 17 4d j z 5 z 5 13 9 1f 4d 8m a l b 7 49 5 3 0 2 17 2 1 4 0 3 m b m a u 1u i 2 1 b l b p 1z 1j 7 1 1t 0 g 3 2 2 2 s 17 s 4 s 10 7 2 r s 1h b l b i e h 33 20 1k 1e e 1e e z 9p 15 7 1 27 s b 0 9 l 2z k s m d 1g 24 18 x o r z u 0 3 0 9 y 4 0 d 1b f 3 m 0 2 0 10 h 2 o 2d 6 2 0 2 3 2 e 2 9 8 1a 13 7 3 1 3 l 2 6 2 1 2 4 4 0 j 0 d 4 4f 1g j 3 l 2 v 1b l 1 2 0 55 1a 16 3 11 1b l 0 1o 16 e 0 20 q 6e 17 39 1r w 7 3 0 3 7 2 1 2 n g 0 2 0 2n 7 3 12 h 0 2 0 t 0 b 13 8 0 m 0 c 19 k 0 z 1k 7c 8 2 10 i 0 1e t 35 6 2 1 2 11 m 0 q 5 2 1 2 v f 0 94 i 5a 0 28 pl 2v 32 i 5f 24d tq 34i g6 6nu fs 8 u 36 t j 1b h 3 w k 6 i j5 1r 3l 22 6 0 1v c 1t 1 2 0 t 4qf 9 yd 17 8 6wo 7y 1e 2 i 3 9 az 1s5 2y 6 c 4 8 8 9 4mf 2c 2 1y 2 1 3 0 3 1 3 3 2 b 2 0 2 6 2 1s 2 3 3 7 2 6 2 r 2 3 2 4 2 0 4 6 2 9f 3 o 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 u 2 o 2 7 1th 18 b 6 h 0 aa 17 105 5g 1o 1v 8 0 xh 3 2 q 2 1 2 0 3 0 2 9 2 3 2 0 2 0 7 0 5 0 2 0 2 0 2 2 2 1 2 0 3 0 2 0 2 0 2 0 2 0 2 1 2 0 3 3 2 6 2 3 2 3 2 0 2 9 2 g 6 2 2 4 2 g 3et wyl z 378 c 65 3 4g1 f 5rk 2e8 f1 15v 3t6");
      }
      function initLargeIdContinueRanges() {
        return restoreRanges("53 0 g9 33 o 0 70 4 7e 18 2 0 2 1 2 1 2 0 21 a 1d u 7 0 2u 6 3 5 3 1 2 3 3 9 o 0 v q 2k a g 9 y 8 a 0 p 3 2 8 2 2 2 4 18 2 3c e 2 w 1j 2 2 h 2 6 b 1 3 9 i 2 1l 0 2 6 3 1 3 2 a 0 b 1 3 9 f 0 3 2 1l 0 2 4 5 1 3 2 4 0 l b 4 0 c 2 1l 0 2 7 2 2 2 2 l 1 3 9 b 5 2 2 1l 0 2 6 3 1 3 2 8 2 b 1 3 9 j 0 1o 4 4 2 2 3 a 0 f 9 h 4 1m 6 2 2 2 3 8 1 c 1 3 9 i 2 1l 0 2 6 2 2 2 3 8 1 c 1 3 9 h 3 1k 1 2 6 2 2 2 3 a 0 b 1 3 9 i 2 1z 0 5 5 2 0 2 7 7 9 3 1 1q 0 3 6 d 7 2 9 2g 0 3 8 c 5 3 9 1r 1 7 9 c 0 2 0 2 0 5 1 1e j 2 1 6 a 2 z a 0 2t j 2 9 d 3 5 2 2 2 3 6 4 3 e b 2 e jk 2 a 8 pt 2 u 2 u 1 v 1 1t v a 0 3 9 y 2 3 9 40 0 3b b 5 b b 9 3l a 1p 4 1m 9 2 s 3 a 7 9 n d 2 1 1s 4 1c g c 9 i 8 d 2 v c 3 9 19 d 1d j 9 9 7 9 3b 2 2 k 5 0 7 0 3 2 5j 1l 2 4 g0 1 k 0 3g c 5 0 4 b 2db 2 3y 0 2p v ff 5 2y 1 n7q 9 1y 0 5 9 x 1 29 1 7l 0 4 0 5 0 o 4 5 0 2c 1 1f h b 9 7 h e a t 7 q c 19 3 1c d g 9 c 0 b 9 1c d d 0 9 1 3 9 y 2 1f 0 2 2 3 1 6 1 2 0 16 4 6 1 6l 7 2 1 3 9 fmt 0 ki f h f 4 1 p 2 5d 9 12 0 ji 0 6b 0 46 4 86 9 120 2 2 1 6 3 15 2 5 0 4m 1 fy 3 9 9 aa 1 4a a 4w 2 1i e w 9 g 3 1a a 1i 9 7 2 11 d 2 9 6 1 19 0 d 2 1d d 9 3 2 b 2b b 7 0 4h b 6 9 7 3 1k 1 2 6 3 1 3 2 a 0 b 1 3 6 4 4 5d h a 9 5 0 2a j d 9 5y 6 3 8 s 1 2b g g 9 2a c 9 9 2c e 5 9 6r e 4m 9 1z 5 2 1 3 3 2 0 2 1 d 9 3c 6 3 6 4 0 t 9 15 6 2 3 9 0 a a 1b f ba 7 2 7 h 9 1l l 2 d 3f 5 4 0 2 1 2 6 2 0 9 9 1d 4 2 1 2 4 9 9 96 3 ewa 9 3r 4 1o 6 q 9 s6 0 2 1i 8 3 2a 0 c 1 f58 1 43r 4 4 5 9 7 3 6 v 3 45 2 13e 1d e9 1i 5 1d 9 0 f 0 n 4 2 e 11t 6 2 g 3 6 2 1 2 4 7a 6 a 9 bn d 15j 6 32 6 6 9 3o7 9 gvt3 6n");
      }
      function isInRange$2(cp, ranges) {
        let l = 0, r = ranges.length / 2 | 0, i = 0, min = 0, max = 0;
        while (l < r) {
          i = (l + r) / 2 | 0;
          min = ranges[2 * i];
          max = ranges[2 * i + 1];
          if (cp < min) {
            r = i;
          } else if (cp > max) {
            l = i + 1;
          } else {
            return true;
          }
        }
        return false;
      }
      function restoreRanges(data) {
        let last = 0;
        return data.split(" ").map(s => last += parseInt(s, 36) | 0);
      }
      class DataSet {
        constructor(raw2018, raw2019, raw2020, raw2021) {
          this._raw2018 = raw2018;
          this._raw2019 = raw2019;
          this._raw2020 = raw2020;
          this._raw2021 = raw2021;
        }
        get es2018() {
          return this._set2018 || (this._set2018 = new Set(this._raw2018.split(" ")));
        }
        get es2019() {
          return this._set2019 || (this._set2019 = new Set(this._raw2019.split(" ")));
        }
        get es2020() {
          return this._set2020 || (this._set2020 = new Set(this._raw2020.split(" ")));
        }
        get es2021() {
          return this._set2021 || (this._set2021 = new Set(this._raw2021.split(" ")));
        }
      }
      const gcNameSet = new Set([
        "General_Category",
        "gc"
      ]);
      const scNameSet = new Set([
        "Script",
        "Script_Extensions",
        "sc",
        "scx"
      ]);
      const gcValueSets = new DataSet("C Cased_Letter Cc Cf Close_Punctuation Cn Co Combining_Mark Connector_Punctuation Control Cs Currency_Symbol Dash_Punctuation Decimal_Number Enclosing_Mark Final_Punctuation Format Initial_Punctuation L LC Letter Letter_Number Line_Separator Ll Lm Lo Lowercase_Letter Lt Lu M Mark Math_Symbol Mc Me Mn Modifier_Letter Modifier_Symbol N Nd Nl No Nonspacing_Mark Number Open_Punctuation Other Other_Letter Other_Number Other_Punctuation Other_Symbol P Paragraph_Separator Pc Pd Pe Pf Pi Po Private_Use Ps Punctuation S Sc Separator Sk Sm So Space_Separator Spacing_Mark Surrogate Symbol Titlecase_Letter Unassigned Uppercase_Letter Z Zl Zp Zs cntrl digit punct", "", "", "");
      const scValueSets = new DataSet("Adlam Adlm Aghb Ahom Anatolian_Hieroglyphs Arab Arabic Armenian Armi Armn Avestan Avst Bali Balinese Bamu Bamum Bass Bassa_Vah Batak Batk Beng Bengali Bhaiksuki Bhks Bopo Bopomofo Brah Brahmi Brai Braille Bugi Buginese Buhd Buhid Cakm Canadian_Aboriginal Cans Cari Carian Caucasian_Albanian Chakma Cham Cher Cherokee Common Copt Coptic Cprt Cuneiform Cypriot Cyrillic Cyrl Deseret Deva Devanagari Dsrt Dupl Duployan Egyp Egyptian_Hieroglyphs Elba Elbasan Ethi Ethiopic Geor Georgian Glag Glagolitic Gonm Goth Gothic Gran Grantha Greek Grek Gujarati Gujr Gurmukhi Guru Han Hang Hangul Hani Hano Hanunoo Hatr Hatran Hebr Hebrew Hira Hiragana Hluw Hmng Hung Imperial_Aramaic Inherited Inscriptional_Pahlavi Inscriptional_Parthian Ital Java Javanese Kaithi Kali Kana Kannada Katakana Kayah_Li Khar Kharoshthi Khmer Khmr Khoj Khojki Khudawadi Knda Kthi Lana Lao Laoo Latin Latn Lepc Lepcha Limb Limbu Lina Linb Linear_A Linear_B Lisu Lyci Lycian Lydi Lydian Mahajani Mahj Malayalam Mand Mandaic Mani Manichaean Marc Marchen Masaram_Gondi Meetei_Mayek Mend Mende_Kikakui Merc Mero Meroitic_Cursive Meroitic_Hieroglyphs Miao Mlym Modi Mong Mongolian Mro Mroo Mtei Mult Multani Myanmar Mymr Nabataean Narb Nbat New_Tai_Lue Newa Nko Nkoo Nshu Nushu Ogam Ogham Ol_Chiki Olck Old_Hungarian Old_Italic Old_North_Arabian Old_Permic Old_Persian Old_South_Arabian Old_Turkic Oriya Orkh Orya Osage Osge Osma Osmanya Pahawh_Hmong Palm Palmyrene Pau_Cin_Hau Pauc Perm Phag Phags_Pa Phli Phlp Phnx Phoenician Plrd Prti Psalter_Pahlavi Qaac Qaai Rejang Rjng Runic Runr Samaritan Samr Sarb Saur Saurashtra Sgnw Sharada Shavian Shaw Shrd Sidd Siddham SignWriting Sind Sinh Sinhala Sora Sora_Sompeng Soyo Soyombo Sund Sundanese Sylo Syloti_Nagri Syrc Syriac Tagalog Tagb Tagbanwa Tai_Le Tai_Tham Tai_Viet Takr Takri Tale Talu Tamil Taml Tang Tangut Tavt Telu Telugu Tfng Tglg Thaa Thaana Thai Tibetan Tibt Tifinagh Tirh Tirhuta Ugar Ugaritic Vai Vaii Wara Warang_Citi Xpeo Xsux Yi Yiii Zanabazar_Square Zanb Zinh Zyyy", "Dogr Dogra Gong Gunjala_Gondi Hanifi_Rohingya Maka Makasar Medefaidrin Medf Old_Sogdian Rohg Sogd Sogdian Sogo", "Elym Elymaic Hmnp Nand Nandinagari Nyiakeng_Puachue_Hmong Wancho Wcho", "Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi");
      const binPropertySets = new DataSet("AHex ASCII ASCII_Hex_Digit Alpha Alphabetic Any Assigned Bidi_C Bidi_Control Bidi_M Bidi_Mirrored CI CWCF CWCM CWKCF CWL CWT CWU Case_Ignorable Cased Changes_When_Casefolded Changes_When_Casemapped Changes_When_Lowercased Changes_When_NFKC_Casefolded Changes_When_Titlecased Changes_When_Uppercased DI Dash Default_Ignorable_Code_Point Dep Deprecated Dia Diacritic Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Ext Extender Gr_Base Gr_Ext Grapheme_Base Grapheme_Extend Hex Hex_Digit IDC IDS IDSB IDST IDS_Binary_Operator IDS_Trinary_Operator ID_Continue ID_Start Ideo Ideographic Join_C Join_Control LOE Logical_Order_Exception Lower Lowercase Math NChar Noncharacter_Code_Point Pat_Syn Pat_WS Pattern_Syntax Pattern_White_Space QMark Quotation_Mark RI Radical Regional_Indicator SD STerm Sentence_Terminal Soft_Dotted Term Terminal_Punctuation UIdeo Unified_Ideograph Upper Uppercase VS Variation_Selector White_Space XIDC XIDS XID_Continue XID_Start space", "Extended_Pictographic", "", "EBase EComp EMod EPres ExtPict");
      function isValidUnicodeProperty(version, name, value) {
        if (gcNameSet.has(name)) {
          return version >= 2018 && gcValueSets.es2018.has(value);
        }
        if (scNameSet.has(name)) {
          return version >= 2018 && scValueSets.es2018.has(value) || version >= 2019 && scValueSets.es2019.has(value) || version >= 2020 && scValueSets.es2020.has(value) || version >= 2021 && scValueSets.es2021.has(value);
        }
        return false;
      }
      function isValidLoneUnicodeProperty(version, value) {
        return version >= 2018 && binPropertySets.es2018.has(value) || version >= 2019 && binPropertySets.es2019.has(value) || version >= 2021 && binPropertySets.es2021.has(value);
      }
      const Backspace = 8;
      const CharacterTabulation = 9;
      const LineFeed = 10;
      const LineTabulation = 11;
      const FormFeed = 12;
      const CarriageReturn = 13;
      const ExclamationMark = 33;
      const DollarSign = 36;
      const LeftParenthesis = 40;
      const RightParenthesis = 41;
      const Asterisk = 42;
      const PlusSign = 43;
      const Comma = 44;
      const HyphenMinus = 45;
      const FullStop = 46;
      const Solidus = 47;
      const DigitZero = 48;
      const DigitOne = 49;
      const DigitSeven = 55;
      const DigitNine = 57;
      const Colon = 58;
      const LessThanSign = 60;
      const EqualsSign = 61;
      const GreaterThanSign = 62;
      const QuestionMark = 63;
      const LatinCapitalLetterA = 65;
      const LatinCapitalLetterB = 66;
      const LatinCapitalLetterD = 68;
      const LatinCapitalLetterF = 70;
      const LatinCapitalLetterP = 80;
      const LatinCapitalLetterS = 83;
      const LatinCapitalLetterW = 87;
      const LatinCapitalLetterZ = 90;
      const LowLine = 95;
      const LatinSmallLetterA = 97;
      const LatinSmallLetterB = 98;
      const LatinSmallLetterC = 99;
      const LatinSmallLetterD = 100;
      const LatinSmallLetterF = 102;
      const LatinSmallLetterG = 103;
      const LatinSmallLetterI = 105;
      const LatinSmallLetterK = 107;
      const LatinSmallLetterM = 109;
      const LatinSmallLetterN = 110;
      const LatinSmallLetterP = 112;
      const LatinSmallLetterR = 114;
      const LatinSmallLetterS = 115;
      const LatinSmallLetterT = 116;
      const LatinSmallLetterU = 117;
      const LatinSmallLetterV = 118;
      const LatinSmallLetterW = 119;
      const LatinSmallLetterX = 120;
      const LatinSmallLetterY = 121;
      const LatinSmallLetterZ = 122;
      const LeftSquareBracket = 91;
      const ReverseSolidus = 92;
      const RightSquareBracket = 93;
      const CircumflexAccent = 94;
      const LeftCurlyBracket = 123;
      const VerticalLine = 124;
      const RightCurlyBracket = 125;
      const ZeroWidthNonJoiner = 8204;
      const ZeroWidthJoiner = 8205;
      const LineSeparator = 8232;
      const ParagraphSeparator = 8233;
      const MinCodePoint = 0;
      const MaxCodePoint = 1114111;
      function isLatinLetter(code) {
        return code >= LatinCapitalLetterA && code <= LatinCapitalLetterZ || code >= LatinSmallLetterA && code <= LatinSmallLetterZ;
      }
      function isDecimalDigit(code) {
        return code >= DigitZero && code <= DigitNine;
      }
      function isOctalDigit(code) {
        return code >= DigitZero && code <= DigitSeven;
      }
      function isHexDigit(code) {
        return code >= DigitZero && code <= DigitNine || code >= LatinCapitalLetterA && code <= LatinCapitalLetterF || code >= LatinSmallLetterA && code <= LatinSmallLetterF;
      }
      function isLineTerminator(code) {
        return code === LineFeed || code === CarriageReturn || code === LineSeparator || code === ParagraphSeparator;
      }
      function isValidUnicode(code) {
        return code >= MinCodePoint && code <= MaxCodePoint;
      }
      function digitToInt(code) {
        if (code >= LatinSmallLetterA && code <= LatinSmallLetterF) {
          return code - LatinSmallLetterA + 10;
        }
        if (code >= LatinCapitalLetterA && code <= LatinCapitalLetterF) {
          return code - LatinCapitalLetterA + 10;
        }
        return code - DigitZero;
      }
      function isLeadSurrogate(code) {
        return code >= 55296 && code <= 56319;
      }
      function isTrailSurrogate(code) {
        return code >= 56320 && code <= 57343;
      }
      function combineSurrogatePair(lead, trail) {
        return (lead - 55296) * 1024 + (trail - 56320) + 65536;
      }
      const legacyImpl = {
        at(s, end, i) {
          return i < end ? s.charCodeAt(i) : -1;
        },
        width(c) {
          return 1;
        }
      };
      const unicodeImpl = {
        at(s, end, i) {
          return i < end ? s.codePointAt(i) : -1;
        },
        width(c) {
          return c > 65535 ? 2 : 1;
        }
      };
      class Reader {
        constructor() {
          this._impl = legacyImpl;
          this._s = "";
          this._i = 0;
          this._end = 0;
          this._cp1 = -1;
          this._w1 = 1;
          this._cp2 = -1;
          this._w2 = 1;
          this._cp3 = -1;
          this._w3 = 1;
          this._cp4 = -1;
        }
        get source() {
          return this._s;
        }
        get index() {
          return this._i;
        }
        get currentCodePoint() {
          return this._cp1;
        }
        get nextCodePoint() {
          return this._cp2;
        }
        get nextCodePoint2() {
          return this._cp3;
        }
        get nextCodePoint3() {
          return this._cp4;
        }
        reset(source, start, end, uFlag) {
          this._impl = uFlag ? unicodeImpl : legacyImpl;
          this._s = source;
          this._end = end;
          this.rewind(start);
        }
        rewind(index) {
          const impl = this._impl;
          this._i = index;
          this._cp1 = impl.at(this._s, this._end, index);
          this._w1 = impl.width(this._cp1);
          this._cp2 = impl.at(this._s, this._end, index + this._w1);
          this._w2 = impl.width(this._cp2);
          this._cp3 = impl.at(this._s, this._end, index + this._w1 + this._w2);
          this._w3 = impl.width(this._cp3);
          this._cp4 = impl.at(this._s, this._end, index + this._w1 + this._w2 + this._w3);
        }
        advance() {
          if (this._cp1 !== -1) {
            const impl = this._impl;
            this._i += this._w1;
            this._cp1 = this._cp2;
            this._w1 = this._w2;
            this._cp2 = this._cp3;
            this._w2 = impl.width(this._cp2);
            this._cp3 = this._cp4;
            this._w3 = impl.width(this._cp3);
            this._cp4 = impl.at(this._s, this._end, this._i + this._w1 + this._w2 + this._w3);
          }
        }
        eat(cp) {
          if (this._cp1 === cp) {
            this.advance();
            return true;
          }
          return false;
        }
        eat2(cp1, cp2) {
          if (this._cp1 === cp1 && this._cp2 === cp2) {
            this.advance();
            this.advance();
            return true;
          }
          return false;
        }
        eat3(cp1, cp2, cp3) {
          if (this._cp1 === cp1 && this._cp2 === cp2 && this._cp3 === cp3) {
            this.advance();
            this.advance();
            this.advance();
            return true;
          }
          return false;
        }
      }
      class RegExpSyntaxError extends SyntaxError {
        constructor(source, uFlag, index, message) {
          if (source) {
            if (!source.startsWith("/")) {
              source = `/${ source }/${ uFlag ? "u" : "" }`;
            }
            source = `: ${ source }`;
          }
          super(`Invalid regular expression${ source }: ${ message }`);
          this.index = index;
        }
      }
      function isSyntaxCharacter(cp) {
        return cp === CircumflexAccent || cp === DollarSign || cp === ReverseSolidus || cp === FullStop || cp === Asterisk || cp === PlusSign || cp === QuestionMark || cp === LeftParenthesis || cp === RightParenthesis || cp === LeftSquareBracket || cp === RightSquareBracket || cp === LeftCurlyBracket || cp === RightCurlyBracket || cp === VerticalLine;
      }
      function isRegExpIdentifierStart(cp) {
        return isIdStart(cp) || cp === DollarSign || cp === LowLine;
      }
      function isRegExpIdentifierPart(cp) {
        return isIdContinue(cp) || cp === DollarSign || cp === LowLine || cp === ZeroWidthNonJoiner || cp === ZeroWidthJoiner;
      }
      function isUnicodePropertyNameCharacter(cp) {
        return isLatinLetter(cp) || cp === LowLine;
      }
      function isUnicodePropertyValueCharacter(cp) {
        return isUnicodePropertyNameCharacter(cp) || isDecimalDigit(cp);
      }
      class RegExpValidator$2 {
        constructor(options) {
          this._reader = new Reader();
          this._uFlag = false;
          this._nFlag = false;
          this._lastIntValue = 0;
          this._lastMinValue = 0;
          this._lastMaxValue = 0;
          this._lastStrValue = "";
          this._lastKeyValue = "";
          this._lastValValue = "";
          this._lastAssertionIsQuantifiable = false;
          this._numCapturingParens = 0;
          this._groupNames = new Set();
          this._backreferenceNames = new Set();
          this._options = options || {};
        }
        validateLiteral(source, start = 0, end = source.length) {
          this._uFlag = this._nFlag = false;
          this.reset(source, start, end);
          this.onLiteralEnter(start);
          if (this.eat(Solidus) && this.eatRegExpBody() && this.eat(Solidus)) {
            const flagStart = this.index;
            const uFlag = source.includes("u", flagStart);
            this.validateFlags(source, flagStart, end);
            this.validatePattern(source, start + 1, flagStart - 1, uFlag);
          } else if (start >= end) {
            this.raise("Empty");
          } else {
            const c = String.fromCodePoint(this.currentCodePoint);
            this.raise(`Unexpected character '${ c }'`);
          }
          this.onLiteralLeave(start, end);
        }
        validateFlags(source, start = 0, end = source.length) {
          const existingFlags = new Set();
          let global = false;
          let ignoreCase = false;
          let multiline = false;
          let sticky = false;
          let unicode = false;
          let dotAll = false;
          let hasIndices = false;
          for (let i = start; i < end; ++i) {
            const flag = source.charCodeAt(i);
            if (existingFlags.has(flag)) {
              this.raise(`Duplicated flag '${ source[i] }'`);
            }
            existingFlags.add(flag);
            if (flag === LatinSmallLetterG) {
              global = true;
            } else if (flag === LatinSmallLetterI) {
              ignoreCase = true;
            } else if (flag === LatinSmallLetterM) {
              multiline = true;
            } else if (flag === LatinSmallLetterU && this.ecmaVersion >= 2015) {
              unicode = true;
            } else if (flag === LatinSmallLetterY && this.ecmaVersion >= 2015) {
              sticky = true;
            } else if (flag === LatinSmallLetterS && this.ecmaVersion >= 2018) {
              dotAll = true;
            } else if (flag === LatinSmallLetterD && this.ecmaVersion >= 2022) {
              hasIndices = true;
            } else {
              this.raise(`Invalid flag '${ source[i] }'`);
            }
          }
          this.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices);
        }
        validatePattern(source, start = 0, end = source.length, uFlag = false) {
          this._uFlag = uFlag && this.ecmaVersion >= 2015;
          this._nFlag = uFlag && this.ecmaVersion >= 2018;
          this.reset(source, start, end);
          this.consumePattern();
          if (!this._nFlag && this.ecmaVersion >= 2018 && this._groupNames.size > 0) {
            this._nFlag = true;
            this.rewind(start);
            this.consumePattern();
          }
        }
        get strict() {
          return Boolean(this._options.strict || this._uFlag);
        }
        get ecmaVersion() {
          return this._options.ecmaVersion || 2022;
        }
        onLiteralEnter(start) {
          if (this._options.onLiteralEnter) {
            this._options.onLiteralEnter(start);
          }
        }
        onLiteralLeave(start, end) {
          if (this._options.onLiteralLeave) {
            this._options.onLiteralLeave(start, end);
          }
        }
        onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices) {
          if (this._options.onFlags) {
            this._options.onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices);
          }
        }
        onPatternEnter(start) {
          if (this._options.onPatternEnter) {
            this._options.onPatternEnter(start);
          }
        }
        onPatternLeave(start, end) {
          if (this._options.onPatternLeave) {
            this._options.onPatternLeave(start, end);
          }
        }
        onDisjunctionEnter(start) {
          if (this._options.onDisjunctionEnter) {
            this._options.onDisjunctionEnter(start);
          }
        }
        onDisjunctionLeave(start, end) {
          if (this._options.onDisjunctionLeave) {
            this._options.onDisjunctionLeave(start, end);
          }
        }
        onAlternativeEnter(start, index) {
          if (this._options.onAlternativeEnter) {
            this._options.onAlternativeEnter(start, index);
          }
        }
        onAlternativeLeave(start, end, index) {
          if (this._options.onAlternativeLeave) {
            this._options.onAlternativeLeave(start, end, index);
          }
        }
        onGroupEnter(start) {
          if (this._options.onGroupEnter) {
            this._options.onGroupEnter(start);
          }
        }
        onGroupLeave(start, end) {
          if (this._options.onGroupLeave) {
            this._options.onGroupLeave(start, end);
          }
        }
        onCapturingGroupEnter(start, name) {
          if (this._options.onCapturingGroupEnter) {
            this._options.onCapturingGroupEnter(start, name);
          }
        }
        onCapturingGroupLeave(start, end, name) {
          if (this._options.onCapturingGroupLeave) {
            this._options.onCapturingGroupLeave(start, end, name);
          }
        }
        onQuantifier(start, end, min, max, greedy) {
          if (this._options.onQuantifier) {
            this._options.onQuantifier(start, end, min, max, greedy);
          }
        }
        onLookaroundAssertionEnter(start, kind, negate) {
          if (this._options.onLookaroundAssertionEnter) {
            this._options.onLookaroundAssertionEnter(start, kind, negate);
          }
        }
        onLookaroundAssertionLeave(start, end, kind, negate) {
          if (this._options.onLookaroundAssertionLeave) {
            this._options.onLookaroundAssertionLeave(start, end, kind, negate);
          }
        }
        onEdgeAssertion(start, end, kind) {
          if (this._options.onEdgeAssertion) {
            this._options.onEdgeAssertion(start, end, kind);
          }
        }
        onWordBoundaryAssertion(start, end, kind, negate) {
          if (this._options.onWordBoundaryAssertion) {
            this._options.onWordBoundaryAssertion(start, end, kind, negate);
          }
        }
        onAnyCharacterSet(start, end, kind) {
          if (this._options.onAnyCharacterSet) {
            this._options.onAnyCharacterSet(start, end, kind);
          }
        }
        onEscapeCharacterSet(start, end, kind, negate) {
          if (this._options.onEscapeCharacterSet) {
            this._options.onEscapeCharacterSet(start, end, kind, negate);
          }
        }
        onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {
          if (this._options.onUnicodePropertyCharacterSet) {
            this._options.onUnicodePropertyCharacterSet(start, end, kind, key, value, negate);
          }
        }
        onCharacter(start, end, value) {
          if (this._options.onCharacter) {
            this._options.onCharacter(start, end, value);
          }
        }
        onBackreference(start, end, ref) {
          if (this._options.onBackreference) {
            this._options.onBackreference(start, end, ref);
          }
        }
        onCharacterClassEnter(start, negate) {
          if (this._options.onCharacterClassEnter) {
            this._options.onCharacterClassEnter(start, negate);
          }
        }
        onCharacterClassLeave(start, end, negate) {
          if (this._options.onCharacterClassLeave) {
            this._options.onCharacterClassLeave(start, end, negate);
          }
        }
        onCharacterClassRange(start, end, min, max) {
          if (this._options.onCharacterClassRange) {
            this._options.onCharacterClassRange(start, end, min, max);
          }
        }
        get source() {
          return this._reader.source;
        }
        get index() {
          return this._reader.index;
        }
        get currentCodePoint() {
          return this._reader.currentCodePoint;
        }
        get nextCodePoint() {
          return this._reader.nextCodePoint;
        }
        get nextCodePoint2() {
          return this._reader.nextCodePoint2;
        }
        get nextCodePoint3() {
          return this._reader.nextCodePoint3;
        }
        reset(source, start, end) {
          this._reader.reset(source, start, end, this._uFlag);
        }
        rewind(index) {
          this._reader.rewind(index);
        }
        advance() {
          this._reader.advance();
        }
        eat(cp) {
          return this._reader.eat(cp);
        }
        eat2(cp1, cp2) {
          return this._reader.eat2(cp1, cp2);
        }
        eat3(cp1, cp2, cp3) {
          return this._reader.eat3(cp1, cp2, cp3);
        }
        raise(message) {
          throw new RegExpSyntaxError(this.source, this._uFlag, this.index, message);
        }
        eatRegExpBody() {
          const start = this.index;
          let inClass = false;
          let escaped = false;
          for (;;) {
            const cp = this.currentCodePoint;
            if (cp === -1 || isLineTerminator(cp)) {
              const kind = inClass ? "character class" : "regular expression";
              this.raise(`Unterminated ${ kind }`);
            }
            if (escaped) {
              escaped = false;
            } else if (cp === ReverseSolidus) {
              escaped = true;
            } else if (cp === LeftSquareBracket) {
              inClass = true;
            } else if (cp === RightSquareBracket) {
              inClass = false;
            } else if (cp === Solidus && !inClass || cp === Asterisk && this.index === start) {
              break;
            }
            this.advance();
          }
          return this.index !== start;
        }
        consumePattern() {
          const start = this.index;
          this._numCapturingParens = this.countCapturingParens();
          this._groupNames.clear();
          this._backreferenceNames.clear();
          this.onPatternEnter(start);
          this.consumeDisjunction();
          const cp = this.currentCodePoint;
          if (this.currentCodePoint !== -1) {
            if (cp === RightParenthesis) {
              this.raise("Unmatched ')'");
            }
            if (cp === ReverseSolidus) {
              this.raise("\\ at end of pattern");
            }
            if (cp === RightSquareBracket || cp === RightCurlyBracket) {
              this.raise("Lone quantifier brackets");
            }
            const c = String.fromCodePoint(cp);
            this.raise(`Unexpected character '${ c }'`);
          }
          for (const name of this._backreferenceNames) {
            if (!this._groupNames.has(name)) {
              this.raise("Invalid named capture referenced");
            }
          }
          this.onPatternLeave(start, this.index);
        }
        countCapturingParens() {
          const start = this.index;
          let inClass = false;
          let escaped = false;
          let count = 0;
          let cp = 0;
          while ((cp = this.currentCodePoint) !== -1) {
            if (escaped) {
              escaped = false;
            } else if (cp === ReverseSolidus) {
              escaped = true;
            } else if (cp === LeftSquareBracket) {
              inClass = true;
            } else if (cp === RightSquareBracket) {
              inClass = false;
            } else if (cp === LeftParenthesis && !inClass && (this.nextCodePoint !== QuestionMark || this.nextCodePoint2 === LessThanSign && this.nextCodePoint3 !== EqualsSign && this.nextCodePoint3 !== ExclamationMark)) {
              count += 1;
            }
            this.advance();
          }
          this.rewind(start);
          return count;
        }
        consumeDisjunction() {
          const start = this.index;
          let i = 0;
          this.onDisjunctionEnter(start);
          do {
            this.consumeAlternative(i++);
          } while (this.eat(VerticalLine));
          if (this.consumeQuantifier(true)) {
            this.raise("Nothing to repeat");
          }
          if (this.eat(LeftCurlyBracket)) {
            this.raise("Lone quantifier brackets");
          }
          this.onDisjunctionLeave(start, this.index);
        }
        consumeAlternative(i) {
          const start = this.index;
          this.onAlternativeEnter(start, i);
          while (this.currentCodePoint !== -1 && this.consumeTerm()) {
          }
          this.onAlternativeLeave(start, this.index, i);
        }
        consumeTerm() {
          if (this._uFlag || this.strict) {
            return this.consumeAssertion() || this.consumeAtom() && this.consumeOptionalQuantifier();
          }
          return this.consumeAssertion() && (!this._lastAssertionIsQuantifiable || this.consumeOptionalQuantifier()) || this.consumeExtendedAtom() && this.consumeOptionalQuantifier();
        }
        consumeOptionalQuantifier() {
          this.consumeQuantifier();
          return true;
        }
        consumeAssertion() {
          const start = this.index;
          this._lastAssertionIsQuantifiable = false;
          if (this.eat(CircumflexAccent)) {
            this.onEdgeAssertion(start, this.index, "start");
            return true;
          }
          if (this.eat(DollarSign)) {
            this.onEdgeAssertion(start, this.index, "end");
            return true;
          }
          if (this.eat2(ReverseSolidus, LatinCapitalLetterB)) {
            this.onWordBoundaryAssertion(start, this.index, "word", true);
            return true;
          }
          if (this.eat2(ReverseSolidus, LatinSmallLetterB)) {
            this.onWordBoundaryAssertion(start, this.index, "word", false);
            return true;
          }
          if (this.eat2(LeftParenthesis, QuestionMark)) {
            const lookbehind = this.ecmaVersion >= 2018 && this.eat(LessThanSign);
            let negate = false;
            if (this.eat(EqualsSign) || (negate = this.eat(ExclamationMark))) {
              const kind = lookbehind ? "lookbehind" : "lookahead";
              this.onLookaroundAssertionEnter(start, kind, negate);
              this.consumeDisjunction();
              if (!this.eat(RightParenthesis)) {
                this.raise("Unterminated group");
              }
              this._lastAssertionIsQuantifiable = !lookbehind && !this.strict;
              this.onLookaroundAssertionLeave(start, this.index, kind, negate);
              return true;
            }
            this.rewind(start);
          }
          return false;
        }
        consumeQuantifier(noConsume = false) {
          const start = this.index;
          let min = 0;
          let max = 0;
          let greedy = false;
          if (this.eat(Asterisk)) {
            min = 0;
            max = Number.POSITIVE_INFINITY;
          } else if (this.eat(PlusSign)) {
            min = 1;
            max = Number.POSITIVE_INFINITY;
          } else if (this.eat(QuestionMark)) {
            min = 0;
            max = 1;
          } else if (this.eatBracedQuantifier(noConsume)) {
            min = this._lastMinValue;
            max = this._lastMaxValue;
          } else {
            return false;
          }
          greedy = !this.eat(QuestionMark);
          if (!noConsume) {
            this.onQuantifier(start, this.index, min, max, greedy);
          }
          return true;
        }
        eatBracedQuantifier(noError) {
          const start = this.index;
          if (this.eat(LeftCurlyBracket)) {
            this._lastMinValue = 0;
            this._lastMaxValue = Number.POSITIVE_INFINITY;
            if (this.eatDecimalDigits()) {
              this._lastMinValue = this._lastMaxValue = this._lastIntValue;
              if (this.eat(Comma)) {
                this._lastMaxValue = this.eatDecimalDigits() ? this._lastIntValue : Number.POSITIVE_INFINITY;
              }
              if (this.eat(RightCurlyBracket)) {
                if (!noError && this._lastMaxValue < this._lastMinValue) {
                  this.raise("numbers out of order in {} quantifier");
                }
                return true;
              }
            }
            if (!noError && (this._uFlag || this.strict)) {
              this.raise("Incomplete quantifier");
            }
            this.rewind(start);
          }
          return false;
        }
        consumeAtom() {
          return this.consumePatternCharacter() || this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup();
        }
        consumeDot() {
          if (this.eat(FullStop)) {
            this.onAnyCharacterSet(this.index - 1, this.index, "any");
            return true;
          }
          return false;
        }
        consumeReverseSolidusAtomEscape() {
          const start = this.index;
          if (this.eat(ReverseSolidus)) {
            if (this.consumeAtomEscape()) {
              return true;
            }
            this.rewind(start);
          }
          return false;
        }
        consumeUncapturingGroup() {
          const start = this.index;
          if (this.eat3(LeftParenthesis, QuestionMark, Colon)) {
            this.onGroupEnter(start);
            this.consumeDisjunction();
            if (!this.eat(RightParenthesis)) {
              this.raise("Unterminated group");
            }
            this.onGroupLeave(start, this.index);
            return true;
          }
          return false;
        }
        consumeCapturingGroup() {
          const start = this.index;
          if (this.eat(LeftParenthesis)) {
            let name = null;
            if (this.ecmaVersion >= 2018) {
              if (this.consumeGroupSpecifier()) {
                name = this._lastStrValue;
              }
            } else if (this.currentCodePoint === QuestionMark) {
              this.raise("Invalid group");
            }
            this.onCapturingGroupEnter(start, name);
            this.consumeDisjunction();
            if (!this.eat(RightParenthesis)) {
              this.raise("Unterminated group");
            }
            this.onCapturingGroupLeave(start, this.index, name);
            return true;
          }
          return false;
        }
        consumeExtendedAtom() {
          return this.consumeDot() || this.consumeReverseSolidusAtomEscape() || this.consumeReverseSolidusFollowedByC() || this.consumeCharacterClass() || this.consumeUncapturingGroup() || this.consumeCapturingGroup() || this.consumeInvalidBracedQuantifier() || this.consumeExtendedPatternCharacter();
        }
        consumeReverseSolidusFollowedByC() {
          const start = this.index;
          if (this.currentCodePoint === ReverseSolidus && this.nextCodePoint === LatinSmallLetterC) {
            this._lastIntValue = this.currentCodePoint;
            this.advance();
            this.onCharacter(start, this.index, ReverseSolidus);
            return true;
          }
          return false;
        }
        consumeInvalidBracedQuantifier() {
          if (this.eatBracedQuantifier(true)) {
            this.raise("Nothing to repeat");
          }
          return false;
        }
        consumePatternCharacter() {
          const start = this.index;
          const cp = this.currentCodePoint;
          if (cp !== -1 && !isSyntaxCharacter(cp)) {
            this.advance();
            this.onCharacter(start, this.index, cp);
            return true;
          }
          return false;
        }
        consumeExtendedPatternCharacter() {
          const start = this.index;
          const cp = this.currentCodePoint;
          if (cp !== -1 && cp !== CircumflexAccent && cp !== DollarSign && cp !== ReverseSolidus && cp !== FullStop && cp !== Asterisk && cp !== PlusSign && cp !== QuestionMark && cp !== LeftParenthesis && cp !== RightParenthesis && cp !== LeftSquareBracket && cp !== VerticalLine) {
            this.advance();
            this.onCharacter(start, this.index, cp);
            return true;
          }
          return false;
        }
        consumeGroupSpecifier() {
          if (this.eat(QuestionMark)) {
            if (this.eatGroupName()) {
              if (!this._groupNames.has(this._lastStrValue)) {
                this._groupNames.add(this._lastStrValue);
                return true;
              }
              this.raise("Duplicate capture group name");
            }
            this.raise("Invalid group");
          }
          return false;
        }
        consumeAtomEscape() {
          if (this.consumeBackreference() || this.consumeCharacterClassEscape() || this.consumeCharacterEscape() || this._nFlag && this.consumeKGroupName()) {
            return true;
          }
          if (this.strict || this._uFlag) {
            this.raise("Invalid escape");
          }
          return false;
        }
        consumeBackreference() {
          const start = this.index;
          if (this.eatDecimalEscape()) {
            const n = this._lastIntValue;
            if (n <= this._numCapturingParens) {
              this.onBackreference(start - 1, this.index, n);
              return true;
            }
            if (this.strict || this._uFlag) {
              this.raise("Invalid escape");
            }
            this.rewind(start);
          }
          return false;
        }
        consumeCharacterClassEscape() {
          const start = this.index;
          if (this.eat(LatinSmallLetterD)) {
            this._lastIntValue = -1;
            this.onEscapeCharacterSet(start - 1, this.index, "digit", false);
            return true;
          }
          if (this.eat(LatinCapitalLetterD)) {
            this._lastIntValue = -1;
            this.onEscapeCharacterSet(start - 1, this.index, "digit", true);
            return true;
          }
          if (this.eat(LatinSmallLetterS)) {
            this._lastIntValue = -1;
            this.onEscapeCharacterSet(start - 1, this.index, "space", false);
            return true;
          }
          if (this.eat(LatinCapitalLetterS)) {
            this._lastIntValue = -1;
            this.onEscapeCharacterSet(start - 1, this.index, "space", true);
            return true;
          }
          if (this.eat(LatinSmallLetterW)) {
            this._lastIntValue = -1;
            this.onEscapeCharacterSet(start - 1, this.index, "word", false);
            return true;
          }
          if (this.eat(LatinCapitalLetterW)) {
            this._lastIntValue = -1;
            this.onEscapeCharacterSet(start - 1, this.index, "word", true);
            return true;
          }
          let negate = false;
          if (this._uFlag && this.ecmaVersion >= 2018 && (this.eat(LatinSmallLetterP) || (negate = this.eat(LatinCapitalLetterP)))) {
            this._lastIntValue = -1;
            if (this.eat(LeftCurlyBracket) && this.eatUnicodePropertyValueExpression() && this.eat(RightCurlyBracket)) {
              this.onUnicodePropertyCharacterSet(start - 1, this.index, "property", this._lastKeyValue, this._lastValValue || null, negate);
              return true;
            }
            this.raise("Invalid property name");
          }
          return false;
        }
        consumeCharacterEscape() {
          const start = this.index;
          if (this.eatControlEscape() || this.eatCControlLetter() || this.eatZero() || this.eatHexEscapeSequence() || this.eatRegExpUnicodeEscapeSequence() || !this.strict && !this._uFlag && this.eatLegacyOctalEscapeSequence() || this.eatIdentityEscape()) {
            this.onCharacter(start - 1, this.index, this._lastIntValue);
            return true;
          }
          return false;
        }
        consumeKGroupName() {
          const start = this.index;
          if (this.eat(LatinSmallLetterK)) {
            if (this.eatGroupName()) {
              const groupName = this._lastStrValue;
              this._backreferenceNames.add(groupName);
              this.onBackreference(start - 1, this.index, groupName);
              return true;
            }
            this.raise("Invalid named reference");
          }
          return false;
        }
        consumeCharacterClass() {
          const start = this.index;
          if (this.eat(LeftSquareBracket)) {
            const negate = this.eat(CircumflexAccent);
            this.onCharacterClassEnter(start, negate);
            this.consumeClassRanges();
            if (!this.eat(RightSquareBracket)) {
              this.raise("Unterminated character class");
            }
            this.onCharacterClassLeave(start, this.index, negate);
            return true;
          }
          return false;
        }
        consumeClassRanges() {
          const strict = this.strict || this._uFlag;
          for (;;) {
            const rangeStart = this.index;
            if (!this.consumeClassAtom()) {
              break;
            }
            const min = this._lastIntValue;
            if (!this.eat(HyphenMinus)) {
              continue;
            }
            this.onCharacter(this.index - 1, this.index, HyphenMinus);
            if (!this.consumeClassAtom()) {
              break;
            }
            const max = this._lastIntValue;
            if (min === -1 || max === -1) {
              if (strict) {
                this.raise("Invalid character class");
              }
              continue;
            }
            if (min > max) {
              this.raise("Range out of order in character class");
            }
            this.onCharacterClassRange(rangeStart, this.index, min, max);
          }
        }
        consumeClassAtom() {
          const start = this.index;
          const cp = this.currentCodePoint;
          if (cp !== -1 && cp !== ReverseSolidus && cp !== RightSquareBracket) {
            this.advance();
            this._lastIntValue = cp;
            this.onCharacter(start, this.index, this._lastIntValue);
            return true;
          }
          if (this.eat(ReverseSolidus)) {
            if (this.consumeClassEscape()) {
              return true;
            }
            if (!this.strict && this.currentCodePoint === LatinSmallLetterC) {
              this._lastIntValue = ReverseSolidus;
              this.onCharacter(start, this.index, this._lastIntValue);
              return true;
            }
            if (this.strict || this._uFlag) {
              this.raise("Invalid escape");
            }
            this.rewind(start);
          }
          return false;
        }
        consumeClassEscape() {
          const start = this.index;
          if (this.eat(LatinSmallLetterB)) {
            this._lastIntValue = Backspace;
            this.onCharacter(start - 1, this.index, this._lastIntValue);
            return true;
          }
          if (this._uFlag && this.eat(HyphenMinus)) {
            this._lastIntValue = HyphenMinus;
            this.onCharacter(start - 1, this.index, this._lastIntValue);
            return true;
          }
          let cp = 0;
          if (!this.strict && !this._uFlag && this.currentCodePoint === LatinSmallLetterC && (isDecimalDigit(cp = this.nextCodePoint) || cp === LowLine)) {
            this.advance();
            this.advance();
            this._lastIntValue = cp % 32;
            this.onCharacter(start - 1, this.index, this._lastIntValue);
            return true;
          }
          return this.consumeCharacterClassEscape() || this.consumeCharacterEscape();
        }
        eatGroupName() {
          if (this.eat(LessThanSign)) {
            if (this.eatRegExpIdentifierName() && this.eat(GreaterThanSign)) {
              return true;
            }
            this.raise("Invalid capture group name");
          }
          return false;
        }
        eatRegExpIdentifierName() {
          if (this.eatRegExpIdentifierStart()) {
            this._lastStrValue = String.fromCodePoint(this._lastIntValue);
            while (this.eatRegExpIdentifierPart()) {
              this._lastStrValue += String.fromCodePoint(this._lastIntValue);
            }
            return true;
          }
          return false;
        }
        eatRegExpIdentifierStart() {
          const start = this.index;
          const forceUFlag = !this._uFlag && this.ecmaVersion >= 2020;
          let cp = this.currentCodePoint;
          this.advance();
          if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {
            cp = this._lastIntValue;
          } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {
            cp = combineSurrogatePair(cp, this.currentCodePoint);
            this.advance();
          }
          if (isRegExpIdentifierStart(cp)) {
            this._lastIntValue = cp;
            return true;
          }
          if (this.index !== start) {
            this.rewind(start);
          }
          return false;
        }
        eatRegExpIdentifierPart() {
          const start = this.index;
          const forceUFlag = !this._uFlag && this.ecmaVersion >= 2020;
          let cp = this.currentCodePoint;
          this.advance();
          if (cp === ReverseSolidus && this.eatRegExpUnicodeEscapeSequence(forceUFlag)) {
            cp = this._lastIntValue;
          } else if (forceUFlag && isLeadSurrogate(cp) && isTrailSurrogate(this.currentCodePoint)) {
            cp = combineSurrogatePair(cp, this.currentCodePoint);
            this.advance();
          }
          if (isRegExpIdentifierPart(cp)) {
            this._lastIntValue = cp;
            return true;
          }
          if (this.index !== start) {
            this.rewind(start);
          }
          return false;
        }
        eatCControlLetter() {
          const start = this.index;
          if (this.eat(LatinSmallLetterC)) {
            if (this.eatControlLetter()) {
              return true;
            }
            this.rewind(start);
          }
          return false;
        }
        eatZero() {
          if (this.currentCodePoint === DigitZero && !isDecimalDigit(this.nextCodePoint)) {
            this._lastIntValue = 0;
            this.advance();
            return true;
          }
          return false;
        }
        eatControlEscape() {
          if (this.eat(LatinSmallLetterF)) {
            this._lastIntValue = FormFeed;
            return true;
          }
          if (this.eat(LatinSmallLetterN)) {
            this._lastIntValue = LineFeed;
            return true;
          }
          if (this.eat(LatinSmallLetterR)) {
            this._lastIntValue = CarriageReturn;
            return true;
          }
          if (this.eat(LatinSmallLetterT)) {
            this._lastIntValue = CharacterTabulation;
            return true;
          }
          if (this.eat(LatinSmallLetterV)) {
            this._lastIntValue = LineTabulation;
            return true;
          }
          return false;
        }
        eatControlLetter() {
          const cp = this.currentCodePoint;
          if (isLatinLetter(cp)) {
            this.advance();
            this._lastIntValue = cp % 32;
            return true;
          }
          return false;
        }
        eatRegExpUnicodeEscapeSequence(forceUFlag = false) {
          const start = this.index;
          const uFlag = forceUFlag || this._uFlag;
          if (this.eat(LatinSmallLetterU)) {
            if (uFlag && this.eatRegExpUnicodeSurrogatePairEscape() || this.eatFixedHexDigits(4) || uFlag && this.eatRegExpUnicodeCodePointEscape()) {
              return true;
            }
            if (this.strict || uFlag) {
              this.raise("Invalid unicode escape");
            }
            this.rewind(start);
          }
          return false;
        }
        eatRegExpUnicodeSurrogatePairEscape() {
          const start = this.index;
          if (this.eatFixedHexDigits(4)) {
            const lead = this._lastIntValue;
            if (isLeadSurrogate(lead) && this.eat(ReverseSolidus) && this.eat(LatinSmallLetterU) && this.eatFixedHexDigits(4)) {
              const trail = this._lastIntValue;
              if (isTrailSurrogate(trail)) {
                this._lastIntValue = combineSurrogatePair(lead, trail);
                return true;
              }
            }
            this.rewind(start);
          }
          return false;
        }
        eatRegExpUnicodeCodePointEscape() {
          const start = this.index;
          if (this.eat(LeftCurlyBracket) && this.eatHexDigits() && this.eat(RightCurlyBracket) && isValidUnicode(this._lastIntValue)) {
            return true;
          }
          this.rewind(start);
          return false;
        }
        eatIdentityEscape() {
          const cp = this.currentCodePoint;
          if (this.isValidIdentityEscape(cp)) {
            this._lastIntValue = cp;
            this.advance();
            return true;
          }
          return false;
        }
        isValidIdentityEscape(cp) {
          if (cp === -1) {
            return false;
          }
          if (this._uFlag) {
            return isSyntaxCharacter(cp) || cp === Solidus;
          }
          if (this.strict) {
            return !isIdContinue(cp);
          }
          if (this._nFlag) {
            return !(cp === LatinSmallLetterC || cp === LatinSmallLetterK);
          }
          return cp !== LatinSmallLetterC;
        }
        eatDecimalEscape() {
          this._lastIntValue = 0;
          let cp = this.currentCodePoint;
          if (cp >= DigitOne && cp <= DigitNine) {
            do {
              this._lastIntValue = 10 * this._lastIntValue + (cp - DigitZero);
              this.advance();
            } while ((cp = this.currentCodePoint) >= DigitZero && cp <= DigitNine);
            return true;
          }
          return false;
        }
        eatUnicodePropertyValueExpression() {
          const start = this.index;
          if (this.eatUnicodePropertyName() && this.eat(EqualsSign)) {
            this._lastKeyValue = this._lastStrValue;
            if (this.eatUnicodePropertyValue()) {
              this._lastValValue = this._lastStrValue;
              if (isValidUnicodeProperty(this.ecmaVersion, this._lastKeyValue, this._lastValValue)) {
                return true;
              }
              this.raise("Invalid property name");
            }
          }
          this.rewind(start);
          if (this.eatLoneUnicodePropertyNameOrValue()) {
            const nameOrValue = this._lastStrValue;
            if (isValidUnicodeProperty(this.ecmaVersion, "General_Category", nameOrValue)) {
              this._lastKeyValue = "General_Category";
              this._lastValValue = nameOrValue;
              return true;
            }
            if (isValidLoneUnicodeProperty(this.ecmaVersion, nameOrValue)) {
              this._lastKeyValue = nameOrValue;
              this._lastValValue = "";
              return true;
            }
            this.raise("Invalid property name");
          }
          return false;
        }
        eatUnicodePropertyName() {
          this._lastStrValue = "";
          while (isUnicodePropertyNameCharacter(this.currentCodePoint)) {
            this._lastStrValue += String.fromCodePoint(this.currentCodePoint);
            this.advance();
          }
          return this._lastStrValue !== "";
        }
        eatUnicodePropertyValue() {
          this._lastStrValue = "";
          while (isUnicodePropertyValueCharacter(this.currentCodePoint)) {
            this._lastStrValue += String.fromCodePoint(this.currentCodePoint);
            this.advance();
          }
          return this._lastStrValue !== "";
        }
        eatLoneUnicodePropertyNameOrValue() {
          return this.eatUnicodePropertyValue();
        }
        eatHexEscapeSequence() {
          const start = this.index;
          if (this.eat(LatinSmallLetterX)) {
            if (this.eatFixedHexDigits(2)) {
              return true;
            }
            if (this._uFlag || this.strict) {
              this.raise("Invalid escape");
            }
            this.rewind(start);
          }
          return false;
        }
        eatDecimalDigits() {
          const start = this.index;
          this._lastIntValue = 0;
          while (isDecimalDigit(this.currentCodePoint)) {
            this._lastIntValue = 10 * this._lastIntValue + digitToInt(this.currentCodePoint);
            this.advance();
          }
          return this.index !== start;
        }
        eatHexDigits() {
          const start = this.index;
          this._lastIntValue = 0;
          while (isHexDigit(this.currentCodePoint)) {
            this._lastIntValue = 16 * this._lastIntValue + digitToInt(this.currentCodePoint);
            this.advance();
          }
          return this.index !== start;
        }
        eatLegacyOctalEscapeSequence() {
          if (this.eatOctalDigit()) {
            const n1 = this._lastIntValue;
            if (this.eatOctalDigit()) {
              const n2 = this._lastIntValue;
              if (n1 <= 3 && this.eatOctalDigit()) {
                this._lastIntValue = n1 * 64 + n2 * 8 + this._lastIntValue;
              } else {
                this._lastIntValue = n1 * 8 + n2;
              }
            } else {
              this._lastIntValue = n1;
            }
            return true;
          }
          return false;
        }
        eatOctalDigit() {
          const cp = this.currentCodePoint;
          if (isOctalDigit(cp)) {
            this.advance();
            this._lastIntValue = cp - DigitZero;
            return true;
          }
          this._lastIntValue = 0;
          return false;
        }
        eatFixedHexDigits(length) {
          const start = this.index;
          this._lastIntValue = 0;
          for (let i = 0; i < length; ++i) {
            const cp = this.currentCodePoint;
            if (!isHexDigit(cp)) {
              this.rewind(start);
              return false;
            }
            this._lastIntValue = 16 * this._lastIntValue + digitToInt(cp);
            this.advance();
          }
          return true;
        }
      }
      const DummyPattern = {};
      const DummyFlags = {};
      const DummyCapturingGroup = {};
      class RegExpParserState {
        constructor(options) {
          this._node = DummyPattern;
          this._flags = DummyFlags;
          this._backreferences = [];
          this._capturingGroups = [];
          this.source = "";
          this.strict = Boolean(options && options.strict);
          this.ecmaVersion = options && options.ecmaVersion || 2022;
        }
        get pattern() {
          if (this._node.type !== "Pattern") {
            throw new Error("UnknownError");
          }
          return this._node;
        }
        get flags() {
          if (this._flags.type !== "Flags") {
            throw new Error("UnknownError");
          }
          return this._flags;
        }
        onFlags(start, end, global, ignoreCase, multiline, unicode, sticky, dotAll, hasIndices) {
          this._flags = {
            type: "Flags",
            parent: null,
            start,
            end,
            raw: this.source.slice(start, end),
            global,
            ignoreCase,
            multiline,
            unicode,
            sticky,
            dotAll,
            hasIndices
          };
        }
        onPatternEnter(start) {
          this._node = {
            type: "Pattern",
            parent: null,
            start,
            end: start,
            raw: "",
            alternatives: []
          };
          this._backreferences.length = 0;
          this._capturingGroups.length = 0;
        }
        onPatternLeave(start, end) {
          this._node.end = end;
          this._node.raw = this.source.slice(start, end);
          for (const reference of this._backreferences) {
            const ref = reference.ref;
            const group = typeof ref === "number" ? this._capturingGroups[ref - 1] : this._capturingGroups.find(g => g.name === ref);
            reference.resolved = group;
            group.references.push(reference);
          }
        }
        onAlternativeEnter(start) {
          const parent = this._node;
          if (parent.type !== "Assertion" && parent.type !== "CapturingGroup" && parent.type !== "Group" && parent.type !== "Pattern") {
            throw new Error("UnknownError");
          }
          this._node = {
            type: "Alternative",
            parent,
            start,
            end: start,
            raw: "",
            elements: []
          };
          parent.alternatives.push(this._node);
        }
        onAlternativeLeave(start, end) {
          const node = this._node;
          if (node.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          node.end = end;
          node.raw = this.source.slice(start, end);
          this._node = node.parent;
        }
        onGroupEnter(start) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          this._node = {
            type: "Group",
            parent,
            start,
            end: start,
            raw: "",
            alternatives: []
          };
          parent.elements.push(this._node);
        }
        onGroupLeave(start, end) {
          const node = this._node;
          if (node.type !== "Group" || node.parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          node.end = end;
          node.raw = this.source.slice(start, end);
          this._node = node.parent;
        }
        onCapturingGroupEnter(start, name) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          this._node = {
            type: "CapturingGroup",
            parent,
            start,
            end: start,
            raw: "",
            name,
            alternatives: [],
            references: []
          };
          parent.elements.push(this._node);
          this._capturingGroups.push(this._node);
        }
        onCapturingGroupLeave(start, end) {
          const node = this._node;
          if (node.type !== "CapturingGroup" || node.parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          node.end = end;
          node.raw = this.source.slice(start, end);
          this._node = node.parent;
        }
        onQuantifier(start, end, min, max, greedy) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          const element = parent.elements.pop();
          if (element == null || element.type === "Quantifier" || element.type === "Assertion" && element.kind !== "lookahead") {
            throw new Error("UnknownError");
          }
          const node = {
            type: "Quantifier",
            parent,
            start: element.start,
            end,
            raw: this.source.slice(element.start, end),
            min,
            max,
            greedy,
            element
          };
          parent.elements.push(node);
          element.parent = node;
        }
        onLookaroundAssertionEnter(start, kind, negate) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          const node = this._node = {
            type: "Assertion",
            parent,
            start,
            end: start,
            raw: "",
            kind,
            negate,
            alternatives: []
          };
          parent.elements.push(node);
        }
        onLookaroundAssertionLeave(start, end) {
          const node = this._node;
          if (node.type !== "Assertion" || node.parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          node.end = end;
          node.raw = this.source.slice(start, end);
          this._node = node.parent;
        }
        onEdgeAssertion(start, end, kind) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          parent.elements.push({
            type: "Assertion",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            kind
          });
        }
        onWordBoundaryAssertion(start, end, kind, negate) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          parent.elements.push({
            type: "Assertion",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            kind,
            negate
          });
        }
        onAnyCharacterSet(start, end, kind) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          parent.elements.push({
            type: "CharacterSet",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            kind
          });
        }
        onEscapeCharacterSet(start, end, kind, negate) {
          const parent = this._node;
          if (parent.type !== "Alternative" && parent.type !== "CharacterClass") {
            throw new Error("UnknownError");
          }
          parent.elements.push({
            type: "CharacterSet",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            kind,
            negate
          });
        }
        onUnicodePropertyCharacterSet(start, end, kind, key, value, negate) {
          const parent = this._node;
          if (parent.type !== "Alternative" && parent.type !== "CharacterClass") {
            throw new Error("UnknownError");
          }
          parent.elements.push({
            type: "CharacterSet",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            kind,
            key,
            value,
            negate
          });
        }
        onCharacter(start, end, value) {
          const parent = this._node;
          if (parent.type !== "Alternative" && parent.type !== "CharacterClass") {
            throw new Error("UnknownError");
          }
          parent.elements.push({
            type: "Character",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            value
          });
        }
        onBackreference(start, end, ref) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          const node = {
            type: "Backreference",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            ref,
            resolved: DummyCapturingGroup
          };
          parent.elements.push(node);
          this._backreferences.push(node);
        }
        onCharacterClassEnter(start, negate) {
          const parent = this._node;
          if (parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          this._node = {
            type: "CharacterClass",
            parent,
            start,
            end: start,
            raw: "",
            negate,
            elements: []
          };
          parent.elements.push(this._node);
        }
        onCharacterClassLeave(start, end) {
          const node = this._node;
          if (node.type !== "CharacterClass" || node.parent.type !== "Alternative") {
            throw new Error("UnknownError");
          }
          node.end = end;
          node.raw = this.source.slice(start, end);
          this._node = node.parent;
        }
        onCharacterClassRange(start, end) {
          const parent = this._node;
          if (parent.type !== "CharacterClass") {
            throw new Error("UnknownError");
          }
          const elements = parent.elements;
          const max = elements.pop();
          const hyphen = elements.pop();
          const min = elements.pop();
          if (!min || !max || !hyphen || min.type !== "Character" || max.type !== "Character" || hyphen.type !== "Character" || hyphen.value !== HyphenMinus) {
            throw new Error("UnknownError");
          }
          const node = {
            type: "CharacterClassRange",
            parent,
            start,
            end,
            raw: this.source.slice(start, end),
            min,
            max
          };
          min.parent = node;
          max.parent = node;
          elements.push(node);
        }
      }
      class RegExpParser$2 {
        constructor(options) {
          this._state = new RegExpParserState(options);
          this._validator = new RegExpValidator$2(this._state);
        }
        parseLiteral(source, start = 0, end = source.length) {
          this._state.source = source;
          this._validator.validateLiteral(source, start, end);
          const pattern = this._state.pattern;
          const flags = this._state.flags;
          const literal = {
            type: "RegExpLiteral",
            parent: null,
            start,
            end,
            raw: source,
            pattern,
            flags
          };
          pattern.parent = literal;
          flags.parent = literal;
          return literal;
        }
        parseFlags(source, start = 0, end = source.length) {
          this._state.source = source;
          this._validator.validateFlags(source, start, end);
          return this._state.flags;
        }
        parsePattern(source, start = 0, end = source.length, uFlag = false) {
          this._state.source = source;
          this._validator.validatePattern(source, start, end, uFlag);
          return this._state.pattern;
        }
      }
      class RegExpVisitor {
        constructor(handlers) {
          this._handlers = handlers;
        }
        visit(node) {
          switch (node.type) {
          case "Alternative":
            this.visitAlternative(node);
            break;
          case "Assertion":
            this.visitAssertion(node);
            break;
          case "Backreference":
            this.visitBackreference(node);
            break;
          case "CapturingGroup":
            this.visitCapturingGroup(node);
            break;
          case "Character":
            this.visitCharacter(node);
            break;
          case "CharacterClass":
            this.visitCharacterClass(node);
            break;
          case "CharacterClassRange":
            this.visitCharacterClassRange(node);
            break;
          case "CharacterSet":
            this.visitCharacterSet(node);
            break;
          case "Flags":
            this.visitFlags(node);
            break;
          case "Group":
            this.visitGroup(node);
            break;
          case "Pattern":
            this.visitPattern(node);
            break;
          case "Quantifier":
            this.visitQuantifier(node);
            break;
          case "RegExpLiteral":
            this.visitRegExpLiteral(node);
            break;
          default:
            throw new Error(`Unknown type: ${ node.type }`);
          }
        }
        visitAlternative(node) {
          if (this._handlers.onAlternativeEnter) {
            this._handlers.onAlternativeEnter(node);
          }
          node.elements.forEach(this.visit, this);
          if (this._handlers.onAlternativeLeave) {
            this._handlers.onAlternativeLeave(node);
          }
        }
        visitAssertion(node) {
          if (this._handlers.onAssertionEnter) {
            this._handlers.onAssertionEnter(node);
          }
          if (node.kind === "lookahead" || node.kind === "lookbehind") {
            node.alternatives.forEach(this.visit, this);
          }
          if (this._handlers.onAssertionLeave) {
            this._handlers.onAssertionLeave(node);
          }
        }
        visitBackreference(node) {
          if (this._handlers.onBackreferenceEnter) {
            this._handlers.onBackreferenceEnter(node);
          }
          if (this._handlers.onBackreferenceLeave) {
            this._handlers.onBackreferenceLeave(node);
          }
        }
        visitCapturingGroup(node) {
          if (this._handlers.onCapturingGroupEnter) {
            this._handlers.onCapturingGroupEnter(node);
          }
          node.alternatives.forEach(this.visit, this);
          if (this._handlers.onCapturingGroupLeave) {
            this._handlers.onCapturingGroupLeave(node);
          }
        }
        visitCharacter(node) {
          if (this._handlers.onCharacterEnter) {
            this._handlers.onCharacterEnter(node);
          }
          if (this._handlers.onCharacterLeave) {
            this._handlers.onCharacterLeave(node);
          }
        }
        visitCharacterClass(node) {
          if (this._handlers.onCharacterClassEnter) {
            this._handlers.onCharacterClassEnter(node);
          }
          node.elements.forEach(this.visit, this);
          if (this._handlers.onCharacterClassLeave) {
            this._handlers.onCharacterClassLeave(node);
          }
        }
        visitCharacterClassRange(node) {
          if (this._handlers.onCharacterClassRangeEnter) {
            this._handlers.onCharacterClassRangeEnter(node);
          }
          this.visitCharacter(node.min);
          this.visitCharacter(node.max);
          if (this._handlers.onCharacterClassRangeLeave) {
            this._handlers.onCharacterClassRangeLeave(node);
          }
        }
        visitCharacterSet(node) {
          if (this._handlers.onCharacterSetEnter) {
            this._handlers.onCharacterSetEnter(node);
          }
          if (this._handlers.onCharacterSetLeave) {
            this._handlers.onCharacterSetLeave(node);
          }
        }
        visitFlags(node) {
          if (this._handlers.onFlagsEnter) {
            this._handlers.onFlagsEnter(node);
          }
          if (this._handlers.onFlagsLeave) {
            this._handlers.onFlagsLeave(node);
          }
        }
        visitGroup(node) {
          if (this._handlers.onGroupEnter) {
            this._handlers.onGroupEnter(node);
          }
          node.alternatives.forEach(this.visit, this);
          if (this._handlers.onGroupLeave) {
            this._handlers.onGroupLeave(node);
          }
        }
        visitPattern(node) {
          if (this._handlers.onPatternEnter) {
            this._handlers.onPatternEnter(node);
          }
          node.alternatives.forEach(this.visit, this);
          if (this._handlers.onPatternLeave) {
            this._handlers.onPatternLeave(node);
          }
        }
        visitQuantifier(node) {
          if (this._handlers.onQuantifierEnter) {
            this._handlers.onQuantifierEnter(node);
          }
          this.visit(node.element);
          if (this._handlers.onQuantifierLeave) {
            this._handlers.onQuantifierLeave(node);
          }
        }
        visitRegExpLiteral(node) {
          if (this._handlers.onRegExpLiteralEnter) {
            this._handlers.onRegExpLiteralEnter(node);
          }
          this.visitPattern(node.pattern);
          this.visitFlags(node.flags);
          if (this._handlers.onRegExpLiteralLeave) {
            this._handlers.onRegExpLiteralLeave(node);
          }
        }
      }
      function parseRegExpLiteral(source, options) {
        return new RegExpParser$2(options).parseLiteral(String(source));
      }
      function validateRegExpLiteral(source, options) {
        return new RegExpValidator$2(options).validateLiteral(source);
      }
      function visitRegExpAST$2(node, handlers) {
        new RegExpVisitor(handlers).visit(node);
      }
      exports$3J.AST = ast;
      exports$3J.RegExpParser = RegExpParser$2;
      exports$3J.RegExpValidator = RegExpValidator$2;
      exports$3J.parseRegExpLiteral = parseRegExpLiteral;
      exports$3J.validateRegExpLiteral = validateRegExpLiteral;
      exports$3J.visitRegExpAST = visitRegExpAST$2;
      const __esModule = exports$3J.__esModule, AST = exports$3J.AST;
      const _RegExpParser = exports$3J.RegExpParser, _RegExpValidator = exports$3J.RegExpValidator, _parseRegExpLiteral = exports$3J.parseRegExpLiteral, _validateRegExpLiteral = exports$3J.validateRegExpLiteral, _visitRegExpAST = exports$3J.visitRegExpAST;

      var _regexpp2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$3J,
        AST: AST,
        RegExpParser: _RegExpParser,
        RegExpValidator: _RegExpValidator,
        __esModule: __esModule,
        parseRegExpLiteral: _parseRegExpLiteral,
        validateRegExpLiteral: _validateRegExpLiteral,
        visitRegExpAST: _visitRegExpAST
      });

      var _regexpp$5 = "default" in _regexpp2 ? exports$3J : _regexpp2;
      var exports$3I = {};
      const RegExpValidator$1 = _regexpp$5.RegExpValidator;
      const collector = new class {
        constructor() {
          this._source = "";
          this._controlChars = [];
          this._validator = new RegExpValidator$1(this);
        }
        onPatternEnter() {
          this._controlChars = [];
        }
        onCharacter(start, end, cp) {
          if (cp >= 0 && cp <= 31 && (this._source.codePointAt(start) === cp || this._source.slice(start, end).startsWith("\\x") || this._source.slice(start, end).startsWith("\\u"))) {
            this._controlChars.push(`\\x${ `0${ cp.toString(16) }`.slice(-2) }`);
          }
        }
        collectControlChars(regexpStr) {
          try {
            this._source = regexpStr;
            this._validator.validatePattern(regexpStr);
          } catch {
          }
          return this._controlChars;
        }
      }();
      exports$3I = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow control characters in regular expressions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-control-regex"
          },
          schema: [],
          messages: { unexpected: "Unexpected control character(s) in regular expression: {{controlChars}}." }
        },
        create(context) {
          function getRegExpPattern(node) {
            if (node.regex) {
              return node.regex.pattern;
            }
            if (typeof node.value === "string" && (node.parent.type === "NewExpression" || node.parent.type === "CallExpression") && node.parent.callee.type === "Identifier" && node.parent.callee.name === "RegExp" && node.parent.arguments[0] === node) {
              return node.value;
            }
            return null;
          }
          return {
            Literal(node) {
              const pattern = getRegExpPattern(node);
              if (pattern) {
                const controlCharacters = collector.collectControlChars(pattern);
                if (controlCharacters.length > 0) {
                  context.report({
                    node,
                    messageId: "unexpected",
                    data: { controlChars: controlCharacters.join(", ") }
                  });
                }
              }
            }
          };
        }
      };
      var _noControlRegex = exports$3I;

      var exports$3H = {};
      exports$3H = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow the use of `debugger`",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-debugger"
          },
          fixable: null,
          schema: [],
          messages: { unexpected: "Unexpected 'debugger' statement." }
        },
        create(context) {
          return {
            DebuggerStatement(node) {
              context.report({
                node,
                messageId: "unexpected"
              });
            }
          };
        }
      };
      var _noDebugger = exports$3H;

      var exports$3G = {};
      exports$3G = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow deleting variables",
            category: "Variables",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-delete-var"
          },
          schema: [],
          messages: { unexpected: "Variables should not be deleted." }
        },
        create(context) {
          return {
            UnaryExpression(node) {
              if (node.operator === "delete" && node.argument.type === "Identifier") {
                context.report({
                  node,
                  messageId: "unexpected"
                });
              }
            }
          };
        }
      };
      var _noDeleteVar = exports$3G;

      var exports$3F = {};
      const astUtils$1S = _astUtils;
      exports$3F = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow duplicate class members",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-dupe-class-members"
          },
          schema: [],
          messages: { unexpected: "Duplicate name '{{name}}'." }
        },
        create(context) {
          let stack = [];
          function getState(name, isStatic) {
            const stateMap = stack[stack.length - 1];
            const key = `$${ name }`;
            if (!stateMap[key]) {
              stateMap[key] = {
                nonStatic: {
                  init: false,
                  get: false,
                  set: false
                },
                static: {
                  init: false,
                  get: false,
                  set: false
                }
              };
            }
            return stateMap[key][isStatic ? "static" : "nonStatic"];
          }
          return {
            Program() {
              stack = [];
            },
            ClassBody() {
              stack.push(Object.create(null));
            },
            "ClassBody:exit"() {
              stack.pop();
            },
            MethodDefinition(node) {
              const name = astUtils$1S.getStaticPropertyName(node);
              if (name === null || node.kind === "constructor") {
                return;
              }
              const state = getState(name, node.static);
              let isDuplicate = false;
              if (node.kind === "get") {
                isDuplicate = state.init || state.get;
                state.get = true;
              } else if (node.kind === "set") {
                isDuplicate = state.init || state.set;
                state.set = true;
              } else {
                isDuplicate = state.init || state.get || state.set;
                state.init = true;
              }
              if (isDuplicate) {
                context.report({
                  node,
                  messageId: "unexpected",
                  data: { name }
                });
              }
            }
          };
        }
      };
      var _noDupeClassMembers = exports$3F;

      var exports$3E = {};
      const astUtils$1R = _astUtils;
      const GET_KIND = /^(?:init|get)$/u;
      const SET_KIND = /^(?:init|set)$/u;
      class ObjectInfo {
        constructor(upper, node) {
          this.upper = upper;
          this.node = node;
          this.properties = new Map();
        }
        getPropertyInfo(node) {
          const name = astUtils$1R.getStaticPropertyName(node);
          if (!this.properties.has(name)) {
            this.properties.set(name, {
              get: false,
              set: false
            });
          }
          return this.properties.get(name);
        }
        isPropertyDefined(node) {
          const entry = this.getPropertyInfo(node);
          return GET_KIND.test(node.kind) && entry.get || SET_KIND.test(node.kind) && entry.set;
        }
        defineProperty(node) {
          const entry = this.getPropertyInfo(node);
          if (GET_KIND.test(node.kind)) {
            entry.get = true;
          }
          if (SET_KIND.test(node.kind)) {
            entry.set = true;
          }
        }
      }
      exports$3E = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow duplicate keys in object literals",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-dupe-keys"
          },
          schema: [],
          messages: { unexpected: "Duplicate key '{{name}}'." }
        },
        create(context) {
          let info = null;
          return {
            ObjectExpression(node) {
              info = new ObjectInfo(info, node);
            },
            "ObjectExpression:exit"() {
              info = info.upper;
            },
            Property(node) {
              const name = astUtils$1R.getStaticPropertyName(node);
              if (node.parent.type !== "ObjectExpression") {
                return;
              }
              if (name === null) {
                return;
              }
              if (info.isPropertyDefined(node)) {
                context.report({
                  node: info.node,
                  loc: node.key.loc,
                  messageId: "unexpected",
                  data: { name }
                });
              }
              info.defineProperty(node);
            }
          };
        }
      };
      var _noDupeKeys = exports$3E;

      var exports$3D = {};
      const astUtils$1Q = _astUtils;
      exports$3D = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow duplicate case labels",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-duplicate-case"
          },
          schema: [],
          messages: { unexpected: "Duplicate case label." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function equal(a, b) {
            if (a.type !== b.type) {
              return false;
            }
            return astUtils$1Q.equalTokens(a, b, sourceCode);
          }
          return {
            SwitchStatement(node) {
              const previousTests = [];
              for (const switchCase of node.cases) {
                if (switchCase.test) {
                  const test = switchCase.test;
                  if (previousTests.some(previousTest => equal(previousTest, test))) {
                    context.report({
                      node: switchCase,
                      messageId: "unexpected"
                    });
                  } else {
                    previousTests.push(test);
                  }
                }
              }
            }
          };
        }
      };
      var _noDuplicateCase = exports$3D;

      var exports$3C = {};
      const NAMED_TYPES = [
        "ImportSpecifier",
        "ExportSpecifier"
      ];
      const NAMESPACE_TYPES = [
        "ImportNamespaceSpecifier",
        "ExportNamespaceSpecifier"
      ];
      function isImportExportSpecifier(importExportType, type) {
        const arrayToCheck = type === "named" ? NAMED_TYPES : NAMESPACE_TYPES;
        return arrayToCheck.includes(importExportType);
      }
      function getImportExportType(node) {
        if (node.specifiers && node.specifiers.length > 0) {
          const nodeSpecifiers = node.specifiers;
          const index = nodeSpecifiers.findIndex(({type}) => isImportExportSpecifier(type, "named") || isImportExportSpecifier(type, "namespace"));
          const i = index > -1 ? index : 0;
          return nodeSpecifiers[i].type;
        }
        if (node.type === "ExportAllDeclaration") {
          if (node.exported) {
            return "ExportNamespaceSpecifier";
          }
          return "ExportAll";
        }
        return "SideEffectImport";
      }
      function isImportExportCanBeMerged(node1, node2) {
        const importExportType1 = getImportExportType(node1);
        const importExportType2 = getImportExportType(node2);
        if (importExportType1 === "ExportAll" && importExportType2 !== "ExportAll" && importExportType2 !== "SideEffectImport" || importExportType1 !== "ExportAll" && importExportType1 !== "SideEffectImport" && importExportType2 === "ExportAll") {
          return false;
        }
        if (isImportExportSpecifier(importExportType1, "namespace") && isImportExportSpecifier(importExportType2, "named") || isImportExportSpecifier(importExportType2, "namespace") && isImportExportSpecifier(importExportType1, "named")) {
          return false;
        }
        return true;
      }
      function shouldReportImportExport(node, previousNodes) {
        let i = 0;
        while (i < previousNodes.length) {
          if (isImportExportCanBeMerged(node, previousNodes[i])) {
            return true;
          }
          i++;
        }
        return false;
      }
      function getNodesByDeclarationType(nodes, type) {
        return nodes.filter(({declarationType}) => declarationType === type).map(({node}) => node);
      }
      function getModule(node) {
        if (node && node.source && node.source.value) {
          return node.source.value.trim();
        }
        return "";
      }
      function checkAndReport(context, node, modules, declarationType, includeExports) {
        const module = getModule(node);
        if (modules.has(module)) {
          const previousNodes = modules.get(module);
          const messagesIds = [];
          const importNodes = getNodesByDeclarationType(previousNodes, "import");
          let exportNodes;
          if (includeExports) {
            exportNodes = getNodesByDeclarationType(previousNodes, "export");
          }
          if (declarationType === "import") {
            if (shouldReportImportExport(node, importNodes)) {
              messagesIds.push("import");
            }
            if (includeExports) {
              if (shouldReportImportExport(node, exportNodes)) {
                messagesIds.push("importAs");
              }
            }
          } else if (declarationType === "export") {
            if (shouldReportImportExport(node, exportNodes)) {
              messagesIds.push("export");
            }
            if (shouldReportImportExport(node, importNodes)) {
              messagesIds.push("exportAs");
            }
          }
          messagesIds.forEach(messageId => context.report({
            node,
            messageId,
            data: { module }
          }));
        }
      }
      function handleImportsExports(context, modules, declarationType, includeExports) {
        return function (node) {
          const module = getModule(node);
          if (module) {
            checkAndReport(context, node, modules, declarationType, includeExports);
            const currentNode = {
              node,
              declarationType
            };
            let nodes = [currentNode];
            if (modules.has(module)) {
              const previousNodes = modules.get(module);
              nodes = [
                ...previousNodes,
                currentNode
              ];
            }
            modules.set(module, nodes);
          }
        };
      }
      exports$3C = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow duplicate module imports",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-duplicate-imports"
          },
          schema: [{
              type: "object",
              properties: {
                includeExports: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            import: "'{{module}}' import is duplicated.",
            importAs: "'{{module}}' import is duplicated as export.",
            export: "'{{module}}' export is duplicated.",
            exportAs: "'{{module}}' export is duplicated as import."
          }
        },
        create(context) {
          const includeExports = (context.options[0] || {}).includeExports, modules = new Map();
          const handlers = { ImportDeclaration: handleImportsExports(context, modules, "import", includeExports) };
          if (includeExports) {
            handlers.ExportNamedDeclaration = handleImportsExports(context, modules, "export", includeExports);
            handlers.ExportAllDeclaration = handleImportsExports(context, modules, "export", includeExports);
          }
          return handlers;
        }
      };
      var _noDuplicateImports = exports$3C;

      var exports$3B = {};
      const astUtils$1P = _astUtils;
      class FixTracker$5 {
        constructor(fixer, sourceCode) {
          this.fixer = fixer;
          this.sourceCode = sourceCode;
          this.retainedRange = null;
        }
        retainRange(range) {
          this.retainedRange = range;
          return this;
        }
        retainEnclosingFunction(node) {
          const functionNode = astUtils$1P.getUpperFunction(node);
          return this.retainRange(functionNode ? functionNode.range : this.sourceCode.ast.range);
        }
        retainSurroundingTokens(nodeOrToken) {
          const tokenBefore = this.sourceCode.getTokenBefore(nodeOrToken) || nodeOrToken;
          const tokenAfter = this.sourceCode.getTokenAfter(nodeOrToken) || nodeOrToken;
          return this.retainRange([
            tokenBefore.range[0],
            tokenAfter.range[1]
          ]);
        }
        replaceTextRange(range, text) {
          let actualRange;
          if (this.retainedRange) {
            actualRange = [
              Math.min(this.retainedRange[0], range[0]),
              Math.max(this.retainedRange[1], range[1])
            ];
          } else {
            actualRange = range;
          }
          return this.fixer.replaceTextRange(actualRange, this.sourceCode.text.slice(actualRange[0], range[0]) + text + this.sourceCode.text.slice(range[1], actualRange[1]));
        }
        remove(nodeOrToken) {
          return this.replaceTextRange(nodeOrToken.range, "");
        }
      }
      exports$3B = FixTracker$5;
      var _fixTracker = exports$3B;

      var exports$3A = {};
      const astUtils$1O = _astUtils;
      exports$3A = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow empty block statements",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-empty"
          },
          schema: [{
              type: "object",
              properties: {
                allowEmptyCatch: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "Empty {{type}} statement." }
        },
        create(context) {
          const options = context.options[0] || {}, allowEmptyCatch = options.allowEmptyCatch || false;
          const sourceCode = context.getSourceCode();
          return {
            BlockStatement(node) {
              if (node.body.length !== 0) {
                return;
              }
              if (astUtils$1O.isFunction(node.parent)) {
                return;
              }
              if (allowEmptyCatch && node.parent.type === "CatchClause") {
                return;
              }
              if (sourceCode.getCommentsInside(node).length > 0) {
                return;
              }
              context.report({
                node,
                messageId: "unexpected",
                data: { type: "block" }
              });
            },
            SwitchStatement(node) {
              if (typeof node.cases === "undefined" || node.cases.length === 0) {
                context.report({
                  node,
                  messageId: "unexpected",
                  data: { type: "switch" }
                });
              }
            }
          };
        }
      };
      var _noEmpty = exports$3A;

      var exports$3z = {};
      const astUtils$1N = _astUtils;
      const ALLOW_OPTIONS = Object.freeze([
        "functions",
        "arrowFunctions",
        "generatorFunctions",
        "methods",
        "generatorMethods",
        "getters",
        "setters",
        "constructors",
        "asyncFunctions",
        "asyncMethods"
      ]);
      function getKind(node) {
        const parent = node.parent;
        let kind = "";
        if (node.type === "ArrowFunctionExpression") {
          return "arrowFunctions";
        }
        if (parent.type === "Property") {
          if (parent.kind === "get") {
            return "getters";
          }
          if (parent.kind === "set") {
            return "setters";
          }
          kind = parent.method ? "methods" : "functions";
        } else if (parent.type === "MethodDefinition") {
          if (parent.kind === "get") {
            return "getters";
          }
          if (parent.kind === "set") {
            return "setters";
          }
          if (parent.kind === "constructor") {
            return "constructors";
          }
          kind = "methods";
        } else {
          kind = "functions";
        }
        let prefix = "";
        if (node.generator) {
          prefix = "generator";
        } else if (node.async) {
          prefix = "async";
        } else {
          return kind;
        }
        return prefix + kind[0].toUpperCase() + kind.slice(1);
      }
      exports$3z = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow empty functions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-empty-function"
          },
          schema: [{
              type: "object",
              properties: {
                allow: {
                  type: "array",
                  items: { enum: ALLOW_OPTIONS },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "Unexpected empty {{name}}." }
        },
        create(context) {
          const options = context.options[0] || {};
          const allowed = options.allow || [];
          const sourceCode = context.getSourceCode();
          function reportIfEmpty(node) {
            const kind = getKind(node);
            const name = astUtils$1N.getFunctionNameWithKind(node);
            const innerComments = sourceCode.getTokens(node.body, {
              includeComments: true,
              filter: astUtils$1N.isCommentToken
            });
            if (allowed.indexOf(kind) === -1 && node.body.type === "BlockStatement" && node.body.body.length === 0 && innerComments.length === 0) {
              context.report({
                node,
                loc: node.body.loc,
                messageId: "unexpected",
                data: { name }
              });
            }
          }
          return {
            ArrowFunctionExpression: reportIfEmpty,
            FunctionDeclaration: reportIfEmpty,
            FunctionExpression: reportIfEmpty
          };
        }
      };
      var _noEmptyFunction = exports$3z;

      var exports$3y = {};
      exports$3y = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow empty destructuring patterns",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-empty-pattern"
          },
          schema: [],
          messages: { unexpected: "Unexpected empty {{type}} pattern." }
        },
        create(context) {
          return {
            ObjectPattern(node) {
              if (node.properties.length === 0) {
                context.report({
                  node,
                  messageId: "unexpected",
                  data: { type: "object" }
                });
              }
            },
            ArrayPattern(node) {
              if (node.elements.length === 0) {
                context.report({
                  node,
                  messageId: "unexpected",
                  data: { type: "array" }
                });
              }
            }
          };
        }
      };
      var _noEmptyPattern = exports$3y;

      var exports$3x = {};
      const astUtils$1M = _astUtils;
      const candidatesOfGlobalObject = Object.freeze([
        "global",
        "window",
        "globalThis"
      ]);
      function isMember(node, name) {
        return astUtils$1M.isSpecificMemberAccess(node, null, name);
      }
      exports$3x = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `eval()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-eval"
          },
          schema: [{
              type: "object",
              properties: {
                allowIndirect: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "eval can be harmful." }
        },
        create(context) {
          const allowIndirect = Boolean(context.options[0] && context.options[0].allowIndirect);
          const sourceCode = context.getSourceCode();
          let funcInfo = null;
          function enterVarScope(node) {
            const strict = context.getScope().isStrict;
            funcInfo = {
              upper: funcInfo,
              node,
              strict,
              defaultThis: false,
              initialized: strict
            };
          }
          function exitVarScope() {
            funcInfo = funcInfo.upper;
          }
          function report(node) {
            const parent = node.parent;
            const locationNode = node.type === "MemberExpression" ? node.property : node;
            const reportNode = parent.type === "CallExpression" && parent.callee === node ? parent : node;
            context.report({
              node: reportNode,
              loc: locationNode.loc,
              messageId: "unexpected"
            });
          }
          function reportAccessingEvalViaGlobalObject(globalScope) {
            for (let i = 0; i < candidatesOfGlobalObject.length; ++i) {
              const name = candidatesOfGlobalObject[i];
              const variable = astUtils$1M.getVariableByName(globalScope, name);
              if (!variable) {
                continue;
              }
              const references = variable.references;
              for (let j = 0; j < references.length; ++j) {
                const identifier = references[j].identifier;
                let node = identifier.parent;
                while (isMember(node, name)) {
                  node = node.parent;
                }
                if (isMember(node, "eval")) {
                  report(node);
                }
              }
            }
          }
          function reportAccessingEval(globalScope) {
            const variable = astUtils$1M.getVariableByName(globalScope, "eval");
            if (!variable) {
              return;
            }
            const references = variable.references;
            for (let i = 0; i < references.length; ++i) {
              const reference = references[i];
              const id = reference.identifier;
              if (id.name === "eval" && !astUtils$1M.isCallee(id)) {
                report(id);
              }
            }
          }
          if (allowIndirect) {
            return {
              "CallExpression:exit"(node) {
                const callee = node.callee;
                if (!node.optional && astUtils$1M.isSpecificId(callee, "eval")) {
                  report(callee);
                }
              }
            };
          }
          return {
            "CallExpression:exit"(node) {
              const callee = node.callee;
              if (astUtils$1M.isSpecificId(callee, "eval")) {
                report(callee);
              }
            },
            Program(node) {
              const scope = context.getScope(), features = context.parserOptions.ecmaFeatures || {}, strict = scope.isStrict || node.sourceType === "module" || features.globalReturn && scope.childScopes[0].isStrict;
              funcInfo = {
                upper: null,
                node,
                strict,
                defaultThis: true,
                initialized: true
              };
            },
            "Program:exit"() {
              const globalScope = context.getScope();
              exitVarScope();
              reportAccessingEval(globalScope);
              reportAccessingEvalViaGlobalObject(globalScope);
            },
            FunctionDeclaration: enterVarScope,
            "FunctionDeclaration:exit": exitVarScope,
            FunctionExpression: enterVarScope,
            "FunctionExpression:exit": exitVarScope,
            ArrowFunctionExpression: enterVarScope,
            "ArrowFunctionExpression:exit": exitVarScope,
            ThisExpression(node) {
              if (!isMember(node.parent, "eval")) {
                return;
              }
              if (!funcInfo.initialized) {
                funcInfo.initialized = true;
                funcInfo.defaultThis = astUtils$1M.isDefaultThisBinding(funcInfo.node, sourceCode);
              }
              if (!funcInfo.strict && funcInfo.defaultThis) {
                report(node.parent);
              }
            }
          };
        }
      };
      var _noEval = exports$3x;

      var exports$3w = {};
      const astUtils$1L = _astUtils;
      exports$3w = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow reassigning exceptions in `catch` clauses",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-ex-assign"
          },
          schema: [],
          messages: { unexpected: "Do not assign to the exception parameter." }
        },
        create(context) {
          function checkVariable(variable) {
            astUtils$1L.getModifyingReferences(variable.references).forEach(reference => {
              context.report({
                node: reference.identifier,
                messageId: "unexpected"
              });
            });
          }
          return {
            CatchClause(node) {
              context.getDeclaredVariables(node).forEach(checkVariable);
            }
          };
        }
      };
      var _noExAssign = exports$3w;

      var _globals = "default" in _globals2 ? globals$2 : _globals2;
      var exports$3v = {};
      const astUtils$1K = _astUtils;
      const globals = _globals;
      exports$3v = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow extending native types",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-extend-native"
          },
          schema: [{
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: { type: "string" },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "{{builtin}} prototype is read only, properties should not be added." }
        },
        create(context) {
          const config = context.options[0] || {};
          const exceptions = new Set(config.exceptions || []);
          const modifiedBuiltins = new Set(Object.keys(globals.builtin).filter(builtin => builtin[0].toUpperCase() === builtin[0]).filter(builtin => !exceptions.has(builtin)));
          function reportNode(node, builtin) {
            context.report({
              node,
              messageId: "unexpected",
              data: { builtin }
            });
          }
          function isPrototypePropertyAccessed(identifierNode) {
            return Boolean(identifierNode && identifierNode.parent && identifierNode.parent.type === "MemberExpression" && identifierNode.parent.object === identifierNode && astUtils$1K.getStaticPropertyName(identifierNode.parent) === "prototype");
          }
          function isAssigningToPropertyOf(node) {
            return node.parent.type === "MemberExpression" && node.parent.object === node && node.parent.parent.type === "AssignmentExpression" && node.parent.parent.left === node.parent;
          }
          function isInDefinePropertyCall(node) {
            return node.parent.type === "CallExpression" && node.parent.arguments[0] === node && astUtils$1K.isSpecificMemberAccess(node.parent.callee, "Object", /^definePropert(?:y|ies)$/u);
          }
          function checkAndReportPrototypeExtension(identifierNode) {
            if (!isPrototypePropertyAccessed(identifierNode)) {
              return;
            }
            const prototypeNode = identifierNode.parent.parent.type === "ChainExpression" ? identifierNode.parent.parent : identifierNode.parent;
            if (isAssigningToPropertyOf(prototypeNode)) {
              reportNode(prototypeNode.parent.parent, identifierNode.name);
            } else if (isInDefinePropertyCall(prototypeNode)) {
              reportNode(prototypeNode.parent, identifierNode.name);
            }
          }
          return {
            "Program:exit"() {
              const globalScope = context.getScope();
              modifiedBuiltins.forEach(builtin => {
                const builtinVar = globalScope.set.get(builtin);
                if (builtinVar && builtinVar.references) {
                  builtinVar.references.map(ref => ref.identifier).forEach(checkAndReportPrototypeExtension);
                }
              });
            }
          };
        }
      };
      var _noExtendNative = exports$3v;

      var _eslintUtils$e = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$3u = {};
      const {isParenthesized: isParenthesizedRaw} = _eslintUtils$e;
      const astUtils$1J = _astUtils;
      exports$3u = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow unnecessary parentheses",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-extra-parens"
          },
          fixable: "code",
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{ enum: ["functions"] }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  { enum: ["all"] },
                  {
                    type: "object",
                    properties: {
                      conditionalAssign: { type: "boolean" },
                      nestedBinaryExpressions: { type: "boolean" },
                      returnAssign: { type: "boolean" },
                      ignoreJSX: {
                        enum: [
                          "none",
                          "all",
                          "single-line",
                          "multi-line"
                        ]
                      },
                      enforceForArrowConditionals: { type: "boolean" },
                      enforceForSequenceExpressions: { type: "boolean" },
                      enforceForNewInMemberExpressions: { type: "boolean" },
                      enforceForFunctionPrototypeMethods: { type: "boolean" }
                    },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          messages: { unexpected: "Unnecessary parentheses around expression." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const tokensToIgnore = new WeakSet();
          const precedence = astUtils$1J.getPrecedence;
          const ALL_NODES = context.options[0] !== "functions";
          const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;
          const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;
          const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;
          const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;
          const IGNORE_ARROW_CONDITIONALS = ALL_NODES && context.options[1] && context.options[1].enforceForArrowConditionals === false;
          const IGNORE_SEQUENCE_EXPRESSIONS = ALL_NODES && context.options[1] && context.options[1].enforceForSequenceExpressions === false;
          const IGNORE_NEW_IN_MEMBER_EXPR = ALL_NODES && context.options[1] && context.options[1].enforceForNewInMemberExpressions === false;
          const IGNORE_FUNCTION_PROTOTYPE_METHODS = ALL_NODES && context.options[1] && context.options[1].enforceForFunctionPrototypeMethods === false;
          const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({ type: "AssignmentExpression" });
          const PRECEDENCE_OF_UPDATE_EXPR = precedence({ type: "UpdateExpression" });
          let reportsBuffer;
          function isImmediateFunctionPrototypeMethodCall(node) {
            const callNode = astUtils$1J.skipChainExpression(node);
            if (callNode.type !== "CallExpression") {
              return false;
            }
            const callee = astUtils$1J.skipChainExpression(callNode.callee);
            return callee.type === "MemberExpression" && callee.object.type === "FunctionExpression" && [
              "call",
              "apply"
            ].includes(astUtils$1J.getStaticPropertyName(callee));
          }
          function ruleApplies(node) {
            if (node.type === "JSXElement" || node.type === "JSXFragment") {
              const isSingleLine = node.loc.start.line === node.loc.end.line;
              switch (IGNORE_JSX) {
              case "all":
                return false;
              case "multi-line":
                return isSingleLine;
              case "single-line":
                return !isSingleLine;
              }
            }
            if (node.type === "SequenceExpression" && IGNORE_SEQUENCE_EXPRESSIONS) {
              return false;
            }
            if (isImmediateFunctionPrototypeMethodCall(node) && IGNORE_FUNCTION_PROTOTYPE_METHODS) {
              return false;
            }
            return ALL_NODES || node.type === "FunctionExpression" || node.type === "ArrowFunctionExpression";
          }
          function isParenthesised(node) {
            return isParenthesizedRaw(1, node, sourceCode);
          }
          function isParenthesisedTwice(node) {
            return isParenthesizedRaw(2, node, sourceCode);
          }
          function hasExcessParens(node) {
            return ruleApplies(node) && isParenthesised(node);
          }
          function hasDoubleExcessParens(node) {
            return ruleApplies(node) && isParenthesisedTwice(node);
          }
          function hasExcessParensWithPrecedence(node, precedenceLowerLimit) {
            if (ruleApplies(node) && isParenthesised(node)) {
              if (precedence(node) >= precedenceLowerLimit || isParenthesisedTwice(node)) {
                return true;
              }
            }
            return false;
          }
          function isCondAssignException(node) {
            return EXCEPT_COND_ASSIGN && node.test.type === "AssignmentExpression";
          }
          function isInReturnStatement(node) {
            for (let currentNode = node; currentNode; currentNode = currentNode.parent) {
              if (currentNode.type === "ReturnStatement" || currentNode.type === "ArrowFunctionExpression" && currentNode.body.type !== "BlockStatement") {
                return true;
              }
            }
            return false;
          }
          function isNewExpressionWithParens(newExpression) {
            const lastToken = sourceCode.getLastToken(newExpression);
            const penultimateToken = sourceCode.getTokenBefore(lastToken);
            return newExpression.arguments.length > 0 || astUtils$1J.isOpeningParenToken(penultimateToken) && astUtils$1J.isClosingParenToken(lastToken) && newExpression.callee.range[1] < newExpression.range[1];
          }
          function containsAssignment(node) {
            if (node.type === "AssignmentExpression") {
              return true;
            }
            if (node.type === "ConditionalExpression" && (node.consequent.type === "AssignmentExpression" || node.alternate.type === "AssignmentExpression")) {
              return true;
            }
            if (node.left && node.left.type === "AssignmentExpression" || node.right && node.right.type === "AssignmentExpression") {
              return true;
            }
            return false;
          }
          function isReturnAssignException(node) {
            if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node)) {
              return false;
            }
            if (node.type === "ReturnStatement") {
              return node.argument && containsAssignment(node.argument);
            }
            if (node.type === "ArrowFunctionExpression" && node.body.type !== "BlockStatement") {
              return containsAssignment(node.body);
            }
            return containsAssignment(node);
          }
          function hasExcessParensNoLineTerminator(token, node) {
            if (token.loc.end.line === node.loc.start.line) {
              return hasExcessParens(node);
            }
            return hasDoubleExcessParens(node);
          }
          function requiresLeadingSpace(node) {
            const leftParenToken = sourceCode.getTokenBefore(node);
            const tokenBeforeLeftParen = sourceCode.getTokenBefore(leftParenToken, { includeComments: true });
            const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParenToken, { includeComments: true });
            return tokenBeforeLeftParen && tokenBeforeLeftParen.range[1] === leftParenToken.range[0] && leftParenToken.range[1] === tokenAfterLeftParen.range[0] && !astUtils$1J.canTokensBeAdjacent(tokenBeforeLeftParen, tokenAfterLeftParen);
          }
          function requiresTrailingSpace(node) {
            const nextTwoTokens = sourceCode.getTokensAfter(node, { count: 2 });
            const rightParenToken = nextTwoTokens[0];
            const tokenAfterRightParen = nextTwoTokens[1];
            const tokenBeforeRightParen = sourceCode.getLastToken(node);
            return rightParenToken && tokenAfterRightParen && !sourceCode.isSpaceBetweenTokens(rightParenToken, tokenAfterRightParen) && !astUtils$1J.canTokensBeAdjacent(tokenBeforeRightParen, tokenAfterRightParen);
          }
          function isIIFE(node) {
            const maybeCallNode = astUtils$1J.skipChainExpression(node);
            return maybeCallNode.type === "CallExpression" && maybeCallNode.callee.type === "FunctionExpression";
          }
          function canBeAssignmentTarget(node) {
            return node && (node.type === "Identifier" || node.type === "MemberExpression");
          }
          function report(node) {
            const leftParenToken = sourceCode.getTokenBefore(node);
            const rightParenToken = sourceCode.getTokenAfter(node);
            if (!isParenthesisedTwice(node)) {
              if (tokensToIgnore.has(sourceCode.getFirstToken(node))) {
                return;
              }
              if (isIIFE(node) && !isParenthesised(node.callee)) {
                return;
              }
            }
            function finishReport() {
              context.report({
                node,
                loc: leftParenToken.loc,
                messageId: "unexpected",
                fix(fixer) {
                  const parenthesizedSource = sourceCode.text.slice(leftParenToken.range[1], rightParenToken.range[0]);
                  return fixer.replaceTextRange([
                    leftParenToken.range[0],
                    rightParenToken.range[1]
                  ], (requiresLeadingSpace(node) ? " " : "") + parenthesizedSource + (requiresTrailingSpace(node) ? " " : ""));
                }
              });
            }
            if (reportsBuffer) {
              reportsBuffer.reports.push({
                node,
                finishReport
              });
              return;
            }
            finishReport();
          }
          function checkArgumentWithPrecedence(node) {
            if (hasExcessParensWithPrecedence(node.argument, precedence(node))) {
              report(node.argument);
            }
          }
          function doesMemberExpressionContainCallExpression(node) {
            let currentNode = node.object;
            let currentNodeType = node.object.type;
            while (currentNodeType === "MemberExpression") {
              currentNode = currentNode.object;
              currentNodeType = currentNode.type;
            }
            return currentNodeType === "CallExpression";
          }
          function checkCallNew(node) {
            const callee = node.callee;
            if (hasExcessParensWithPrecedence(callee, precedence(node))) {
              if (hasDoubleExcessParens(callee) || !(isIIFE(node) || callee.type === "NewExpression" && !isNewExpressionWithParens(callee) && !(node.type === "NewExpression" && !isNewExpressionWithParens(node)) || node.type === "NewExpression" && callee.type === "MemberExpression" && doesMemberExpressionContainCallExpression(callee) || !node.optional && callee.type === "ChainExpression")) {
                report(node.callee);
              }
            }
            node.arguments.filter(arg => hasExcessParensWithPrecedence(arg, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(report);
          }
          function checkBinaryLogical(node) {
            const prec = precedence(node);
            const leftPrecedence = precedence(node.left);
            const rightPrecedence = precedence(node.right);
            const isExponentiation = node.operator === "**";
            const shouldSkipLeft = NESTED_BINARY && (node.left.type === "BinaryExpression" || node.left.type === "LogicalExpression");
            const shouldSkipRight = NESTED_BINARY && (node.right.type === "BinaryExpression" || node.right.type === "LogicalExpression");
            if (!shouldSkipLeft && hasExcessParens(node.left)) {
              if (!([
                  "AwaitExpression",
                  "UnaryExpression"
                ].includes(node.left.type) && isExponentiation) && !astUtils$1J.isMixedLogicalAndCoalesceExpressions(node.left, node) && (leftPrecedence > prec || leftPrecedence === prec && !isExponentiation) || isParenthesisedTwice(node.left)) {
                report(node.left);
              }
            }
            if (!shouldSkipRight && hasExcessParens(node.right)) {
              if (!astUtils$1J.isMixedLogicalAndCoalesceExpressions(node.right, node) && (rightPrecedence > prec || rightPrecedence === prec && isExponentiation) || isParenthesisedTwice(node.right)) {
                report(node.right);
              }
            }
          }
          function checkClass(node) {
            if (!node.superClass) {
              return;
            }
            const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR ? hasExcessParens(node.superClass) : hasDoubleExcessParens(node.superClass);
            if (hasExtraParens) {
              report(node.superClass);
            }
          }
          function checkSpreadOperator(node) {
            if (hasExcessParensWithPrecedence(node.argument, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
              report(node.argument);
            }
          }
          function checkExpressionOrExportStatement(node) {
            const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);
            const secondToken = sourceCode.getTokenAfter(firstToken, astUtils$1J.isNotOpeningParenToken);
            const thirdToken = secondToken ? sourceCode.getTokenAfter(secondToken) : null;
            const tokenAfterClosingParens = secondToken ? sourceCode.getTokenAfter(secondToken, astUtils$1J.isNotClosingParenToken) : null;
            if (astUtils$1J.isOpeningParenToken(firstToken) && (astUtils$1J.isOpeningBraceToken(secondToken) || secondToken.type === "Keyword" && (secondToken.value === "function" || secondToken.value === "class" || secondToken.value === "let" && tokenAfterClosingParens && (astUtils$1J.isOpeningBracketToken(tokenAfterClosingParens) || tokenAfterClosingParens.type === "Identifier")) || secondToken && secondToken.type === "Identifier" && secondToken.value === "async" && thirdToken && thirdToken.type === "Keyword" && thirdToken.value === "function")) {
              tokensToIgnore.add(secondToken);
            }
            const hasExtraParens = node.parent.type === "ExportDefaultDeclaration" ? hasExcessParensWithPrecedence(node, PRECEDENCE_OF_ASSIGNMENT_EXPR) : hasExcessParens(node);
            if (hasExtraParens) {
              report(node);
            }
          }
          function pathToAncestor(node, ancestor) {
            const path = [node];
            let currentNode = node;
            while (currentNode !== ancestor) {
              currentNode = currentNode.parent;
              if (currentNode === null) {
                throw new Error("Nodes are not in the ancestor-descendant relationship.");
              }
              path.push(currentNode);
            }
            return path;
          }
          function pathToDescendant(node, descendant) {
            return pathToAncestor(descendant, node).reverse();
          }
          function isSafelyEnclosingInExpression(node, child) {
            switch (node.type) {
            case "ArrayExpression":
            case "ArrayPattern":
            case "BlockStatement":
            case "ObjectExpression":
            case "ObjectPattern":
            case "TemplateLiteral":
              return true;
            case "ArrowFunctionExpression":
            case "FunctionExpression":
              return node.params.includes(child);
            case "CallExpression":
            case "NewExpression":
              return node.arguments.includes(child);
            case "MemberExpression":
              return node.computed && node.property === child;
            case "ConditionalExpression":
              return node.consequent === child;
            default:
              return false;
            }
          }
          function startNewReportsBuffering() {
            reportsBuffer = {
              upper: reportsBuffer,
              inExpressionNodes: [],
              reports: []
            };
          }
          function endCurrentReportsBuffering() {
            const {upper, inExpressionNodes, reports} = reportsBuffer;
            if (upper) {
              upper.inExpressionNodes.push(...inExpressionNodes);
              upper.reports.push(...reports);
            } else {
              reports.forEach(({finishReport}) => finishReport());
            }
            reportsBuffer = upper;
          }
          function isInCurrentReportsBuffer(node) {
            return reportsBuffer.reports.some(r => r.node === node);
          }
          function removeFromCurrentReportsBuffer(node) {
            reportsBuffer.reports = reportsBuffer.reports.filter(r => r.node !== node);
          }
          function isMemberExpInNewCallee(node) {
            if (node.type === "MemberExpression") {
              return node.parent.type === "NewExpression" && node.parent.callee === node ? true : node.parent.object === node && isMemberExpInNewCallee(node.parent);
            }
            return false;
          }
          return {
            ArrayExpression(node) {
              node.elements.filter(e => e && hasExcessParensWithPrecedence(e, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(report);
            },
            ArrayPattern(node) {
              node.elements.filter(e => canBeAssignmentTarget(e) && hasExcessParens(e)).forEach(report);
            },
            ArrowFunctionExpression(node) {
              if (isReturnAssignException(node)) {
                return;
              }
              if (node.body.type === "ConditionalExpression" && IGNORE_ARROW_CONDITIONALS) {
                return;
              }
              if (node.body.type !== "BlockStatement") {
                const firstBodyToken = sourceCode.getFirstToken(node.body, astUtils$1J.isNotOpeningParenToken);
                const tokenBeforeFirst = sourceCode.getTokenBefore(firstBodyToken);
                if (astUtils$1J.isOpeningParenToken(tokenBeforeFirst) && astUtils$1J.isOpeningBraceToken(firstBodyToken)) {
                  tokensToIgnore.add(firstBodyToken);
                }
                if (hasExcessParensWithPrecedence(node.body, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
                  report(node.body);
                }
              }
            },
            AssignmentExpression(node) {
              if (canBeAssignmentTarget(node.left) && hasExcessParens(node.left)) {
                report(node.left);
              }
              if (!isReturnAssignException(node) && hasExcessParensWithPrecedence(node.right, precedence(node))) {
                report(node.right);
              }
            },
            BinaryExpression(node) {
              if (reportsBuffer && node.operator === "in") {
                reportsBuffer.inExpressionNodes.push(node);
              }
              checkBinaryLogical(node);
            },
            CallExpression: checkCallNew,
            ClassBody(node) {
              node.body.filter(member => member.type === "MethodDefinition" && member.computed && member.key).filter(member => hasExcessParensWithPrecedence(member.key, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(member => report(member.key));
            },
            ConditionalExpression(node) {
              if (isReturnAssignException(node)) {
                return;
              }
              if (!isCondAssignException(node) && hasExcessParensWithPrecedence(node.test, precedence({
                  type: "LogicalExpression",
                  operator: "||"
                }))) {
                report(node.test);
              }
              if (hasExcessParensWithPrecedence(node.consequent, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
                report(node.consequent);
              }
              if (hasExcessParensWithPrecedence(node.alternate, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
                report(node.alternate);
              }
            },
            DoWhileStatement(node) {
              if (hasExcessParens(node.test) && !isCondAssignException(node)) {
                report(node.test);
              }
            },
            ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),
            ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),
            ForInStatement(node) {
              if (node.left.type !== "VariableDeclaration") {
                const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils$1J.isNotOpeningParenToken);
                if (firstLeftToken.value === "let" && astUtils$1J.isOpeningBracketToken(sourceCode.getTokenAfter(firstLeftToken, astUtils$1J.isNotClosingParenToken))) {
                  tokensToIgnore.add(firstLeftToken);
                }
              }
              if (hasExcessParens(node.left)) {
                report(node.left);
              }
              if (hasExcessParens(node.right)) {
                report(node.right);
              }
            },
            ForOfStatement(node) {
              if (node.left.type !== "VariableDeclaration") {
                const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils$1J.isNotOpeningParenToken);
                if (firstLeftToken.value === "let") {
                  tokensToIgnore.add(firstLeftToken);
                }
              }
              if (hasExcessParens(node.left)) {
                report(node.left);
              }
              if (hasExcessParensWithPrecedence(node.right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
                report(node.right);
              }
            },
            ForStatement(node) {
              if (node.test && hasExcessParens(node.test) && !isCondAssignException(node)) {
                report(node.test);
              }
              if (node.update && hasExcessParens(node.update)) {
                report(node.update);
              }
              if (node.init) {
                if (node.init.type !== "VariableDeclaration") {
                  const firstToken = sourceCode.getFirstToken(node.init, astUtils$1J.isNotOpeningParenToken);
                  if (firstToken.value === "let" && astUtils$1J.isOpeningBracketToken(sourceCode.getTokenAfter(firstToken, astUtils$1J.isNotClosingParenToken))) {
                    tokensToIgnore.add(firstToken);
                  }
                }
                startNewReportsBuffering();
                if (hasExcessParens(node.init)) {
                  report(node.init);
                }
              }
            },
            "ForStatement > *.init:exit"(node) {
              if (reportsBuffer.reports.length) {
                reportsBuffer.inExpressionNodes.forEach(inExpressionNode => {
                  const path = pathToDescendant(node, inExpressionNode);
                  let nodeToExclude;
                  for (let i = 0; i < path.length; i++) {
                    const pathNode = path[i];
                    if (i < path.length - 1) {
                      const nextPathNode = path[i + 1];
                      if (isSafelyEnclosingInExpression(pathNode, nextPathNode)) {
                        return;
                      }
                    }
                    if (isParenthesised(pathNode)) {
                      if (isInCurrentReportsBuffer(pathNode)) {
                        if (isParenthesisedTwice(pathNode)) {
                          return;
                        }
                        if (!nodeToExclude) {
                          nodeToExclude = pathNode;
                        }
                      } else {
                        return;
                      }
                    }
                  }
                  removeFromCurrentReportsBuffer(nodeToExclude);
                });
              }
              endCurrentReportsBuffering();
            },
            IfStatement(node) {
              if (hasExcessParens(node.test) && !isCondAssignException(node)) {
                report(node.test);
              }
            },
            ImportExpression(node) {
              const {source} = node;
              if (source.type === "SequenceExpression") {
                if (hasDoubleExcessParens(source)) {
                  report(source);
                }
              } else if (hasExcessParens(source)) {
                report(source);
              }
            },
            LogicalExpression: checkBinaryLogical,
            MemberExpression(node) {
              const shouldAllowWrapOnce = isMemberExpInNewCallee(node) && doesMemberExpressionContainCallExpression(node);
              const nodeObjHasExcessParens = shouldAllowWrapOnce ? hasDoubleExcessParens(node.object) : hasExcessParens(node.object) && !(isImmediateFunctionPrototypeMethodCall(node.parent) && node.parent.callee === node && IGNORE_FUNCTION_PROTOTYPE_METHODS);
              if (nodeObjHasExcessParens && precedence(node.object) >= precedence(node) && (node.computed || !(astUtils$1J.isDecimalInteger(node.object) || node.object.type === "Literal" && node.object.regex))) {
                report(node.object);
              }
              if (nodeObjHasExcessParens && node.object.type === "CallExpression") {
                report(node.object);
              }
              if (nodeObjHasExcessParens && !IGNORE_NEW_IN_MEMBER_EXPR && node.object.type === "NewExpression" && isNewExpressionWithParens(node.object)) {
                report(node.object);
              }
              if (nodeObjHasExcessParens && node.optional && node.object.type === "ChainExpression") {
                report(node.object);
              }
              if (node.computed && hasExcessParens(node.property)) {
                report(node.property);
              }
            },
            NewExpression: checkCallNew,
            ObjectExpression(node) {
              node.properties.filter(property => property.value && hasExcessParensWithPrecedence(property.value, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(property => report(property.value));
            },
            ObjectPattern(node) {
              node.properties.filter(property => {
                const value = property.value;
                return canBeAssignmentTarget(value) && hasExcessParens(value);
              }).forEach(property => report(property.value));
            },
            Property(node) {
              if (node.computed) {
                const {key} = node;
                if (key && hasExcessParensWithPrecedence(key, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
                  report(key);
                }
              }
            },
            RestElement(node) {
              const argument = node.argument;
              if (canBeAssignmentTarget(argument) && hasExcessParens(argument)) {
                report(argument);
              }
            },
            ReturnStatement(node) {
              const returnToken = sourceCode.getFirstToken(node);
              if (isReturnAssignException(node)) {
                return;
              }
              if (node.argument && hasExcessParensNoLineTerminator(returnToken, node.argument) && !(node.argument.type === "Literal" && node.argument.regex)) {
                report(node.argument);
              }
            },
            SequenceExpression(node) {
              const precedenceOfNode = precedence(node);
              node.expressions.filter(e => hasExcessParensWithPrecedence(e, precedenceOfNode)).forEach(report);
            },
            SwitchCase(node) {
              if (node.test && hasExcessParens(node.test)) {
                report(node.test);
              }
            },
            SwitchStatement(node) {
              if (hasExcessParens(node.discriminant)) {
                report(node.discriminant);
              }
            },
            ThrowStatement(node) {
              const throwToken = sourceCode.getFirstToken(node);
              if (hasExcessParensNoLineTerminator(throwToken, node.argument)) {
                report(node.argument);
              }
            },
            UnaryExpression: checkArgumentWithPrecedence,
            UpdateExpression(node) {
              if (node.prefix) {
                checkArgumentWithPrecedence(node);
              } else {
                const {argument} = node;
                const operatorToken = sourceCode.getLastToken(node);
                if (argument.loc.end.line === operatorToken.loc.start.line) {
                  checkArgumentWithPrecedence(node);
                } else {
                  if (hasDoubleExcessParens(argument)) {
                    report(argument);
                  }
                }
              }
            },
            AwaitExpression: checkArgumentWithPrecedence,
            VariableDeclarator(node) {
              if (node.init && hasExcessParensWithPrecedence(node.init, PRECEDENCE_OF_ASSIGNMENT_EXPR) && !(node.init.type === "Literal" && node.init.regex)) {
                report(node.init);
              }
            },
            WhileStatement(node) {
              if (hasExcessParens(node.test) && !isCondAssignException(node)) {
                report(node.test);
              }
            },
            WithStatement(node) {
              if (hasExcessParens(node.object)) {
                report(node.object);
              }
            },
            YieldExpression(node) {
              if (node.argument) {
                const yieldToken = sourceCode.getFirstToken(node);
                if (precedence(node.argument) >= precedence(node) && hasExcessParensNoLineTerminator(yieldToken, node.argument) || hasDoubleExcessParens(node.argument)) {
                  report(node.argument);
                }
              }
            },
            ClassDeclaration: checkClass,
            ClassExpression: checkClass,
            SpreadElement: checkSpreadOperator,
            SpreadProperty: checkSpreadOperator,
            ExperimentalSpreadProperty: checkSpreadOperator,
            TemplateLiteral(node) {
              node.expressions.filter(e => e && hasExcessParens(e)).forEach(report);
            },
            AssignmentPattern(node) {
              const {left, right} = node;
              if (canBeAssignmentTarget(left) && hasExcessParens(left)) {
                report(left);
              }
              if (right && hasExcessParensWithPrecedence(right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {
                report(right);
              }
            }
          };
        }
      };
      var _noExtraParens = exports$3u;

      var exports$3t = {};
      const FixTracker$4 = _fixTracker;
      const astUtils$1I = _astUtils;
      exports$3t = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary semicolons",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-extra-semi"
          },
          fixable: "code",
          schema: [],
          messages: { unexpected: "Unnecessary semicolon." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function report(nodeOrToken) {
            context.report({
              node: nodeOrToken,
              messageId: "unexpected",
              fix(fixer) {
                return new FixTracker$4(fixer, context.getSourceCode()).retainSurroundingTokens(nodeOrToken).remove(nodeOrToken);
              }
            });
          }
          function checkForPartOfClassBody(firstToken) {
            for (let token = firstToken; token.type === "Punctuator" && !astUtils$1I.isClosingBraceToken(token); token = sourceCode.getTokenAfter(token)) {
              if (astUtils$1I.isSemicolonToken(token)) {
                report(token);
              }
            }
          }
          return {
            EmptyStatement(node) {
              const parent = node.parent, allowedParentTypes = [
                  "ForStatement",
                  "ForInStatement",
                  "ForOfStatement",
                  "WhileStatement",
                  "DoWhileStatement",
                  "IfStatement",
                  "LabeledStatement",
                  "WithStatement"
                ];
              if (allowedParentTypes.indexOf(parent.type) === -1) {
                report(node);
              }
            },
            ClassBody(node) {
              checkForPartOfClassBody(sourceCode.getFirstToken(node, 1));
            },
            MethodDefinition(node) {
              checkForPartOfClassBody(sourceCode.getTokenAfter(node));
            }
          };
        }
      };
      var _noExtraSemi = exports$3t;

      var exports$3s = {};
      const astUtils$1H = _astUtils;
      exports$3s = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow leading or trailing decimal points in numeric literals",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-floating-decimal"
          },
          schema: [],
          fixable: "code",
          messages: {
            leading: "A leading decimal point can be confused with a dot.",
            trailing: "A trailing decimal point can be confused with a dot."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            Literal(node) {
              if (typeof node.value === "number") {
                if (node.raw.startsWith(".")) {
                  context.report({
                    node,
                    messageId: "leading",
                    fix(fixer) {
                      const tokenBefore = sourceCode.getTokenBefore(node);
                      const needsSpaceBefore = tokenBefore && tokenBefore.range[1] === node.range[0] && !astUtils$1H.canTokensBeAdjacent(tokenBefore, `0${ node.raw }`);
                      return fixer.insertTextBefore(node, needsSpaceBefore ? " 0" : "0");
                    }
                  });
                }
                if (node.raw.indexOf(".") === node.raw.length - 1) {
                  context.report({
                    node,
                    messageId: "trailing",
                    fix: fixer => fixer.insertTextAfter(node, "0")
                  });
                }
              }
            }
          };
        }
      };
      var _noFloatingDecimal = exports$3s;

      var exports$3r = {};
      exports$3r = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow assignments to native objects or read-only global variables",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-global-assign"
          },
          schema: [{
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: { type: "string" },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { globalShouldNotBeModified: "Read-only global '{{name}}' should not be modified." }
        },
        create(context) {
          const config = context.options[0];
          const exceptions = config && config.exceptions || [];
          function checkReference(reference, index, references) {
            const identifier = reference.identifier;
            if (reference.init === false && reference.isWrite() && (index === 0 || references[index - 1].identifier !== identifier)) {
              context.report({
                node: identifier,
                messageId: "globalShouldNotBeModified",
                data: { name: identifier.name }
              });
            }
          }
          function checkVariable(variable) {
            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {
              variable.references.forEach(checkReference);
            }
          }
          return {
            Program() {
              const globalScope = context.getScope();
              globalScope.variables.forEach(checkVariable);
            }
          };
        }
      };
      var _noGlobalAssign = exports$3r;

      var _eslintUtils$d = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$3q = {};
      const astUtils$1G = _astUtils;
      const {getStaticValue} = _eslintUtils$d;
      exports$3q = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `eval()`-like methods",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-implied-eval"
          },
          schema: [],
          messages: { impliedEval: "Implied eval. Consider passing a function instead of a string." }
        },
        create(context) {
          const GLOBAL_CANDIDATES = Object.freeze([
            "global",
            "window",
            "globalThis"
          ]);
          const EVAL_LIKE_FUNC_PATTERN = /^(?:set(?:Interval|Timeout)|execScript)$/u;
          function isEvaluatedString(node) {
            if (node.type === "Literal" && typeof node.value === "string" || node.type === "TemplateLiteral") {
              return true;
            }
            if (node.type === "BinaryExpression" && node.operator === "+") {
              return isEvaluatedString(node.left) || isEvaluatedString(node.right);
            }
            return false;
          }
          function reportImpliedEvalCallExpression(node) {
            const [firstArgument] = node.arguments;
            if (firstArgument) {
              const staticValue = getStaticValue(firstArgument, context.getScope());
              const isStaticString = staticValue && typeof staticValue.value === "string";
              const isString = isStaticString || isEvaluatedString(firstArgument);
              if (isString) {
                context.report({
                  node,
                  messageId: "impliedEval"
                });
              }
            }
          }
          function reportImpliedEvalViaGlobal(globalVar) {
            const {references, name} = globalVar;
            references.forEach(ref => {
              const identifier = ref.identifier;
              let node = identifier.parent;
              while (astUtils$1G.isSpecificMemberAccess(node, null, name)) {
                node = node.parent;
              }
              if (astUtils$1G.isSpecificMemberAccess(node, null, EVAL_LIKE_FUNC_PATTERN)) {
                const calleeNode = node.parent.type === "ChainExpression" ? node.parent : node;
                const parent = calleeNode.parent;
                if (parent.type === "CallExpression" && parent.callee === calleeNode) {
                  reportImpliedEvalCallExpression(parent);
                }
              }
            });
          }
          return {
            CallExpression(node) {
              if (astUtils$1G.isSpecificId(node.callee, EVAL_LIKE_FUNC_PATTERN)) {
                reportImpliedEvalCallExpression(node);
              }
            },
            "Program:exit"() {
              const globalScope = context.getScope();
              GLOBAL_CANDIDATES.map(candidate => astUtils$1G.getVariableByName(globalScope, candidate)).filter(globalVar => !!globalVar && globalVar.defs.length === 0).forEach(reportImpliedEvalViaGlobal);
            }
          };
        }
      };
      var _noImpliedEval = exports$3q;

      var exports$3p = {};
      const astUtils$1F = _astUtils;
      exports$3p = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow inline comments after code",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-inline-comments"
          },
          schema: [{
              type: "object",
              properties: { ignorePattern: { type: "string" } },
              additionalProperties: false
            }],
          messages: { unexpectedInlineComment: "Unexpected comment inline with code." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const options = context.options[0];
          let customIgnoreRegExp;
          if (options && options.ignorePattern) {
            customIgnoreRegExp = new RegExp(options.ignorePattern, "u");
          }
          function testCodeAroundComment(node) {
            const startLine = String(sourceCode.lines[node.loc.start.line - 1]), endLine = String(sourceCode.lines[node.loc.end.line - 1]), preamble = startLine.slice(0, node.loc.start.column).trim(), postamble = endLine.slice(node.loc.end.column).trim(), isPreambleEmpty = !preamble, isPostambleEmpty = !postamble;
            if (isPreambleEmpty && isPostambleEmpty) {
              return;
            }
            if (customIgnoreRegExp && customIgnoreRegExp.test(node.value)) {
              return;
            }
            if ((isPreambleEmpty || preamble === "{") && (isPostambleEmpty || postamble === "}")) {
              const enclosingNode = sourceCode.getNodeByRangeIndex(node.range[0]);
              if (enclosingNode && enclosingNode.type === "JSXEmptyExpression") {
                return;
              }
            }
            if (astUtils$1F.isDirectiveComment(node)) {
              return;
            }
            context.report({
              node,
              messageId: "unexpectedInlineComment"
            });
          }
          return {
            Program() {
              sourceCode.getAllComments().filter(token => token.type !== "Shebang").forEach(testCodeAroundComment);
            }
          };
        }
      };
      var _noInlineComments = exports$3p;

      var _regexpp$4 = "default" in _regexpp2 ? exports$3J : _regexpp2;
      var exports$3o = {};
      const RegExpValidator = _regexpp$4.RegExpValidator;
      const validator = new RegExpValidator();
      const validFlags = /[gimuys]/gu;
      const undefined1 = void 0;
      exports$3o = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow invalid regular expression strings in `RegExp` constructors",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-invalid-regexp"
          },
          schema: [{
              type: "object",
              properties: {
                allowConstructorFlags: {
                  type: "array",
                  items: { type: "string" }
                }
              },
              additionalProperties: false
            }],
          messages: { regexMessage: "{{message}}." }
        },
        create(context) {
          const options = context.options[0];
          let allowedFlags = null;
          if (options && options.allowConstructorFlags) {
            const temp = options.allowConstructorFlags.join("").replace(validFlags, "");
            if (temp) {
              allowedFlags = new RegExp(`[${ temp }]`, "giu");
            }
          }
          function isString(node) {
            return node && node.type === "Literal" && typeof node.value === "string";
          }
          function getFlags(node) {
            if (node.arguments.length < 2) {
              return "";
            }
            if (isString(node.arguments[1])) {
              return node.arguments[1].value;
            }
            return null;
          }
          function validateRegExpPattern(pattern, uFlag) {
            try {
              validator.validatePattern(pattern, undefined1, undefined1, uFlag);
              return null;
            } catch (err) {
              return err.message;
            }
          }
          function validateRegExpFlags(flags) {
            try {
              validator.validateFlags(flags);
              return null;
            } catch {
              return `Invalid flags supplied to RegExp constructor '${ flags }'`;
            }
          }
          return {
            "CallExpression, NewExpression"(node) {
              if (node.callee.type !== "Identifier" || node.callee.name !== "RegExp" || !isString(node.arguments[0])) {
                return;
              }
              const pattern = node.arguments[0].value;
              let flags = getFlags(node);
              if (flags && allowedFlags) {
                flags = flags.replace(allowedFlags, "");
              }
              const message = flags && validateRegExpFlags(flags) || (flags === null ? validateRegExpPattern(pattern, true) && validateRegExpPattern(pattern, false) : validateRegExpPattern(pattern, flags.includes("u")));
              if (message) {
                context.report({
                  node,
                  messageId: "regexMessage",
                  data: { message }
                });
              }
            }
          };
        }
      };
      var _noInvalidRegexp = exports$3o;

      var exports$3n = {};
      const astUtils$1E = _astUtils;
      exports$3n = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `this` keywords outside of classes or class-like objects",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-invalid-this"
          },
          schema: [{
              type: "object",
              properties: {
                capIsConstructor: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedThis: "Unexpected 'this'." }
        },
        create(context) {
          const options = context.options[0] || {};
          const capIsConstructor = options.capIsConstructor !== false;
          const stack = [], sourceCode = context.getSourceCode();
          stack.getCurrent = function () {
            const current = this[this.length - 1];
            if (!current.init) {
              current.init = true;
              current.valid = !astUtils$1E.isDefaultThisBinding(current.node, sourceCode, { capIsConstructor });
            }
            return current;
          };
          function enterFunction(node) {
            stack.push({
              init: !context.getScope().isStrict,
              node,
              valid: true
            });
          }
          function exitFunction() {
            stack.pop();
          }
          return {
            Program(node) {
              const scope = context.getScope(), features = context.parserOptions.ecmaFeatures || {};
              stack.push({
                init: true,
                node,
                valid: !(scope.isStrict || node.sourceType === "module" || features.globalReturn && scope.childScopes[0].isStrict)
              });
            },
            "Program:exit"() {
              stack.pop();
            },
            FunctionDeclaration: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            FunctionExpression: enterFunction,
            "FunctionExpression:exit": exitFunction,
            ThisExpression(node) {
              const current = stack.getCurrent();
              if (current && !current.valid) {
                context.report({
                  node,
                  messageId: "unexpectedThis"
                });
              }
            }
          };
        }
      };
      var _noInvalidThis = exports$3n;

      var exports$3m = {};
      const astUtils$1D = _astUtils;
      const ALL_IRREGULARS = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000\u2028\u2029]/u;
      const IRREGULAR_WHITESPACE = /[\f\v\u0085\ufeff\u00a0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u202f\u205f\u3000]+/mgu;
      const IRREGULAR_LINE_TERMINATORS = /[\u2028\u2029]/mgu;
      const LINE_BREAK = astUtils$1D.createGlobalLinebreakMatcher();
      exports$3m = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow irregular whitespace",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-irregular-whitespace"
          },
          schema: [{
              type: "object",
              properties: {
                skipComments: {
                  type: "boolean",
                  default: false
                },
                skipStrings: {
                  type: "boolean",
                  default: true
                },
                skipTemplates: {
                  type: "boolean",
                  default: false
                },
                skipRegExps: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { noIrregularWhitespace: "Irregular whitespace not allowed." }
        },
        create(context) {
          let errors = [];
          const options = context.options[0] || {};
          const skipComments = !!options.skipComments;
          const skipStrings = options.skipStrings !== false;
          const skipRegExps = !!options.skipRegExps;
          const skipTemplates = !!options.skipTemplates;
          const sourceCode = context.getSourceCode();
          const commentNodes = sourceCode.getAllComments();
          function removeWhitespaceError(node) {
            const locStart = node.loc.start;
            const locEnd = node.loc.end;
            errors = errors.filter(({
              loc: {start: errorLocStart}
            }) => errorLocStart.line < locStart.line || errorLocStart.line === locStart.line && errorLocStart.column < locStart.column || errorLocStart.line === locEnd.line && errorLocStart.column >= locEnd.column || errorLocStart.line > locEnd.line);
          }
          function removeInvalidNodeErrorsInIdentifierOrLiteral(node) {
            const shouldCheckStrings = skipStrings && typeof node.value === "string";
            const shouldCheckRegExps = skipRegExps && Boolean(node.regex);
            if (shouldCheckStrings || shouldCheckRegExps) {
              if (ALL_IRREGULARS.test(node.raw)) {
                removeWhitespaceError(node);
              }
            }
          }
          function removeInvalidNodeErrorsInTemplateLiteral(node) {
            if (typeof node.value.raw === "string") {
              if (ALL_IRREGULARS.test(node.value.raw)) {
                removeWhitespaceError(node);
              }
            }
          }
          function removeInvalidNodeErrorsInComment(node) {
            if (ALL_IRREGULARS.test(node.value)) {
              removeWhitespaceError(node);
            }
          }
          function checkForIrregularWhitespace(node) {
            const sourceLines = sourceCode.lines;
            sourceLines.forEach((sourceLine, lineIndex) => {
              const lineNumber = lineIndex + 1;
              let match;
              while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {
                errors.push({
                  node,
                  messageId: "noIrregularWhitespace",
                  loc: {
                    start: {
                      line: lineNumber,
                      column: match.index
                    },
                    end: {
                      line: lineNumber,
                      column: match.index + match[0].length
                    }
                  }
                });
              }
            });
          }
          function checkForIrregularLineTerminators(node) {
            const source = sourceCode.getText(), sourceLines = sourceCode.lines, linebreaks = source.match(LINE_BREAK);
            let lastLineIndex = -1, match;
            while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {
              const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;
              errors.push({
                node,
                messageId: "noIrregularWhitespace",
                loc: {
                  start: {
                    line: lineIndex + 1,
                    column: sourceLines[lineIndex].length
                  },
                  end: {
                    line: lineIndex + 2,
                    column: 0
                  }
                }
              });
              lastLineIndex = lineIndex;
            }
          }
          function noop() {
          }
          const nodes = {};
          if (ALL_IRREGULARS.test(sourceCode.getText())) {
            nodes.Program = function (node) {
              checkForIrregularWhitespace(node);
              checkForIrregularLineTerminators(node);
            };
            nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;
            nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;
            nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;
            nodes["Program:exit"] = function () {
              if (skipComments) {
                commentNodes.forEach(removeInvalidNodeErrorsInComment);
              }
              errors.forEach(error => context.report(error));
            };
          } else {
            nodes.Program = noop;
          }
          return nodes;
        }
      };
      var _noIrregularWhitespace = exports$3m;

      var exports$3l = {};
      const {getStaticPropertyName: getStaticPropertyName$1} = _astUtils;
      exports$3l = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of the `__iterator__` property",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-iterator"
          },
          schema: [],
          messages: { noIterator: "Reserved name '__iterator__'." }
        },
        create(context) {
          return {
            MemberExpression(node) {
              if (getStaticPropertyName$1(node) === "__iterator__") {
                context.report({
                  node,
                  messageId: "noIterator"
                });
              }
            }
          };
        }
      };
      var _noIterator = exports$3l;

      var exports$3k = {};
      function getContainingLoopNode(node) {
        for (let currentNode = node; currentNode.parent; currentNode = currentNode.parent) {
          const parent = currentNode.parent;
          switch (parent.type) {
          case "WhileStatement":
          case "DoWhileStatement":
            return parent;
          case "ForStatement":
            if (parent.init !== currentNode) {
              return parent;
            }
            break;
          case "ForInStatement":
          case "ForOfStatement":
            if (parent.right !== currentNode) {
              return parent;
            }
            break;
          case "ArrowFunctionExpression":
          case "FunctionExpression":
          case "FunctionDeclaration":
            return null;
          }
        }
        return null;
      }
      function getTopLoopNode(node, excludedNode) {
        const border = excludedNode ? excludedNode.range[1] : 0;
        let retv = node;
        let containingLoopNode = node;
        while (containingLoopNode && containingLoopNode.range[0] >= border) {
          retv = containingLoopNode;
          containingLoopNode = getContainingLoopNode(containingLoopNode);
        }
        return retv;
      }
      function isSafe(loopNode, reference) {
        const variable = reference.resolved;
        const definition = variable && variable.defs[0];
        const declaration = definition && definition.parent;
        const kind = declaration && declaration.type === "VariableDeclaration" ? declaration.kind : "";
        if (kind === "const") {
          return true;
        }
        if (kind === "let" && declaration.range[0] > loopNode.range[0] && declaration.range[1] < loopNode.range[1]) {
          return true;
        }
        const border = getTopLoopNode(loopNode, kind === "let" ? declaration : null).range[0];
        function isSafeReference(upperRef) {
          const id = upperRef.identifier;
          return !upperRef.isWrite() || variable.scope.variableScope === upperRef.from.variableScope && id.range[0] < border;
        }
        return Boolean(variable) && variable.references.every(isSafeReference);
      }
      exports$3k = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow function declarations that contain unsafe references inside loop statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-loop-func"
          },
          schema: [],
          messages: { unsafeRefs: "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}." }
        },
        create(context) {
          function checkForLoops(node) {
            const loopNode = getContainingLoopNode(node);
            if (!loopNode) {
              return;
            }
            const references = context.getScope().through;
            const unsafeRefs = references.filter(r => !isSafe(loopNode, r)).map(r => r.identifier.name);
            if (unsafeRefs.length > 0) {
              context.report({
                node,
                messageId: "unsafeRefs",
                data: { varNames: `'${ unsafeRefs.join("', '") }'` }
              });
            }
          }
          return {
            ArrowFunctionExpression: checkForLoops,
            FunctionExpression: checkForLoops,
            FunctionDeclaration: checkForLoops
          };
        }
      };
      var _noLoopFunc = exports$3k;

      var exports$3j = {};
      exports$3j = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow literal numbers that lose precision",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-loss-of-precision"
          },
          schema: [],
          messages: { noLossOfPrecision: "This number literal will lose precision at runtime." }
        },
        create(context) {
          function isNumber(node) {
            return typeof node.value === "number";
          }
          function getRaw(node) {
            return node.raw.replace(/_/gu, "");
          }
          function isBaseTen(node) {
            const prefixes = [
              "0x",
              "0X",
              "0b",
              "0B",
              "0o",
              "0O"
            ];
            return prefixes.every(prefix => !node.raw.startsWith(prefix)) && !/^0[0-7]+$/u.test(node.raw);
          }
          function notBaseTenLosesPrecision(node) {
            const rawString = getRaw(node).toUpperCase();
            let base = 0;
            if (rawString.startsWith("0B")) {
              base = 2;
            } else if (rawString.startsWith("0X")) {
              base = 16;
            } else {
              base = 8;
            }
            return !rawString.endsWith(node.value.toString(base).toUpperCase());
          }
          function addDecimalPointToNumber(stringNumber) {
            return `${ stringNumber.slice(0, 1) }.${ stringNumber.slice(1) }`;
          }
          function removeLeadingZeros(numberAsString) {
            return numberAsString.replace(/^0*/u, "");
          }
          function removeTrailingZeros(numberAsString) {
            return numberAsString.replace(/0*$/u, "");
          }
          function normalizeInteger(stringInteger) {
            const significantDigits = removeTrailingZeros(removeLeadingZeros(stringInteger));
            return {
              magnitude: stringInteger.startsWith("0") ? stringInteger.length - 2 : stringInteger.length - 1,
              coefficient: addDecimalPointToNumber(significantDigits)
            };
          }
          function normalizeFloat(stringFloat) {
            const trimmedFloat = removeLeadingZeros(stringFloat);
            if (trimmedFloat.startsWith(".")) {
              const decimalDigits = trimmedFloat.split(".").pop();
              const significantDigits = removeLeadingZeros(decimalDigits);
              return {
                magnitude: significantDigits.length - decimalDigits.length - 1,
                coefficient: addDecimalPointToNumber(significantDigits)
              };
            }
            return {
              magnitude: trimmedFloat.indexOf(".") - 1,
              coefficient: addDecimalPointToNumber(trimmedFloat.replace(".", ""))
            };
          }
          function convertNumberToScientificNotation(stringNumber) {
            const splitNumber = stringNumber.replace("E", "e").split("e");
            const originalCoefficient = splitNumber[0];
            const normalizedNumber = stringNumber.includes(".") ? normalizeFloat(originalCoefficient) : normalizeInteger(originalCoefficient);
            const normalizedCoefficient = normalizedNumber.coefficient;
            const magnitude = splitNumber.length > 1 ? parseInt(splitNumber[1], 10) + normalizedNumber.magnitude : normalizedNumber.magnitude;
            return `${ normalizedCoefficient }e${ magnitude }`;
          }
          function baseTenLosesPrecision(node) {
            const normalizedRawNumber = convertNumberToScientificNotation(getRaw(node));
            const requestedPrecision = normalizedRawNumber.split("e")[0].replace(".", "").length;
            if (requestedPrecision > 100) {
              return true;
            }
            const storedNumber = node.value.toPrecision(requestedPrecision);
            const normalizedStoredNumber = convertNumberToScientificNotation(storedNumber);
            return normalizedRawNumber !== normalizedStoredNumber;
          }
          function losesPrecision(node) {
            return isBaseTen(node) ? baseTenLosesPrecision(node) : notBaseTenLosesPrecision(node);
          }
          return {
            Literal(node) {
              if (node.value && isNumber(node) && losesPrecision(node)) {
                context.report({
                  messageId: "noLossOfPrecision",
                  node
                });
              }
            }
          };
        }
      };
      var _noLossOfPrecision = exports$3j;

      var exports$3i = {};
      const astUtils$1C = _astUtils;
      const MAX_ARRAY_LENGTH = 2 ** 32 - 1;
      function normalizeIgnoreValue(x) {
        if (typeof x === "string") {
          return BigInt(x.slice(0, -1));
        }
        return x;
      }
      exports$3i = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow magic numbers",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-magic-numbers"
          },
          schema: [{
              type: "object",
              properties: {
                detectObjects: {
                  type: "boolean",
                  default: false
                },
                enforceConst: {
                  type: "boolean",
                  default: false
                },
                ignore: {
                  type: "array",
                  items: {
                    anyOf: [
                      { type: "number" },
                      {
                        type: "string",
                        pattern: "^[+-]?(?:0|[1-9][0-9]*)n$"
                      }
                    ]
                  },
                  uniqueItems: true
                },
                ignoreArrayIndexes: {
                  type: "boolean",
                  default: false
                },
                ignoreDefaultValues: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            useConst: "Number constants declarations must use 'const'.",
            noMagic: "No magic number: {{raw}}."
          }
        },
        create(context) {
          const config = context.options[0] || {}, detectObjects = !!config.detectObjects, enforceConst = !!config.enforceConst, ignore = (config.ignore || []).map(normalizeIgnoreValue), ignoreArrayIndexes = !!config.ignoreArrayIndexes, ignoreDefaultValues = !!config.ignoreDefaultValues;
          const okTypes = detectObjects ? [] : [
            "ObjectExpression",
            "Property",
            "AssignmentExpression"
          ];
          function isIgnoredValue(value) {
            return ignore.indexOf(value) !== -1;
          }
          function isDefaultValue(fullNumberNode) {
            const parent = fullNumberNode.parent;
            return parent.type === "AssignmentPattern" && parent.right === fullNumberNode;
          }
          function isParseIntRadix(fullNumberNode) {
            const parent = fullNumberNode.parent;
            return parent.type === "CallExpression" && fullNumberNode === parent.arguments[1] && (astUtils$1C.isSpecificId(parent.callee, "parseInt") || astUtils$1C.isSpecificMemberAccess(parent.callee, "Number", "parseInt"));
          }
          function isJSXNumber(fullNumberNode) {
            return fullNumberNode.parent.type.indexOf("JSX") === 0;
          }
          function isArrayIndex(fullNumberNode, value) {
            const parent = fullNumberNode.parent;
            return parent.type === "MemberExpression" && parent.property === fullNumberNode && (Number.isInteger(value) || typeof value === "bigint") && value >= 0 && value < MAX_ARRAY_LENGTH;
          }
          return {
            Literal(node) {
              if (!astUtils$1C.isNumericLiteral(node)) {
                return;
              }
              let fullNumberNode;
              let value;
              let raw;
              if (node.parent.type === "UnaryExpression" && node.parent.operator === "-") {
                fullNumberNode = node.parent;
                value = -node.value;
                raw = `-${ node.raw }`;
              } else {
                fullNumberNode = node;
                value = node.value;
                raw = node.raw;
              }
              const parent = fullNumberNode.parent;
              if (isIgnoredValue(value) || ignoreDefaultValues && isDefaultValue(fullNumberNode) || isParseIntRadix(fullNumberNode) || isJSXNumber(fullNumberNode) || ignoreArrayIndexes && isArrayIndex(fullNumberNode, value)) {
                return;
              }
              if (parent.type === "VariableDeclarator") {
                if (enforceConst && parent.parent.kind !== "const") {
                  context.report({
                    node: fullNumberNode,
                    messageId: "useConst"
                  });
                }
              } else if (okTypes.indexOf(parent.type) === -1 || parent.type === "AssignmentExpression" && parent.left.type === "Identifier") {
                context.report({
                  node: fullNumberNode,
                  messageId: "noMagic",
                  data: { raw }
                });
              }
            }
          };
        }
      };
      var _noMagicNumbers = exports$3i;

      var exports$5$3 = {};
      exports$5$3 = function isCombiningCharacter(codePoint) {
        return /^[\p{Mc}\p{Me}\p{Mn}]$/u.test(String.fromCodePoint(codePoint));
      };
      var _isCombiningCharacter = exports$5$3;
      var exports$4$3 = {};
      exports$4$3 = function isEmojiModifier(code) {
        return code >= 127995 && code <= 127999;
      };
      var _isEmojiModifier = exports$4$3;
      var exports$3$6 = {};
      exports$3$6 = function isRegionalIndicatorSymbol(code) {
        return code >= 127462 && code <= 127487;
      };
      var _isRegionalIndicatorSymbol = exports$3$6;
      var exports$2$7 = {};
      exports$2$7 = function isSurrogatePair(lead, tail) {
        return lead >= 55296 && lead < 56320 && tail >= 56320 && tail < 57344;
      };
      var _isSurrogatePair = exports$2$7;
      var exports$1$k = {};
      exports$1$k = {
        isCombiningCharacter: _isCombiningCharacter,
        isEmojiModifier: _isEmojiModifier,
        isRegionalIndicatorSymbol: _isRegionalIndicatorSymbol,
        isSurrogatePair: _isSurrogatePair
      };
      var _unicode = exports$1$k;
      var _eslintUtils$c = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var _regexpp$3 = "default" in _regexpp2 ? exports$3J : _regexpp2;
      var exports$3h = {};
      const {CALL: CALL$7, CONSTRUCT: CONSTRUCT$5, ReferenceTracker: ReferenceTracker$7, getStringIfConstant: getStringIfConstant$3} = _eslintUtils$c;
      const {RegExpParser: RegExpParser$1, visitRegExpAST: visitRegExpAST$1} = _regexpp$3;
      const {isCombiningCharacter, isEmojiModifier, isRegionalIndicatorSymbol, isSurrogatePair} = _unicode;
      function* iterateCharacterSequence(nodes) {
        let seq = [];
        for (const node of nodes) {
          switch (node.type) {
          case "Character":
            seq.push(node.value);
            break;
          case "CharacterClassRange":
            seq.push(node.min.value);
            yield seq;
            seq = [node.max.value];
            break;
          case "CharacterSet":
            if (seq.length > 0) {
              yield seq;
              seq = [];
            }
            break;
          }
        }
        if (seq.length > 0) {
          yield seq;
        }
      }
      const hasCharacterSequence = {
        surrogatePairWithoutUFlag(chars) {
          return chars.some((c, i) => i !== 0 && isSurrogatePair(chars[i - 1], c));
        },
        combiningClass(chars) {
          return chars.some((c, i) => i !== 0 && isCombiningCharacter(c) && !isCombiningCharacter(chars[i - 1]));
        },
        emojiModifier(chars) {
          return chars.some((c, i) => i !== 0 && isEmojiModifier(c) && !isEmojiModifier(chars[i - 1]));
        },
        regionalIndicatorSymbol(chars) {
          return chars.some((c, i) => i !== 0 && isRegionalIndicatorSymbol(c) && isRegionalIndicatorSymbol(chars[i - 1]));
        },
        zwj(chars) {
          const lastIndex = chars.length - 1;
          return chars.some((c, i) => i !== 0 && i !== lastIndex && c === 8205 && chars[i - 1] !== 8205 && chars[i + 1] !== 8205);
        }
      };
      const kinds = Object.keys(hasCharacterSequence);
      exports$3h = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow characters which are made with multiple code points in character class syntax",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-misleading-character-class"
          },
          schema: [],
          messages: {
            surrogatePairWithoutUFlag: "Unexpected surrogate pair in character class. Use 'u' flag.",
            combiningClass: "Unexpected combined character in character class.",
            emojiModifier: "Unexpected modified Emoji in character class.",
            regionalIndicatorSymbol: "Unexpected national flag in character class.",
            zwj: "Unexpected joined character sequence in character class."
          }
        },
        create(context) {
          const parser = new RegExpParser$1();
          function verify(node, pattern, flags) {
            const has = {
              surrogatePairWithoutUFlag: false,
              combiningClass: false,
              variationSelector: false,
              emojiModifier: false,
              regionalIndicatorSymbol: false,
              zwj: false
            };
            let patternNode;
            try {
              patternNode = parser.parsePattern(pattern, 0, pattern.length, flags.includes("u"));
            } catch {
              return;
            }
            visitRegExpAST$1(patternNode, {
              onCharacterClassEnter(ccNode) {
                for (const chars of iterateCharacterSequence(ccNode.elements)) {
                  for (const kind of kinds) {
                    has[kind] = has[kind] || hasCharacterSequence[kind](chars);
                  }
                }
              }
            });
            for (const kind of kinds) {
              if (has[kind]) {
                context.report({
                  node,
                  messageId: kind
                });
              }
            }
          }
          return {
            "Literal[regex]"(node) {
              verify(node, node.regex.pattern, node.regex.flags);
            },
            "Program"() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker$7(scope);
              for (const {node} of tracker.iterateGlobalReferences({
                  RegExp: {
                    [CALL$7]: true,
                    [CONSTRUCT$5]: true
                  }
                })) {
                const [patternNode, flagsNode] = node.arguments;
                const pattern = getStringIfConstant$3(patternNode, scope);
                const flags = getStringIfConstant$3(flagsNode, scope);
                if (typeof pattern === "string") {
                  verify(node, pattern, flags || "");
                }
              }
            }
          };
        }
      };
      var _noMisleadingCharacterClass = exports$3h;

      var exports$3g = {};
      exports$3g = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow use of chained assignment expressions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-multi-assign"
          },
          schema: [{
              type: "object",
              properties: {
                ignoreNonDeclaration: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedChain: "Unexpected chained assignment." }
        },
        create(context) {
          const options = context.options[0] || { ignoreNonDeclaration: false };
          const targetParent = options.ignoreNonDeclaration ? ["VariableDeclarator"] : [
            "AssignmentExpression",
            "VariableDeclarator"
          ];
          return {
            AssignmentExpression(node) {
              if (targetParent.indexOf(node.parent.type) !== -1) {
                context.report({
                  node,
                  messageId: "unexpectedChain"
                });
              }
            }
          };
        }
      };
      var _noMultiAssign = exports$3g;

      var exports$3f = {};
      const astUtils$1B = _astUtils;
      exports$3f = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow multiline strings",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-multi-str"
          },
          schema: [],
          messages: { multilineString: "Multiline support is limited to browsers supporting ES5 only." }
        },
        create(context) {
          function isJSXElement(node) {
            return node.type.indexOf("JSX") === 0;
          }
          return {
            Literal(node) {
              if (astUtils$1B.LINEBREAK_MATCHER.test(node.raw) && !isJSXElement(node.parent)) {
                context.report({
                  node,
                  messageId: "multilineString"
                });
              }
            }
          };
        }
      };
      var _noMultiStr = exports$3f;

      var exports$3e = {};
      exports$3e = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `new` operators outside of assignments or comparisons",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-new"
          },
          schema: [],
          messages: { noNewStatement: "Do not use 'new' for side effects." }
        },
        create(context) {
          return {
            "ExpressionStatement > NewExpression"(node) {
              context.report({
                node: node.parent,
                messageId: "noNewStatement"
              });
            }
          };
        }
      };
      var _noNew = exports$3e;

      var exports$3d = {};
      exports$3d = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `new` operators with the `Function` object",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-new-func"
          },
          schema: [],
          messages: { noFunctionConstructor: "The Function constructor is eval." }
        },
        create(context) {
          return {
            "Program:exit"() {
              const globalScope = context.getScope();
              const variable = globalScope.set.get("Function");
              if (variable && variable.defs.length === 0) {
                variable.references.forEach(ref => {
                  const node = ref.identifier;
                  const {parent} = node;
                  if (parent && (parent.type === "NewExpression" || parent.type === "CallExpression") && node === parent.callee) {
                    context.report({
                      node: parent,
                      messageId: "noFunctionConstructor"
                    });
                  }
                });
              }
            }
          };
        }
      };
      var _noNewFunc = exports$3d;

      var exports$3c = {};
      const astUtils$1A = _astUtils;
      exports$3c = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `Object` constructors",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-new-object"
          },
          schema: [],
          messages: { preferLiteral: "The object literal notation {} is preferrable." }
        },
        create(context) {
          return {
            NewExpression(node) {
              const variable = astUtils$1A.getVariableByName(context.getScope(), node.callee.name);
              if (variable && variable.identifiers.length > 0) {
                return;
              }
              if (node.callee.name === "Object") {
                context.report({
                  node,
                  messageId: "preferLiteral"
                });
              }
            }
          };
        }
      };
      var _noNewObject = exports$3c;

      var exports$3b = {};
      exports$3b = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow `new` operators with calls to `require`",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-new-require"
          },
          schema: [],
          messages: { noNewRequire: "Unexpected use of new with require." }
        },
        create(context) {
          return {
            NewExpression(node) {
              if (node.callee.type === "Identifier" && node.callee.name === "require") {
                context.report({
                  node,
                  messageId: "noNewRequire"
                });
              }
            }
          };
        }
      };
      var _noNewRequire = exports$3b;

      var exports$3a = {};
      exports$3a = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow `new` operators with the `Symbol` object",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-new-symbol"
          },
          schema: [],
          messages: { noNewSymbol: "`Symbol` cannot be called as a constructor." }
        },
        create(context) {
          return {
            "Program:exit"() {
              const globalScope = context.getScope();
              const variable = globalScope.set.get("Symbol");
              if (variable && variable.defs.length === 0) {
                variable.references.forEach(ref => {
                  const node = ref.identifier;
                  const parent = node.parent;
                  if (parent && parent.type === "NewExpression" && parent.callee === node) {
                    context.report({
                      node,
                      messageId: "noNewSymbol"
                    });
                  }
                });
              }
            }
          };
        }
      };
      var _noNewSymbol = exports$3a;

      var exports$39 = {};
      exports$39 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-new-wrappers"
          },
          schema: [],
          messages: { noConstructor: "Do not use {{fn}} as a constructor." }
        },
        create(context) {
          return {
            NewExpression(node) {
              const wrapperObjects = [
                "String",
                "Number",
                "Boolean"
              ];
              if (wrapperObjects.indexOf(node.callee.name) > -1) {
                context.report({
                  node,
                  messageId: "noConstructor",
                  data: { fn: node.callee.name }
                });
              }
            }
          };
        }
      };
      var _noNewWrappers = exports$39;

      var _eslintUtils$b = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$38 = {};
      const {CALL: CALL$6, CONSTRUCT: CONSTRUCT$4, ReferenceTracker: ReferenceTracker$6} = _eslintUtils$b;
      const getPropertyName$1 = _astUtils.getStaticPropertyName;
      const nonCallableGlobals = [
        "Atomics",
        "JSON",
        "Math",
        "Reflect"
      ];
      function getReportNodeName(node) {
        if (node.type === "ChainExpression") {
          return getReportNodeName(node.expression);
        }
        if (node.type === "MemberExpression") {
          return getPropertyName$1(node);
        }
        return node.name;
      }
      exports$38 = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow calling global object properties as functions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-obj-calls"
          },
          schema: [],
          messages: {
            unexpectedCall: "'{{name}}' is not a function.",
            unexpectedRefCall: "'{{name}}' is reference to '{{ref}}', which is not a function."
          }
        },
        create(context) {
          return {
            Program() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker$6(scope);
              const traceMap = {};
              for (const g of nonCallableGlobals) {
                traceMap[g] = {
                  [CALL$6]: true,
                  [CONSTRUCT$4]: true
                };
              }
              for (const {node, path} of tracker.iterateGlobalReferences(traceMap)) {
                const name = getReportNodeName(node.callee);
                const ref = path[0];
                const messageId = name === ref ? "unexpectedCall" : "unexpectedRefCall";
                context.report({
                  node,
                  messageId,
                  data: {
                    name,
                    ref
                  }
                });
              }
            }
          };
        }
      };
      var _noObjCalls = exports$38;

      var exports$37 = {};
      exports$37 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow octal escape sequences in string literals",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-octal-escape"
          },
          schema: [],
          messages: { octalEscapeSequence: "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead." }
        },
        create(context) {
          return {
            Literal(node) {
              if (typeof node.value !== "string") {
                return;
              }
              const match = node.raw.match(/^(?:[^\\]|\\.)*?\\([0-3][0-7]{1,2}|[4-7][0-7]|0(?=[89])|[1-7])/su);
              if (match) {
                context.report({
                  node,
                  messageId: "octalEscapeSequence",
                  data: { sequence: match[1] }
                });
              }
            }
          };
        }
      };
      var _noOctalEscape = exports$37;

      var exports$36 = {};
      const stopNodePattern = /(?:Statement|Declaration|Function(?:Expression)?|Program)$/u;
      exports$36 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow reassigning `function` parameters",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-param-reassign"
          },
          schema: [{
              oneOf: [
                {
                  type: "object",
                  properties: { props: { enum: [false] } },
                  additionalProperties: false
                },
                {
                  type: "object",
                  properties: {
                    props: { enum: [true] },
                    ignorePropertyModificationsFor: {
                      type: "array",
                      items: { type: "string" },
                      uniqueItems: true
                    },
                    ignorePropertyModificationsForRegex: {
                      type: "array",
                      items: { type: "string" },
                      uniqueItems: true
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            assignmentToFunctionParam: "Assignment to function parameter '{{name}}'.",
            assignmentToFunctionParamProp: "Assignment to property of function parameter '{{name}}'."
          }
        },
        create(context) {
          const props = context.options[0] && context.options[0].props;
          const ignoredPropertyAssignmentsFor = context.options[0] && context.options[0].ignorePropertyModificationsFor || [];
          const ignoredPropertyAssignmentsForRegex = context.options[0] && context.options[0].ignorePropertyModificationsForRegex || [];
          function isModifyingProp(reference) {
            let node = reference.identifier;
            let parent = node.parent;
            while (parent && (!stopNodePattern.test(parent.type) || parent.type === "ForInStatement" || parent.type === "ForOfStatement")) {
              switch (parent.type) {
              case "AssignmentExpression":
                return parent.left === node;
              case "UpdateExpression":
                return true;
              case "UnaryExpression":
                if (parent.operator === "delete") {
                  return true;
                }
                break;
              case "ForInStatement":
              case "ForOfStatement":
                if (parent.left === node) {
                  return true;
                }
                return false;
              case "CallExpression":
                if (parent.callee !== node) {
                  return false;
                }
                break;
              case "MemberExpression":
                if (parent.property === node) {
                  return false;
                }
                break;
              case "Property":
                if (parent.key === node) {
                  return false;
                }
                break;
              case "ConditionalExpression":
                if (parent.test === node) {
                  return false;
                }
                break;
              }
              node = parent;
              parent = node.parent;
            }
            return false;
          }
          function isIgnoredPropertyAssignment(identifierName) {
            return ignoredPropertyAssignmentsFor.includes(identifierName) || ignoredPropertyAssignmentsForRegex.some(ignored => new RegExp(ignored, "u").test(identifierName));
          }
          function checkReference(reference, index, references) {
            const identifier = reference.identifier;
            if (identifier && !reference.init && (index === 0 || references[index - 1].identifier !== identifier)) {
              if (reference.isWrite()) {
                context.report({
                  node: identifier,
                  messageId: "assignmentToFunctionParam",
                  data: { name: identifier.name }
                });
              } else if (props && isModifyingProp(reference) && !isIgnoredPropertyAssignment(identifier.name)) {
                context.report({
                  node: identifier,
                  messageId: "assignmentToFunctionParamProp",
                  data: { name: identifier.name }
                });
              }
            }
          }
          function checkVariable(variable) {
            if (variable.defs[0].type === "Parameter") {
              variable.references.forEach(checkReference);
            }
          }
          function checkForFunction(node) {
            context.getDeclaredVariables(node).forEach(checkVariable);
          }
          return {
            "FunctionDeclaration:exit": checkForFunction,
            "FunctionExpression:exit": checkForFunction,
            "ArrowFunctionExpression:exit": checkForFunction
          };
        }
      };
      var _noParamReassign = exports$36;

      var exports$35 = {};
      exports$35 = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow string concatenation with `__dirname` and `__filename`",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-path-concat"
          },
          schema: [],
          messages: { usePathFunctions: "Use path.join() or path.resolve() instead of + to create paths." }
        },
        create(context) {
          const MATCHER = /^__(?:dir|file)name$/u;
          return {
            BinaryExpression(node) {
              const left = node.left, right = node.right;
              if (node.operator === "+" && (left.type === "Identifier" && MATCHER.test(left.name) || right.type === "Identifier" && MATCHER.test(right.name))) {
                context.report({
                  node,
                  messageId: "usePathFunctions"
                });
              }
            }
          };
        }
      };
      var _noPathConcat = exports$35;

      var exports$34 = {};
      function isForStatementUpdate(node) {
        const parent = node.parent;
        return parent.type === "ForStatement" && parent.update === node;
      }
      function isForLoopAfterthought(node) {
        const parent = node.parent;
        if (parent.type === "SequenceExpression") {
          return isForLoopAfterthought(parent);
        }
        return isForStatementUpdate(node);
      }
      exports$34 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the unary operators `++` and `--`",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-plusplus"
          },
          schema: [{
              type: "object",
              properties: {
                allowForLoopAfterthoughts: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedUnaryOp: "Unary operator '{{operator}}' used." }
        },
        create(context) {
          const config = context.options[0];
          let allowForLoopAfterthoughts = false;
          if (typeof config === "object") {
            allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;
          }
          return {
            UpdateExpression(node) {
              if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {
                return;
              }
              context.report({
                node,
                messageId: "unexpectedUnaryOp",
                data: { operator: node.operator }
              });
            }
          };
        }
      };
      var _noPlusplus = exports$34;

      var exports$33 = {};
      exports$33 = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow the use of `process.env`",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-process-env"
          },
          schema: [],
          messages: { unexpectedProcessEnv: "Unexpected use of process.env." }
        },
        create(context) {
          return {
            MemberExpression(node) {
              const objectName = node.object.name, propertyName = node.property.name;
              if (objectName === "process" && !node.computed && propertyName && propertyName === "env") {
                context.report({
                  node,
                  messageId: "unexpectedProcessEnv"
                });
              }
            }
          };
        }
      };
      var _noProcessEnv = exports$33;

      var exports$32 = {};
      exports$32 = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow the use of `process.exit()`",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-process-exit"
          },
          schema: [],
          messages: { noProcessExit: "Don't use process.exit(); throw an error instead." }
        },
        create(context) {
          return {
            "CallExpression > MemberExpression.callee[object.name = 'process'][property.name = 'exit']"(node) {
              context.report({
                node: node.parent,
                messageId: "noProcessExit"
              });
            }
          };
        }
      };
      var _noProcessExit = exports$32;

      var exports$31 = {};
      const {getStaticPropertyName} = _astUtils;
      exports$31 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of the `__proto__` property",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-proto"
          },
          schema: [],
          messages: { unexpectedProto: "The '__proto__' property is deprecated." }
        },
        create(context) {
          return {
            MemberExpression(node) {
              if (getStaticPropertyName(node) === "__proto__") {
                context.report({
                  node,
                  messageId: "unexpectedProto"
                });
              }
            }
          };
        }
      };
      var _noProto = exports$31;

      var exports$30 = {};
      const astUtils$1z = _astUtils;
      exports$30 = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow calling some `Object.prototype` methods directly on objects",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-prototype-builtins"
          },
          schema: [],
          messages: { prototypeBuildIn: "Do not access Object.prototype method '{{prop}}' from target object." }
        },
        create(context) {
          const DISALLOWED_PROPS = [
            "hasOwnProperty",
            "isPrototypeOf",
            "propertyIsEnumerable"
          ];
          function disallowBuiltIns(node) {
            const callee = astUtils$1z.skipChainExpression(node.callee);
            if (callee.type !== "MemberExpression") {
              return;
            }
            const propName = astUtils$1z.getStaticPropertyName(callee);
            if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {
              context.report({
                messageId: "prototypeBuildIn",
                loc: callee.property.loc,
                data: { prop: propName },
                node
              });
            }
          }
          return { CallExpression: disallowBuiltIns };
        }
      };
      var _noPrototypeBuiltins = exports$30;

      var exports$2$ = {};
      exports$2$ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow specified global variables",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-globals"
          },
          schema: {
            type: "array",
            items: {
              oneOf: [
                { type: "string" },
                {
                  type: "object",
                  properties: {
                    name: { type: "string" },
                    message: { type: "string" }
                  },
                  required: ["name"],
                  additionalProperties: false
                }
              ]
            },
            uniqueItems: true,
            minItems: 0
          },
          messages: {
            defaultMessage: "Unexpected use of '{{name}}'.",
            customMessage: "Unexpected use of '{{name}}'. {{customMessage}}"
          }
        },
        create(context) {
          if (context.options.length === 0) {
            return {};
          }
          const restrictedGlobalMessages = context.options.reduce((memo, option) => {
            if (typeof option === "string") {
              memo[option] = null;
            } else {
              memo[option.name] = option.message;
            }
            return memo;
          }, {});
          function reportReference(reference) {
            const name = reference.identifier.name, customMessage = restrictedGlobalMessages[name], messageId = customMessage ? "customMessage" : "defaultMessage";
            context.report({
              node: reference.identifier,
              messageId,
              data: {
                name,
                customMessage
              }
            });
          }
          function isRestricted(name) {
            return Object.prototype.hasOwnProperty.call(restrictedGlobalMessages, name);
          }
          return {
            Program() {
              const scope = context.getScope();
              scope.variables.forEach(variable => {
                if (!variable.defs.length && isRestricted(variable.name)) {
                  variable.references.forEach(reportReference);
                }
              });
              scope.through.forEach(reference => {
                if (isRestricted(reference.identifier.name)) {
                  reportReference(reference);
                }
              });
            }
          };
        }
      };
      var _noRestrictedGlobals = exports$2$;

      var _ignore$1 = "default" in _ignore2 ? exports$1$M : _ignore2;
      var exports$2_ = {};
      const ignore$2 = _ignore$1;
      const arrayOfStringsOrObjects$1 = {
        type: "array",
        items: {
          anyOf: [
            { type: "string" },
            {
              type: "object",
              properties: {
                name: { type: "string" },
                message: {
                  type: "string",
                  minLength: 1
                },
                importNames: {
                  type: "array",
                  items: { type: "string" }
                }
              },
              additionalProperties: false,
              required: ["name"]
            }
          ]
        },
        uniqueItems: true
      };
      const arrayOfStringsOrObjectPatterns = {
        anyOf: [
          {
            type: "array",
            items: { type: "string" },
            uniqueItems: true
          },
          {
            type: "array",
            items: {
              type: "object",
              properties: {
                group: {
                  type: "array",
                  items: { type: "string" },
                  minItems: 1,
                  uniqueItems: true
                },
                message: {
                  type: "string",
                  minLength: 1
                }
              },
              additionalProperties: false,
              required: ["group"]
            },
            uniqueItems: true
          }
        ]
      };
      exports$2_ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow specified modules when loaded by `import`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-imports"
          },
          messages: {
            path: "'{{importSource}}' import is restricted from being used.",
            pathWithCustomMessage: "'{{importSource}}' import is restricted from being used. {{customMessage}}",
            patterns: "'{{importSource}}' import is restricted from being used by a pattern.",
            patternWithCustomMessage: "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
            everything: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
            everythingWithCustomMessage: "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
            importName: "'{{importName}}' import from '{{importSource}}' is restricted.",
            importNameWithCustomMessage: "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
          },
          schema: {
            anyOf: [
              arrayOfStringsOrObjects$1,
              {
                type: "array",
                items: [{
                    type: "object",
                    properties: {
                      paths: arrayOfStringsOrObjects$1,
                      patterns: arrayOfStringsOrObjectPatterns
                    },
                    additionalProperties: false
                  }],
                additionalItems: false
              }
            ]
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const options = Array.isArray(context.options) ? context.options : [];
          const isPathAndPatternsObject = typeof options[0] === "object" && (Object.prototype.hasOwnProperty.call(options[0], "paths") || Object.prototype.hasOwnProperty.call(options[0], "patterns"));
          const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];
          const restrictedPathMessages = restrictedPaths.reduce((memo, importSource) => {
            if (typeof importSource === "string") {
              memo[importSource] = { message: null };
            } else {
              memo[importSource.name] = {
                message: importSource.message,
                importNames: importSource.importNames
              };
            }
            return memo;
          }, {});
          const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];
          const restrictedPatternGroups = restrictedPatterns.length > 0 && typeof restrictedPatterns[0] === "string" ? [{ matcher: ignore$2().add(restrictedPatterns) }] : restrictedPatterns.map(({group, message}) => ({
            matcher: ignore$2().add(group),
            customMessage: message
          }));
          if (Object.keys(restrictedPaths).length === 0 && restrictedPatternGroups.length === 0) {
            return {};
          }
          function checkRestrictedPathAndReport(importSource, importNames, node) {
            if (!Object.prototype.hasOwnProperty.call(restrictedPathMessages, importSource)) {
              return;
            }
            const customMessage = restrictedPathMessages[importSource].message;
            const restrictedImportNames = restrictedPathMessages[importSource].importNames;
            if (restrictedImportNames) {
              if (importNames.has("*")) {
                const specifierData = importNames.get("*")[0];
                context.report({
                  node,
                  messageId: customMessage ? "everythingWithCustomMessage" : "everything",
                  loc: specifierData.loc,
                  data: {
                    importSource,
                    importNames: restrictedImportNames,
                    customMessage
                  }
                });
              }
              restrictedImportNames.forEach(importName => {
                if (importNames.has(importName)) {
                  const specifiers = importNames.get(importName);
                  specifiers.forEach(specifier => {
                    context.report({
                      node,
                      messageId: customMessage ? "importNameWithCustomMessage" : "importName",
                      loc: specifier.loc,
                      data: {
                        importSource,
                        customMessage,
                        importName
                      }
                    });
                  });
                }
              });
            } else {
              context.report({
                node,
                messageId: customMessage ? "pathWithCustomMessage" : "path",
                data: {
                  importSource,
                  customMessage
                }
              });
            }
          }
          function reportPathForPatterns(node, group) {
            const importSource = node.source.value.trim();
            context.report({
              node,
              messageId: group.customMessage ? "patternWithCustomMessage" : "patterns",
              data: {
                importSource,
                customMessage: group.customMessage
              }
            });
          }
          function isRestrictedPattern(importSource, group) {
            return group.matcher.ignores(importSource);
          }
          function checkNode(node) {
            const importSource = node.source.value.trim();
            const importNames = new Map();
            if (node.type === "ExportAllDeclaration") {
              const starToken = sourceCode.getFirstToken(node, 1);
              importNames.set("*", [{ loc: starToken.loc }]);
            } else if (node.specifiers) {
              for (const specifier of node.specifiers) {
                let name;
                const specifierData = { loc: specifier.loc };
                if (specifier.type === "ImportDefaultSpecifier") {
                  name = "default";
                } else if (specifier.type === "ImportNamespaceSpecifier") {
                  name = "*";
                } else if (specifier.imported) {
                  name = specifier.imported.name;
                } else if (specifier.local) {
                  name = specifier.local.name;
                }
                if (name) {
                  if (importNames.has(name)) {
                    importNames.get(name).push(specifierData);
                  } else {
                    importNames.set(name, [specifierData]);
                  }
                }
              }
            }
            checkRestrictedPathAndReport(importSource, importNames, node);
            restrictedPatternGroups.forEach(group => {
              if (isRestrictedPattern(importSource, group)) {
                reportPathForPatterns(node, group);
              }
            });
          }
          return {
            ImportDeclaration: checkNode,
            ExportNamedDeclaration(node) {
              if (node.source) {
                checkNode(node);
              }
            },
            ExportAllDeclaration: checkNode
          };
        }
      };
      var _noRestrictedImports = exports$2_;

      var _ignore = "default" in _ignore2 ? exports$1$M : _ignore2;
      var exports$2Z = {};
      const ignore$1 = _ignore;
      const arrayOfStrings = {
        type: "array",
        items: { type: "string" },
        uniqueItems: true
      };
      const arrayOfStringsOrObjects = {
        type: "array",
        items: {
          anyOf: [
            { type: "string" },
            {
              type: "object",
              properties: {
                name: { type: "string" },
                message: {
                  type: "string",
                  minLength: 1
                }
              },
              additionalProperties: false,
              required: ["name"]
            }
          ]
        },
        uniqueItems: true
      };
      exports$2Z = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow specified modules when loaded by `require`",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-modules"
          },
          schema: {
            anyOf: [
              arrayOfStringsOrObjects,
              {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    paths: arrayOfStringsOrObjects,
                    patterns: arrayOfStrings
                  },
                  additionalProperties: false
                },
                additionalItems: false
              }
            ]
          },
          messages: {
            defaultMessage: "'{{name}}' module is restricted from being used.",
            customMessage: "'{{name}}' module is restricted from being used. {{customMessage}}",
            patternMessage: "'{{name}}' module is restricted from being used by a pattern."
          }
        },
        create(context) {
          const options = Array.isArray(context.options) ? context.options : [];
          const isPathAndPatternsObject = typeof options[0] === "object" && (Object.prototype.hasOwnProperty.call(options[0], "paths") || Object.prototype.hasOwnProperty.call(options[0], "patterns"));
          const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];
          const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];
          const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {
            if (typeof importName === "string") {
              memo[importName] = null;
            } else {
              memo[importName.name] = importName.message;
            }
            return memo;
          }, {});
          if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {
            return {};
          }
          const ig = ignore$1().add(restrictedPatterns);
          function isStringLiteral(node) {
            return node && node.type === "Literal" && typeof node.value === "string";
          }
          function isStaticTemplateLiteral(node) {
            return node && node.type === "TemplateLiteral" && node.expressions.length === 0;
          }
          function isRequireCall(node) {
            return node.callee.type === "Identifier" && node.callee.name === "require";
          }
          function getFirstArgumentString(node) {
            if (isStringLiteral(node)) {
              return node.value.trim();
            }
            if (isStaticTemplateLiteral(node)) {
              return node.quasis[0].value.cooked.trim();
            }
            return null;
          }
          function reportPath(node, name) {
            const customMessage = restrictedPathMessages[name];
            const messageId = customMessage ? "customMessage" : "defaultMessage";
            context.report({
              node,
              messageId,
              data: {
                name,
                customMessage
              }
            });
          }
          function isRestrictedPath(name) {
            return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);
          }
          return {
            CallExpression(node) {
              if (isRequireCall(node)) {
                if (node.arguments.length) {
                  const name = getFirstArgumentString(node.arguments[0]);
                  if (name) {
                    if (isRestrictedPath(name)) {
                      reportPath(node, name);
                    }
                    if (restrictedPatterns.length > 0 && ig.ignores(name)) {
                      context.report({
                        node,
                        messageId: "patternMessage",
                        data: { name }
                      });
                    }
                  }
                }
              }
            }
          };
        }
      };
      var _noRestrictedModules = exports$2Z;

      var exports$2Y = {};
      const astUtils$1y = _astUtils;
      exports$2Y = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow certain properties on certain objects",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-properties"
          },
          schema: {
            type: "array",
            items: {
              anyOf: [
                {
                  type: "object",
                  properties: {
                    object: { type: "string" },
                    property: { type: "string" },
                    message: { type: "string" }
                  },
                  additionalProperties: false,
                  required: ["object"]
                },
                {
                  type: "object",
                  properties: {
                    object: { type: "string" },
                    property: { type: "string" },
                    message: { type: "string" }
                  },
                  additionalProperties: false,
                  required: ["property"]
                }
              ]
            },
            uniqueItems: true
          },
          messages: {
            restrictedObjectProperty: "'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}",
            restrictedProperty: "'{{propertyName}}' is restricted from being used.{{message}}"
          }
        },
        create(context) {
          const restrictedCalls = context.options;
          if (restrictedCalls.length === 0) {
            return {};
          }
          const restrictedProperties = new Map();
          const globallyRestrictedObjects = new Map();
          const globallyRestrictedProperties = new Map();
          restrictedCalls.forEach(option => {
            const objectName = option.object;
            const propertyName = option.property;
            if (typeof objectName === "undefined") {
              globallyRestrictedProperties.set(propertyName, { message: option.message });
            } else if (typeof propertyName === "undefined") {
              globallyRestrictedObjects.set(objectName, { message: option.message });
            } else {
              if (!restrictedProperties.has(objectName)) {
                restrictedProperties.set(objectName, new Map());
              }
              restrictedProperties.get(objectName).set(propertyName, { message: option.message });
            }
          });
          function checkPropertyAccess(node, objectName, propertyName) {
            if (propertyName === null) {
              return;
            }
            const matchedObject = restrictedProperties.get(objectName);
            const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);
            const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);
            if (matchedObjectProperty) {
              const message = matchedObjectProperty.message ? ` ${ matchedObjectProperty.message }` : "";
              context.report({
                node,
                messageId: "restrictedObjectProperty",
                data: {
                  objectName,
                  propertyName,
                  message
                }
              });
            } else if (globalMatchedProperty) {
              const message = globalMatchedProperty.message ? ` ${ globalMatchedProperty.message }` : "";
              context.report({
                node,
                messageId: "restrictedProperty",
                data: {
                  propertyName,
                  message
                }
              });
            }
          }
          function checkDestructuringAssignment(node) {
            if (node.right.type === "Identifier") {
              const objectName = node.right.name;
              if (node.left.type === "ObjectPattern") {
                node.left.properties.forEach(property => {
                  checkPropertyAccess(node.left, objectName, astUtils$1y.getStaticPropertyName(property));
                });
              }
            }
          }
          return {
            MemberExpression(node) {
              checkPropertyAccess(node, node.object && node.object.name, astUtils$1y.getStaticPropertyName(node));
            },
            VariableDeclarator(node) {
              if (node.init && node.init.type === "Identifier") {
                const objectName = node.init.name;
                if (node.id.type === "ObjectPattern") {
                  node.id.properties.forEach(property => {
                    checkPropertyAccess(node.id, objectName, astUtils$1y.getStaticPropertyName(property));
                  });
                }
              }
            },
            AssignmentExpression: checkDestructuringAssignment,
            AssignmentPattern: checkDestructuringAssignment
          };
        }
      };
      var _noRestrictedProperties = exports$2Y;

      var exports$2X = {};
      exports$2X = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow specified syntax",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-syntax"
          },
          schema: {
            type: "array",
            items: {
              oneOf: [
                { type: "string" },
                {
                  type: "object",
                  properties: {
                    selector: { type: "string" },
                    message: { type: "string" }
                  },
                  required: ["selector"],
                  additionalProperties: false
                }
              ]
            },
            uniqueItems: true,
            minItems: 0
          },
          messages: { restrictedSyntax: "{{message}}" }
        },
        create(context) {
          return context.options.reduce((result, selectorOrObject) => {
            const isStringFormat = typeof selectorOrObject === "string";
            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);
            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;
            const message = hasCustomMessage ? selectorOrObject.message : `Using '${ selector }' is not allowed.`;
            return Object.assign(result, {
              [selector](node) {
                context.report({
                  node,
                  messageId: "restrictedSyntax",
                  data: { message }
                });
              }
            });
          }, {});
        }
      };
      var _noRestrictedSyntax = exports$2X;

      var exports$2W = {};
      const astUtils$1x = _astUtils;
      exports$2W = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `javascript:` urls",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-script-url"
          },
          schema: [],
          messages: { unexpectedScriptURL: "Script URL is a form of eval." }
        },
        create(context) {
          function check(node) {
            const value = astUtils$1x.getStaticStringValue(node);
            if (typeof value === "string" && value.toLowerCase().indexOf("javascript:") === 0) {
              context.report({
                node,
                messageId: "unexpectedScriptURL"
              });
            }
          }
          return {
            Literal(node) {
              if (node.value && typeof node.value === "string") {
                check(node);
              }
            },
            TemplateLiteral(node) {
              if (!(node.parent && node.parent.type === "TaggedTemplateExpression")) {
                check(node);
              }
            }
          };
        }
      };
      var _noScriptUrl = exports$2W;

      var exports$2V = {};
      const astUtils$1w = _astUtils;
      exports$2V = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow variable declarations from shadowing variables declared in the outer scope",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-shadow"
          },
          schema: [{
              type: "object",
              properties: {
                builtinGlobals: {
                  type: "boolean",
                  default: false
                },
                hoist: {
                  enum: [
                    "all",
                    "functions",
                    "never"
                  ],
                  default: "functions"
                },
                allow: {
                  type: "array",
                  items: { type: "string" }
                }
              },
              additionalProperties: false
            }],
          messages: {
            noShadow: "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
            noShadowGlobal: "'{{name}}' is already a global variable."
          }
        },
        create(context) {
          const options = {
            builtinGlobals: context.options[0] && context.options[0].builtinGlobals,
            hoist: context.options[0] && context.options[0].hoist || "functions",
            allow: context.options[0] && context.options[0].allow || []
          };
          function isAllowed(variable) {
            return options.allow.indexOf(variable.name) !== -1;
          }
          function isDuplicatedClassNameVariable(variable) {
            const block = variable.scope.block;
            return block.type === "ClassDeclaration" && block.id === variable.identifiers[0];
          }
          function isOnInitializer(variable, scopeVar) {
            const outerScope = scopeVar.scope;
            const outerDef = scopeVar.defs[0];
            const outer = outerDef && outerDef.parent && outerDef.parent.range;
            const innerScope = variable.scope;
            const innerDef = variable.defs[0];
            const inner = innerDef && innerDef.name.range;
            return outer && inner && outer[0] < inner[0] && inner[1] < outer[1] && (innerDef.type === "FunctionName" && innerDef.node.type === "FunctionExpression" || innerDef.node.type === "ClassExpression") && outerScope === innerScope.upper;
          }
          function getNameRange(variable) {
            const def = variable.defs[0];
            return def && def.name.range;
          }
          function getDeclaredLocation(variable) {
            const identifier = variable.identifiers[0];
            let obj;
            if (identifier) {
              obj = {
                global: false,
                line: identifier.loc.start.line,
                column: identifier.loc.start.column + 1
              };
            } else {
              obj = { global: true };
            }
            return obj;
          }
          function isInTdz(variable, scopeVar) {
            const outerDef = scopeVar.defs[0];
            const inner = getNameRange(variable);
            const outer = getNameRange(scopeVar);
            return inner && outer && inner[1] < outer[0] && (options.hoist !== "functions" || !outerDef || outerDef.node.type !== "FunctionDeclaration");
          }
          function checkForShadows(scope) {
            const variables = scope.variables;
            for (let i = 0; i < variables.length; ++i) {
              const variable = variables[i];
              if (variable.identifiers.length === 0 || isDuplicatedClassNameVariable(variable) || isAllowed(variable)) {
                continue;
              }
              const shadowed = astUtils$1w.getVariableByName(scope.upper, variable.name);
              if (shadowed && (shadowed.identifiers.length > 0 || options.builtinGlobals && "writeable" in shadowed) && !isOnInitializer(variable, shadowed) && !(options.hoist !== "all" && isInTdz(variable, shadowed))) {
                const location = getDeclaredLocation(shadowed);
                const messageId = location.global ? "noShadowGlobal" : "noShadow";
                const data = { name: variable.name };
                if (!location.global) {
                  data.shadowedLine = location.line;
                  data.shadowedColumn = location.column;
                }
                context.report({
                  node: variable.identifiers[0],
                  messageId,
                  data
                });
              }
            }
          }
          return {
            "Program:exit"() {
              const globalScope = context.getScope();
              const stack = globalScope.childScopes.slice();
              while (stack.length) {
                const scope = stack.pop();
                stack.push(...scope.childScopes);
                checkForShadows(scope);
              }
            }
          };
        }
      };
      var _noShadow = exports$2V;

      var exports$2U = {};
      exports$2U = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow sparse arrays",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-sparse-arrays"
          },
          schema: [],
          messages: { unexpectedSparseArray: "Unexpected comma in middle of array." }
        },
        create(context) {
          return {
            ArrayExpression(node) {
              const emptySpot = node.elements.indexOf(null) > -1;
              if (emptySpot) {
                context.report({
                  node,
                  messageId: "unexpectedSparseArray"
                });
              }
            }
          };
        }
      };
      var _noSparseArrays = exports$2U;

      var exports$2T = {};
      exports$2T = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow synchronous methods",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-sync"
          },
          schema: [{
              type: "object",
              properties: {
                allowAtRootLevel: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { noSync: "Unexpected sync method: '{{propertyName}}'." }
        },
        create(context) {
          const selector = context.options[0] && context.options[0].allowAtRootLevel ? ":function MemberExpression[property.name=/.*Sync$/]" : "MemberExpression[property.name=/.*Sync$/]";
          return {
            [selector](node) {
              context.report({
                node,
                messageId: "noSync",
                data: { propertyName: node.property.name }
              });
            }
          };
        }
      };
      var _noSync = exports$2T;

      var exports$2S = {};
      const tabRegex = /\t+/gu;
      const anyNonWhitespaceRegex = /\S/u;
      exports$2S = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow all tabs",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-tabs"
          },
          schema: [{
              type: "object",
              properties: {
                allowIndentationTabs: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedTab: "Unexpected tab character." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;
          return {
            Program(node) {
              sourceCode.getLines().forEach((line, index) => {
                let match;
                while ((match = tabRegex.exec(line)) !== null) {
                  if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {
                    continue;
                  }
                  context.report({
                    node,
                    loc: {
                      start: {
                        line: index + 1,
                        column: match.index
                      },
                      end: {
                        line: index + 1,
                        column: match.index + match[0].length
                      }
                    },
                    messageId: "unexpectedTab"
                  });
                }
              });
            }
          };
        }
      };
      var _noTabs = exports$2S;

      var exports$2R = {};
      const astUtils$1v = _astUtils;
      exports$2R = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow throwing literals as exceptions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-throw-literal"
          },
          schema: [],
          messages: {
            object: "Expected an error object to be thrown.",
            undef: "Do not throw undefined."
          }
        },
        create(context) {
          return {
            ThrowStatement(node) {
              if (!astUtils$1v.couldBeError(node.argument)) {
                context.report({
                  node,
                  messageId: "object"
                });
              } else if (node.argument.type === "Identifier") {
                if (node.argument.name === "undefined") {
                  context.report({
                    node,
                    messageId: "undef"
                  });
                }
              }
            }
          };
        }
      };
      var _noThrowLiteral = exports$2R;

      var exports$2Q = {};
      const astUtils$1u = _astUtils;
      exports$2Q = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow trailing whitespace at the end of lines",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-trailing-spaces"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                skipBlankLines: {
                  type: "boolean",
                  default: false
                },
                ignoreComments: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { trailingSpace: "Trailing spaces not allowed." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const BLANK_CLASS = "[ \t\xA0\u2000-\u200B\u3000]", SKIP_BLANK = `^${ BLANK_CLASS }*$`, NONBLANK = `${ BLANK_CLASS }+$`;
          const options = context.options[0] || {}, skipBlankLines = options.skipBlankLines || false, ignoreComments = options.ignoreComments || false;
          function report(node, location, fixRange) {
            context.report({
              node,
              loc: location,
              messageId: "trailingSpace",
              fix(fixer) {
                return fixer.removeRange(fixRange);
              }
            });
          }
          function getCommentLineNumbers(comments) {
            const lines = new Set();
            comments.forEach(comment => {
              const endLine = comment.type === "Block" ? comment.loc.end.line - 1 : comment.loc.end.line;
              for (let i = comment.loc.start.line; i <= endLine; i++) {
                lines.add(i);
              }
            });
            return lines;
          }
          return {
            Program: function checkTrailingSpaces(node) {
              const re = new RegExp(NONBLANK, "u"), skipMatch = new RegExp(SKIP_BLANK, "u"), lines = sourceCode.lines, linebreaks = sourceCode.getText().match(astUtils$1u.createGlobalLinebreakMatcher()), comments = sourceCode.getAllComments(), commentLineNumbers = getCommentLineNumbers(comments);
              let totalLength = 0, fixRange = [];
              for (let i = 0, ii = lines.length; i < ii; i++) {
                const lineNumber = i + 1;
                const linebreakLength = linebreaks && linebreaks[i] ? linebreaks[i].length : 1;
                const lineLength = lines[i].length + linebreakLength;
                const matches = re.exec(lines[i]);
                if (matches) {
                  const location = {
                    start: {
                      line: lineNumber,
                      column: matches.index
                    },
                    end: {
                      line: lineNumber,
                      column: lineLength - linebreakLength
                    }
                  };
                  const rangeStart = totalLength + location.start.column;
                  const rangeEnd = totalLength + location.end.column;
                  const containingNode = sourceCode.getNodeByRangeIndex(rangeStart);
                  if (containingNode && containingNode.type === "TemplateElement" && rangeStart > containingNode.parent.range[0] && rangeEnd < containingNode.parent.range[1]) {
                    totalLength += lineLength;
                    continue;
                  }
                  if (skipBlankLines && skipMatch.test(lines[i])) {
                    totalLength += lineLength;
                    continue;
                  }
                  fixRange = [
                    rangeStart,
                    rangeEnd
                  ];
                  if (!ignoreComments || !commentLineNumbers.has(lineNumber)) {
                    report(node, location, fixRange);
                  }
                }
                totalLength += lineLength;
              }
            }
          };
        }
      };
      var _noTrailingSpaces = exports$2Q;

      var exports$2P = {};
      function hasTypeOfOperator(node) {
        const parent = node.parent;
        return parent.type === "UnaryExpression" && parent.operator === "typeof";
      }
      exports$2P = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
            category: "Variables",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-undef"
          },
          schema: [{
              type: "object",
              properties: {
                typeof: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { undef: "'{{name}}' is not defined." }
        },
        create(context) {
          const options = context.options[0];
          const considerTypeOf = options && options.typeof === true || false;
          return {
            "Program:exit"() {
              const globalScope = context.getScope();
              globalScope.through.forEach(ref => {
                const identifier = ref.identifier;
                if (!considerTypeOf && hasTypeOfOperator(identifier)) {
                  return;
                }
                context.report({
                  node: identifier,
                  messageId: "undef",
                  data: identifier
                });
              });
            }
          };
        }
      };
      var _noUndef = exports$2P;

      var exports$2O = {};
      function isInitialized(node) {
        return Boolean(node.init);
      }
      function isUnreachable$1(segment) {
        return !segment.reachable;
      }
      class ConsecutiveRange {
        constructor(sourceCode) {
          this.sourceCode = sourceCode;
          this.startNode = null;
          this.endNode = null;
        }
        get location() {
          return {
            start: this.startNode.loc.start,
            end: this.endNode.loc.end
          };
        }
        get isEmpty() {
          return !(this.startNode && this.endNode);
        }
        contains(node) {
          return node.range[0] >= this.startNode.range[0] && node.range[1] <= this.endNode.range[1];
        }
        isConsecutive(node) {
          return this.contains(this.sourceCode.getTokenBefore(node));
        }
        merge(node) {
          this.endNode = node;
        }
        reset(node) {
          this.startNode = this.endNode = node;
        }
      }
      exports$2O = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unreachable"
          },
          schema: [],
          messages: { unreachableCode: "Unreachable code." }
        },
        create(context) {
          let currentCodePath = null;
          const range = new ConsecutiveRange(context.getSourceCode());
          function reportIfUnreachable(node) {
            let nextNode = null;
            if (node && currentCodePath.currentSegments.every(isUnreachable$1)) {
              if (range.isEmpty) {
                range.reset(node);
                return;
              }
              if (range.contains(node)) {
                return;
              }
              if (range.isConsecutive(node)) {
                range.merge(node);
                return;
              }
              nextNode = node;
            }
            if (!range.isEmpty) {
              context.report({
                messageId: "unreachableCode",
                loc: range.location,
                node: range.startNode
              });
            }
            range.reset(nextNode);
          }
          return {
            onCodePathStart(codePath) {
              currentCodePath = codePath;
            },
            onCodePathEnd() {
              currentCodePath = currentCodePath.upper;
            },
            BlockStatement: reportIfUnreachable,
            BreakStatement: reportIfUnreachable,
            ClassDeclaration: reportIfUnreachable,
            ContinueStatement: reportIfUnreachable,
            DebuggerStatement: reportIfUnreachable,
            DoWhileStatement: reportIfUnreachable,
            ExpressionStatement: reportIfUnreachable,
            ForInStatement: reportIfUnreachable,
            ForOfStatement: reportIfUnreachable,
            ForStatement: reportIfUnreachable,
            IfStatement: reportIfUnreachable,
            ImportDeclaration: reportIfUnreachable,
            LabeledStatement: reportIfUnreachable,
            ReturnStatement: reportIfUnreachable,
            SwitchStatement: reportIfUnreachable,
            ThrowStatement: reportIfUnreachable,
            TryStatement: reportIfUnreachable,
            VariableDeclaration(node) {
              if (node.kind !== "var" || node.declarations.some(isInitialized)) {
                reportIfUnreachable(node);
              }
            },
            WhileStatement: reportIfUnreachable,
            WithStatement: reportIfUnreachable,
            ExportNamedDeclaration: reportIfUnreachable,
            ExportDefaultDeclaration: reportIfUnreachable,
            ExportAllDeclaration: reportIfUnreachable,
            "Program:exit"() {
              reportIfUnreachable();
            }
          };
        }
      };
      var _noUnreachable = exports$2O;

      var exports$2N = {};
      const SENTINEL_NODE_TYPE_RETURN_THROW = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression)$/u;
      const SENTINEL_NODE_TYPE_BREAK = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement|SwitchStatement)$/u;
      const SENTINEL_NODE_TYPE_CONTINUE = /^(?:Program|(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|DoWhileStatement|WhileStatement|ForOfStatement|ForInStatement|ForStatement)$/u;
      exports$2N = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow control flow statements in `finally` blocks",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unsafe-finally"
          },
          schema: [],
          messages: { unsafeUsage: "Unsafe usage of {{nodeType}}." }
        },
        create(context) {
          function isFinallyBlock(node) {
            return node.parent.type === "TryStatement" && node.parent.finalizer === node;
          }
          function isInFinallyBlock(node, label) {
            let labelInside = false;
            let sentinelNodeType;
            if (node.type === "BreakStatement" && !node.label) {
              sentinelNodeType = SENTINEL_NODE_TYPE_BREAK;
            } else if (node.type === "ContinueStatement") {
              sentinelNodeType = SENTINEL_NODE_TYPE_CONTINUE;
            } else {
              sentinelNodeType = SENTINEL_NODE_TYPE_RETURN_THROW;
            }
            for (let currentNode = node; currentNode && !sentinelNodeType.test(currentNode.type); currentNode = currentNode.parent) {
              if (currentNode.parent.label && label && currentNode.parent.label.name === label.name) {
                labelInside = true;
              }
              if (isFinallyBlock(currentNode)) {
                if (label && labelInside) {
                  return false;
                }
                return true;
              }
            }
            return false;
          }
          function check(node) {
            if (isInFinallyBlock(node, node.label)) {
              context.report({
                messageId: "unsafeUsage",
                data: { nodeType: node.type },
                node,
                line: node.loc.line,
                column: node.loc.column
              });
            }
          }
          return {
            ReturnStatement: check,
            ThrowStatement: check,
            BreakStatement: check,
            ContinueStatement: check
          };
        }
      };
      var _noUnsafeFinally = exports$2N;

      var exports$2M = {};
      function alwaysTrue() {
        return true;
      }
      function alwaysFalse() {
        return false;
      }
      exports$2M = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unused expressions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-unused-expressions"
          },
          schema: [{
              type: "object",
              properties: {
                allowShortCircuit: {
                  type: "boolean",
                  default: false
                },
                allowTernary: {
                  type: "boolean",
                  default: false
                },
                allowTaggedTemplates: {
                  type: "boolean",
                  default: false
                },
                enforceForJSX: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unusedExpression: "Expected an assignment or function call and instead saw an expression." }
        },
        create(context) {
          const config = context.options[0] || {}, allowShortCircuit = config.allowShortCircuit || false, allowTernary = config.allowTernary || false, allowTaggedTemplates = config.allowTaggedTemplates || false, enforceForJSX = config.enforceForJSX || false;
          function looksLikeDirective(node) {
            return node.type === "ExpressionStatement" && node.expression.type === "Literal" && typeof node.expression.value === "string";
          }
          function takeWhile(predicate, list) {
            for (let i = 0; i < list.length; ++i) {
              if (!predicate(list[i])) {
                return list.slice(0, i);
              }
            }
            return list.slice();
          }
          function directives(node) {
            return takeWhile(looksLikeDirective, node.body);
          }
          function isDirective(node, ancestors) {
            const parent = ancestors[ancestors.length - 1], grandparent = ancestors[ancestors.length - 2];
            return (parent.type === "Program" || parent.type === "BlockStatement" && /Function/u.test(grandparent.type)) && directives(parent).indexOf(node) >= 0;
          }
          const Checker = Object.assign(Object.create(null), {
            isDisallowed(node) {
              return (Checker[node.type] || alwaysFalse)(node);
            },
            ArrayExpression: alwaysTrue,
            ArrowFunctionExpression: alwaysTrue,
            BinaryExpression: alwaysTrue,
            ChainExpression(node) {
              return Checker.isDisallowed(node.expression);
            },
            ClassExpression: alwaysTrue,
            ConditionalExpression(node) {
              if (allowTernary) {
                return Checker.isDisallowed(node.consequent) || Checker.isDisallowed(node.alternate);
              }
              return true;
            },
            FunctionExpression: alwaysTrue,
            Identifier: alwaysTrue,
            JSXElement() {
              return enforceForJSX;
            },
            JSXFragment() {
              return enforceForJSX;
            },
            Literal: alwaysTrue,
            LogicalExpression(node) {
              if (allowShortCircuit) {
                return Checker.isDisallowed(node.right);
              }
              return true;
            },
            MemberExpression: alwaysTrue,
            MetaProperty: alwaysTrue,
            ObjectExpression: alwaysTrue,
            SequenceExpression: alwaysTrue,
            TaggedTemplateExpression() {
              return !allowTaggedTemplates;
            },
            TemplateLiteral: alwaysTrue,
            ThisExpression: alwaysTrue,
            UnaryExpression(node) {
              return node.operator !== "void" && node.operator !== "delete";
            }
          });
          return {
            ExpressionStatement(node) {
              if (Checker.isDisallowed(node.expression) && !isDirective(node, context.getAncestors())) {
                context.report({
                  node,
                  messageId: "unusedExpression"
                });
              }
            }
          };
        }
      };
      var _noUnusedExpressions = exports$2M;

      var exports$2L = {};
      const astUtils$1t = _astUtils;
      exports$2L = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow unused variables",
            category: "Variables",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unused-vars"
          },
          schema: [{
              oneOf: [
                {
                  enum: [
                    "all",
                    "local"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    vars: {
                      enum: [
                        "all",
                        "local"
                      ]
                    },
                    varsIgnorePattern: { type: "string" },
                    args: {
                      enum: [
                        "all",
                        "after-used",
                        "none"
                      ]
                    },
                    ignoreRestSiblings: { type: "boolean" },
                    argsIgnorePattern: { type: "string" },
                    caughtErrors: {
                      enum: [
                        "all",
                        "none"
                      ]
                    },
                    caughtErrorsIgnorePattern: { type: "string" }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { unusedVar: "'{{varName}}' is {{action}} but never used{{additional}}." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const REST_PROPERTY_TYPE = /^(?:RestElement|(?:Experimental)?RestProperty)$/u;
          const config = {
            vars: "all",
            args: "after-used",
            ignoreRestSiblings: false,
            caughtErrors: "none"
          };
          const firstOption = context.options[0];
          if (firstOption) {
            if (typeof firstOption === "string") {
              config.vars = firstOption;
            } else {
              config.vars = firstOption.vars || config.vars;
              config.args = firstOption.args || config.args;
              config.ignoreRestSiblings = firstOption.ignoreRestSiblings || config.ignoreRestSiblings;
              config.caughtErrors = firstOption.caughtErrors || config.caughtErrors;
              if (firstOption.varsIgnorePattern) {
                config.varsIgnorePattern = new RegExp(firstOption.varsIgnorePattern, "u");
              }
              if (firstOption.argsIgnorePattern) {
                config.argsIgnorePattern = new RegExp(firstOption.argsIgnorePattern, "u");
              }
              if (firstOption.caughtErrorsIgnorePattern) {
                config.caughtErrorsIgnorePattern = new RegExp(firstOption.caughtErrorsIgnorePattern, "u");
              }
            }
          }
          function getDefinedMessageData(unusedVar) {
            const defType = unusedVar.defs && unusedVar.defs[0] && unusedVar.defs[0].type;
            let type;
            let pattern;
            if (defType === "CatchClause" && config.caughtErrorsIgnorePattern) {
              type = "args";
              pattern = config.caughtErrorsIgnorePattern.toString();
            } else if (defType === "Parameter" && config.argsIgnorePattern) {
              type = "args";
              pattern = config.argsIgnorePattern.toString();
            } else if (defType !== "Parameter" && config.varsIgnorePattern) {
              type = "vars";
              pattern = config.varsIgnorePattern.toString();
            }
            const additional = type ? `. Allowed unused ${ type } must match ${ pattern }` : "";
            return {
              varName: unusedVar.name,
              action: "defined",
              additional
            };
          }
          function getAssignedMessageData(unusedVar) {
            const additional = config.varsIgnorePattern ? `. Allowed unused vars must match ${ config.varsIgnorePattern.toString() }` : "";
            return {
              varName: unusedVar.name,
              action: "assigned a value",
              additional
            };
          }
          const STATEMENT_TYPE = /(?:Statement|Declaration)$/u;
          function isExported(variable) {
            const definition = variable.defs[0];
            if (definition) {
              let node = definition.node;
              if (node.type === "VariableDeclarator") {
                node = node.parent;
              } else if (definition.type === "Parameter") {
                return false;
              }
              return node.parent.type.indexOf("Export") === 0;
            }
            return false;
          }
          function hasRestSibling(node) {
            return node.type === "Property" && node.parent.type === "ObjectPattern" && REST_PROPERTY_TYPE.test(node.parent.properties[node.parent.properties.length - 1].type);
          }
          function hasRestSpreadSibling(variable) {
            if (config.ignoreRestSiblings) {
              const hasRestSiblingDefinition = variable.defs.some(def => hasRestSibling(def.name.parent));
              const hasRestSiblingReference = variable.references.some(ref => hasRestSibling(ref.identifier.parent));
              return hasRestSiblingDefinition || hasRestSiblingReference;
            }
            return false;
          }
          function isReadRef(ref) {
            return ref.isRead();
          }
          function isSelfReference(ref, nodes) {
            let scope = ref.from;
            while (scope) {
              if (nodes.indexOf(scope.block) >= 0) {
                return true;
              }
              scope = scope.upper;
            }
            return false;
          }
          function getFunctionDefinitions(variable) {
            const functionDefinitions = [];
            variable.defs.forEach(def => {
              const {type, node} = def;
              if (type === "FunctionName") {
                functionDefinitions.push(node);
              }
              if (type === "Variable" && node.init && (node.init.type === "FunctionExpression" || node.init.type === "ArrowFunctionExpression")) {
                functionDefinitions.push(node.init);
              }
            });
            return functionDefinitions;
          }
          function isInside(inner, outer) {
            return inner.range[0] >= outer.range[0] && inner.range[1] <= outer.range[1];
          }
          function getRhsNode(ref, prevRhsNode) {
            const id = ref.identifier;
            const parent = id.parent;
            const grandparent = parent.parent;
            const refScope = ref.from.variableScope;
            const varScope = ref.resolved.scope.variableScope;
            const canBeUsedLater = refScope !== varScope || astUtils$1t.isInLoop(id);
            if (prevRhsNode && isInside(id, prevRhsNode)) {
              return prevRhsNode;
            }
            if (parent.type === "AssignmentExpression" && grandparent.type === "ExpressionStatement" && id === parent.left && !canBeUsedLater) {
              return parent.right;
            }
            return null;
          }
          function isStorableFunction(funcNode, rhsNode) {
            let node = funcNode;
            let parent = funcNode.parent;
            while (parent && isInside(parent, rhsNode)) {
              switch (parent.type) {
              case "SequenceExpression":
                if (parent.expressions[parent.expressions.length - 1] !== node) {
                  return false;
                }
                break;
              case "CallExpression":
              case "NewExpression":
                return parent.callee !== node;
              case "AssignmentExpression":
              case "TaggedTemplateExpression":
              case "YieldExpression":
                return true;
              default:
                if (STATEMENT_TYPE.test(parent.type)) {
                  return true;
                }
              }
              node = parent;
              parent = parent.parent;
            }
            return false;
          }
          function isInsideOfStorableFunction(id, rhsNode) {
            const funcNode = astUtils$1t.getUpperFunction(id);
            return funcNode && isInside(funcNode, rhsNode) && isStorableFunction(funcNode, rhsNode);
          }
          function isUnusedExpression(node) {
            const parent = node.parent;
            if (parent.type === "ExpressionStatement") {
              return true;
            }
            if (parent.type === "SequenceExpression") {
              const isLastExpression = parent.expressions[parent.expressions.length - 1] === node;
              if (!isLastExpression) {
                return true;
              }
              return isUnusedExpression(parent);
            }
            return false;
          }
          function isReadForItself(ref, rhsNode) {
            const id = ref.identifier;
            const parent = id.parent;
            return ref.isRead() && (parent.type === "AssignmentExpression" && parent.left === id && isUnusedExpression(parent) || parent.type === "UpdateExpression" && isUnusedExpression(parent) || rhsNode && isInside(id, rhsNode) && !isInsideOfStorableFunction(id, rhsNode));
          }
          function isForInRef(ref) {
            let target = ref.identifier.parent;
            if (target.type === "VariableDeclarator") {
              target = target.parent.parent;
            }
            if (target.type !== "ForInStatement") {
              return false;
            }
            if (target.body.type === "BlockStatement") {
              target = target.body.body[0];
            } else {
              target = target.body;
            }
            if (!target) {
              return false;
            }
            return target.type === "ReturnStatement";
          }
          function isUsedVariable(variable) {
            const functionNodes = getFunctionDefinitions(variable), isFunctionDefinition = functionNodes.length > 0;
            let rhsNode = null;
            return variable.references.some(ref => {
              if (isForInRef(ref)) {
                return true;
              }
              const forItself = isReadForItself(ref, rhsNode);
              rhsNode = getRhsNode(ref, rhsNode);
              return isReadRef(ref) && !forItself && !(isFunctionDefinition && isSelfReference(ref, functionNodes));
            });
          }
          function isAfterLastUsedArg(variable) {
            const def = variable.defs[0];
            const params = context.getDeclaredVariables(def.node);
            const posteriorParams = params.slice(params.indexOf(variable) + 1);
            return !posteriorParams.some(v => v.references.length > 0 || v.eslintUsed);
          }
          function collectUnusedVariables(scope, unusedVars) {
            const variables = scope.variables;
            const childScopes = scope.childScopes;
            let i, l;
            if (scope.type !== "global" || config.vars === "all") {
              for (i = 0, l = variables.length; i < l; ++i) {
                const variable = variables[i];
                if (scope.type === "class" && scope.block.id === variable.identifiers[0]) {
                  continue;
                }
                if (scope.functionExpressionScope || variable.eslintUsed) {
                  continue;
                }
                if (scope.type === "function" && variable.name === "arguments" && variable.identifiers.length === 0) {
                  continue;
                }
                const def = variable.defs[0];
                if (def) {
                  const type = def.type;
                  if (type === "CatchClause") {
                    if (config.caughtErrors === "none") {
                      continue;
                    }
                    if (config.caughtErrorsIgnorePattern && config.caughtErrorsIgnorePattern.test(def.name.name)) {
                      continue;
                    }
                  }
                  if (type === "Parameter") {
                    if ((def.node.parent.type === "Property" || def.node.parent.type === "MethodDefinition") && def.node.parent.kind === "set") {
                      continue;
                    }
                    if (config.args === "none") {
                      continue;
                    }
                    if (config.argsIgnorePattern && config.argsIgnorePattern.test(def.name.name)) {
                      continue;
                    }
                    if (config.args === "after-used" && astUtils$1t.isFunction(def.name.parent) && !isAfterLastUsedArg(variable)) {
                      continue;
                    }
                  } else {
                    if (config.varsIgnorePattern && config.varsIgnorePattern.test(def.name.name)) {
                      continue;
                    }
                  }
                }
                if (!isUsedVariable(variable) && !isExported(variable) && !hasRestSpreadSibling(variable)) {
                  unusedVars.push(variable);
                }
              }
            }
            for (i = 0, l = childScopes.length; i < l; ++i) {
              collectUnusedVariables(childScopes[i], unusedVars);
            }
            return unusedVars;
          }
          return {
            "Program:exit"(programNode) {
              const unusedVars = collectUnusedVariables(context.getScope(), []);
              for (let i = 0, l = unusedVars.length; i < l; ++i) {
                const unusedVar = unusedVars[i];
                if (unusedVar.defs.length > 0) {
                  const writeReferences = unusedVar.references.filter(ref => ref.isWrite() && ref.from.variableScope === unusedVar.scope.variableScope);
                  let referenceToReport;
                  if (writeReferences.length > 0) {
                    referenceToReport = writeReferences[writeReferences.length - 1];
                  }
                  context.report({
                    node: referenceToReport ? referenceToReport.identifier : unusedVar.identifiers[0],
                    messageId: "unusedVar",
                    data: unusedVar.references.some(ref => ref.isWrite()) ? getAssignedMessageData(unusedVar) : getDefinedMessageData(unusedVar)
                  });
                } else if (unusedVar.eslintExplicitGlobalComments) {
                  const directiveComment = unusedVar.eslintExplicitGlobalComments[0];
                  context.report({
                    node: programNode,
                    loc: astUtils$1t.getNameLocationInGlobalDirectiveComment(sourceCode, directiveComment, unusedVar.name),
                    messageId: "unusedVar",
                    data: getDefinedMessageData(unusedVar)
                  });
                }
              }
            }
          };
        }
      };
      var _noUnusedVars = exports$2L;

      var exports$2K = {};
      const SENTINEL_TYPE$1 = /^(?:(?:Function|Class)(?:Declaration|Expression)|ArrowFunctionExpression|CatchClause|ImportDeclaration|ExportNamedDeclaration)$/u;
      const FOR_IN_OF_TYPE = /^For(?:In|Of)Statement$/u;
      function parseOptions$1(options) {
        let functions = true;
        let classes = true;
        let variables = true;
        if (typeof options === "string") {
          functions = options !== "nofunc";
        } else if (typeof options === "object" && options !== null) {
          functions = options.functions !== false;
          classes = options.classes !== false;
          variables = options.variables !== false;
        }
        return {
          functions,
          classes,
          variables
        };
      }
      function isFunction(variable) {
        return variable.defs[0].type === "FunctionName";
      }
      function isOuterClass(variable, reference) {
        return variable.defs[0].type === "ClassName" && variable.scope.variableScope !== reference.from.variableScope;
      }
      function isOuterVariable(variable, reference) {
        return variable.defs[0].type === "Variable" && variable.scope.variableScope !== reference.from.variableScope;
      }
      function isInRange$1(node, location) {
        return node && node.range[0] <= location && location <= node.range[1];
      }
      function isInInitializer(variable, reference) {
        if (variable.scope !== reference.from) {
          return false;
        }
        let node = variable.identifiers[0].parent;
        const location = reference.identifier.range[1];
        while (node) {
          if (node.type === "VariableDeclarator") {
            if (isInRange$1(node.init, location)) {
              return true;
            }
            if (FOR_IN_OF_TYPE.test(node.parent.parent.type) && isInRange$1(node.parent.parent.right, location)) {
              return true;
            }
            break;
          } else if (node.type === "AssignmentPattern") {
            if (isInRange$1(node.right, location)) {
              return true;
            }
          } else if (SENTINEL_TYPE$1.test(node.type)) {
            break;
          }
          node = node.parent;
        }
        return false;
      }
      exports$2K = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow the use of variables before they are defined",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-use-before-define"
          },
          schema: [{
              oneOf: [
                { enum: ["nofunc"] },
                {
                  type: "object",
                  properties: {
                    functions: { type: "boolean" },
                    classes: { type: "boolean" },
                    variables: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: { usedBeforeDefined: "'{{name}}' was used before it was defined." }
        },
        create(context) {
          const options = parseOptions$1(context.options[0]);
          function isForbidden(variable, reference) {
            if (isFunction(variable)) {
              return options.functions;
            }
            if (isOuterClass(variable, reference)) {
              return options.classes;
            }
            if (isOuterVariable(variable, reference)) {
              return options.variables;
            }
            return true;
          }
          function findVariablesInScope(scope) {
            scope.references.forEach(reference => {
              const variable = reference.resolved;
              if (reference.init || !variable || variable.identifiers.length === 0 || variable.identifiers[0].range[1] < reference.identifier.range[1] && !isInInitializer(variable, reference) || !isForbidden(variable, reference)) {
                return;
              }
              context.report({
                node: reference.identifier,
                messageId: "usedBeforeDefined",
                data: reference.identifier
              });
            });
            scope.childScopes.forEach(findVariablesInScope);
          }
          return {
            Program() {
              findVariablesInScope(context.getScope());
            }
          };
        }
      };
      var _noUseBeforeDefine = exports$2K;

      var exports$2J = {};
      const astUtils$1s = _astUtils;
      function isCallOrNonVariadicApply(node) {
        const callee = astUtils$1s.skipChainExpression(node.callee);
        return callee.type === "MemberExpression" && callee.property.type === "Identifier" && callee.computed === false && (callee.property.name === "call" && node.arguments.length >= 1 || callee.property.name === "apply" && node.arguments.length === 2 && node.arguments[1].type === "ArrayExpression");
      }
      function isValidThisArg$1(expectedThis, thisArg, sourceCode) {
        if (!expectedThis) {
          return astUtils$1s.isNullOrUndefined(thisArg);
        }
        return astUtils$1s.equalTokens(expectedThis, thisArg, sourceCode);
      }
      exports$2J = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary calls to `.call()` and `.apply()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-call"
          },
          schema: [],
          messages: { unnecessaryCall: "Unnecessary '.{{name}}()'." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            CallExpression(node) {
              if (!isCallOrNonVariadicApply(node)) {
                return;
              }
              const callee = astUtils$1s.skipChainExpression(node.callee);
              const applied = astUtils$1s.skipChainExpression(callee.object);
              const expectedThis = applied.type === "MemberExpression" ? applied.object : null;
              const thisArg = node.arguments[0];
              if (isValidThisArg$1(expectedThis, thisArg, sourceCode)) {
                context.report({
                  node,
                  messageId: "unnecessaryCall",
                  data: { name: callee.property.name }
                });
              }
            }
          };
        }
      };
      var _noUselessCall = exports$2J;

      var exports$2I = {};
      exports$2I = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary `catch` clauses",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-useless-catch"
          },
          schema: [],
          messages: {
            unnecessaryCatchClause: "Unnecessary catch clause.",
            unnecessaryCatch: "Unnecessary try/catch wrapper."
          }
        },
        create(context) {
          return {
            CatchClause(node) {
              if (node.param && node.param.type === "Identifier" && node.body.body.length && node.body.body[0].type === "ThrowStatement" && node.body.body[0].argument.type === "Identifier" && node.body.body[0].argument.name === node.param.name) {
                if (node.parent.finalizer) {
                  context.report({
                    node,
                    messageId: "unnecessaryCatchClause"
                  });
                } else {
                  context.report({
                    node: node.parent,
                    messageId: "unnecessaryCatch"
                  });
                }
              }
            }
          };
        }
      };
      var _noUselessCatch = exports$2I;

      var exports$2H = {};
      const astUtils$1r = _astUtils;
      exports$2H = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary computed property keys in objects and classes",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-computed-key"
          },
          schema: [{
              type: "object",
              properties: {
                enforceForClassMembers: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: { unnecessarilyComputedProperty: "Unnecessarily computed property [{{property}}] found." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const enforceForClassMembers = context.options[0] && context.options[0].enforceForClassMembers;
          function check(node) {
            if (!node.computed) {
              return;
            }
            const key = node.key, nodeType = typeof key.value;
            let allowedKey;
            if (node.type === "MethodDefinition") {
              allowedKey = node.static ? "prototype" : "constructor";
            } else {
              allowedKey = "__proto__";
            }
            if (key.type === "Literal" && (nodeType === "string" || nodeType === "number") && key.value !== allowedKey) {
              context.report({
                node,
                messageId: "unnecessarilyComputedProperty",
                data: { property: sourceCode.getText(key) },
                fix(fixer) {
                  const leftSquareBracket = sourceCode.getTokenBefore(key, astUtils$1r.isOpeningBracketToken);
                  const rightSquareBracket = sourceCode.getTokenAfter(key, astUtils$1r.isClosingBracketToken);
                  if (sourceCode.commentsExistBetween(leftSquareBracket, rightSquareBracket)) {
                    return null;
                  }
                  const tokenBeforeLeftBracket = sourceCode.getTokenBefore(leftSquareBracket);
                  const needsSpaceBeforeKey = tokenBeforeLeftBracket.range[1] === leftSquareBracket.range[0] && !astUtils$1r.canTokensBeAdjacent(tokenBeforeLeftBracket, sourceCode.getFirstToken(key));
                  const replacementKey = (needsSpaceBeforeKey ? " " : "") + key.raw;
                  return fixer.replaceTextRange([
                    leftSquareBracket.range[0],
                    rightSquareBracket.range[1]
                  ], replacementKey);
                }
              });
            }
          }
          function noop() {
          }
          return {
            Property: check,
            MethodDefinition: enforceForClassMembers ? check : noop
          };
        }
      };
      var _noUselessComputedKey = exports$2H;

      var exports$2G = {};
      const astUtils$1q = _astUtils;
      function isConcatenation$1(node) {
        return node.type === "BinaryExpression" && node.operator === "+";
      }
      function isConcatOperatorToken(token) {
        return token.value === "+" && token.type === "Punctuator";
      }
      function getLeft(node) {
        let left = node.left;
        while (isConcatenation$1(left)) {
          left = left.right;
        }
        return left;
      }
      function getRight(node) {
        let right = node.right;
        while (isConcatenation$1(right)) {
          right = right.left;
        }
        return right;
      }
      exports$2G = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary concatenation of literals or template literals",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-concat"
          },
          schema: [],
          messages: { unexpectedConcat: "Unexpected string concatenation of literals." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            BinaryExpression(node) {
              if (node.operator !== "+") {
                return;
              }
              const left = getLeft(node);
              const right = getRight(node);
              if (astUtils$1q.isStringLiteral(left) && astUtils$1q.isStringLiteral(right) && astUtils$1q.isTokenOnSameLine(left, right)) {
                const operatorToken = sourceCode.getFirstTokenBetween(left, right, isConcatOperatorToken);
                context.report({
                  node,
                  loc: operatorToken.loc,
                  messageId: "unexpectedConcat"
                });
              }
            }
          };
        }
      };
      var _noUselessConcat = exports$2G;

      var exports$2F = {};
      function isSingleSuperCall(body) {
        return body.length === 1 && body[0].type === "ExpressionStatement" && body[0].expression.type === "CallExpression" && body[0].expression.callee.type === "Super";
      }
      function isSimple(node) {
        return node.type === "Identifier" || node.type === "RestElement";
      }
      function isSpreadArguments(superArgs) {
        return superArgs.length === 1 && superArgs[0].type === "SpreadElement" && superArgs[0].argument.type === "Identifier" && superArgs[0].argument.name === "arguments";
      }
      function isValidIdentifierPair(ctorParam, superArg) {
        return ctorParam.type === "Identifier" && superArg.type === "Identifier" && ctorParam.name === superArg.name;
      }
      function isValidRestSpreadPair(ctorParam, superArg) {
        return ctorParam.type === "RestElement" && superArg.type === "SpreadElement" && isValidIdentifierPair(ctorParam.argument, superArg.argument);
      }
      function isValidPair(ctorParam, superArg) {
        return isValidIdentifierPair(ctorParam, superArg) || isValidRestSpreadPair(ctorParam, superArg);
      }
      function isPassingThrough(ctorParams, superArgs) {
        if (ctorParams.length !== superArgs.length) {
          return false;
        }
        for (let i = 0; i < ctorParams.length; ++i) {
          if (!isValidPair(ctorParams[i], superArgs[i])) {
            return false;
          }
        }
        return true;
      }
      function isRedundantSuperCall(body, ctorParams) {
        return isSingleSuperCall(body) && ctorParams.every(isSimple) && (isSpreadArguments(body[0].expression.arguments) || isPassingThrough(ctorParams, body[0].expression.arguments));
      }
      exports$2F = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary constructors",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-constructor"
          },
          schema: [],
          messages: { noUselessConstructor: "Useless constructor." }
        },
        create(context) {
          function checkForConstructor(node) {
            if (node.kind !== "constructor") {
              return;
            }
            if (!node.value.body) {
              return;
            }
            const body = node.value.body.body;
            const ctorParams = node.value.params;
            const superClass = node.parent.parent.superClass;
            if (superClass ? isRedundantSuperCall(body, ctorParams) : body.length === 0) {
              context.report({
                node,
                messageId: "noUselessConstructor"
              });
            }
          }
          return { MethodDefinition: checkForConstructor };
        }
      };
      var _noUselessConstructor = exports$2F;

      var exports$2E = {};
      const astUtils$1p = _astUtils;
      function union(setA, setB) {
        return new Set((function* () {
          yield* setA;
          yield* setB;
        }()));
      }
      const VALID_STRING_ESCAPES = union(new Set("\\nrvtbfux"), astUtils$1p.LINEBREAKS);
      const REGEX_GENERAL_ESCAPES = new Set("\\bcdDfnpPrsStvwWxu0123456789]");
      const REGEX_NON_CHARCLASS_ESCAPES = union(REGEX_GENERAL_ESCAPES, new Set("^/.$*+?[{}|()Bk"));
      function parseRegExp(regExpText) {
        const charList = [];
        regExpText.split("").reduce((state, char, index) => {
          if (!state.escapeNextChar) {
            if (char === "\\") {
              return Object.assign(state, { escapeNextChar: true });
            }
            if (char === "[" && !state.inCharClass) {
              return Object.assign(state, {
                inCharClass: true,
                startingCharClass: true
              });
            }
            if (char === "]" && state.inCharClass) {
              if (charList.length && charList[charList.length - 1].inCharClass) {
                charList[charList.length - 1].endsCharClass = true;
              }
              return Object.assign(state, {
                inCharClass: false,
                startingCharClass: false
              });
            }
          }
          charList.push({
            text: char,
            index,
            escaped: state.escapeNextChar,
            inCharClass: state.inCharClass,
            startsCharClass: state.startingCharClass,
            endsCharClass: false
          });
          return Object.assign(state, {
            escapeNextChar: false,
            startingCharClass: false
          });
        }, {
          escapeNextChar: false,
          inCharClass: false,
          startingCharClass: false
        });
        return charList;
      }
      exports$2E = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary escape characters",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-useless-escape",
            suggestion: true
          },
          messages: {
            unnecessaryEscape: "Unnecessary escape character: \\{{character}}.",
            removeEscape: "Remove the `\\`. This maintains the current functionality.",
            escapeBackslash: "Replace the `\\` with `\\\\` to include the actual backslash character."
          },
          schema: []
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function report(node, startOffset, character) {
            const rangeStart = node.range[0] + startOffset;
            const range = [
              rangeStart,
              rangeStart + 1
            ];
            const start = sourceCode.getLocFromIndex(rangeStart);
            context.report({
              node,
              loc: {
                start,
                end: {
                  line: start.line,
                  column: start.column + 1
                }
              },
              messageId: "unnecessaryEscape",
              data: { character },
              suggest: [
                {
                  messageId: "removeEscape",
                  fix(fixer) {
                    return fixer.removeRange(range);
                  }
                },
                {
                  messageId: "escapeBackslash",
                  fix(fixer) {
                    return fixer.insertTextBeforeRange(range, "\\");
                  }
                }
              ]
            });
          }
          function validateString(node, match) {
            const isTemplateElement = node.type === "TemplateElement";
            const escapedChar = match[0][1];
            let isUnnecessaryEscape = !VALID_STRING_ESCAPES.has(escapedChar);
            let isQuoteEscape;
            if (isTemplateElement) {
              isQuoteEscape = escapedChar === "`";
              if (escapedChar === "$") {
                isUnnecessaryEscape = match.input[match.index + 2] !== "{";
              } else if (escapedChar === "{") {
                isUnnecessaryEscape = match.input[match.index - 1] !== "$";
              }
            } else {
              isQuoteEscape = escapedChar === node.raw[0];
            }
            if (isUnnecessaryEscape && !isQuoteEscape) {
              report(node, match.index, match[0].slice(1));
            }
          }
          function check(node) {
            const isTemplateElement = node.type === "TemplateElement";
            if (isTemplateElement && node.parent && node.parent.parent && node.parent.parent.type === "TaggedTemplateExpression" && node.parent === node.parent.parent.quasi) {
              return;
            }
            if (typeof node.value === "string" || isTemplateElement) {
              if (node.parent.type === "JSXAttribute" || node.parent.type === "JSXElement" || node.parent.type === "JSXFragment") {
                return;
              }
              const value = isTemplateElement ? sourceCode.getText(node) : node.raw;
              const pattern = /\\[^\d]/gu;
              let match;
              while (match = pattern.exec(value)) {
                validateString(node, match);
              }
            } else if (node.regex) {
              parseRegExp(node.regex.pattern).filter(charInfo => !(charInfo.text === "-" && charInfo.inCharClass && !charInfo.startsCharClass && !charInfo.endsCharClass)).filter(charInfo => !(charInfo.text === "^" && charInfo.startsCharClass)).filter(charInfo => charInfo.escaped).filter(charInfo => !(charInfo.inCharClass ? REGEX_GENERAL_ESCAPES : REGEX_NON_CHARCLASS_ESCAPES).has(charInfo.text)).forEach(charInfo => report(node, charInfo.index, charInfo.text));
            }
          }
          return {
            Literal: check,
            TemplateElement: check
          };
        }
      };
      var _noUselessEscape = exports$2E;

      var exports$2D = {};
      const astUtils$1o = _astUtils;
      exports$2D = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow renaming import, export, and destructured assignments to the same name",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-rename"
          },
          fixable: "code",
          schema: [{
              type: "object",
              properties: {
                ignoreDestructuring: {
                  type: "boolean",
                  default: false
                },
                ignoreImport: {
                  type: "boolean",
                  default: false
                },
                ignoreExport: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { unnecessarilyRenamed: "{{type}} {{name}} unnecessarily renamed." }
        },
        create(context) {
          const sourceCode = context.getSourceCode(), options = context.options[0] || {}, ignoreDestructuring = options.ignoreDestructuring === true, ignoreImport = options.ignoreImport === true, ignoreExport = options.ignoreExport === true;
          function reportError(node, initial, type) {
            const name = initial.type === "Identifier" ? initial.name : initial.value;
            return context.report({
              node,
              messageId: "unnecessarilyRenamed",
              data: {
                name,
                type
              },
              fix(fixer) {
                const replacementNode = node.type === "Property" ? node.value : node.local;
                if (sourceCode.getCommentsInside(node).length > sourceCode.getCommentsInside(replacementNode).length) {
                  return null;
                }
                if (replacementNode.type === "AssignmentPattern" && astUtils$1o.isParenthesised(sourceCode, replacementNode.left)) {
                  return null;
                }
                return fixer.replaceText(node, sourceCode.getText(replacementNode));
              }
            });
          }
          function checkDestructured(node) {
            if (ignoreDestructuring) {
              return;
            }
            for (const property of node.properties) {
              if (property.type !== "Property" || property.shorthand || property.computed) {
                continue;
              }
              const key = property.key.type === "Identifier" && property.key.name || property.key.type === "Literal" && property.key.value;
              const renamedKey = property.value.type === "AssignmentPattern" ? property.value.left.name : property.value.name;
              if (key === renamedKey) {
                reportError(property, property.key, "Destructuring assignment");
              }
            }
          }
          function checkImport(node) {
            if (ignoreImport) {
              return;
            }
            if (node.imported.name === node.local.name && node.imported.range[0] !== node.local.range[0]) {
              reportError(node, node.imported, "Import");
            }
          }
          function checkExport(node) {
            if (ignoreExport) {
              return;
            }
            if (node.local.name === node.exported.name && node.local.range[0] !== node.exported.range[0]) {
              reportError(node, node.local, "Export");
            }
          }
          return {
            ObjectPattern: checkDestructured,
            ImportSpecifier: checkImport,
            ExportSpecifier: checkExport
          };
        }
      };
      var _noUselessRename = exports$2D;

      var _escapeStringRegexp$1 = "default" in _escapeStringRegexp2 ? exports$1$s : _escapeStringRegexp2;
      var exports$2C = {};
      const escapeRegExp$1 = _escapeStringRegexp$1;
      const astUtils$1n = _astUtils;
      const CHAR_LIMIT = 40;
      exports$2C = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow specified warning terms in comments",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-warning-comments"
          },
          schema: [{
              type: "object",
              properties: {
                terms: {
                  type: "array",
                  items: { type: "string" }
                },
                location: {
                  enum: [
                    "start",
                    "anywhere"
                  ]
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedComment: "Unexpected '{{matchedTerm}}' comment: '{{comment}}'." }
        },
        create(context) {
          const sourceCode = context.getSourceCode(), configuration = context.options[0] || {}, warningTerms = configuration.terms || [
              "todo",
              "fixme",
              "xxx"
            ], location = configuration.location || "start", selfConfigRegEx = /\bno-warning-comments\b/u;
          function convertToRegExp(term) {
            const escaped = escapeRegExp$1(term);
            const wordBoundary = "\\b";
            const eitherOrWordBoundary = `|${ wordBoundary }`;
            let prefix;
            const suffix = /\w$/u.test(term) ? "\\b" : "";
            if (location === "start") {
              prefix = "^\\s*";
            } else if (/^\w/u.test(term)) {
              prefix = wordBoundary;
            } else {
              prefix = "";
            }
            if (location === "start") {
              return new RegExp(prefix + escaped + suffix, "iu");
            }
            return new RegExp(prefix + escaped + suffix + eitherOrWordBoundary + term + wordBoundary, "iu");
          }
          const warningRegExps = warningTerms.map(convertToRegExp);
          function commentContainsWarningTerm(comment) {
            const matches = [];
            warningRegExps.forEach((regex, index) => {
              if (regex.test(comment)) {
                matches.push(warningTerms[index]);
              }
            });
            return matches;
          }
          function checkComment(node) {
            const comment = node.value;
            if (astUtils$1n.isDirectiveComment(node) && selfConfigRegEx.test(comment)) {
              return;
            }
            const matches = commentContainsWarningTerm(comment);
            matches.forEach(matchedTerm => {
              let commentToDisplay = "";
              let truncated = false;
              for (const c of comment.trim().split(/\s+/u)) {
                const tmp = commentToDisplay ? `${ commentToDisplay } ${ c }` : c;
                if (tmp.length <= CHAR_LIMIT) {
                  commentToDisplay = tmp;
                } else {
                  truncated = true;
                  break;
                }
              }
              context.report({
                node,
                messageId: "unexpectedComment",
                data: {
                  matchedTerm,
                  comment: `${ commentToDisplay }${ truncated ? "..." : "" }`
                }
              });
            });
          }
          return {
            Program() {
              const comments = sourceCode.getAllComments();
              comments.filter(token => token.type !== "Shebang").forEach(checkComment);
            }
          };
        }
      };
      var _noWarningComments = exports$2C;

      var exports$2B = {};
      const astUtils$1m = _astUtils;
      exports$2B = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow whitespace before properties",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-whitespace-before-property"
          },
          fixable: "whitespace",
          schema: [],
          messages: { unexpectedWhitespace: "Unexpected whitespace before property {{propName}}." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function reportError(node, leftToken, rightToken) {
            context.report({
              node,
              messageId: "unexpectedWhitespace",
              data: { propName: sourceCode.getText(node.property) },
              fix(fixer) {
                let replacementText = "";
                if (!node.computed && !node.optional && astUtils$1m.isDecimalInteger(node.object)) {
                  return null;
                }
                if (sourceCode.commentsExistBetween(leftToken, rightToken)) {
                  return null;
                }
                if (node.optional) {
                  replacementText = "?.";
                } else if (!node.computed) {
                  replacementText = ".";
                }
                return fixer.replaceTextRange([
                  leftToken.range[1],
                  rightToken.range[0]
                ], replacementText);
              }
            });
          }
          return {
            MemberExpression(node) {
              let rightToken;
              let leftToken;
              if (!astUtils$1m.isTokenOnSameLine(node.object, node.property)) {
                return;
              }
              if (node.computed) {
                rightToken = sourceCode.getTokenBefore(node.property, astUtils$1m.isOpeningBracketToken);
                leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);
              } else {
                rightToken = sourceCode.getFirstToken(node.property);
                leftToken = sourceCode.getTokenBefore(rightToken, 1);
              }
              if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {
                reportError(node, leftToken, rightToken);
              }
            }
          };
        }
      };
      var _noWhitespaceBeforeProperty = exports$2B;

      var exports$2A = {};
      const astUtils$1l = _astUtils;
      const OPTION_VALUE = {
        oneOf: [
          {
            enum: [
              "always",
              "never"
            ]
          },
          {
            type: "object",
            properties: {
              multiline: { type: "boolean" },
              minProperties: {
                type: "integer",
                minimum: 0
              },
              consistent: { type: "boolean" }
            },
            additionalProperties: false,
            minProperties: 1
          }
        ]
      };
      function normalizeOptionValue(value) {
        let multiline = false;
        let minProperties = Number.POSITIVE_INFINITY;
        let consistent = false;
        if (value) {
          if (value === "always") {
            minProperties = 0;
          } else if (value === "never") {
            minProperties = Number.POSITIVE_INFINITY;
          } else {
            multiline = Boolean(value.multiline);
            minProperties = value.minProperties || Number.POSITIVE_INFINITY;
            consistent = Boolean(value.consistent);
          }
        } else {
          consistent = true;
        }
        return {
          multiline,
          minProperties,
          consistent
        };
      }
      function isObject(value) {
        return typeof value === "object" && value !== null;
      }
      function isNodeSpecificOption(option) {
        return isObject(option) || typeof option === "string";
      }
      function normalizeOptions$1(options) {
        if (isObject(options) && Object.values(options).some(isNodeSpecificOption)) {
          return {
            ObjectExpression: normalizeOptionValue(options.ObjectExpression),
            ObjectPattern: normalizeOptionValue(options.ObjectPattern),
            ImportDeclaration: normalizeOptionValue(options.ImportDeclaration),
            ExportNamedDeclaration: normalizeOptionValue(options.ExportDeclaration)
          };
        }
        const value = normalizeOptionValue(options);
        return {
          ObjectExpression: value,
          ObjectPattern: value,
          ImportDeclaration: value,
          ExportNamedDeclaration: value
        };
      }
      function areLineBreaksRequired(node, options, first, last) {
        let objectProperties;
        if (node.type === "ObjectExpression" || node.type === "ObjectPattern") {
          objectProperties = node.properties;
        } else {
          objectProperties = node.specifiers.filter(s => s.type === "ImportSpecifier" || s.type === "ExportSpecifier");
        }
        return objectProperties.length >= options.minProperties || options.multiline && objectProperties.length > 0 && first.loc.start.line !== last.loc.end.line;
      }
      exports$2A = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent line breaks after opening and before closing braces",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/object-curly-newline"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                OPTION_VALUE,
                {
                  type: "object",
                  properties: {
                    ObjectExpression: OPTION_VALUE,
                    ObjectPattern: OPTION_VALUE,
                    ImportDeclaration: OPTION_VALUE,
                    ExportDeclaration: OPTION_VALUE
                  },
                  additionalProperties: false,
                  minProperties: 1
                }
              ]
            }],
          messages: {
            unexpectedLinebreakBeforeClosingBrace: "Unexpected line break before this closing brace.",
            unexpectedLinebreakAfterOpeningBrace: "Unexpected line break after this opening brace.",
            expectedLinebreakBeforeClosingBrace: "Expected a line break before this closing brace.",
            expectedLinebreakAfterOpeningBrace: "Expected a line break after this opening brace."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const normalizedOptions = normalizeOptions$1(context.options[0]);
          function check(node) {
            const options = normalizedOptions[node.type];
            if (node.type === "ImportDeclaration" && !node.specifiers.some(specifier => specifier.type === "ImportSpecifier") || node.type === "ExportNamedDeclaration" && !node.specifiers.some(specifier => specifier.type === "ExportSpecifier")) {
              return;
            }
            const openBrace = sourceCode.getFirstToken(node, token => token.value === "{");
            let closeBrace;
            if (node.typeAnnotation) {
              closeBrace = sourceCode.getTokenBefore(node.typeAnnotation);
            } else {
              closeBrace = sourceCode.getLastToken(node, token => token.value === "}");
            }
            let first = sourceCode.getTokenAfter(openBrace, { includeComments: true });
            let last = sourceCode.getTokenBefore(closeBrace, { includeComments: true });
            const needsLineBreaks = areLineBreaksRequired(node, options, first, last);
            const hasCommentsFirstToken = astUtils$1l.isCommentToken(first);
            const hasCommentsLastToken = astUtils$1l.isCommentToken(last);
            first = sourceCode.getTokenAfter(openBrace);
            last = sourceCode.getTokenBefore(closeBrace);
            if (needsLineBreaks) {
              if (astUtils$1l.isTokenOnSameLine(openBrace, first)) {
                context.report({
                  messageId: "expectedLinebreakAfterOpeningBrace",
                  node,
                  loc: openBrace.loc,
                  fix(fixer) {
                    if (hasCommentsFirstToken) {
                      return null;
                    }
                    return fixer.insertTextAfter(openBrace, "\n");
                  }
                });
              }
              if (astUtils$1l.isTokenOnSameLine(last, closeBrace)) {
                context.report({
                  messageId: "expectedLinebreakBeforeClosingBrace",
                  node,
                  loc: closeBrace.loc,
                  fix(fixer) {
                    if (hasCommentsLastToken) {
                      return null;
                    }
                    return fixer.insertTextBefore(closeBrace, "\n");
                  }
                });
              }
            } else {
              const consistent = options.consistent;
              const hasLineBreakBetweenOpenBraceAndFirst = !astUtils$1l.isTokenOnSameLine(openBrace, first);
              const hasLineBreakBetweenCloseBraceAndLast = !astUtils$1l.isTokenOnSameLine(last, closeBrace);
              if (!consistent && hasLineBreakBetweenOpenBraceAndFirst || consistent && hasLineBreakBetweenOpenBraceAndFirst && !hasLineBreakBetweenCloseBraceAndLast) {
                context.report({
                  messageId: "unexpectedLinebreakAfterOpeningBrace",
                  node,
                  loc: openBrace.loc,
                  fix(fixer) {
                    if (hasCommentsFirstToken) {
                      return null;
                    }
                    return fixer.removeRange([
                      openBrace.range[1],
                      first.range[0]
                    ]);
                  }
                });
              }
              if (!consistent && hasLineBreakBetweenCloseBraceAndLast || consistent && !hasLineBreakBetweenOpenBraceAndFirst && hasLineBreakBetweenCloseBraceAndLast) {
                context.report({
                  messageId: "unexpectedLinebreakBeforeClosingBrace",
                  node,
                  loc: closeBrace.loc,
                  fix(fixer) {
                    if (hasCommentsLastToken) {
                      return null;
                    }
                    return fixer.removeRange([
                      last.range[1],
                      closeBrace.range[0]
                    ]);
                  }
                });
              }
            }
          }
          return {
            ObjectExpression: check,
            ObjectPattern: check,
            ImportDeclaration: check,
            ExportNamedDeclaration: check
          };
        }
      };
      var _objectCurlyNewline = exports$2A;

      var exports$2z = {};
      const astUtils$1k = _astUtils;
      exports$2z = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing inside braces",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/object-curly-spacing"
          },
          fixable: "whitespace",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                arraysInObjects: { type: "boolean" },
                objectsInObjects: { type: "boolean" }
              },
              additionalProperties: false
            }
          ],
          messages: {
            requireSpaceBefore: "A space is required before '{{token}}'.",
            requireSpaceAfter: "A space is required after '{{token}}'.",
            unexpectedSpaceBefore: "There should be no space before '{{token}}'.",
            unexpectedSpaceAfter: "There should be no space after '{{token}}'."
          }
        },
        create(context) {
          const spaced = context.options[0] === "always", sourceCode = context.getSourceCode();
          function isOptionSet(option) {
            return context.options[1] ? context.options[1][option] === !spaced : false;
          }
          const options = {
            spaced,
            arraysInObjectsException: isOptionSet("arraysInObjects"),
            objectsInObjectsException: isOptionSet("objectsInObjects")
          };
          function reportNoBeginningSpace(node, token) {
            const nextToken = context.getSourceCode().getTokenAfter(token, { includeComments: true });
            context.report({
              node,
              loc: {
                start: token.loc.end,
                end: nextToken.loc.start
              },
              messageId: "unexpectedSpaceAfter",
              data: { token: token.value },
              fix(fixer) {
                return fixer.removeRange([
                  token.range[1],
                  nextToken.range[0]
                ]);
              }
            });
          }
          function reportNoEndingSpace(node, token) {
            const previousToken = context.getSourceCode().getTokenBefore(token, { includeComments: true });
            context.report({
              node,
              loc: {
                start: previousToken.loc.end,
                end: token.loc.start
              },
              messageId: "unexpectedSpaceBefore",
              data: { token: token.value },
              fix(fixer) {
                return fixer.removeRange([
                  previousToken.range[1],
                  token.range[0]
                ]);
              }
            });
          }
          function reportRequiredBeginningSpace(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "requireSpaceAfter",
              data: { token: token.value },
              fix(fixer) {
                return fixer.insertTextAfter(token, " ");
              }
            });
          }
          function reportRequiredEndingSpace(node, token) {
            context.report({
              node,
              loc: token.loc,
              messageId: "requireSpaceBefore",
              data: { token: token.value },
              fix(fixer) {
                return fixer.insertTextBefore(token, " ");
              }
            });
          }
          function validateBraceSpacing(node, first, second, penultimate, last) {
            if (astUtils$1k.isTokenOnSameLine(first, second)) {
              const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);
              if (options.spaced && !firstSpaced) {
                reportRequiredBeginningSpace(node, first);
              }
              if (!options.spaced && firstSpaced && second.type !== "Line") {
                reportNoBeginningSpace(node, first);
              }
            }
            if (astUtils$1k.isTokenOnSameLine(penultimate, last)) {
              const shouldCheckPenultimate = options.arraysInObjectsException && astUtils$1k.isClosingBracketToken(penultimate) || options.objectsInObjectsException && astUtils$1k.isClosingBraceToken(penultimate);
              const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;
              const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === "ArrayExpression" || options.objectsInObjectsException && (penultimateType === "ObjectExpression" || penultimateType === "ObjectPattern") ? !options.spaced : options.spaced;
              const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);
              if (closingCurlyBraceMustBeSpaced && !lastSpaced) {
                reportRequiredEndingSpace(node, last);
              }
              if (!closingCurlyBraceMustBeSpaced && lastSpaced) {
                reportNoEndingSpace(node, last);
              }
            }
          }
          function getClosingBraceOfObject(node) {
            const lastProperty = node.properties[node.properties.length - 1];
            return sourceCode.getTokenAfter(lastProperty, astUtils$1k.isClosingBraceToken);
          }
          function checkForObject(node) {
            if (node.properties.length === 0) {
              return;
            }
            const first = sourceCode.getFirstToken(node), last = getClosingBraceOfObject(node), second = sourceCode.getTokenAfter(first, { includeComments: true }), penultimate = sourceCode.getTokenBefore(last, { includeComments: true });
            validateBraceSpacing(node, first, second, penultimate, last);
          }
          function checkForImport(node) {
            if (node.specifiers.length === 0) {
              return;
            }
            let firstSpecifier = node.specifiers[0];
            const lastSpecifier = node.specifiers[node.specifiers.length - 1];
            if (lastSpecifier.type !== "ImportSpecifier") {
              return;
            }
            if (firstSpecifier.type !== "ImportSpecifier") {
              firstSpecifier = node.specifiers[1];
            }
            const first = sourceCode.getTokenBefore(firstSpecifier), last = sourceCode.getTokenAfter(lastSpecifier, astUtils$1k.isNotCommaToken), second = sourceCode.getTokenAfter(first, { includeComments: true }), penultimate = sourceCode.getTokenBefore(last, { includeComments: true });
            validateBraceSpacing(node, first, second, penultimate, last);
          }
          function checkForExport(node) {
            if (node.specifiers.length === 0) {
              return;
            }
            const firstSpecifier = node.specifiers[0], lastSpecifier = node.specifiers[node.specifiers.length - 1], first = sourceCode.getTokenBefore(firstSpecifier), last = sourceCode.getTokenAfter(lastSpecifier, astUtils$1k.isNotCommaToken), second = sourceCode.getTokenAfter(first, { includeComments: true }), penultimate = sourceCode.getTokenBefore(last, { includeComments: true });
            validateBraceSpacing(node, first, second, penultimate, last);
          }
          return {
            ObjectPattern: checkForObject,
            ObjectExpression: checkForObject,
            ImportDeclaration: checkForImport,
            ExportNamedDeclaration: checkForExport
          };
        }
      };
      var _objectCurlySpacing = exports$2z;

      var exports$2y = {};
      exports$2y = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce placing object properties on separate lines",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/object-property-newline"
          },
          schema: [{
              type: "object",
              properties: {
                allowAllPropertiesOnSameLine: {
                  type: "boolean",
                  default: false
                },
                allowMultiplePropertiesPerLine: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: "whitespace",
          messages: {
            propertiesOnNewlineAll: "Object properties must go on a new line if they aren't all on the same line.",
            propertiesOnNewline: "Object properties must go on a new line."
          }
        },
        create(context) {
          const allowSameLine = context.options[0] && (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine);
          const messageId = allowSameLine ? "propertiesOnNewlineAll" : "propertiesOnNewline";
          const sourceCode = context.getSourceCode();
          return {
            ObjectExpression(node) {
              if (allowSameLine) {
                if (node.properties.length > 1) {
                  const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);
                  const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);
                  if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {
                    return;
                  }
                }
              }
              for (let i = 1; i < node.properties.length; i++) {
                const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);
                const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);
                if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {
                  context.report({
                    node,
                    loc: firstTokenOfCurrentProperty.loc,
                    messageId,
                    fix(fixer) {
                      const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);
                      const rangeAfterComma = [
                        comma.range[1],
                        firstTokenOfCurrentProperty.range[0]
                      ];
                      if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {
                        return null;
                      }
                      return fixer.replaceTextRange(rangeAfterComma, "\n");
                    }
                  });
                }
              }
            }
          };
        }
      };
      var _objectPropertyNewline = exports$2y;

      var exports$2x = {};
      const OPTIONS = {
        always: "always",
        never: "never",
        methods: "methods",
        properties: "properties",
        consistent: "consistent",
        consistentAsNeeded: "consistent-as-needed"
      };
      const astUtils$1j = _astUtils;
      exports$2x = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow method and property shorthand syntax for object literals",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/object-shorthand"
          },
          fixable: "code",
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{
                    enum: [
                      "always",
                      "methods",
                      "properties",
                      "never",
                      "consistent",
                      "consistent-as-needed"
                    ]
                  }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  {
                    enum: [
                      "always",
                      "methods",
                      "properties"
                    ]
                  },
                  {
                    type: "object",
                    properties: { avoidQuotes: { type: "boolean" } },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              },
              {
                type: "array",
                items: [
                  {
                    enum: [
                      "always",
                      "methods"
                    ]
                  },
                  {
                    type: "object",
                    properties: {
                      ignoreConstructors: { type: "boolean" },
                      avoidQuotes: { type: "boolean" },
                      avoidExplicitReturnArrows: { type: "boolean" }
                    },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          messages: {
            expectedAllPropertiesShorthanded: "Expected shorthand for all properties.",
            expectedLiteralMethodLongform: "Expected longform method syntax for string literal keys.",
            expectedPropertyShorthand: "Expected property shorthand.",
            expectedPropertyLongform: "Expected longform property syntax.",
            expectedMethodShorthand: "Expected method shorthand.",
            expectedMethodLongform: "Expected longform method syntax.",
            unexpectedMix: "Unexpected mix of shorthand and non-shorthand properties."
          }
        },
        create(context) {
          const APPLY = context.options[0] || OPTIONS.always;
          const APPLY_TO_METHODS = APPLY === OPTIONS.methods || APPLY === OPTIONS.always;
          const APPLY_TO_PROPS = APPLY === OPTIONS.properties || APPLY === OPTIONS.always;
          const APPLY_NEVER = APPLY === OPTIONS.never;
          const APPLY_CONSISTENT = APPLY === OPTIONS.consistent;
          const APPLY_CONSISTENT_AS_NEEDED = APPLY === OPTIONS.consistentAsNeeded;
          const PARAMS = context.options[1] || {};
          const IGNORE_CONSTRUCTORS = PARAMS.ignoreConstructors;
          const AVOID_QUOTES = PARAMS.avoidQuotes;
          const AVOID_EXPLICIT_RETURN_ARROWS = !!PARAMS.avoidExplicitReturnArrows;
          const sourceCode = context.getSourceCode();
          const CTOR_PREFIX_REGEX = /[^_$0-9]/u;
          function isConstructor(name) {
            const match = CTOR_PREFIX_REGEX.exec(name);
            if (!match) {
              return false;
            }
            const firstChar = name.charAt(match.index);
            return firstChar === firstChar.toUpperCase();
          }
          function canHaveShorthand(property) {
            return property.kind !== "set" && property.kind !== "get" && property.type !== "SpreadElement" && property.type !== "SpreadProperty" && property.type !== "ExperimentalSpreadProperty";
          }
          function isStringLiteral(node) {
            return node.type === "Literal" && typeof node.value === "string";
          }
          function isShorthand(property) {
            return property.shorthand || property.method;
          }
          function isRedundant(property) {
            const value = property.value;
            if (value.type === "FunctionExpression") {
              return !value.id;
            }
            if (value.type === "Identifier") {
              return astUtils$1j.getStaticPropertyName(property) === value.name;
            }
            return false;
          }
          function checkConsistency(node, checkRedundancy) {
            const properties = node.properties.filter(canHaveShorthand);
            if (properties.length > 0) {
              const shorthandProperties = properties.filter(isShorthand);
              if (shorthandProperties.length !== properties.length) {
                if (shorthandProperties.length > 0) {
                  context.report({
                    node,
                    messageId: "unexpectedMix"
                  });
                } else if (checkRedundancy) {
                  const canAlwaysUseShorthand = properties.every(isRedundant);
                  if (canAlwaysUseShorthand) {
                    context.report({
                      node,
                      messageId: "expectedAllPropertiesShorthanded"
                    });
                  }
                }
              }
            }
          }
          function makeFunctionShorthand(fixer, node) {
            const firstKeyToken = node.computed ? sourceCode.getFirstToken(node, astUtils$1j.isOpeningBracketToken) : sourceCode.getFirstToken(node.key);
            const lastKeyToken = node.computed ? sourceCode.getFirstTokenBetween(node.key, node.value, astUtils$1j.isClosingBracketToken) : sourceCode.getLastToken(node.key);
            const keyText = sourceCode.text.slice(firstKeyToken.range[0], lastKeyToken.range[1]);
            let keyPrefix = "";
            if (sourceCode.commentsExistBetween(lastKeyToken, node.value)) {
              return null;
            }
            if (node.value.async) {
              keyPrefix += "async ";
            }
            if (node.value.generator) {
              keyPrefix += "*";
            }
            const fixRange = [
              firstKeyToken.range[0],
              node.range[1]
            ];
            const methodPrefix = keyPrefix + keyText;
            if (node.value.type === "FunctionExpression") {
              const functionToken = sourceCode.getTokens(node.value).find(token => token.type === "Keyword" && token.value === "function");
              const tokenBeforeParams = node.value.generator ? sourceCode.getTokenAfter(functionToken) : functionToken;
              return fixer.replaceTextRange(fixRange, methodPrefix + sourceCode.text.slice(tokenBeforeParams.range[1], node.value.range[1]));
            }
            const arrowToken = sourceCode.getTokenBefore(node.value.body, astUtils$1j.isArrowToken);
            const fnBody = sourceCode.text.slice(arrowToken.range[1], node.value.range[1]);
            let shouldAddParensAroundParameters = false;
            let tokenBeforeParams;
            if (node.value.params.length === 0) {
              tokenBeforeParams = sourceCode.getFirstToken(node.value, astUtils$1j.isOpeningParenToken);
            } else {
              tokenBeforeParams = sourceCode.getTokenBefore(node.value.params[0]);
            }
            if (node.value.params.length === 1) {
              const hasParen = astUtils$1j.isOpeningParenToken(tokenBeforeParams);
              const isTokenOutsideNode = tokenBeforeParams.range[0] < node.range[0];
              shouldAddParensAroundParameters = !hasParen || isTokenOutsideNode;
            }
            const sliceStart = shouldAddParensAroundParameters ? node.value.params[0].range[0] : tokenBeforeParams.range[0];
            const sliceEnd = sourceCode.getTokenBefore(arrowToken).range[1];
            const oldParamText = sourceCode.text.slice(sliceStart, sliceEnd);
            const newParamText = shouldAddParensAroundParameters ? `(${ oldParamText })` : oldParamText;
            return fixer.replaceTextRange(fixRange, methodPrefix + newParamText + fnBody);
          }
          function makeFunctionLongform(fixer, node) {
            const firstKeyToken = node.computed ? sourceCode.getTokens(node).find(token => token.value === "[") : sourceCode.getFirstToken(node.key);
            const lastKeyToken = node.computed ? sourceCode.getTokensBetween(node.key, node.value).find(token => token.value === "]") : sourceCode.getLastToken(node.key);
            const keyText = sourceCode.text.slice(firstKeyToken.range[0], lastKeyToken.range[1]);
            let functionHeader = "function";
            if (node.value.async) {
              functionHeader = `async ${ functionHeader }`;
            }
            if (node.value.generator) {
              functionHeader = `${ functionHeader }*`;
            }
            return fixer.replaceTextRange([
              node.range[0],
              lastKeyToken.range[1]
            ], `${ keyText }: ${ functionHeader }`);
          }
          const lexicalScopeStack = [];
          const arrowsWithLexicalIdentifiers = new WeakSet();
          const argumentsIdentifiers = new WeakSet();
          function enterFunction() {
            lexicalScopeStack.unshift(new Set());
            context.getScope().variables.filter(variable => variable.name === "arguments").forEach(variable => {
              variable.references.map(ref => ref.identifier).forEach(identifier => argumentsIdentifiers.add(identifier));
            });
          }
          function exitFunction() {
            lexicalScopeStack.shift();
          }
          function reportLexicalIdentifier() {
            lexicalScopeStack[0].forEach(arrowFunction => arrowsWithLexicalIdentifiers.add(arrowFunction));
          }
          return {
            Program: enterFunction,
            FunctionDeclaration: enterFunction,
            FunctionExpression: enterFunction,
            "Program:exit": exitFunction,
            "FunctionDeclaration:exit": exitFunction,
            "FunctionExpression:exit": exitFunction,
            ArrowFunctionExpression(node) {
              lexicalScopeStack[0].add(node);
            },
            "ArrowFunctionExpression:exit"(node) {
              lexicalScopeStack[0].delete(node);
            },
            ThisExpression: reportLexicalIdentifier,
            Super: reportLexicalIdentifier,
            MetaProperty(node) {
              if (node.meta.name === "new" && node.property.name === "target") {
                reportLexicalIdentifier();
              }
            },
            Identifier(node) {
              if (argumentsIdentifiers.has(node)) {
                reportLexicalIdentifier();
              }
            },
            ObjectExpression(node) {
              if (APPLY_CONSISTENT) {
                checkConsistency(node, false);
              } else if (APPLY_CONSISTENT_AS_NEEDED) {
                checkConsistency(node, true);
              }
            },
            "Property:exit"(node) {
              const isConciseProperty = node.method || node.shorthand;
              if (node.parent.type === "ObjectPattern") {
                return;
              }
              if (node.kind === "get" || node.kind === "set") {
                return;
              }
              if (node.computed && node.value.type !== "FunctionExpression" && node.value.type !== "ArrowFunctionExpression") {
                return;
              }
              if (isConciseProperty) {
                if (node.method && (APPLY_NEVER || AVOID_QUOTES && isStringLiteral(node.key))) {
                  const messageId = APPLY_NEVER ? "expectedMethodLongform" : "expectedLiteralMethodLongform";
                  context.report({
                    node,
                    messageId,
                    fix: fixer => makeFunctionLongform(fixer, node)
                  });
                } else if (APPLY_NEVER) {
                  context.report({
                    node,
                    messageId: "expectedPropertyLongform",
                    fix: fixer => fixer.insertTextAfter(node.key, `: ${ node.key.name }`)
                  });
                }
              } else if (APPLY_TO_METHODS && !node.value.id && (node.value.type === "FunctionExpression" || node.value.type === "ArrowFunctionExpression")) {
                if (IGNORE_CONSTRUCTORS && node.key.type === "Identifier" && isConstructor(node.key.name)) {
                  return;
                }
                if (AVOID_QUOTES && isStringLiteral(node.key)) {
                  return;
                }
                if (node.value.type === "FunctionExpression" || node.value.type === "ArrowFunctionExpression" && node.value.body.type === "BlockStatement" && AVOID_EXPLICIT_RETURN_ARROWS && !arrowsWithLexicalIdentifiers.has(node.value)) {
                  context.report({
                    node,
                    messageId: "expectedMethodShorthand",
                    fix: fixer => makeFunctionShorthand(fixer, node)
                  });
                }
              } else if (node.value.type === "Identifier" && node.key.name === node.value.name && APPLY_TO_PROPS) {
                context.report({
                  node,
                  messageId: "expectedPropertyShorthand",
                  fix(fixer) {
                    return fixer.replaceText(node, node.value.name);
                  }
                });
              } else if (node.value.type === "Identifier" && node.key.type === "Literal" && node.key.value === node.value.name && APPLY_TO_PROPS) {
                if (AVOID_QUOTES) {
                  return;
                }
                context.report({
                  node,
                  messageId: "expectedPropertyShorthand",
                  fix(fixer) {
                    return fixer.replaceText(node, node.value.name);
                  }
                });
              }
            }
          };
        }
      };
      var _objectShorthand = exports$2x;

      var exports$2w = {};
      const astUtils$1i = _astUtils;
      exports$2w = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent linebreak style for operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/operator-linebreak"
          },
          schema: [
            {
              enum: [
                "after",
                "before",
                "none",
                null
              ]
            },
            {
              type: "object",
              properties: {
                overrides: {
                  type: "object",
                  additionalProperties: {
                    enum: [
                      "after",
                      "before",
                      "none",
                      "ignore"
                    ]
                  }
                }
              },
              additionalProperties: false
            }
          ],
          fixable: "code",
          messages: {
            operatorAtBeginning: "'{{operator}}' should be placed at the beginning of the line.",
            operatorAtEnd: "'{{operator}}' should be placed at the end of the line.",
            badLinebreak: "Bad line breaking before and after '{{operator}}'.",
            noLinebreak: "There should be no line break before or after '{{operator}}'."
          }
        },
        create(context) {
          const usedDefaultGlobal = !context.options[0];
          const globalStyle = context.options[0] || "after";
          const options = context.options[1] || {};
          const styleOverrides = options.overrides ? Object.assign({}, options.overrides) : {};
          if (usedDefaultGlobal && !styleOverrides["?"]) {
            styleOverrides["?"] = "before";
          }
          if (usedDefaultGlobal && !styleOverrides[":"]) {
            styleOverrides[":"] = "before";
          }
          const sourceCode = context.getSourceCode();
          function getFixer(operatorToken, desiredStyle) {
            return fixer => {
              const tokenBefore = sourceCode.getTokenBefore(operatorToken);
              const tokenAfter = sourceCode.getTokenAfter(operatorToken);
              const textBefore = sourceCode.text.slice(tokenBefore.range[1], operatorToken.range[0]);
              const textAfter = sourceCode.text.slice(operatorToken.range[1], tokenAfter.range[0]);
              const hasLinebreakBefore = !astUtils$1i.isTokenOnSameLine(tokenBefore, operatorToken);
              const hasLinebreakAfter = !astUtils$1i.isTokenOnSameLine(operatorToken, tokenAfter);
              let newTextBefore, newTextAfter;
              if (hasLinebreakBefore !== hasLinebreakAfter && desiredStyle !== "none") {
                if (sourceCode.getTokenBefore(operatorToken, { includeComments: true }) !== tokenBefore && sourceCode.getTokenAfter(operatorToken, { includeComments: true }) !== tokenAfter) {
                  return null;
                }
                newTextBefore = textAfter;
                newTextAfter = textBefore;
              } else {
                const LINEBREAK_REGEX = astUtils$1i.createGlobalLinebreakMatcher();
                newTextBefore = desiredStyle === "before" || textBefore.trim() ? textBefore : textBefore.replace(LINEBREAK_REGEX, "");
                newTextAfter = desiredStyle === "after" || textAfter.trim() ? textAfter : textAfter.replace(LINEBREAK_REGEX, "");
                if (newTextBefore === textBefore && newTextAfter === textAfter) {
                  return null;
                }
              }
              if (newTextAfter === "" && tokenAfter.type === "Punctuator" && "+-".includes(operatorToken.value) && tokenAfter.value === operatorToken.value) {
                newTextAfter += " ";
              }
              return fixer.replaceTextRange([
                tokenBefore.range[1],
                tokenAfter.range[0]
              ], newTextBefore + operatorToken.value + newTextAfter);
            };
          }
          function validateNode(node, leftSide) {
            const operatorToken = sourceCode.getTokenAfter(leftSide, astUtils$1i.isNotClosingParenToken);
            const leftToken = sourceCode.getTokenBefore(operatorToken);
            const rightToken = sourceCode.getTokenAfter(operatorToken);
            const operator = operatorToken.value;
            const operatorStyleOverride = styleOverrides[operator];
            const style = operatorStyleOverride || globalStyle;
            const fix = getFixer(operatorToken, style);
            if (astUtils$1i.isTokenOnSameLine(leftToken, operatorToken) && astUtils$1i.isTokenOnSameLine(operatorToken, rightToken)) ; else if (operatorStyleOverride !== "ignore" && !astUtils$1i.isTokenOnSameLine(leftToken, operatorToken) && !astUtils$1i.isTokenOnSameLine(operatorToken, rightToken)) {
              context.report({
                node,
                loc: operatorToken.loc,
                messageId: "badLinebreak",
                data: { operator },
                fix
              });
            } else if (style === "before" && astUtils$1i.isTokenOnSameLine(leftToken, operatorToken)) {
              context.report({
                node,
                loc: operatorToken.loc,
                messageId: "operatorAtBeginning",
                data: { operator },
                fix
              });
            } else if (style === "after" && astUtils$1i.isTokenOnSameLine(operatorToken, rightToken)) {
              context.report({
                node,
                loc: operatorToken.loc,
                messageId: "operatorAtEnd",
                data: { operator },
                fix
              });
            } else if (style === "none") {
              context.report({
                node,
                loc: operatorToken.loc,
                messageId: "noLinebreak",
                data: { operator },
                fix
              });
            }
          }
          function validateBinaryExpression(node) {
            validateNode(node, node.left);
          }
          return {
            BinaryExpression: validateBinaryExpression,
            LogicalExpression: validateBinaryExpression,
            AssignmentExpression: validateBinaryExpression,
            VariableDeclarator(node) {
              if (node.init) {
                validateNode(node, node.id);
              }
            },
            ConditionalExpression(node) {
              validateNode(node, node.test);
              validateNode(node, node.consequent);
            }
          };
        }
      };
      var _operatorLinebreak = exports$2w;

      var exports$2v = {};
      const astUtils$1h = _astUtils;
      exports$2v = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow padding within blocks",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/padded-blocks"
          },
          fixable: "whitespace",
          schema: [
            {
              oneOf: [
                {
                  enum: [
                    "always",
                    "never"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    blocks: {
                      enum: [
                        "always",
                        "never"
                      ]
                    },
                    switches: {
                      enum: [
                        "always",
                        "never"
                      ]
                    },
                    classes: {
                      enum: [
                        "always",
                        "never"
                      ]
                    }
                  },
                  additionalProperties: false,
                  minProperties: 1
                }
              ]
            },
            {
              type: "object",
              properties: { allowSingleLineBlocks: { type: "boolean" } },
              additionalProperties: false
            }
          ],
          messages: {
            alwaysPadBlock: "Block must be padded by blank lines.",
            neverPadBlock: "Block must not be padded by blank lines."
          }
        },
        create(context) {
          const options = {};
          const typeOptions = context.options[0] || "always";
          const exceptOptions = context.options[1] || {};
          if (typeof typeOptions === "string") {
            const shouldHavePadding = typeOptions === "always";
            options.blocks = shouldHavePadding;
            options.switches = shouldHavePadding;
            options.classes = shouldHavePadding;
          } else {
            if (Object.prototype.hasOwnProperty.call(typeOptions, "blocks")) {
              options.blocks = typeOptions.blocks === "always";
            }
            if (Object.prototype.hasOwnProperty.call(typeOptions, "switches")) {
              options.switches = typeOptions.switches === "always";
            }
            if (Object.prototype.hasOwnProperty.call(typeOptions, "classes")) {
              options.classes = typeOptions.classes === "always";
            }
          }
          if (Object.prototype.hasOwnProperty.call(exceptOptions, "allowSingleLineBlocks")) {
            options.allowSingleLineBlocks = exceptOptions.allowSingleLineBlocks === true;
          }
          const sourceCode = context.getSourceCode();
          function getOpenBrace(node) {
            if (node.type === "SwitchStatement") {
              return sourceCode.getTokenBefore(node.cases[0]);
            }
            return sourceCode.getFirstToken(node);
          }
          function isComment(node) {
            return node.type === "Line" || node.type === "Block";
          }
          function isPaddingBetweenTokens(first, second) {
            return second.loc.start.line - first.loc.end.line >= 2;
          }
          function getFirstBlockToken(token) {
            let prev, first = token;
            do {
              prev = first;
              first = sourceCode.getTokenAfter(first, { includeComments: true });
            } while (isComment(first) && first.loc.start.line === prev.loc.end.line);
            return first;
          }
          function getLastBlockToken(token) {
            let last = token, next;
            do {
              next = last;
              last = sourceCode.getTokenBefore(last, { includeComments: true });
            } while (isComment(last) && last.loc.end.line === next.loc.start.line);
            return last;
          }
          function requirePaddingFor(node) {
            switch (node.type) {
            case "BlockStatement":
              return options.blocks;
            case "SwitchStatement":
              return options.switches;
            case "ClassBody":
              return options.classes;
            default:
              throw new Error("unreachable");
            }
          }
          function checkPadding(node) {
            const openBrace = getOpenBrace(node), firstBlockToken = getFirstBlockToken(openBrace), tokenBeforeFirst = sourceCode.getTokenBefore(firstBlockToken, { includeComments: true }), closeBrace = sourceCode.getLastToken(node), lastBlockToken = getLastBlockToken(closeBrace), tokenAfterLast = sourceCode.getTokenAfter(lastBlockToken, { includeComments: true }), blockHasTopPadding = isPaddingBetweenTokens(tokenBeforeFirst, firstBlockToken), blockHasBottomPadding = isPaddingBetweenTokens(lastBlockToken, tokenAfterLast);
            if (options.allowSingleLineBlocks && astUtils$1h.isTokenOnSameLine(tokenBeforeFirst, tokenAfterLast)) {
              return;
            }
            if (requirePaddingFor(node)) {
              if (!blockHasTopPadding) {
                context.report({
                  node,
                  loc: {
                    start: tokenBeforeFirst.loc.start,
                    end: firstBlockToken.loc.start
                  },
                  fix(fixer) {
                    return fixer.insertTextAfter(tokenBeforeFirst, "\n");
                  },
                  messageId: "alwaysPadBlock"
                });
              }
              if (!blockHasBottomPadding) {
                context.report({
                  node,
                  loc: {
                    end: tokenAfterLast.loc.start,
                    start: lastBlockToken.loc.end
                  },
                  fix(fixer) {
                    return fixer.insertTextBefore(tokenAfterLast, "\n");
                  },
                  messageId: "alwaysPadBlock"
                });
              }
            } else {
              if (blockHasTopPadding) {
                context.report({
                  node,
                  loc: {
                    start: tokenBeforeFirst.loc.start,
                    end: firstBlockToken.loc.start
                  },
                  fix(fixer) {
                    return fixer.replaceTextRange([
                      tokenBeforeFirst.range[1],
                      firstBlockToken.range[0] - firstBlockToken.loc.start.column
                    ], "\n");
                  },
                  messageId: "neverPadBlock"
                });
              }
              if (blockHasBottomPadding) {
                context.report({
                  node,
                  loc: {
                    end: tokenAfterLast.loc.start,
                    start: lastBlockToken.loc.end
                  },
                  messageId: "neverPadBlock",
                  fix(fixer) {
                    return fixer.replaceTextRange([
                      lastBlockToken.range[1],
                      tokenAfterLast.range[0] - tokenAfterLast.loc.start.column
                    ], "\n");
                  }
                });
              }
            }
          }
          const rule = {};
          if (Object.prototype.hasOwnProperty.call(options, "switches")) {
            rule.SwitchStatement = function (node) {
              if (node.cases.length === 0) {
                return;
              }
              checkPadding(node);
            };
          }
          if (Object.prototype.hasOwnProperty.call(options, "blocks")) {
            rule.BlockStatement = function (node) {
              if (node.body.length === 0) {
                return;
              }
              checkPadding(node);
            };
          }
          if (Object.prototype.hasOwnProperty.call(options, "classes")) {
            rule.ClassBody = function (node) {
              if (node.body.length === 0) {
                return;
              }
              checkPadding(node);
            };
          }
          return rule;
        }
      };
      var _paddedBlocks = exports$2v;

      var exports$2u = {};
      const FixTracker$3 = _fixTracker;
      const astUtils$1g = _astUtils;
      const PATTERN_TYPE = /^(?:.+?Pattern|RestElement|SpreadProperty|ExperimentalRestProperty|Property)$/u;
      const DECLARATION_HOST_TYPE = /^(?:Program|BlockStatement|SwitchCase)$/u;
      const DESTRUCTURING_HOST_TYPE = /^(?:VariableDeclarator|AssignmentExpression)$/u;
      function isInitOfForStatement(node) {
        return node.parent.type === "ForStatement" && node.parent.init === node;
      }
      function canBecomeVariableDeclaration(identifier) {
        let node = identifier.parent;
        while (PATTERN_TYPE.test(node.type)) {
          node = node.parent;
        }
        return node.type === "VariableDeclarator" || node.type === "AssignmentExpression" && node.parent.type === "ExpressionStatement" && DECLARATION_HOST_TYPE.test(node.parent.parent.type);
      }
      function isOuterVariableInDestructing(name, initScope) {
        if (initScope.through.find(ref => ref.resolved && ref.resolved.name === name)) {
          return true;
        }
        const variable = astUtils$1g.getVariableByName(initScope, name);
        if (variable !== null) {
          return variable.defs.some(def => def.type === "Parameter");
        }
        return false;
      }
      function getDestructuringHost(reference) {
        if (!reference.isWrite()) {
          return null;
        }
        let node = reference.identifier.parent;
        while (PATTERN_TYPE.test(node.type)) {
          node = node.parent;
        }
        if (!DESTRUCTURING_HOST_TYPE.test(node.type)) {
          return null;
        }
        return node;
      }
      function hasMemberExpressionAssignment(node) {
        switch (node.type) {
        case "ObjectPattern":
          return node.properties.some(prop => {
            if (prop) {
              return hasMemberExpressionAssignment(prop.argument || prop.value);
            }
            return false;
          });
        case "ArrayPattern":
          return node.elements.some(element => {
            if (element) {
              return hasMemberExpressionAssignment(element);
            }
            return false;
          });
        case "AssignmentPattern":
          return hasMemberExpressionAssignment(node.left);
        case "MemberExpression":
          return true;
        }
        return false;
      }
      function getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign) {
        if (variable.eslintUsed && variable.scope.type === "global") {
          return null;
        }
        let writer = null;
        let isReadBeforeInit = false;
        const references = variable.references;
        for (let i = 0; i < references.length; ++i) {
          const reference = references[i];
          if (reference.isWrite()) {
            const isReassigned = writer !== null && writer.identifier !== reference.identifier;
            if (isReassigned) {
              return null;
            }
            const destructuringHost = getDestructuringHost(reference);
            if (destructuringHost !== null && destructuringHost.left !== void 0) {
              const leftNode = destructuringHost.left;
              let hasOuterVariables = false, hasNonIdentifiers = false;
              if (leftNode.type === "ObjectPattern") {
                const properties = leftNode.properties;
                hasOuterVariables = properties.filter(prop => prop.value).map(prop => prop.value.name).some(name => isOuterVariableInDestructing(name, variable.scope));
                hasNonIdentifiers = hasMemberExpressionAssignment(leftNode);
              } else if (leftNode.type === "ArrayPattern") {
                const elements = leftNode.elements;
                hasOuterVariables = elements.map(element => element && element.name).some(name => isOuterVariableInDestructing(name, variable.scope));
                hasNonIdentifiers = hasMemberExpressionAssignment(leftNode);
              }
              if (hasOuterVariables || hasNonIdentifiers) {
                return null;
              }
            }
            writer = reference;
          } else if (reference.isRead() && writer === null) {
            if (ignoreReadBeforeAssign) {
              return null;
            }
            isReadBeforeInit = true;
          }
        }
        const shouldBeConst = writer !== null && writer.from === variable.scope && canBecomeVariableDeclaration(writer.identifier);
        if (!shouldBeConst) {
          return null;
        }
        if (isReadBeforeInit) {
          return variable.defs[0].name;
        }
        return writer.identifier;
      }
      function groupByDestructuring(variables, ignoreReadBeforeAssign) {
        const identifierMap = new Map();
        for (let i = 0; i < variables.length; ++i) {
          const variable = variables[i];
          const references = variable.references;
          const identifier = getIdentifierIfShouldBeConst(variable, ignoreReadBeforeAssign);
          let prevId = null;
          for (let j = 0; j < references.length; ++j) {
            const reference = references[j];
            const id = reference.identifier;
            if (id === prevId) {
              continue;
            }
            prevId = id;
            const group = getDestructuringHost(reference);
            if (group) {
              if (identifierMap.has(group)) {
                identifierMap.get(group).push(identifier);
              } else {
                identifierMap.set(group, [identifier]);
              }
            }
          }
        }
        return identifierMap;
      }
      function findUp(node, type, shouldStop) {
        if (!node || shouldStop(node)) {
          return null;
        }
        if (node.type === type) {
          return node;
        }
        return findUp(node.parent, type, shouldStop);
      }
      exports$2u = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `const` declarations for variables that are never reassigned after declared",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-const"
          },
          fixable: "code",
          schema: [{
              type: "object",
              properties: {
                destructuring: {
                  enum: [
                    "any",
                    "all"
                  ],
                  default: "any"
                },
                ignoreReadBeforeAssign: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { useConst: "'{{name}}' is never reassigned. Use 'const' instead." }
        },
        create(context) {
          const options = context.options[0] || {};
          const sourceCode = context.getSourceCode();
          const shouldMatchAnyDestructuredVariable = options.destructuring !== "all";
          const ignoreReadBeforeAssign = options.ignoreReadBeforeAssign === true;
          const variables = [];
          let reportCount = 0;
          let checkedId = null;
          let checkedName = "";
          function checkGroup(nodes) {
            const nodesToReport = nodes.filter(Boolean);
            if (nodes.length && (shouldMatchAnyDestructuredVariable || nodesToReport.length === nodes.length)) {
              const varDeclParent = findUp(nodes[0], "VariableDeclaration", parentNode => parentNode.type.endsWith("Statement"));
              const isVarDecParentNull = varDeclParent === null;
              if (!isVarDecParentNull && varDeclParent.declarations.length > 0) {
                const firstDeclaration = varDeclParent.declarations[0];
                if (firstDeclaration.init) {
                  const firstDecParent = firstDeclaration.init.parent;
                  if (firstDecParent.type === "VariableDeclarator") {
                    if (firstDecParent.id.name !== checkedName) {
                      checkedName = firstDecParent.id.name;
                      reportCount = 0;
                    }
                    if (firstDecParent.id.type === "ObjectPattern") {
                      if (firstDecParent.init.name !== checkedName) {
                        checkedName = firstDecParent.init.name;
                        reportCount = 0;
                      }
                    }
                    if (firstDecParent.id !== checkedId) {
                      checkedId = firstDecParent.id;
                      reportCount = 0;
                    }
                  }
                }
              }
              let shouldFix = varDeclParent && (varDeclParent.parent.type === "ForInStatement" || varDeclParent.parent.type === "ForOfStatement" || varDeclParent.declarations.every(declaration => declaration.init)) && nodesToReport.length === nodes.length;
              if (!isVarDecParentNull && varDeclParent.declarations && varDeclParent.declarations.length !== 1) {
                if (varDeclParent && varDeclParent.declarations && varDeclParent.declarations.length >= 1) {
                  reportCount += nodesToReport.length;
                  shouldFix = shouldFix && reportCount === varDeclParent.declarations.length;
                }
              }
              nodesToReport.forEach(node => {
                context.report({
                  node,
                  messageId: "useConst",
                  data: node,
                  fix: shouldFix ? fixer => {
                    const letKeywordToken = sourceCode.getFirstToken(varDeclParent, t => t.value === varDeclParent.kind);
                    return new FixTracker$3(fixer, sourceCode).retainRange(varDeclParent.range).replaceTextRange(letKeywordToken.range, "const");
                  } : null
                });
              });
            }
          }
          return {
            "Program:exit"() {
              groupByDestructuring(variables, ignoreReadBeforeAssign).forEach(checkGroup);
            },
            VariableDeclaration(node) {
              if (node.kind === "let" && !isInitOfForStatement(node)) {
                variables.push(...context.getDeclaredVariables(node));
              }
            }
          };
        }
      };
      var _preferConst = exports$2u;

      var exports$2t = {};
      const astUtils$1f = _astUtils;
      const radixMap = new Map([
        [
          2,
          {
            system: "binary",
            literalPrefix: "0b"
          }
        ],
        [
          8,
          {
            system: "octal",
            literalPrefix: "0o"
          }
        ],
        [
          16,
          {
            system: "hexadecimal",
            literalPrefix: "0x"
          }
        ]
      ]);
      function isParseInt(calleeNode) {
        return astUtils$1f.isSpecificId(calleeNode, "parseInt") || astUtils$1f.isSpecificMemberAccess(calleeNode, "Number", "parseInt");
      }
      exports$2t = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-numeric-literals"
          },
          schema: [],
          messages: { useLiteral: "Use {{system}} literals instead of {{functionName}}()." },
          fixable: "code"
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            "CallExpression[arguments.length=2]"(node) {
              const [strNode, radixNode] = node.arguments, str = astUtils$1f.getStaticStringValue(strNode), radix = radixNode.value;
              if (str !== null && astUtils$1f.isStringLiteral(strNode) && radixNode.type === "Literal" && typeof radix === "number" && radixMap.has(radix) && isParseInt(node.callee)) {
                const {system, literalPrefix} = radixMap.get(radix);
                context.report({
                  node,
                  messageId: "useLiteral",
                  data: {
                    system,
                    functionName: sourceCode.getText(node.callee)
                  },
                  fix(fixer) {
                    if (sourceCode.getCommentsInside(node).length) {
                      return null;
                    }
                    const replacement = `${ literalPrefix }${ str }`;
                    if (+replacement !== parseInt(str, radix)) {
                      return null;
                    }
                    const tokenBefore = sourceCode.getTokenBefore(node), tokenAfter = sourceCode.getTokenAfter(node);
                    let prefix = "", suffix = "";
                    if (tokenBefore && tokenBefore.range[1] === node.range[0] && !astUtils$1f.canTokensBeAdjacent(tokenBefore, replacement)) {
                      prefix = " ";
                    }
                    if (tokenAfter && node.range[1] === tokenAfter.range[0] && !astUtils$1f.canTokensBeAdjacent(replacement, tokenAfter)) {
                      suffix = " ";
                    }
                    return fixer.replaceText(node, `${ prefix }${ replacement }${ suffix }`);
                  }
                });
              }
            }
          };
        }
      };
      var _preferNumericLiterals = exports$2t;

      var exports$2s = {};
      const astUtils$1e = _astUtils;
      exports$2s = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require using Error objects as Promise rejection reasons",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-promise-reject-errors"
          },
          fixable: null,
          schema: [{
              type: "object",
              properties: {
                allowEmptyReject: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { rejectAnError: "Expected the Promise rejection reason to be an Error." }
        },
        create(context) {
          const ALLOW_EMPTY_REJECT = context.options.length && context.options[0].allowEmptyReject;
          function checkRejectCall(callExpression) {
            if (!callExpression.arguments.length && ALLOW_EMPTY_REJECT) {
              return;
            }
            if (!callExpression.arguments.length || !astUtils$1e.couldBeError(callExpression.arguments[0]) || callExpression.arguments[0].type === "Identifier" && callExpression.arguments[0].name === "undefined") {
              context.report({
                node: callExpression,
                messageId: "rejectAnError"
              });
            }
          }
          function isPromiseRejectCall(node) {
            return astUtils$1e.isSpecificMemberAccess(node.callee, "Promise", "reject");
          }
          return {
            CallExpression(node) {
              if (isPromiseRejectCall(node)) {
                checkRejectCall(node);
              }
            },
            "NewExpression:exit"(node) {
              if (node.callee.type === "Identifier" && node.callee.name === "Promise" && node.arguments.length && astUtils$1e.isFunction(node.arguments[0]) && node.arguments[0].params.length > 1 && node.arguments[0].params[1].type === "Identifier") {
                context.getDeclaredVariables(node.arguments[0]).find(variable => variable.name === node.arguments[0].params[1].name).references.filter(ref => ref.isRead()).filter(ref => ref.identifier.parent.type === "CallExpression" && ref.identifier === ref.identifier.parent.callee).forEach(ref => checkRejectCall(ref.identifier.parent));
              }
            }
          };
        }
      };
      var _preferPromiseRejectErrors = exports$2s;

      var exports$2r = {};
      function getVariableOfArguments$1(scope) {
        const variables = scope.variables;
        for (let i = 0; i < variables.length; ++i) {
          const variable = variables[i];
          if (variable.name === "arguments") {
            return variable.identifiers.length === 0 ? variable : null;
          }
        }
        return null;
      }
      function isNotNormalMemberAccess(reference) {
        const id = reference.identifier;
        const parent = id.parent;
        return !(parent.type === "MemberExpression" && parent.object === id && !parent.computed);
      }
      exports$2r = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require rest parameters instead of `arguments`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-rest-params"
          },
          schema: [],
          messages: { preferRestParams: "Use the rest parameters instead of 'arguments'." }
        },
        create(context) {
          function report(reference) {
            context.report({
              node: reference.identifier,
              loc: reference.identifier.loc,
              messageId: "preferRestParams"
            });
          }
          function checkForArguments() {
            const argumentsVar = getVariableOfArguments$1(context.getScope());
            if (argumentsVar) {
              argumentsVar.references.filter(isNotNormalMemberAccess).forEach(report);
            }
          }
          return {
            "FunctionDeclaration:exit": checkForArguments,
            "FunctionExpression:exit": checkForArguments
          };
        }
      };
      var _preferRestParams = exports$2r;

      var exports$2q = {};
      const astUtils$1d = _astUtils;
      function isVariadicApplyCalling(node) {
        return astUtils$1d.isSpecificMemberAccess(node.callee, null, "apply") && node.arguments.length === 2 && node.arguments[1].type !== "ArrayExpression" && node.arguments[1].type !== "SpreadElement";
      }
      function isValidThisArg(expectedThis, thisArg, context) {
        if (!expectedThis) {
          return astUtils$1d.isNullOrUndefined(thisArg);
        }
        return astUtils$1d.equalTokens(expectedThis, thisArg, context);
      }
      exports$2q = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require spread operators instead of `.apply()`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-spread"
          },
          schema: [],
          fixable: null,
          messages: { preferSpread: "Use the spread operator instead of '.apply()'." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            CallExpression(node) {
              if (!isVariadicApplyCalling(node)) {
                return;
              }
              const applied = astUtils$1d.skipChainExpression(astUtils$1d.skipChainExpression(node.callee).object);
              const expectedThis = applied.type === "MemberExpression" ? applied.object : null;
              const thisArg = node.arguments[0];
              if (isValidThisArg(expectedThis, thisArg, sourceCode)) {
                context.report({
                  node,
                  messageId: "preferSpread"
                });
              }
            }
          };
        }
      };
      var _preferSpread = exports$2q;

      var exports$2p = {};
      const astUtils$1c = _astUtils;
      function isConcatenation(node) {
        return node.type === "BinaryExpression" && node.operator === "+";
      }
      function getTopConcatBinaryExpression(node) {
        let currentNode = node;
        while (isConcatenation(currentNode.parent)) {
          currentNode = currentNode.parent;
        }
        return currentNode;
      }
      function hasOctalOrNonOctalDecimalEscapeSequence(node) {
        if (isConcatenation(node)) {
          return hasOctalOrNonOctalDecimalEscapeSequence(node.left) || hasOctalOrNonOctalDecimalEscapeSequence(node.right);
        }
        if (node.type === "Literal" && typeof node.value === "string") {
          return astUtils$1c.hasOctalOrNonOctalDecimalEscapeSequence(node.raw);
        }
        return false;
      }
      function hasStringLiteral(node) {
        if (isConcatenation(node)) {
          return hasStringLiteral(node.right) || hasStringLiteral(node.left);
        }
        return astUtils$1c.isStringLiteral(node);
      }
      function hasNonStringLiteral(node) {
        if (isConcatenation(node)) {
          return hasNonStringLiteral(node.right) || hasNonStringLiteral(node.left);
        }
        return !astUtils$1c.isStringLiteral(node);
      }
      function startsWithTemplateCurly(node) {
        if (node.type === "BinaryExpression") {
          return startsWithTemplateCurly(node.left);
        }
        if (node.type === "TemplateLiteral") {
          return node.expressions.length && node.quasis.length && node.quasis[0].range[0] === node.quasis[0].range[1];
        }
        return node.type !== "Literal" || typeof node.value !== "string";
      }
      function endsWithTemplateCurly(node) {
        if (node.type === "BinaryExpression") {
          return startsWithTemplateCurly(node.right);
        }
        if (node.type === "TemplateLiteral") {
          return node.expressions.length && node.quasis.length && node.quasis[node.quasis.length - 1].range[0] === node.quasis[node.quasis.length - 1].range[1];
        }
        return node.type !== "Literal" || typeof node.value !== "string";
      }
      exports$2p = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require template literals instead of string concatenation",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-template"
          },
          schema: [],
          fixable: "code",
          messages: { unexpectedStringConcatenation: "Unexpected string concatenation." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let done = Object.create(null);
          function getTextBetween(node1, node2) {
            const allTokens = [node1].concat(sourceCode.getTokensBetween(node1, node2)).concat(node2);
            const sourceText = sourceCode.getText();
            return allTokens.slice(0, -1).reduce((accumulator, token, index) => accumulator + sourceText.slice(token.range[1], allTokens[index + 1].range[0]), "");
          }
          function getTemplateLiteral(currentNode, textBeforeNode, textAfterNode) {
            if (currentNode.type === "Literal" && typeof currentNode.value === "string") {
              return `\`${ currentNode.raw.slice(1, -1).replace(/\\*(\$\{|`)/gu, matched => {
          if (matched.lastIndexOf("\\") % 2) {
            return `\\${ matched }`;
          }
          return matched;
        }).replace(new RegExp(`\\\\${ currentNode.raw[0] }`, "gu"), currentNode.raw[0]) }\``;
            }
            if (currentNode.type === "TemplateLiteral") {
              return sourceCode.getText(currentNode);
            }
            if (isConcatenation(currentNode) && hasStringLiteral(currentNode) && hasNonStringLiteral(currentNode)) {
              const plusSign = sourceCode.getFirstTokenBetween(currentNode.left, currentNode.right, token => token.value === "+");
              const textBeforePlus = getTextBetween(currentNode.left, plusSign);
              const textAfterPlus = getTextBetween(plusSign, currentNode.right);
              const leftEndsWithCurly = endsWithTemplateCurly(currentNode.left);
              const rightStartsWithCurly = startsWithTemplateCurly(currentNode.right);
              if (leftEndsWithCurly) {
                return getTemplateLiteral(currentNode.left, textBeforeNode, textBeforePlus + textAfterPlus).slice(0, -1) + getTemplateLiteral(currentNode.right, null, textAfterNode).slice(1);
              }
              if (rightStartsWithCurly) {
                return getTemplateLiteral(currentNode.left, textBeforeNode, null).slice(0, -1) + getTemplateLiteral(currentNode.right, textBeforePlus + textAfterPlus, textAfterNode).slice(1);
              }
              return `${ getTemplateLiteral(currentNode.left, textBeforeNode, null) }${ textBeforePlus }+${ textAfterPlus }${ getTemplateLiteral(currentNode.right, textAfterNode, null) }`;
            }
            return `\`\${${ textBeforeNode || "" }${ sourceCode.getText(currentNode) }${ textAfterNode || "" }}\``;
          }
          function fixNonStringBinaryExpression(fixer, node) {
            const topBinaryExpr = getTopConcatBinaryExpression(node.parent);
            if (hasOctalOrNonOctalDecimalEscapeSequence(topBinaryExpr)) {
              return null;
            }
            return fixer.replaceText(topBinaryExpr, getTemplateLiteral(topBinaryExpr, null, null));
          }
          function checkForStringConcat(node) {
            if (!astUtils$1c.isStringLiteral(node) || !isConcatenation(node.parent)) {
              return;
            }
            const topBinaryExpr = getTopConcatBinaryExpression(node.parent);
            if (done[topBinaryExpr.range[0]]) {
              return;
            }
            done[topBinaryExpr.range[0]] = true;
            if (hasNonStringLiteral(topBinaryExpr)) {
              context.report({
                node: topBinaryExpr,
                messageId: "unexpectedStringConcatenation",
                fix: fixer => fixNonStringBinaryExpression(fixer, node)
              });
            }
          }
          return {
            Program() {
              done = Object.create(null);
            },
            Literal: checkForStringConcat,
            TemplateLiteral: checkForStringConcat
          };
        }
      };
      var _preferTemplate = exports$2p;

      var _espree$1 = "default" in _espree2 ? exports$4$7 : _espree2;
      var exports$2o = {};
      const espree$1 = _espree$1;
      const astUtils$1b = _astUtils;
      const keywords = _keywords;
      exports$2o = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require quotes around object literal property names",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/quote-props"
          },
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{
                    enum: [
                      "always",
                      "as-needed",
                      "consistent",
                      "consistent-as-needed"
                    ]
                  }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  {
                    enum: [
                      "always",
                      "as-needed",
                      "consistent",
                      "consistent-as-needed"
                    ]
                  },
                  {
                    type: "object",
                    properties: {
                      keywords: { type: "boolean" },
                      unnecessary: { type: "boolean" },
                      numbers: { type: "boolean" }
                    },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          fixable: "code",
          messages: {
            requireQuotesDueToReservedWord: "Properties should be quoted as '{{property}}' is a reserved word.",
            inconsistentlyQuotedProperty: "Inconsistently quoted property '{{key}}' found.",
            unnecessarilyQuotedProperty: "Unnecessarily quoted property '{{property}}' found.",
            unquotedReservedProperty: "Unquoted reserved word '{{property}}' used as key.",
            unquotedNumericProperty: "Unquoted number literal '{{property}}' used as key.",
            unquotedPropertyFound: "Unquoted property '{{property}}' found.",
            redundantQuoting: "Properties shouldn't be quoted as all quotes are redundant."
          }
        },
        create(context) {
          const MODE = context.options[0], KEYWORDS = context.options[1] && context.options[1].keywords, CHECK_UNNECESSARY = !context.options[1] || context.options[1].unnecessary !== false, NUMBERS = context.options[1] && context.options[1].numbers, sourceCode = context.getSourceCode();
          function isKeyword(tokenStr) {
            return keywords.indexOf(tokenStr) >= 0;
          }
          function areQuotesRedundant(rawKey, tokens, skipNumberLiterals) {
            return tokens.length === 1 && tokens[0].start === 0 && tokens[0].end === rawKey.length && ([
              "Identifier",
              "Keyword",
              "Null",
              "Boolean"
            ].indexOf(tokens[0].type) >= 0 || tokens[0].type === "Numeric" && !skipNumberLiterals && String(+tokens[0].value) === tokens[0].value);
          }
          function getUnquotedKey(key) {
            return key.type === "Identifier" ? key.name : key.value;
          }
          function getQuotedKey(key) {
            if (key.type === "Literal" && typeof key.value === "string") {
              return sourceCode.getText(key);
            }
            return `"${ key.type === "Identifier" ? key.name : key.value }"`;
          }
          function checkUnnecessaryQuotes(node) {
            const key = node.key;
            if (node.method || node.computed || node.shorthand) {
              return;
            }
            if (key.type === "Literal" && typeof key.value === "string") {
              let tokens;
              try {
                tokens = espree$1.tokenize(key.value);
              } catch {
                return;
              }
              if (tokens.length !== 1) {
                return;
              }
              const isKeywordToken = isKeyword(tokens[0].value);
              if (isKeywordToken && KEYWORDS) {
                return;
              }
              if (CHECK_UNNECESSARY && areQuotesRedundant(key.value, tokens, NUMBERS)) {
                context.report({
                  node,
                  messageId: "unnecessarilyQuotedProperty",
                  data: { property: key.value },
                  fix: fixer => fixer.replaceText(key, getUnquotedKey(key))
                });
              }
            } else if (KEYWORDS && key.type === "Identifier" && isKeyword(key.name)) {
              context.report({
                node,
                messageId: "unquotedReservedProperty",
                data: { property: key.name },
                fix: fixer => fixer.replaceText(key, getQuotedKey(key))
              });
            } else if (NUMBERS && key.type === "Literal" && astUtils$1b.isNumericLiteral(key)) {
              context.report({
                node,
                messageId: "unquotedNumericProperty",
                data: { property: key.value },
                fix: fixer => fixer.replaceText(key, getQuotedKey(key))
              });
            }
          }
          function checkOmittedQuotes(node) {
            const key = node.key;
            if (!node.method && !node.computed && !node.shorthand && !(key.type === "Literal" && typeof key.value === "string")) {
              context.report({
                node,
                messageId: "unquotedPropertyFound",
                data: { property: key.name || key.value },
                fix: fixer => fixer.replaceText(key, getQuotedKey(key))
              });
            }
          }
          function checkConsistency(node, checkQuotesRedundancy) {
            const quotedProps = [], unquotedProps = [];
            let keywordKeyName = null, necessaryQuotes = false;
            node.properties.forEach(property => {
              const key = property.key;
              if (!key || property.method || property.computed || property.shorthand) {
                return;
              }
              if (key.type === "Literal" && typeof key.value === "string") {
                quotedProps.push(property);
                if (checkQuotesRedundancy) {
                  let tokens;
                  try {
                    tokens = espree$1.tokenize(key.value);
                  } catch {
                    necessaryQuotes = true;
                    return;
                  }
                  necessaryQuotes = necessaryQuotes || !areQuotesRedundant(key.value, tokens) || KEYWORDS && isKeyword(tokens[0].value);
                }
              } else if (KEYWORDS && checkQuotesRedundancy && key.type === "Identifier" && isKeyword(key.name)) {
                unquotedProps.push(property);
                necessaryQuotes = true;
                keywordKeyName = key.name;
              } else {
                unquotedProps.push(property);
              }
            });
            if (checkQuotesRedundancy && quotedProps.length && !necessaryQuotes) {
              quotedProps.forEach(property => {
                context.report({
                  node: property,
                  messageId: "redundantQuoting",
                  fix: fixer => fixer.replaceText(property.key, getUnquotedKey(property.key))
                });
              });
            } else if (unquotedProps.length && keywordKeyName) {
              unquotedProps.forEach(property => {
                context.report({
                  node: property,
                  messageId: "requireQuotesDueToReservedWord",
                  data: { property: keywordKeyName },
                  fix: fixer => fixer.replaceText(property.key, getQuotedKey(property.key))
                });
              });
            } else if (quotedProps.length && unquotedProps.length) {
              unquotedProps.forEach(property => {
                context.report({
                  node: property,
                  messageId: "inconsistentlyQuotedProperty",
                  data: { key: property.key.name || property.key.value },
                  fix: fixer => fixer.replaceText(property.key, getQuotedKey(property.key))
                });
              });
            }
          }
          return {
            Property(node) {
              if (MODE === "always" || !MODE) {
                checkOmittedQuotes(node);
              }
              if (MODE === "as-needed") {
                checkUnnecessaryQuotes(node);
              }
            },
            ObjectExpression(node) {
              if (MODE === "consistent") {
                checkConsistency(node, false);
              }
              if (MODE === "consistent-as-needed") {
                checkConsistency(node, true);
              }
            }
          };
        }
      };
      var _quoteProps = exports$2o;

      var exports$2n = {};
      const astUtils$1a = _astUtils;
      const QUOTE_SETTINGS = {
        double: {
          quote: "\"",
          alternateQuote: "'",
          description: "doublequote"
        },
        single: {
          quote: "'",
          alternateQuote: "\"",
          description: "singlequote"
        },
        backtick: {
          quote: "`",
          alternateQuote: "\"",
          description: "backtick"
        }
      };
      const UNESCAPED_LINEBREAK_PATTERN = new RegExp(String.raw`(^|[^\\])(\\\\)*[${ Array.from(astUtils$1a.LINEBREAKS).join("") }]`, "u");
      QUOTE_SETTINGS.double.convert = QUOTE_SETTINGS.single.convert = QUOTE_SETTINGS.backtick.convert = function (str) {
        const newQuote = this.quote;
        const oldQuote = str[0];
        if (newQuote === oldQuote) {
          return str;
        }
        return newQuote + str.slice(1, -1).replace(/\\(\$\{|\r\n?|\n|.)|["'`]|\$\{|(\r\n?|\n)/gu, (match, escaped, newline) => {
          if (escaped === oldQuote || oldQuote === "`" && escaped === "${") {
            return escaped;
          }
          if (match === newQuote || newQuote === "`" && match === "${") {
            return `\\${ match }`;
          }
          if (newline && oldQuote === "`") {
            return "\\n";
          }
          return match;
        }) + newQuote;
      };
      const AVOID_ESCAPE = "avoid-escape";
      exports$2n = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce the consistent use of either backticks, double, or single quotes",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/quotes"
          },
          fixable: "code",
          schema: [
            {
              enum: [
                "single",
                "double",
                "backtick"
              ]
            },
            {
              anyOf: [
                { enum: ["avoid-escape"] },
                {
                  type: "object",
                  properties: {
                    avoidEscape: { type: "boolean" },
                    allowTemplateLiterals: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            }
          ],
          messages: { wrongQuotes: "Strings must use {{description}}." }
        },
        create(context) {
          const quoteOption = context.options[0], settings = QUOTE_SETTINGS[quoteOption || "double"], options = context.options[1], allowTemplateLiterals = options && options.allowTemplateLiterals === true, sourceCode = context.getSourceCode();
          let avoidEscape = options && options.avoidEscape === true;
          if (options === AVOID_ESCAPE) {
            avoidEscape = true;
          }
          function isJSXLiteral(node) {
            return node.parent.type === "JSXAttribute" || node.parent.type === "JSXElement" || node.parent.type === "JSXFragment";
          }
          function isDirective(node) {
            return node.type === "ExpressionStatement" && node.expression.type === "Literal" && typeof node.expression.value === "string";
          }
          function isPartOfDirectivePrologue(node) {
            const block = node.parent.parent;
            if (block.type !== "Program" && (block.type !== "BlockStatement" || !astUtils$1a.isFunction(block.parent))) {
              return false;
            }
            for (let i = 0; i < block.body.length; ++i) {
              const statement = block.body[i];
              if (statement === node.parent) {
                return true;
              }
              if (!isDirective(statement)) {
                break;
              }
            }
            return false;
          }
          function isAllowedAsNonBacktick(node) {
            const parent = node.parent;
            switch (parent.type) {
            case "ExpressionStatement":
              return isPartOfDirectivePrologue(node);
            case "Property":
            case "MethodDefinition":
              return parent.key === node && !parent.computed;
            case "ImportDeclaration":
            case "ExportNamedDeclaration":
            case "ExportAllDeclaration":
              return parent.source === node;
            default:
              return false;
            }
          }
          function isUsingFeatureOfTemplateLiteral(node) {
            const hasTag = node.parent.type === "TaggedTemplateExpression" && node === node.parent.quasi;
            if (hasTag) {
              return true;
            }
            const hasStringInterpolation = node.expressions.length > 0;
            if (hasStringInterpolation) {
              return true;
            }
            const isMultilineString = node.quasis.length >= 1 && UNESCAPED_LINEBREAK_PATTERN.test(node.quasis[0].value.raw);
            if (isMultilineString) {
              return true;
            }
            return false;
          }
          return {
            Literal(node) {
              const val = node.value, rawVal = node.raw;
              if (settings && typeof val === "string") {
                let isValid = quoteOption === "backtick" && isAllowedAsNonBacktick(node) || isJSXLiteral(node) || astUtils$1a.isSurroundedBy(rawVal, settings.quote);
                if (!isValid && avoidEscape) {
                  isValid = astUtils$1a.isSurroundedBy(rawVal, settings.alternateQuote) && rawVal.indexOf(settings.quote) >= 0;
                }
                if (!isValid) {
                  context.report({
                    node,
                    messageId: "wrongQuotes",
                    data: { description: settings.description },
                    fix(fixer) {
                      if (quoteOption === "backtick" && astUtils$1a.hasOctalOrNonOctalDecimalEscapeSequence(rawVal)) {
                        return null;
                      }
                      return fixer.replaceText(node, settings.convert(node.raw));
                    }
                  });
                }
              }
            },
            TemplateLiteral(node) {
              if (allowTemplateLiterals || quoteOption === "backtick" || isUsingFeatureOfTemplateLiteral(node)) {
                return;
              }
              context.report({
                node,
                messageId: "wrongQuotes",
                data: { description: settings.description },
                fix(fixer) {
                  if (isPartOfDirectivePrologue(node)) {
                    return null;
                  }
                  return fixer.replaceText(node, settings.convert(sourceCode.getText(node)));
                }
              });
            }
          };
        }
      };
      var _quotes = exports$2n;

      var exports$2m = {};
      const astUtils$19 = _astUtils;
      const MODE_ALWAYS = "always", MODE_AS_NEEDED = "as-needed";
      const validRadixValues = new Set(Array.from({ length: 37 - 2 }, (_, index) => index + 2));
      function isShadowed(variable) {
        return variable.defs.length >= 1;
      }
      function isParseIntMethod(node) {
        return node.type === "MemberExpression" && !node.computed && node.property.type === "Identifier" && node.property.name === "parseInt";
      }
      function isValidRadix(radix) {
        return !(radix.type === "Literal" && !validRadixValues.has(radix.value) || radix.type === "Identifier" && radix.name === "undefined");
      }
      function isDefaultRadix(radix) {
        return radix.type === "Literal" && radix.value === 10;
      }
      exports$2m = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce the consistent use of the radix argument when using `parseInt()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/radix",
            suggestion: true
          },
          schema: [{
              enum: [
                "always",
                "as-needed"
              ]
            }],
          messages: {
            missingParameters: "Missing parameters.",
            redundantRadix: "Redundant radix parameter.",
            missingRadix: "Missing radix parameter.",
            invalidRadix: "Invalid radix parameter, must be an integer between 2 and 36.",
            addRadixParameter10: "Add radix parameter `10` for parsing decimal numbers."
          }
        },
        create(context) {
          const mode = context.options[0] || MODE_ALWAYS;
          function checkArguments(node) {
            const args = node.arguments;
            switch (args.length) {
            case 0:
              context.report({
                node,
                messageId: "missingParameters"
              });
              break;
            case 1:
              if (mode === MODE_ALWAYS) {
                context.report({
                  node,
                  messageId: "missingRadix",
                  suggest: [{
                      messageId: "addRadixParameter10",
                      fix(fixer) {
                        const sourceCode = context.getSourceCode();
                        const tokens = sourceCode.getTokens(node);
                        const lastToken = tokens[tokens.length - 1];
                        const secondToLastToken = tokens[tokens.length - 2];
                        const hasTrailingComma = secondToLastToken.type === "Punctuator" && secondToLastToken.value === ",";
                        return fixer.insertTextBefore(lastToken, hasTrailingComma ? " 10," : ", 10");
                      }
                    }]
                });
              }
              break;
            default:
              if (mode === MODE_AS_NEEDED && isDefaultRadix(args[1])) {
                context.report({
                  node,
                  messageId: "redundantRadix"
                });
              } else if (!isValidRadix(args[1])) {
                context.report({
                  node,
                  messageId: "invalidRadix"
                });
              }
              break;
            }
          }
          return {
            "Program:exit"() {
              const scope = context.getScope();
              let variable;
              variable = astUtils$19.getVariableByName(scope, "parseInt");
              if (variable && !isShadowed(variable)) {
                variable.references.forEach(reference => {
                  const node = reference.identifier;
                  if (astUtils$19.isCallee(node)) {
                    checkArguments(node.parent);
                  }
                });
              }
              variable = astUtils$19.getVariableByName(scope, "Number");
              if (variable && !isShadowed(variable)) {
                variable.references.forEach(reference => {
                  const node = reference.identifier.parent;
                  const maybeCallee = node.parent.type === "ChainExpression" ? node.parent : node;
                  if (isParseIntMethod(node) && astUtils$19.isCallee(maybeCallee)) {
                    checkArguments(maybeCallee.parent);
                  }
                });
              }
            }
          };
        }
      };
      var _radix = exports$2m;

      var exports$2l = {};
      function createReferenceMap(scope, outReferenceMap = new Map()) {
        for (const reference of scope.references) {
          if (reference.resolved === null) {
            continue;
          }
          outReferenceMap.set(reference.identifier, reference);
        }
        for (const childScope of scope.childScopes) {
          if (childScope.type !== "function") {
            createReferenceMap(childScope, outReferenceMap);
          }
        }
        return outReferenceMap;
      }
      function getWriteExpr(reference) {
        if (reference.writeExpr) {
          return reference.writeExpr;
        }
        let node = reference.identifier;
        while (node) {
          const t = node.parent.type;
          if (t === "AssignmentExpression" && node.parent.left === node) {
            return node.parent.right;
          }
          if (t === "MemberExpression" && node.parent.object === node) {
            node = node.parent;
            continue;
          }
          break;
        }
        return null;
      }
      function isLocalVariableWithoutEscape(variable, isMemberAccess) {
        if (!variable) {
          return false;
        }
        if (isMemberAccess && variable.defs.some(d => d.type === "Parameter")) {
          return false;
        }
        const functionScope = variable.scope.variableScope;
        return variable.references.every(reference => reference.from.variableScope === functionScope);
      }
      class SegmentInfo {
        constructor() {
          this.info = new WeakMap();
        }
        initialize(segment) {
          const outdatedReadVariables = new Set();
          const freshReadVariables = new Set();
          for (const prevSegment of segment.prevSegments) {
            const info = this.info.get(prevSegment);
            if (info) {
              info.outdatedReadVariables.forEach(Set.prototype.add, outdatedReadVariables);
              info.freshReadVariables.forEach(Set.prototype.add, freshReadVariables);
            }
          }
          this.info.set(segment, {
            outdatedReadVariables,
            freshReadVariables
          });
        }
        markAsRead(segments, variable) {
          for (const segment of segments) {
            const info = this.info.get(segment);
            if (info) {
              info.freshReadVariables.add(variable);
              info.outdatedReadVariables.delete(variable);
            }
          }
        }
        makeOutdated(segments) {
          for (const segment of segments) {
            const info = this.info.get(segment);
            if (info) {
              info.freshReadVariables.forEach(Set.prototype.add, info.outdatedReadVariables);
              info.freshReadVariables.clear();
            }
          }
        }
        isOutdated(segments, variable) {
          for (const segment of segments) {
            const info = this.info.get(segment);
            if (info && info.outdatedReadVariables.has(variable)) {
              return true;
            }
          }
          return false;
        }
      }
      exports$2l = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/require-atomic-updates"
          },
          fixable: null,
          schema: [],
          messages: { nonAtomicUpdate: "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const assignmentReferences = new Map();
          const segmentInfo = new SegmentInfo();
          let stack = null;
          return {
            onCodePathStart(codePath) {
              const scope = context.getScope();
              const shouldVerify = scope.type === "function" && (scope.block.async || scope.block.generator);
              stack = {
                upper: stack,
                codePath,
                referenceMap: shouldVerify ? createReferenceMap(scope) : null
              };
            },
            onCodePathEnd() {
              stack = stack.upper;
            },
            onCodePathSegmentStart(segment) {
              segmentInfo.initialize(segment);
            },
            Identifier(node) {
              const {codePath, referenceMap} = stack;
              const reference = referenceMap && referenceMap.get(node);
              if (!reference) {
                return;
              }
              const variable = reference.resolved;
              const writeExpr = getWriteExpr(reference);
              const isMemberAccess = reference.identifier.parent.type === "MemberExpression";
              if (reference.isRead() && !(writeExpr && writeExpr.parent.operator === "=")) {
                segmentInfo.markAsRead(codePath.currentSegments, variable);
              }
              if (writeExpr && writeExpr.parent.right === writeExpr && !isLocalVariableWithoutEscape(variable, isMemberAccess)) {
                let refs = assignmentReferences.get(writeExpr);
                if (!refs) {
                  refs = [];
                  assignmentReferences.set(writeExpr, refs);
                }
                refs.push(reference);
              }
            },
            ":expression:exit"(node) {
              const {codePath, referenceMap} = stack;
              if (!referenceMap) {
                return;
              }
              if (node.type === "AwaitExpression" || node.type === "YieldExpression") {
                segmentInfo.makeOutdated(codePath.currentSegments);
              }
              const references = assignmentReferences.get(node);
              if (references) {
                assignmentReferences.delete(node);
                for (const reference of references) {
                  const variable = reference.resolved;
                  if (segmentInfo.isOutdated(codePath.currentSegments, variable)) {
                    context.report({
                      node: node.parent,
                      messageId: "nonAtomicUpdate",
                      data: { value: sourceCode.getText(node.parent.left) }
                    });
                  }
                }
              }
            }
          };
        }
      };
      var _requireAtomicUpdates = exports$2l;

      var exports$2k = {};
      const astUtils$18 = _astUtils;
      function capitalizeFirstLetter(text) {
        return text[0].toUpperCase() + text.slice(1);
      }
      exports$2k = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow async functions which have no `await` expression",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/require-await"
          },
          schema: [],
          messages: { missingAwait: "{{name}} has no 'await' expression." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let scopeInfo = null;
          function enterFunction() {
            scopeInfo = {
              upper: scopeInfo,
              hasAwait: false
            };
          }
          function exitFunction(node) {
            if (!node.generator && node.async && !scopeInfo.hasAwait && !astUtils$18.isEmptyFunction(node)) {
              context.report({
                node,
                loc: astUtils$18.getFunctionHeadLoc(node, sourceCode),
                messageId: "missingAwait",
                data: { name: capitalizeFirstLetter(astUtils$18.getFunctionNameWithKind(node)) }
              });
            }
            scopeInfo = scopeInfo.upper;
          }
          return {
            FunctionDeclaration: enterFunction,
            FunctionExpression: enterFunction,
            ArrowFunctionExpression: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            "FunctionExpression:exit": exitFunction,
            "ArrowFunctionExpression:exit": exitFunction,
            AwaitExpression() {
              if (!scopeInfo) {
                return;
              }
              scopeInfo.hasAwait = true;
            },
            ForOfStatement(node) {
              if (!scopeInfo) {
                return;
              }
              if (node.await) {
                scopeInfo.hasAwait = true;
              }
            }
          };
        }
      };
      var _requireAwait = exports$2k;

      var exports$2j = {};
      exports$2j = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require JSDoc comments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/require-jsdoc"
          },
          schema: [{
              type: "object",
              properties: {
                require: {
                  type: "object",
                  properties: {
                    ClassDeclaration: {
                      type: "boolean",
                      default: false
                    },
                    MethodDefinition: {
                      type: "boolean",
                      default: false
                    },
                    FunctionDeclaration: {
                      type: "boolean",
                      default: true
                    },
                    ArrowFunctionExpression: {
                      type: "boolean",
                      default: false
                    },
                    FunctionExpression: {
                      type: "boolean",
                      default: false
                    }
                  },
                  additionalProperties: false,
                  default: {}
                }
              },
              additionalProperties: false
            }],
          deprecated: true,
          replacedBy: [],
          messages: { missingJSDocComment: "Missing JSDoc comment." }
        },
        create(context) {
          const source = context.getSourceCode();
          const DEFAULT_OPTIONS = {
            FunctionDeclaration: true,
            MethodDefinition: false,
            ClassDeclaration: false,
            ArrowFunctionExpression: false,
            FunctionExpression: false
          };
          const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);
          function report(node) {
            context.report({
              node,
              messageId: "missingJSDocComment"
            });
          }
          function checkJsDoc(node) {
            const jsdocComment = source.getJSDocComment(node);
            if (!jsdocComment) {
              report(node);
            }
          }
          return {
            FunctionDeclaration(node) {
              if (options.FunctionDeclaration) {
                checkJsDoc(node);
              }
            },
            FunctionExpression(node) {
              if (options.MethodDefinition && node.parent.type === "MethodDefinition" || options.FunctionExpression && (node.parent.type === "VariableDeclarator" || node.parent.type === "Property" && node === node.parent.value)) {
                checkJsDoc(node);
              }
            },
            ClassDeclaration(node) {
              if (options.ClassDeclaration) {
                checkJsDoc(node);
              }
            },
            ArrowFunctionExpression(node) {
              if (options.ArrowFunctionExpression && node.parent.type === "VariableDeclarator") {
                checkJsDoc(node);
              }
            }
          };
        }
      };
      var _requireJsdoc = exports$2j;

      var _eslintUtils$a = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$2i = {};
      const {CALL: CALL$5, CONSTRUCT: CONSTRUCT$3, ReferenceTracker: ReferenceTracker$5, getStringIfConstant: getStringIfConstant$2} = _eslintUtils$a;
      exports$2i = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce the use of `u` flag on RegExp",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/require-unicode-regexp"
          },
          messages: { requireUFlag: "Use the 'u' flag." },
          schema: []
        },
        create(context) {
          return {
            "Literal[regex]"(node) {
              const flags = node.regex.flags || "";
              if (!flags.includes("u")) {
                context.report({
                  node,
                  messageId: "requireUFlag"
                });
              }
            },
            Program() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker$5(scope);
              const trackMap = {
                RegExp: {
                  [CALL$5]: true,
                  [CONSTRUCT$3]: true
                }
              };
              for (const {node} of tracker.iterateGlobalReferences(trackMap)) {
                const flagsNode = node.arguments[1];
                const flags = getStringIfConstant$2(flagsNode, scope);
                if (!flagsNode || typeof flags === "string" && !flags.includes("u")) {
                  context.report({
                    node,
                    messageId: "requireUFlag"
                  });
                }
              }
            }
          };
        }
      };
      var _requireUnicodeRegexp = exports$2i;

      var exports$2h = {};
      const FixTracker$2 = _fixTracker;
      const astUtils$17 = _astUtils;
      exports$2h = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow semicolons instead of ASI",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/semi"
          },
          fixable: "code",
          schema: {
            anyOf: [
              {
                type: "array",
                items: [
                  { enum: ["never"] },
                  {
                    type: "object",
                    properties: {
                      beforeStatementContinuationChars: {
                        enum: [
                          "always",
                          "any",
                          "never"
                        ]
                      }
                    },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              },
              {
                type: "array",
                items: [
                  { enum: ["always"] },
                  {
                    type: "object",
                    properties: { omitLastInOneLineBlock: { type: "boolean" } },
                    additionalProperties: false
                  }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          messages: {
            missingSemi: "Missing semicolon.",
            extraSemi: "Extra semicolon."
          }
        },
        create(context) {
          const OPT_OUT_PATTERN = /^[-[(/+`]/u;
          const options = context.options[1];
          const never = context.options[0] === "never";
          const exceptOneLine = Boolean(options && options.omitLastInOneLineBlock);
          const beforeStatementContinuationChars = options && options.beforeStatementContinuationChars || "any";
          const sourceCode = context.getSourceCode();
          function report(node, missing) {
            const lastToken = sourceCode.getLastToken(node);
            let messageId, fix, loc;
            if (!missing) {
              messageId = "missingSemi";
              loc = {
                start: lastToken.loc.end,
                end: astUtils$17.getNextLocation(sourceCode, lastToken.loc.end)
              };
              fix = function (fixer) {
                return fixer.insertTextAfter(lastToken, ";");
              };
            } else {
              messageId = "extraSemi";
              loc = lastToken.loc;
              fix = function (fixer) {
                return new FixTracker$2(fixer, sourceCode).retainSurroundingTokens(lastToken).remove(lastToken);
              };
            }
            context.report({
              node,
              loc,
              messageId,
              fix
            });
          }
          function isRedundantSemi(semiToken) {
            const nextToken = sourceCode.getTokenAfter(semiToken);
            return !nextToken || astUtils$17.isClosingBraceToken(nextToken) || astUtils$17.isSemicolonToken(nextToken);
          }
          function isEndOfArrowBlock(lastToken) {
            if (!astUtils$17.isClosingBraceToken(lastToken)) {
              return false;
            }
            const node = sourceCode.getNodeByRangeIndex(lastToken.range[0]);
            return node.type === "BlockStatement" && node.parent.type === "ArrowFunctionExpression";
          }
          function isOnSameLineWithNextToken(node) {
            const prevToken = sourceCode.getLastToken(node, 1);
            const nextToken = sourceCode.getTokenAfter(node);
            return !!nextToken && astUtils$17.isTokenOnSameLine(prevToken, nextToken);
          }
          function maybeAsiHazardAfter(node) {
            const t = node.type;
            if (t === "DoWhileStatement" || t === "BreakStatement" || t === "ContinueStatement" || t === "DebuggerStatement" || t === "ImportDeclaration" || t === "ExportAllDeclaration") {
              return false;
            }
            if (t === "ReturnStatement") {
              return Boolean(node.argument);
            }
            if (t === "ExportNamedDeclaration") {
              return Boolean(node.declaration);
            }
            if (isEndOfArrowBlock(sourceCode.getLastToken(node, 1))) {
              return false;
            }
            return true;
          }
          function maybeAsiHazardBefore(token) {
            return Boolean(token) && OPT_OUT_PATTERN.test(token.value) && token.value !== "++" && token.value !== "--";
          }
          function canRemoveSemicolon(node) {
            if (isRedundantSemi(sourceCode.getLastToken(node))) {
              return true;
            }
            if (isOnSameLineWithNextToken(node)) {
              return false;
            }
            if (beforeStatementContinuationChars === "never" && !maybeAsiHazardAfter(node)) {
              return true;
            }
            if (!maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {
              return true;
            }
            return false;
          }
          function isOneLinerBlock(node) {
            const parent = node.parent;
            const nextToken = sourceCode.getTokenAfter(node);
            if (!nextToken || nextToken.value !== "}") {
              return false;
            }
            return !!parent && parent.type === "BlockStatement" && parent.loc.start.line === parent.loc.end.line;
          }
          function checkForSemicolon(node) {
            const isSemi = astUtils$17.isSemicolonToken(sourceCode.getLastToken(node));
            if (never) {
              if (isSemi && canRemoveSemicolon(node)) {
                report(node, true);
              } else if (!isSemi && beforeStatementContinuationChars === "always" && maybeAsiHazardBefore(sourceCode.getTokenAfter(node))) {
                report(node);
              }
            } else {
              const oneLinerBlock = exceptOneLine && isOneLinerBlock(node);
              if (isSemi && oneLinerBlock) {
                report(node, true);
              } else if (!isSemi && !oneLinerBlock) {
                report(node);
              }
            }
          }
          function checkForSemicolonForVariableDeclaration(node) {
            const parent = node.parent;
            if ((parent.type !== "ForStatement" || parent.init !== node) && (!/^For(?:In|Of)Statement/u.test(parent.type) || parent.left !== node)) {
              checkForSemicolon(node);
            }
          }
          return {
            VariableDeclaration: checkForSemicolonForVariableDeclaration,
            ExpressionStatement: checkForSemicolon,
            ReturnStatement: checkForSemicolon,
            ThrowStatement: checkForSemicolon,
            DoWhileStatement: checkForSemicolon,
            DebuggerStatement: checkForSemicolon,
            BreakStatement: checkForSemicolon,
            ContinueStatement: checkForSemicolon,
            ImportDeclaration: checkForSemicolon,
            ExportAllDeclaration: checkForSemicolon,
            ExportNamedDeclaration(node) {
              if (!node.declaration) {
                checkForSemicolon(node);
              }
            },
            ExportDefaultDeclaration(node) {
              if (!/(?:Class|Function)Declaration/u.test(node.declaration.type)) {
                checkForSemicolon(node);
              }
            }
          };
        }
      };
      var _semi = exports$2h;

      var exports$2g = {};
      exports$2g = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce sorted import declarations within modules",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/sort-imports"
          },
          schema: [{
              type: "object",
              properties: {
                ignoreCase: {
                  type: "boolean",
                  default: false
                },
                memberSyntaxSortOrder: {
                  type: "array",
                  items: {
                    enum: [
                      "none",
                      "all",
                      "multiple",
                      "single"
                    ]
                  },
                  uniqueItems: true,
                  minItems: 4,
                  maxItems: 4
                },
                ignoreDeclarationSort: {
                  type: "boolean",
                  default: false
                },
                ignoreMemberSort: {
                  type: "boolean",
                  default: false
                },
                allowSeparatedGroups: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: {
            sortImportsAlphabetically: "Imports should be sorted alphabetically.",
            sortMembersAlphabetically: "Member '{{memberName}}' of the import declaration should be sorted alphabetically.",
            unexpectedSyntaxOrder: "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax."
          }
        },
        create(context) {
          const configuration = context.options[0] || {}, ignoreCase = configuration.ignoreCase || false, ignoreDeclarationSort = configuration.ignoreDeclarationSort || false, ignoreMemberSort = configuration.ignoreMemberSort || false, memberSyntaxSortOrder = configuration.memberSyntaxSortOrder || [
              "none",
              "all",
              "multiple",
              "single"
            ], allowSeparatedGroups = configuration.allowSeparatedGroups || false, sourceCode = context.getSourceCode();
          let previousDeclaration = null;
          function usedMemberSyntax(node) {
            if (node.specifiers.length === 0) {
              return "none";
            }
            if (node.specifiers[0].type === "ImportNamespaceSpecifier") {
              return "all";
            }
            if (node.specifiers.length === 1) {
              return "single";
            }
            return "multiple";
          }
          function getMemberParameterGroupIndex(node) {
            return memberSyntaxSortOrder.indexOf(usedMemberSyntax(node));
          }
          function getFirstLocalMemberName(node) {
            if (node.specifiers[0]) {
              return node.specifiers[0].local.name;
            }
            return null;
          }
          function getNumberOfLinesBetween(left, right) {
            return Math.max(right.loc.start.line - left.loc.end.line - 1, 0);
          }
          return {
            ImportDeclaration(node) {
              if (!ignoreDeclarationSort) {
                if (previousDeclaration && allowSeparatedGroups && getNumberOfLinesBetween(previousDeclaration, node) > 0) {
                  previousDeclaration = null;
                }
                if (previousDeclaration) {
                  const currentMemberSyntaxGroupIndex = getMemberParameterGroupIndex(node), previousMemberSyntaxGroupIndex = getMemberParameterGroupIndex(previousDeclaration);
                  let currentLocalMemberName = getFirstLocalMemberName(node), previousLocalMemberName = getFirstLocalMemberName(previousDeclaration);
                  if (ignoreCase) {
                    previousLocalMemberName = previousLocalMemberName && previousLocalMemberName.toLowerCase();
                    currentLocalMemberName = currentLocalMemberName && currentLocalMemberName.toLowerCase();
                  }
                  if (currentMemberSyntaxGroupIndex !== previousMemberSyntaxGroupIndex) {
                    if (currentMemberSyntaxGroupIndex < previousMemberSyntaxGroupIndex) {
                      context.report({
                        node,
                        messageId: "unexpectedSyntaxOrder",
                        data: {
                          syntaxA: memberSyntaxSortOrder[currentMemberSyntaxGroupIndex],
                          syntaxB: memberSyntaxSortOrder[previousMemberSyntaxGroupIndex]
                        }
                      });
                    }
                  } else {
                    if (previousLocalMemberName && currentLocalMemberName && currentLocalMemberName < previousLocalMemberName) {
                      context.report({
                        node,
                        messageId: "sortImportsAlphabetically"
                      });
                    }
                  }
                }
                previousDeclaration = node;
              }
              if (!ignoreMemberSort) {
                const importSpecifiers = node.specifiers.filter(specifier => specifier.type === "ImportSpecifier");
                const getSortableName = ignoreCase ? specifier => specifier.local.name.toLowerCase() : specifier => specifier.local.name;
                const firstUnsortedIndex = importSpecifiers.map(getSortableName).findIndex((name, index, array) => array[index - 1] > name);
                if (firstUnsortedIndex !== -1) {
                  context.report({
                    node: importSpecifiers[firstUnsortedIndex],
                    messageId: "sortMembersAlphabetically",
                    data: { memberName: importSpecifiers[firstUnsortedIndex].local.name },
                    fix(fixer) {
                      if (importSpecifiers.some(specifier => sourceCode.getCommentsBefore(specifier).length || sourceCode.getCommentsAfter(specifier).length)) {
                        return null;
                      }
                      return fixer.replaceTextRange([
                        importSpecifiers[0].range[0],
                        importSpecifiers[importSpecifiers.length - 1].range[1]
                      ], importSpecifiers.slice().sort((specifierA, specifierB) => {
                        const aName = getSortableName(specifierA);
                        const bName = getSortableName(specifierB);
                        return aName > bName ? 1 : -1;
                      }).reduce((sourceText, specifier, index) => {
                        const textAfterSpecifier = index === importSpecifiers.length - 1 ? "" : sourceCode.getText().slice(importSpecifiers[index].range[1], importSpecifiers[index + 1].range[0]);
                        return sourceText + sourceCode.getText(specifier) + textAfterSpecifier;
                      }, ""));
                    }
                  });
                }
              }
            }
          };
        }
      };
      var _sortImports = exports$2g;

      var exports$2f = {};
      var naturalCompare$1 = function (a, b) {
        var i, codeA, codeB = 1, posA = 0, posB = 0, alphabet = String.alphabet;
        function getCode(str, pos, code) {
          if (code) {
            for (i = pos; code = getCode(str, i), code < 76 && code > 65;)
              ++i;
            return +str.slice(pos - 1, i);
          }
          code = alphabet && alphabet.indexOf(str.charAt(pos));
          return code > -1 ? code + 76 : (code = str.charCodeAt(pos) || 0, code < 45 || code > 127) ? code : code < 46 ? 65 : code < 48 ? code - 1 : code < 58 ? code + 18 : code < 65 ? code - 11 : code < 91 ? code + 11 : code < 97 ? code - 37 : code < 123 ? code + 5 : code - 63;
        }
        if ((a += "") != (b += ""))
          for (; codeB;) {
            codeA = getCode(a, posA++);
            codeB = getCode(b, posB++);
            if (codeA < 76 && codeB < 76 && codeA > 66 && codeB > 66) {
              codeA = getCode(a, posA, posA);
              codeB = getCode(b, posB, posA = i);
              posB = i;
            }
            if (codeA != codeB)
              return codeA < codeB ? -1 : 1;
          }
        return 0;
      };
      try {
        exports$2f = naturalCompare$1;
      } catch (e) {
        String.naturalCompare = naturalCompare$1;
      }
      var exports$1$j = exports$2f;

      var _naturalCompare2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$j
      });

      var _naturalCompare = "default" in _naturalCompare2 ? exports$1$j : _naturalCompare2;
      var exports$2e = {};
      const astUtils$16 = _astUtils, naturalCompare = _naturalCompare;
      function getPropertyName(node) {
        const staticName = astUtils$16.getStaticPropertyName(node);
        if (staticName !== null) {
          return staticName;
        }
        return node.key.name || null;
      }
      const isValidOrders = {
        asc(a, b) {
          return a <= b;
        },
        ascI(a, b) {
          return a.toLowerCase() <= b.toLowerCase();
        },
        ascN(a, b) {
          return naturalCompare(a, b) <= 0;
        },
        ascIN(a, b) {
          return naturalCompare(a.toLowerCase(), b.toLowerCase()) <= 0;
        },
        desc(a, b) {
          return isValidOrders.asc(b, a);
        },
        descI(a, b) {
          return isValidOrders.ascI(b, a);
        },
        descN(a, b) {
          return isValidOrders.ascN(b, a);
        },
        descIN(a, b) {
          return isValidOrders.ascIN(b, a);
        }
      };
      exports$2e = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require object keys to be sorted",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/sort-keys"
          },
          schema: [
            {
              enum: [
                "asc",
                "desc"
              ]
            },
            {
              type: "object",
              properties: {
                caseSensitive: {
                  type: "boolean",
                  default: true
                },
                natural: {
                  type: "boolean",
                  default: false
                },
                minKeys: {
                  type: "integer",
                  minimum: 2,
                  default: 2
                }
              },
              additionalProperties: false
            }
          ],
          messages: { sortKeys: "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'." }
        },
        create(context) {
          const order = context.options[0] || "asc";
          const options = context.options[1];
          const insensitive = options && options.caseSensitive === false;
          const natural = options && options.natural;
          const minKeys = options && options.minKeys;
          const isValidOrder = isValidOrders[order + (insensitive ? "I" : "") + (natural ? "N" : "")];
          let stack = null;
          return {
            ObjectExpression(node) {
              stack = {
                upper: stack,
                prevName: null,
                numKeys: node.properties.length
              };
            },
            "ObjectExpression:exit"() {
              stack = stack.upper;
            },
            SpreadElement(node) {
              if (node.parent.type === "ObjectExpression") {
                stack.prevName = null;
              }
            },
            Property(node) {
              if (node.parent.type === "ObjectPattern") {
                return;
              }
              const prevName = stack.prevName;
              const numKeys = stack.numKeys;
              const thisName = getPropertyName(node);
              if (thisName !== null) {
                stack.prevName = thisName;
              }
              if (prevName === null || thisName === null || numKeys < minKeys) {
                return;
              }
              if (!isValidOrder(prevName, thisName)) {
                context.report({
                  node,
                  loc: node.key.loc,
                  messageId: "sortKeys",
                  data: {
                    thisName,
                    prevName,
                    order,
                    insensitive: insensitive ? "insensitive " : "",
                    natural: natural ? "natural " : ""
                  }
                });
              }
            }
          };
        }
      };
      var _sortKeys = exports$2e;

      var exports$2d = {};
      const astUtils$15 = _astUtils;
      exports$2d = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing inside parentheses",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/space-in-parens"
          },
          fixable: "whitespace",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: {
                    enum: [
                      "{}",
                      "[]",
                      "()",
                      "empty"
                    ]
                  },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            missingOpeningSpace: "There must be a space after this paren.",
            missingClosingSpace: "There must be a space before this paren.",
            rejectedOpeningSpace: "There should be no space after this paren.",
            rejectedClosingSpace: "There should be no space before this paren."
          }
        },
        create(context) {
          const ALWAYS = context.options[0] === "always", exceptionsArrayOptions = context.options[1] && context.options[1].exceptions || [], options = {};
          let exceptions;
          if (exceptionsArrayOptions.length) {
            options.braceException = exceptionsArrayOptions.includes("{}");
            options.bracketException = exceptionsArrayOptions.includes("[]");
            options.parenException = exceptionsArrayOptions.includes("()");
            options.empty = exceptionsArrayOptions.includes("empty");
          }
          function getExceptions() {
            const openers = [], closers = [];
            if (options.braceException) {
              openers.push("{");
              closers.push("}");
            }
            if (options.bracketException) {
              openers.push("[");
              closers.push("]");
            }
            if (options.parenException) {
              openers.push("(");
              closers.push(")");
            }
            if (options.empty) {
              openers.push(")");
              closers.push("(");
            }
            return {
              openers,
              closers
            };
          }
          const sourceCode = context.getSourceCode();
          function isOpenerException(token) {
            return exceptions.openers.includes(token.value);
          }
          function isCloserException(token) {
            return exceptions.closers.includes(token.value);
          }
          function openerMissingSpace(openingParenToken, tokenAfterOpeningParen) {
            if (sourceCode.isSpaceBetweenTokens(openingParenToken, tokenAfterOpeningParen)) {
              return false;
            }
            if (!options.empty && astUtils$15.isClosingParenToken(tokenAfterOpeningParen)) {
              return false;
            }
            if (ALWAYS) {
              return !isOpenerException(tokenAfterOpeningParen);
            }
            return isOpenerException(tokenAfterOpeningParen);
          }
          function openerRejectsSpace(openingParenToken, tokenAfterOpeningParen) {
            if (!astUtils$15.isTokenOnSameLine(openingParenToken, tokenAfterOpeningParen)) {
              return false;
            }
            if (tokenAfterOpeningParen.type === "Line") {
              return false;
            }
            if (!sourceCode.isSpaceBetweenTokens(openingParenToken, tokenAfterOpeningParen)) {
              return false;
            }
            if (ALWAYS) {
              return isOpenerException(tokenAfterOpeningParen);
            }
            return !isOpenerException(tokenAfterOpeningParen);
          }
          function closerMissingSpace(tokenBeforeClosingParen, closingParenToken) {
            if (sourceCode.isSpaceBetweenTokens(tokenBeforeClosingParen, closingParenToken)) {
              return false;
            }
            if (!options.empty && astUtils$15.isOpeningParenToken(tokenBeforeClosingParen)) {
              return false;
            }
            if (ALWAYS) {
              return !isCloserException(tokenBeforeClosingParen);
            }
            return isCloserException(tokenBeforeClosingParen);
          }
          function closerRejectsSpace(tokenBeforeClosingParen, closingParenToken) {
            if (!astUtils$15.isTokenOnSameLine(tokenBeforeClosingParen, closingParenToken)) {
              return false;
            }
            if (!sourceCode.isSpaceBetweenTokens(tokenBeforeClosingParen, closingParenToken)) {
              return false;
            }
            if (ALWAYS) {
              return isCloserException(tokenBeforeClosingParen);
            }
            return !isCloserException(tokenBeforeClosingParen);
          }
          return {
            Program: function checkParenSpaces(node) {
              exceptions = getExceptions();
              const tokens = sourceCode.tokensAndComments;
              tokens.forEach((token, i) => {
                const prevToken = tokens[i - 1];
                const nextToken = tokens[i + 1];
                if (!astUtils$15.isOpeningParenToken(token) && !astUtils$15.isClosingParenToken(token)) {
                  return;
                }
                if (token.value === "(" && openerMissingSpace(token, nextToken)) {
                  context.report({
                    node,
                    loc: token.loc,
                    messageId: "missingOpeningSpace",
                    fix(fixer) {
                      return fixer.insertTextAfter(token, " ");
                    }
                  });
                }
                if (token.value === "(" && openerRejectsSpace(token, nextToken)) {
                  context.report({
                    node,
                    loc: {
                      start: token.loc.end,
                      end: nextToken.loc.start
                    },
                    messageId: "rejectedOpeningSpace",
                    fix(fixer) {
                      return fixer.removeRange([
                        token.range[1],
                        nextToken.range[0]
                      ]);
                    }
                  });
                }
                if (token.value === ")" && closerMissingSpace(prevToken, token)) {
                  context.report({
                    node,
                    loc: token.loc,
                    messageId: "missingClosingSpace",
                    fix(fixer) {
                      return fixer.insertTextBefore(token, " ");
                    }
                  });
                }
                if (token.value === ")" && closerRejectsSpace(prevToken, token)) {
                  context.report({
                    node,
                    loc: {
                      start: prevToken.loc.end,
                      end: token.loc.start
                    },
                    messageId: "rejectedClosingSpace",
                    fix(fixer) {
                      return fixer.removeRange([
                        prevToken.range[1],
                        token.range[0]
                      ]);
                    }
                  });
                }
              });
            }
          };
        }
      };
      var _spaceInParens = exports$2d;

      var exports$2c = {};
      exports$2c = {
        meta: {
          type: "layout",
          docs: {
            description: "require spacing around infix operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/space-infix-ops"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                int32Hint: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { missingSpace: "Operator '{{operator}}' must be spaced." }
        },
        create(context) {
          const int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;
          const sourceCode = context.getSourceCode();
          function getFirstNonSpacedToken(left, right, op) {
            const operator = sourceCode.getFirstTokenBetween(left, right, token => token.value === op);
            const prev = sourceCode.getTokenBefore(operator);
            const next = sourceCode.getTokenAfter(operator);
            if (!sourceCode.isSpaceBetweenTokens(prev, operator) || !sourceCode.isSpaceBetweenTokens(operator, next)) {
              return operator;
            }
            return null;
          }
          function report(mainNode, culpritToken) {
            context.report({
              node: mainNode,
              loc: culpritToken.loc,
              messageId: "missingSpace",
              data: { operator: culpritToken.value },
              fix(fixer) {
                const previousToken = sourceCode.getTokenBefore(culpritToken);
                const afterToken = sourceCode.getTokenAfter(culpritToken);
                let fixString = "";
                if (culpritToken.range[0] - previousToken.range[1] === 0) {
                  fixString = " ";
                }
                fixString += culpritToken.value;
                if (afterToken.range[0] - culpritToken.range[1] === 0) {
                  fixString += " ";
                }
                return fixer.replaceText(culpritToken, fixString);
              }
            });
          }
          function checkBinary(node) {
            const leftNode = node.left.typeAnnotation ? node.left.typeAnnotation : node.left;
            const rightNode = node.right;
            const operator = node.operator || "=";
            const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, operator);
            if (nonSpacedNode) {
              if (!(int32Hint && sourceCode.getText(node).endsWith("|0"))) {
                report(node, nonSpacedNode);
              }
            }
          }
          function checkConditional(node) {
            const nonSpacedConsequentNode = getFirstNonSpacedToken(node.test, node.consequent, "?");
            const nonSpacedAlternateNode = getFirstNonSpacedToken(node.consequent, node.alternate, ":");
            if (nonSpacedConsequentNode) {
              report(node, nonSpacedConsequentNode);
            }
            if (nonSpacedAlternateNode) {
              report(node, nonSpacedAlternateNode);
            }
          }
          function checkVar(node) {
            const leftNode = node.id.typeAnnotation ? node.id.typeAnnotation : node.id;
            const rightNode = node.init;
            if (rightNode) {
              const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, "=");
              if (nonSpacedNode) {
                report(node, nonSpacedNode);
              }
            }
          }
          return {
            AssignmentExpression: checkBinary,
            AssignmentPattern: checkBinary,
            BinaryExpression: checkBinary,
            LogicalExpression: checkBinary,
            ConditionalExpression: checkConditional,
            VariableDeclarator: checkVar
          };
        }
      };
      var _spaceInfixOps = exports$2c;

      var exports$2b = {};
      const astUtils$14 = _astUtils;
      exports$2b = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before or after unary operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/space-unary-ops"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                words: {
                  type: "boolean",
                  default: true
                },
                nonwords: {
                  type: "boolean",
                  default: false
                },
                overrides: {
                  type: "object",
                  additionalProperties: { type: "boolean" }
                }
              },
              additionalProperties: false
            }],
          messages: {
            unexpectedBefore: "Unexpected space before unary operator '{{operator}}'.",
            unexpectedAfter: "Unexpected space after unary operator '{{operator}}'.",
            unexpectedAfterWord: "Unexpected space after unary word operator '{{word}}'.",
            wordOperator: "Unary word operator '{{word}}' must be followed by whitespace.",
            operator: "Unary operator '{{operator}}' must be followed by whitespace.",
            beforeUnaryExpressions: "Space is required before unary expressions '{{token}}'."
          }
        },
        create(context) {
          const options = context.options[0] || {
            words: true,
            nonwords: false
          };
          const sourceCode = context.getSourceCode();
          function isFirstBangInBangBangExpression(node) {
            return node && node.type === "UnaryExpression" && node.argument.operator === "!" && node.argument && node.argument.type === "UnaryExpression" && node.argument.operator === "!";
          }
          function overrideExistsForOperator(operator) {
            return options.overrides && Object.prototype.hasOwnProperty.call(options.overrides, operator);
          }
          function overrideEnforcesSpaces(operator) {
            return options.overrides[operator];
          }
          function verifyWordHasSpaces(node, firstToken, secondToken, word) {
            if (secondToken.range[0] === firstToken.range[1]) {
              context.report({
                node,
                messageId: "wordOperator",
                data: { word },
                fix(fixer) {
                  return fixer.insertTextAfter(firstToken, " ");
                }
              });
            }
          }
          function verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word) {
            if (astUtils$14.canTokensBeAdjacent(firstToken, secondToken)) {
              if (secondToken.range[0] > firstToken.range[1]) {
                context.report({
                  node,
                  messageId: "unexpectedAfterWord",
                  data: { word },
                  fix(fixer) {
                    return fixer.removeRange([
                      firstToken.range[1],
                      secondToken.range[0]
                    ]);
                  }
                });
              }
            }
          }
          function checkUnaryWordOperatorForSpaces(node, firstToken, secondToken, word) {
            if (overrideExistsForOperator(word)) {
              if (overrideEnforcesSpaces(word)) {
                verifyWordHasSpaces(node, firstToken, secondToken, word);
              } else {
                verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word);
              }
            } else if (options.words) {
              verifyWordHasSpaces(node, firstToken, secondToken, word);
            } else {
              verifyWordDoesntHaveSpaces(node, firstToken, secondToken, word);
            }
          }
          function checkForSpacesAfterYield(node) {
            const tokens = sourceCode.getFirstTokens(node, 3), word = "yield";
            if (!node.argument || node.delegate) {
              return;
            }
            checkUnaryWordOperatorForSpaces(node, tokens[0], tokens[1], word);
          }
          function checkForSpacesAfterAwait(node) {
            const tokens = sourceCode.getFirstTokens(node, 3);
            checkUnaryWordOperatorForSpaces(node, tokens[0], tokens[1], "await");
          }
          function verifyNonWordsHaveSpaces(node, firstToken, secondToken) {
            if (node.prefix) {
              if (isFirstBangInBangBangExpression(node)) {
                return;
              }
              if (firstToken.range[1] === secondToken.range[0]) {
                context.report({
                  node,
                  messageId: "operator",
                  data: { operator: firstToken.value },
                  fix(fixer) {
                    return fixer.insertTextAfter(firstToken, " ");
                  }
                });
              }
            } else {
              if (firstToken.range[1] === secondToken.range[0]) {
                context.report({
                  node,
                  messageId: "beforeUnaryExpressions",
                  data: { token: secondToken.value },
                  fix(fixer) {
                    return fixer.insertTextBefore(secondToken, " ");
                  }
                });
              }
            }
          }
          function verifyNonWordsDontHaveSpaces(node, firstToken, secondToken) {
            if (node.prefix) {
              if (secondToken.range[0] > firstToken.range[1]) {
                context.report({
                  node,
                  messageId: "unexpectedAfter",
                  data: { operator: firstToken.value },
                  fix(fixer) {
                    if (astUtils$14.canTokensBeAdjacent(firstToken, secondToken)) {
                      return fixer.removeRange([
                        firstToken.range[1],
                        secondToken.range[0]
                      ]);
                    }
                    return null;
                  }
                });
              }
            } else {
              if (secondToken.range[0] > firstToken.range[1]) {
                context.report({
                  node,
                  messageId: "unexpectedBefore",
                  data: { operator: secondToken.value },
                  fix(fixer) {
                    return fixer.removeRange([
                      firstToken.range[1],
                      secondToken.range[0]
                    ]);
                  }
                });
              }
            }
          }
          function checkForSpaces(node) {
            const tokens = node.type === "UpdateExpression" && !node.prefix ? sourceCode.getLastTokens(node, 2) : sourceCode.getFirstTokens(node, 2);
            const firstToken = tokens[0];
            const secondToken = tokens[1];
            if ((node.type === "NewExpression" || node.prefix) && firstToken.type === "Keyword") {
              checkUnaryWordOperatorForSpaces(node, firstToken, secondToken, firstToken.value);
              return;
            }
            const operator = node.prefix ? tokens[0].value : tokens[1].value;
            if (overrideExistsForOperator(operator)) {
              if (overrideEnforcesSpaces(operator)) {
                verifyNonWordsHaveSpaces(node, firstToken, secondToken);
              } else {
                verifyNonWordsDontHaveSpaces(node, firstToken, secondToken);
              }
            } else if (options.nonwords) {
              verifyNonWordsHaveSpaces(node, firstToken, secondToken);
            } else {
              verifyNonWordsDontHaveSpaces(node, firstToken, secondToken);
            }
          }
          return {
            UnaryExpression: checkForSpaces,
            UpdateExpression: checkForSpaces,
            NewExpression: checkForSpaces,
            YieldExpression: checkForSpacesAfterYield,
            AwaitExpression: checkForSpacesAfterAwait
          };
        }
      };
      var _spaceUnaryOps = exports$2b;

      var exports$2a = {};
      const astUtils$13 = _astUtils;
      exports$2a = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require symbol descriptions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/symbol-description"
          },
          fixable: null,
          schema: [],
          messages: { expected: "Expected Symbol to have a description." }
        },
        create(context) {
          function checkArgument(node) {
            if (node.arguments.length === 0) {
              context.report({
                node,
                messageId: "expected"
              });
            }
          }
          return {
            "Program:exit"() {
              const scope = context.getScope();
              const variable = astUtils$13.getVariableByName(scope, "Symbol");
              if (variable && variable.defs.length === 0) {
                variable.references.forEach(reference => {
                  const node = reference.identifier;
                  if (astUtils$13.isCallee(node)) {
                    checkArgument(node.parent);
                  }
                });
              }
            }
          };
        }
      };
      var _symbolDescription = exports$2a;

      var exports$29 = {};
      const astUtils$12 = _astUtils;
      exports$29 = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow spacing around embedded expressions of template strings",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/template-curly-spacing"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never"
              ]
            }],
          messages: {
            expectedBefore: "Expected space(s) before '}'.",
            expectedAfter: "Expected space(s) after '${'.",
            unexpectedBefore: "Unexpected space(s) before '}'.",
            unexpectedAfter: "Unexpected space(s) after '${'."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const always = context.options[0] === "always";
          function checkSpacingBefore(token) {
            if (!token.value.startsWith("}")) {
              return;
            }
            const prevToken = sourceCode.getTokenBefore(token, { includeComments: true }), hasSpace = sourceCode.isSpaceBetween(prevToken, token);
            if (!astUtils$12.isTokenOnSameLine(prevToken, token)) {
              return;
            }
            if (always && !hasSpace) {
              context.report({
                loc: {
                  start: token.loc.start,
                  end: {
                    line: token.loc.start.line,
                    column: token.loc.start.column + 1
                  }
                },
                messageId: "expectedBefore",
                fix: fixer => fixer.insertTextBefore(token, " ")
              });
            }
            if (!always && hasSpace) {
              context.report({
                loc: {
                  start: prevToken.loc.end,
                  end: token.loc.start
                },
                messageId: "unexpectedBefore",
                fix: fixer => fixer.removeRange([
                  prevToken.range[1],
                  token.range[0]
                ])
              });
            }
          }
          function checkSpacingAfter(token) {
            if (!token.value.endsWith("${")) {
              return;
            }
            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true }), hasSpace = sourceCode.isSpaceBetween(token, nextToken);
            if (!astUtils$12.isTokenOnSameLine(token, nextToken)) {
              return;
            }
            if (always && !hasSpace) {
              context.report({
                loc: {
                  start: {
                    line: token.loc.end.line,
                    column: token.loc.end.column - 2
                  },
                  end: token.loc.end
                },
                messageId: "expectedAfter",
                fix: fixer => fixer.insertTextAfter(token, " ")
              });
            }
            if (!always && hasSpace) {
              context.report({
                loc: {
                  start: token.loc.end,
                  end: nextToken.loc.start
                },
                messageId: "unexpectedAfter",
                fix: fixer => fixer.removeRange([
                  token.range[1],
                  nextToken.range[0]
                ])
              });
            }
          }
          return {
            TemplateElement(node) {
              const token = sourceCode.getFirstToken(node);
              checkSpacingBefore(token);
              checkSpacingAfter(token);
            }
          };
        }
      };
      var _templateCurlySpacing = exports$29;

      var exports$28 = {};
      exports$28 = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow Unicode byte order mark (BOM)",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/unicode-bom"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never"
              ]
            }],
          messages: {
            expected: "Expected Unicode BOM (Byte Order Mark).",
            unexpected: "Unexpected Unicode BOM (Byte Order Mark)."
          }
        },
        create(context) {
          return {
            Program: function checkUnicodeBOM(node) {
              const sourceCode = context.getSourceCode(), location = {
                  column: 0,
                  line: 1
                }, requireBOM = context.options[0] || "never";
              if (!sourceCode.hasBOM && requireBOM === "always") {
                context.report({
                  node,
                  loc: location,
                  messageId: "expected",
                  fix(fixer) {
                    return fixer.insertTextBeforeRange([
                      0,
                      1
                    ], "\uFEFF");
                  }
                });
              } else if (sourceCode.hasBOM && requireBOM === "never") {
                context.report({
                  node,
                  loc: location,
                  messageId: "unexpected",
                  fix(fixer) {
                    return fixer.removeRange([
                      -1,
                      0
                    ]);
                  }
                });
              }
            }
          };
        }
      };
      var _unicodeBom = exports$28;

      var _package = {
        "name": "doctrine",
        "description": "JSDoc parser",
        "homepage": "https://github.com/eslint/doctrine",
        "main": "lib/doctrine.js",
        "version": "3.0.0",
        "engines": {
          "node": ">=6.0.0"
        },
        "directories": {
          "lib": "./lib"
        },
        "files": ["lib"],
        "maintainers": [{
          "name": "Nicholas C. Zakas",
          "email": "nicholas+npm@nczconsulting.com",
          "web": "https://www.nczonline.net"
        }, {
          "name": "Yusuke Suzuki",
          "email": "utatane.tea@gmail.com",
          "web": "https://github.com/Constellation"
        }],
        "repository": "eslint/doctrine",
        "devDependencies": {
          "coveralls": "^3.0.1",
          "dateformat": "^1.0.11",
          "eslint": "^1.10.3",
          "eslint-release": "^1.0.0",
          "linefix": "^0.1.1",
          "mocha": "^3.4.2",
          "npm-license": "^0.3.1",
          "nyc": "^10.3.2",
          "semver": "^5.0.3",
          "shelljs": "^0.5.3",
          "shelljs-nodecli": "^0.1.1",
          "should": "^5.0.1"
        },
        "license": "Apache-2.0",
        "scripts": {
          "pretest": "npm run lint",
          "test": "nyc mocha",
          "coveralls": "nyc report --reporter=text-lcov | coveralls",
          "lint": "eslint lib/",
          "generate-release": "eslint-generate-release",
          "generate-alpharelease": "eslint-generate-prerelease alpha",
          "generate-betarelease": "eslint-generate-prerelease beta",
          "generate-rcrelease": "eslint-generate-prerelease rc",
          "publish-release": "eslint-publish-release"
        },
        "dependencies": {
          "esutils": "^2.0.2"
        }
      };

      var _global$7 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

      var exports$27 = {};

      (function () {

        var VERSION;
        VERSION = _package.version;
        exports$27.VERSION = VERSION;

        function DoctrineError(message) {
          (this || _global$7).name = "DoctrineError";
          (this || _global$7).message = message;
        }

        DoctrineError.prototype = function () {
          var Middle = function Middle() {};

          Middle.prototype = Error.prototype;
          return new Middle();
        }();

        DoctrineError.prototype.constructor = DoctrineError;
        exports$27.DoctrineError = DoctrineError;

        function throwError(message) {
          throw new DoctrineError(message);
        }

        exports$27.throwError = throwError;
        exports$27.assert = et;
      })();

      var _global$1$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

      var exports$1$i = {};

      (function () {

        var Syntax, Token, source, length, index, previous, token, value, esutils, utility, rangeOffset, addRange;
        esutils = exports$2$n;
        utility = exports$27;
        Syntax = {
          NullableLiteral: "NullableLiteral",
          AllLiteral: "AllLiteral",
          NullLiteral: "NullLiteral",
          UndefinedLiteral: "UndefinedLiteral",
          VoidLiteral: "VoidLiteral",
          UnionType: "UnionType",
          ArrayType: "ArrayType",
          RecordType: "RecordType",
          FieldType: "FieldType",
          FunctionType: "FunctionType",
          ParameterType: "ParameterType",
          RestType: "RestType",
          NonNullableType: "NonNullableType",
          OptionalType: "OptionalType",
          NullableType: "NullableType",
          NameExpression: "NameExpression",
          TypeApplication: "TypeApplication",
          StringLiteralType: "StringLiteralType",
          NumericLiteralType: "NumericLiteralType",
          BooleanLiteralType: "BooleanLiteralType"
        };
        Token = {
          ILLEGAL: 0,
          DOT_LT: 1,
          REST: 2,
          LT: 3,
          GT: 4,
          LPAREN: 5,
          RPAREN: 6,
          LBRACE: 7,
          RBRACE: 8,
          LBRACK: 9,
          RBRACK: 10,
          COMMA: 11,
          COLON: 12,
          STAR: 13,
          PIPE: 14,
          QUESTION: 15,
          BANG: 16,
          EQUAL: 17,
          NAME: 18,
          STRING: 19,
          NUMBER: 20,
          EOF: 21
        };

        function isTypeName(ch) {
          return "><(){}[],:*|?!=".indexOf(String.fromCharCode(ch)) === -1 && !esutils.code.isWhiteSpace(ch) && !esutils.code.isLineTerminator(ch);
        }

        function Context(previous, index, token, value) {
          (this || _global$1$2)._previous = previous;
          (this || _global$1$2)._index = index;
          (this || _global$1$2)._token = token;
          (this || _global$1$2)._value = value;
        }

        Context.prototype.restore = function () {
          previous = (this || _global$1$2)._previous;
          index = (this || _global$1$2)._index;
          token = (this || _global$1$2)._token;
          value = (this || _global$1$2)._value;
        };

        Context.save = function () {
          return new Context(previous, index, token, value);
        };

        function maybeAddRange(node, range) {
          if (addRange) {
            node.range = [range[0] + rangeOffset, range[1] + rangeOffset];
          }

          return node;
        }

        function advance() {
          var ch = source.charAt(index);
          index += 1;
          return ch;
        }

        function scanHexEscape(prefix) {
          var i,
              len,
              ch,
              code = 0;
          len = prefix === "u" ? 4 : 2;

          for (i = 0; i < len; ++i) {
            if (index < length && esutils.code.isHexDigit(source.charCodeAt(index))) {
              ch = advance();
              code = code * 16 + "0123456789abcdef".indexOf(ch.toLowerCase());
            } else {
              return "";
            }
          }

          return String.fromCharCode(code);
        }

        function scanString() {
          var str = "",
              quote,
              ch,
              code,
              unescaped,
              restore;
          quote = source.charAt(index);
          ++index;

          while (index < length) {
            ch = advance();

            if (ch === quote) {
              quote = "";
              break;
            } else if (ch === "\\") {
              ch = advance();

              if (!esutils.code.isLineTerminator(ch.charCodeAt(0))) {
                switch (ch) {
                  case "n":
                    str += "\n";
                    break;

                  case "r":
                    str += "\r";
                    break;

                  case "t":
                    str += "\t";
                    break;

                  case "u":
                  case "x":
                    restore = index;
                    unescaped = scanHexEscape(ch);

                    if (unescaped) {
                      str += unescaped;
                    } else {
                      index = restore;
                      str += ch;
                    }

                    break;

                  case "b":
                    str += "\b";
                    break;

                  case "f":
                    str += "\f";
                    break;

                  case "v":
                    str += "\x0B";
                    break;

                  default:
                    if (esutils.code.isOctalDigit(ch.charCodeAt(0))) {
                      code = "01234567".indexOf(ch);

                      if (index < length && esutils.code.isOctalDigit(source.charCodeAt(index))) {
                        code = code * 8 + "01234567".indexOf(advance());

                        if ("0123".indexOf(ch) >= 0 && index < length && esutils.code.isOctalDigit(source.charCodeAt(index))) {
                          code = code * 8 + "01234567".indexOf(advance());
                        }
                      }

                      str += String.fromCharCode(code);
                    } else {
                      str += ch;
                    }

                    break;
                }
              } else {
                if (ch === "\r" && source.charCodeAt(index) === 10) {
                  ++index;
                }
              }
            } else if (esutils.code.isLineTerminator(ch.charCodeAt(0))) {
              break;
            } else {
              str += ch;
            }
          }

          if (quote !== "") {
            utility.throwError("unexpected quote");
          }

          value = str;
          return Token.STRING;
        }

        function scanNumber() {
          var number, ch;
          number = "";
          ch = source.charCodeAt(index);

          if (ch !== 46) {
            number = advance();
            ch = source.charCodeAt(index);

            if (number === "0") {
              if (ch === 120 || ch === 88) {
                number += advance();

                while (index < length) {
                  ch = source.charCodeAt(index);

                  if (!esutils.code.isHexDigit(ch)) {
                    break;
                  }

                  number += advance();
                }

                if (number.length <= 2) {
                  utility.throwError("unexpected token");
                }

                if (index < length) {
                  ch = source.charCodeAt(index);

                  if (esutils.code.isIdentifierStartES5(ch)) {
                    utility.throwError("unexpected token");
                  }
                }

                value = parseInt(number, 16);
                return Token.NUMBER;
              }

              if (esutils.code.isOctalDigit(ch)) {
                number += advance();

                while (index < length) {
                  ch = source.charCodeAt(index);

                  if (!esutils.code.isOctalDigit(ch)) {
                    break;
                  }

                  number += advance();
                }

                if (index < length) {
                  ch = source.charCodeAt(index);

                  if (esutils.code.isIdentifierStartES5(ch) || esutils.code.isDecimalDigit(ch)) {
                    utility.throwError("unexpected token");
                  }
                }

                value = parseInt(number, 8);
                return Token.NUMBER;
              }

              if (esutils.code.isDecimalDigit(ch)) {
                utility.throwError("unexpected token");
              }
            }

            while (index < length) {
              ch = source.charCodeAt(index);

              if (!esutils.code.isDecimalDigit(ch)) {
                break;
              }

              number += advance();
            }
          }

          if (ch === 46) {
            number += advance();

            while (index < length) {
              ch = source.charCodeAt(index);

              if (!esutils.code.isDecimalDigit(ch)) {
                break;
              }

              number += advance();
            }
          }

          if (ch === 101 || ch === 69) {
            number += advance();
            ch = source.charCodeAt(index);

            if (ch === 43 || ch === 45) {
              number += advance();
            }

            ch = source.charCodeAt(index);

            if (esutils.code.isDecimalDigit(ch)) {
              number += advance();

              while (index < length) {
                ch = source.charCodeAt(index);

                if (!esutils.code.isDecimalDigit(ch)) {
                  break;
                }

                number += advance();
              }
            } else {
              utility.throwError("unexpected token");
            }
          }

          if (index < length) {
            ch = source.charCodeAt(index);

            if (esutils.code.isIdentifierStartES5(ch)) {
              utility.throwError("unexpected token");
            }
          }

          value = parseFloat(number);
          return Token.NUMBER;
        }

        function scanTypeName() {
          var ch, ch2;
          value = advance();

          while (index < length && isTypeName(source.charCodeAt(index))) {
            ch = source.charCodeAt(index);

            if (ch === 46) {
              if (index + 1 >= length) {
                return Token.ILLEGAL;
              }

              ch2 = source.charCodeAt(index + 1);

              if (ch2 === 60) {
                break;
              }
            }

            value += advance();
          }

          return Token.NAME;
        }

        function next() {
          var ch;
          previous = index;

          while (index < length && esutils.code.isWhiteSpace(source.charCodeAt(index))) {
            advance();
          }

          if (index >= length) {
            token = Token.EOF;
            return token;
          }

          ch = source.charCodeAt(index);

          switch (ch) {
            case 39:
            case 34:
              token = scanString();
              return token;

            case 58:
              advance();
              token = Token.COLON;
              return token;

            case 44:
              advance();
              token = Token.COMMA;
              return token;

            case 40:
              advance();
              token = Token.LPAREN;
              return token;

            case 41:
              advance();
              token = Token.RPAREN;
              return token;

            case 91:
              advance();
              token = Token.LBRACK;
              return token;

            case 93:
              advance();
              token = Token.RBRACK;
              return token;

            case 123:
              advance();
              token = Token.LBRACE;
              return token;

            case 125:
              advance();
              token = Token.RBRACE;
              return token;

            case 46:
              if (index + 1 < length) {
                ch = source.charCodeAt(index + 1);

                if (ch === 60) {
                  advance();
                  advance();
                  token = Token.DOT_LT;
                  return token;
                }

                if (ch === 46 && index + 2 < length && source.charCodeAt(index + 2) === 46) {
                  advance();
                  advance();
                  advance();
                  token = Token.REST;
                  return token;
                }

                if (esutils.code.isDecimalDigit(ch)) {
                  token = scanNumber();
                  return token;
                }
              }

              token = Token.ILLEGAL;
              return token;

            case 60:
              advance();
              token = Token.LT;
              return token;

            case 62:
              advance();
              token = Token.GT;
              return token;

            case 42:
              advance();
              token = Token.STAR;
              return token;

            case 124:
              advance();
              token = Token.PIPE;
              return token;

            case 63:
              advance();
              token = Token.QUESTION;
              return token;

            case 33:
              advance();
              token = Token.BANG;
              return token;

            case 61:
              advance();
              token = Token.EQUAL;
              return token;

            case 45:
              token = scanNumber();
              return token;

            default:
              if (esutils.code.isDecimalDigit(ch)) {
                token = scanNumber();
                return token;
              }

              utility.assert(isTypeName(ch));
              token = scanTypeName();
              return token;
          }
        }

        function consume(target, text) {
          utility.assert(token === target, text || "consumed token not matched");
          next();
        }

        function expect(target, message) {
          if (token !== target) {
            utility.throwError(message || "unexpected token");
          }

          next();
        }

        function parseUnionType() {
          var elements,
              startIndex = index - 1;
          consume(Token.LPAREN, "UnionType should start with (");
          elements = [];

          if (token !== Token.RPAREN) {
            while (true) {
              elements.push(parseTypeExpression());

              if (token === Token.RPAREN) {
                break;
              }

              expect(Token.PIPE);
            }
          }

          consume(Token.RPAREN, "UnionType should end with )");
          return maybeAddRange({
            type: Syntax.UnionType,
            elements: elements
          }, [startIndex, previous]);
        }

        function parseArrayType() {
          var elements,
              startIndex = index - 1,
              restStartIndex;
          consume(Token.LBRACK, "ArrayType should start with [");
          elements = [];

          while (token !== Token.RBRACK) {
            if (token === Token.REST) {
              restStartIndex = index - 3;
              consume(Token.REST);
              elements.push(maybeAddRange({
                type: Syntax.RestType,
                expression: parseTypeExpression()
              }, [restStartIndex, previous]));
              break;
            } else {
              elements.push(parseTypeExpression());
            }

            if (token !== Token.RBRACK) {
              expect(Token.COMMA);
            }
          }

          expect(Token.RBRACK);
          return maybeAddRange({
            type: Syntax.ArrayType,
            elements: elements
          }, [startIndex, previous]);
        }

        function parseFieldName() {
          var v = value;

          if (token === Token.NAME || token === Token.STRING) {
            next();
            return v;
          }

          if (token === Token.NUMBER) {
            consume(Token.NUMBER);
            return String(v);
          }

          utility.throwError("unexpected token");
        }

        function parseFieldType() {
          var key,
              rangeStart = previous;
          key = parseFieldName();

          if (token === Token.COLON) {
            consume(Token.COLON);
            return maybeAddRange({
              type: Syntax.FieldType,
              key: key,
              value: parseTypeExpression()
            }, [rangeStart, previous]);
          }

          return maybeAddRange({
            type: Syntax.FieldType,
            key: key,
            value: null
          }, [rangeStart, previous]);
        }

        function parseRecordType() {
          var fields,
              rangeStart = index - 1,
              rangeEnd;
          consume(Token.LBRACE, "RecordType should start with {");
          fields = [];

          if (token === Token.COMMA) {
            consume(Token.COMMA);
          } else {
            while (token !== Token.RBRACE) {
              fields.push(parseFieldType());

              if (token !== Token.RBRACE) {
                expect(Token.COMMA);
              }
            }
          }

          rangeEnd = index;
          expect(Token.RBRACE);
          return maybeAddRange({
            type: Syntax.RecordType,
            fields: fields
          }, [rangeStart, rangeEnd]);
        }

        function parseNameExpression() {
          var name = value,
              rangeStart = index - name.length;
          expect(Token.NAME);

          if (token === Token.COLON && (name === "module" || name === "external" || name === "event")) {
            consume(Token.COLON);
            name += ":" + value;
            expect(Token.NAME);
          }

          return maybeAddRange({
            type: Syntax.NameExpression,
            name: name
          }, [rangeStart, previous]);
        }

        function parseTypeExpressionList() {
          var elements = [];
          elements.push(parseTop());

          while (token === Token.COMMA) {
            consume(Token.COMMA);
            elements.push(parseTop());
          }

          return elements;
        }

        function parseTypeName() {
          var expr,
              applications,
              startIndex = index - value.length;
          expr = parseNameExpression();

          if (token === Token.DOT_LT || token === Token.LT) {
            next();
            applications = parseTypeExpressionList();
            expect(Token.GT);
            return maybeAddRange({
              type: Syntax.TypeApplication,
              expression: expr,
              applications: applications
            }, [startIndex, previous]);
          }

          return expr;
        }

        function parseResultType() {
          consume(Token.COLON, "ResultType should start with :");

          if (token === Token.NAME && value === "void") {
            consume(Token.NAME);
            return {
              type: Syntax.VoidLiteral
            };
          }

          return parseTypeExpression();
        }

        function parseParametersType() {
          var params = [],
              optionalSequence = false,
              expr,
              rest = false,
              startIndex,
              restStartIndex = index - 3,
              nameStartIndex;

          while (token !== Token.RPAREN) {
            if (token === Token.REST) {
              consume(Token.REST);
              rest = true;
            }

            startIndex = previous;
            expr = parseTypeExpression();

            if (expr.type === Syntax.NameExpression && token === Token.COLON) {
              nameStartIndex = previous - expr.name.length;
              consume(Token.COLON);
              expr = maybeAddRange({
                type: Syntax.ParameterType,
                name: expr.name,
                expression: parseTypeExpression()
              }, [nameStartIndex, previous]);
            }

            if (token === Token.EQUAL) {
              consume(Token.EQUAL);
              expr = maybeAddRange({
                type: Syntax.OptionalType,
                expression: expr
              }, [startIndex, previous]);
              optionalSequence = true;
            } else {
              if (optionalSequence) {
                utility.throwError("unexpected token");
              }
            }

            if (rest) {
              expr = maybeAddRange({
                type: Syntax.RestType,
                expression: expr
              }, [restStartIndex, previous]);
            }

            params.push(expr);

            if (token !== Token.RPAREN) {
              expect(Token.COMMA);
            }
          }

          return params;
        }

        function parseFunctionType() {
          var isNew,
              thisBinding,
              params,
              result,
              fnType,
              startIndex = index - value.length;
          utility.assert(token === Token.NAME && value === "function", "FunctionType should start with 'function'");
          consume(Token.NAME);
          expect(Token.LPAREN);
          isNew = false;
          params = [];
          thisBinding = null;

          if (token !== Token.RPAREN) {
            if (token === Token.NAME && (value === "this" || value === "new")) {
              isNew = value === "new";
              consume(Token.NAME);
              expect(Token.COLON);
              thisBinding = parseTypeName();

              if (token === Token.COMMA) {
                consume(Token.COMMA);
                params = parseParametersType();
              }
            } else {
              params = parseParametersType();
            }
          }

          expect(Token.RPAREN);
          result = null;

          if (token === Token.COLON) {
            result = parseResultType();
          }

          fnType = maybeAddRange({
            type: Syntax.FunctionType,
            params: params,
            result: result
          }, [startIndex, previous]);

          if (thisBinding) {
            fnType["this"] = thisBinding;

            if (isNew) {
              fnType["new"] = true;
            }
          }

          return fnType;
        }

        function parseBasicTypeExpression() {
          var context, startIndex;

          switch (token) {
            case Token.STAR:
              consume(Token.STAR);
              return maybeAddRange({
                type: Syntax.AllLiteral
              }, [previous - 1, previous]);

            case Token.LPAREN:
              return parseUnionType();

            case Token.LBRACK:
              return parseArrayType();

            case Token.LBRACE:
              return parseRecordType();

            case Token.NAME:
              startIndex = index - value.length;

              if (value === "null") {
                consume(Token.NAME);
                return maybeAddRange({
                  type: Syntax.NullLiteral
                }, [startIndex, previous]);
              }

              if (value === "undefined") {
                consume(Token.NAME);
                return maybeAddRange({
                  type: Syntax.UndefinedLiteral
                }, [startIndex, previous]);
              }

              if (value === "true" || value === "false") {
                consume(Token.NAME);
                return maybeAddRange({
                  type: Syntax.BooleanLiteralType,
                  value: value === "true"
                }, [startIndex, previous]);
              }

              context = Context.save();

              if (value === "function") {
                try {
                  return parseFunctionType();
                } catch (e) {
                  context.restore();
                }
              }

              return parseTypeName();

            case Token.STRING:
              next();
              return maybeAddRange({
                type: Syntax.StringLiteralType,
                value: value
              }, [previous - value.length - 2, previous]);

            case Token.NUMBER:
              next();
              return maybeAddRange({
                type: Syntax.NumericLiteralType,
                value: value
              }, [previous - String(value).length, previous]);

            default:
              utility.throwError("unexpected token");
          }
        }

        function parseTypeExpression() {
          var expr, rangeStart;

          if (token === Token.QUESTION) {
            rangeStart = index - 1;
            consume(Token.QUESTION);

            if (token === Token.COMMA || token === Token.EQUAL || token === Token.RBRACE || token === Token.RPAREN || token === Token.PIPE || token === Token.EOF || token === Token.RBRACK || token === Token.GT) {
              return maybeAddRange({
                type: Syntax.NullableLiteral
              }, [rangeStart, previous]);
            }

            return maybeAddRange({
              type: Syntax.NullableType,
              expression: parseBasicTypeExpression(),
              prefix: true
            }, [rangeStart, previous]);
          } else if (token === Token.BANG) {
            rangeStart = index - 1;
            consume(Token.BANG);
            return maybeAddRange({
              type: Syntax.NonNullableType,
              expression: parseBasicTypeExpression(),
              prefix: true
            }, [rangeStart, previous]);
          } else {
            rangeStart = previous;
          }

          expr = parseBasicTypeExpression();

          if (token === Token.BANG) {
            consume(Token.BANG);
            return maybeAddRange({
              type: Syntax.NonNullableType,
              expression: expr,
              prefix: false
            }, [rangeStart, previous]);
          }

          if (token === Token.QUESTION) {
            consume(Token.QUESTION);
            return maybeAddRange({
              type: Syntax.NullableType,
              expression: expr,
              prefix: false
            }, [rangeStart, previous]);
          }

          if (token === Token.LBRACK) {
            consume(Token.LBRACK);
            expect(Token.RBRACK, "expected an array-style type declaration (" + value + "[])");
            return maybeAddRange({
              type: Syntax.TypeApplication,
              expression: maybeAddRange({
                type: Syntax.NameExpression,
                name: "Array"
              }, [rangeStart, previous]),
              applications: [expr]
            }, [rangeStart, previous]);
          }

          return expr;
        }

        function parseTop() {
          var expr, elements;
          expr = parseTypeExpression();

          if (token !== Token.PIPE) {
            return expr;
          }

          elements = [expr];
          consume(Token.PIPE);

          while (true) {
            elements.push(parseTypeExpression());

            if (token !== Token.PIPE) {
              break;
            }

            consume(Token.PIPE);
          }

          return maybeAddRange({
            type: Syntax.UnionType,
            elements: elements
          }, [0, index]);
        }

        function parseTopParamType() {
          var expr;

          if (token === Token.REST) {
            consume(Token.REST);
            return maybeAddRange({
              type: Syntax.RestType,
              expression: parseTop()
            }, [0, index]);
          }

          expr = parseTop();

          if (token === Token.EQUAL) {
            consume(Token.EQUAL);
            return maybeAddRange({
              type: Syntax.OptionalType,
              expression: expr
            }, [0, index]);
          }

          return expr;
        }

        function parseType(src, opt) {
          var expr;
          source = src;
          length = source.length;
          index = 0;
          previous = 0;
          addRange = opt && opt.range;
          rangeOffset = opt && opt.startIndex || 0;
          next();
          expr = parseTop();

          if (opt && opt.midstream) {
            return {
              expression: expr,
              index: previous
            };
          }

          if (token !== Token.EOF) {
            utility.throwError("not reach to EOF");
          }

          return expr;
        }

        function parseParamType(src, opt) {
          var expr;
          source = src;
          length = source.length;
          index = 0;
          previous = 0;
          addRange = opt && opt.range;
          rangeOffset = opt && opt.startIndex || 0;
          next();
          expr = parseTopParamType();

          if (opt && opt.midstream) {
            return {
              expression: expr,
              index: previous
            };
          }

          if (token !== Token.EOF) {
            utility.throwError("not reach to EOF");
          }

          return expr;
        }

        function stringifyImpl(node, compact, topLevel) {
          var result, i, iz;

          switch (node.type) {
            case Syntax.NullableLiteral:
              result = "?";
              break;

            case Syntax.AllLiteral:
              result = "*";
              break;

            case Syntax.NullLiteral:
              result = "null";
              break;

            case Syntax.UndefinedLiteral:
              result = "undefined";
              break;

            case Syntax.VoidLiteral:
              result = "void";
              break;

            case Syntax.UnionType:
              if (!topLevel) {
                result = "(";
              } else {
                result = "";
              }

              for (i = 0, iz = node.elements.length; i < iz; ++i) {
                result += stringifyImpl(node.elements[i], compact);

                if (i + 1 !== iz) {
                  result += compact ? "|" : " | ";
                }
              }

              if (!topLevel) {
                result += ")";
              }

              break;

            case Syntax.ArrayType:
              result = "[";

              for (i = 0, iz = node.elements.length; i < iz; ++i) {
                result += stringifyImpl(node.elements[i], compact);

                if (i + 1 !== iz) {
                  result += compact ? "," : ", ";
                }
              }

              result += "]";
              break;

            case Syntax.RecordType:
              result = "{";

              for (i = 0, iz = node.fields.length; i < iz; ++i) {
                result += stringifyImpl(node.fields[i], compact);

                if (i + 1 !== iz) {
                  result += compact ? "," : ", ";
                }
              }

              result += "}";
              break;

            case Syntax.FieldType:
              if (node.value) {
                result = node.key + (compact ? ":" : ": ") + stringifyImpl(node.value, compact);
              } else {
                result = node.key;
              }

              break;

            case Syntax.FunctionType:
              result = compact ? "function(" : "function (";

              if (node["this"]) {
                if (node["new"]) {
                  result += compact ? "new:" : "new: ";
                } else {
                  result += compact ? "this:" : "this: ";
                }

                result += stringifyImpl(node["this"], compact);

                if (node.params.length !== 0) {
                  result += compact ? "," : ", ";
                }
              }

              for (i = 0, iz = node.params.length; i < iz; ++i) {
                result += stringifyImpl(node.params[i], compact);

                if (i + 1 !== iz) {
                  result += compact ? "," : ", ";
                }
              }

              result += ")";

              if (node.result) {
                result += (compact ? ":" : ": ") + stringifyImpl(node.result, compact);
              }

              break;

            case Syntax.ParameterType:
              result = node.name + (compact ? ":" : ": ") + stringifyImpl(node.expression, compact);
              break;

            case Syntax.RestType:
              result = "...";

              if (node.expression) {
                result += stringifyImpl(node.expression, compact);
              }

              break;

            case Syntax.NonNullableType:
              if (node.prefix) {
                result = "!" + stringifyImpl(node.expression, compact);
              } else {
                result = stringifyImpl(node.expression, compact) + "!";
              }

              break;

            case Syntax.OptionalType:
              result = stringifyImpl(node.expression, compact) + "=";
              break;

            case Syntax.NullableType:
              if (node.prefix) {
                result = "?" + stringifyImpl(node.expression, compact);
              } else {
                result = stringifyImpl(node.expression, compact) + "?";
              }

              break;

            case Syntax.NameExpression:
              result = node.name;
              break;

            case Syntax.TypeApplication:
              result = stringifyImpl(node.expression, compact) + ".<";

              for (i = 0, iz = node.applications.length; i < iz; ++i) {
                result += stringifyImpl(node.applications[i], compact);

                if (i + 1 !== iz) {
                  result += compact ? "," : ", ";
                }
              }

              result += ">";
              break;

            case Syntax.StringLiteralType:
              result = "\"" + node.value + "\"";
              break;

            case Syntax.NumericLiteralType:
              result = String(node.value);
              break;

            case Syntax.BooleanLiteralType:
              result = String(node.value);
              break;

            default:
              utility.throwError("Unknown type " + node.type);
          }

          return result;
        }

        function stringify(node, options) {
          if (options == null) {
            options = {};
          }

          return stringifyImpl(node, options.compact, options.topLevel);
        }

        exports$1$i.parseType = parseType;
        exports$1$i.parseParamType = parseParamType;
        exports$1$i.stringify = stringify;
        exports$1$i.Syntax = Syntax;
      })();

      exports$1$i.parseType;
          exports$1$i.parseParamType;
          exports$1$i.stringify;
          exports$1$i.Syntax;

      var _global$6 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$26 = {};
      (function () {
        var typed, utility, jsdoc, esutils, hasOwnProperty;
        esutils = exports$2$n;
        typed = exports$1$i;
        utility = exports$27;
        function sliceSource(source, index, last) {
          return source.slice(index, last);
        }
        hasOwnProperty = (function () {
          var func = Object.prototype.hasOwnProperty;
          return function hasOwnProperty(obj, name) {
            return func.call(obj, name);
          };
        }());
        function shallowCopy(obj) {
          var ret = {}, key;
          for (key in obj) {
            if (obj.hasOwnProperty(key)) {
              ret[key] = obj[key];
            }
          }
          return ret;
        }
        function isASCIIAlphanumeric(ch) {
          return ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90 || ch >= 48 && ch <= 57;
        }
        function isParamTitle(title) {
          return title === "param" || title === "argument" || title === "arg";
        }
        function isReturnTitle(title) {
          return title === "return" || title === "returns";
        }
        function isProperty(title) {
          return title === "property" || title === "prop";
        }
        function isNameParameterRequired(title) {
          return isParamTitle(title) || isProperty(title) || title === "alias" || title === "this" || title === "mixes" || title === "requires";
        }
        function isAllowedName(title) {
          return isNameParameterRequired(title) || title === "const" || title === "constant";
        }
        function isAllowedNested(title) {
          return isProperty(title) || isParamTitle(title);
        }
        function isAllowedOptional(title) {
          return isProperty(title) || isParamTitle(title);
        }
        function isTypeParameterRequired(title) {
          return isParamTitle(title) || isReturnTitle(title) || title === "define" || title === "enum" || title === "implements" || title === "this" || title === "type" || title === "typedef" || isProperty(title);
        }
        function isAllowedType(title) {
          return isTypeParameterRequired(title) || title === "throws" || title === "const" || title === "constant" || title === "namespace" || title === "member" || title === "var" || title === "module" || title === "constructor" || title === "class" || title === "extends" || title === "augments" || title === "public" || title === "private" || title === "protected";
        }
        var WHITESPACE = "[ \\f\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]";
        var STAR_MATCHER = "(" + WHITESPACE + "*(?:\\*" + WHITESPACE + "?)?)(.+|[\r\n\u2028\u2029])";
        function unwrapComment(doc) {
          return doc.replace(/^\/\*\*?/, "").replace(/\*\/$/, "").replace(new RegExp(STAR_MATCHER, "g"), "$2").replace(/\s*$/, "");
        }
        function convertUnwrappedCommentIndex(originalSource, unwrappedIndex) {
          var replacedSource = originalSource.replace(/^\/\*\*?/, "");
          var numSkippedChars = 0;
          var matcher = new RegExp(STAR_MATCHER, "g");
          var match;
          while (match = matcher.exec(replacedSource)) {
            numSkippedChars += match[1].length;
            if (match.index + match[0].length > unwrappedIndex + numSkippedChars) {
              return unwrappedIndex + numSkippedChars + originalSource.length - replacedSource.length;
            }
          }
          return originalSource.replace(/\*\/$/, "").replace(/\s*$/, "").length;
        }
        (function (exports) {
          var Rules, index, lineNumber, length, source, originalSource, recoverable, sloppy, strict;
          function advance() {
            var ch = source.charCodeAt(index);
            index += 1;
            if (esutils.code.isLineTerminator(ch) && !(ch === 13 && source.charCodeAt(index) === 10)) {
              lineNumber += 1;
            }
            return String.fromCharCode(ch);
          }
          function scanTitle() {
            var title = "";
            advance();
            while (index < length && isASCIIAlphanumeric(source.charCodeAt(index))) {
              title += advance();
            }
            return title;
          }
          function seekContent() {
            var ch, waiting, last = index;
            waiting = false;
            while (last < length) {
              ch = source.charCodeAt(last);
              if (esutils.code.isLineTerminator(ch) && !(ch === 13 && source.charCodeAt(last + 1) === 10)) {
                waiting = true;
              } else if (waiting) {
                if (ch === 64) {
                  break;
                }
                if (!esutils.code.isWhiteSpace(ch)) {
                  waiting = false;
                }
              }
              last += 1;
            }
            return last;
          }
          function parseType(title, last, addRange) {
            var ch, brace, type, startIndex, direct = false;
            while (index < last) {
              ch = source.charCodeAt(index);
              if (esutils.code.isWhiteSpace(ch)) {
                advance();
              } else if (ch === 123) {
                advance();
                break;
              } else {
                direct = true;
                break;
              }
            }
            if (direct) {
              return null;
            }
            brace = 1;
            type = "";
            while (index < last) {
              ch = source.charCodeAt(index);
              if (esutils.code.isLineTerminator(ch)) {
                advance();
              } else {
                if (ch === 125) {
                  brace -= 1;
                  if (brace === 0) {
                    advance();
                    break;
                  }
                } else if (ch === 123) {
                  brace += 1;
                }
                if (type === "") {
                  startIndex = index;
                }
                type += advance();
              }
            }
            if (brace !== 0) {
              return utility.throwError("Braces are not balanced");
            }
            if (isAllowedOptional(title)) {
              return typed.parseParamType(type, {
                startIndex: convertIndex(startIndex),
                range: addRange
              });
            }
            return typed.parseType(type, {
              startIndex: convertIndex(startIndex),
              range: addRange
            });
          }
          function scanIdentifier(last) {
            var identifier;
            if (!esutils.code.isIdentifierStartES5(source.charCodeAt(index)) && !source[index].match(/[0-9]/)) {
              return null;
            }
            identifier = advance();
            while (index < last && esutils.code.isIdentifierPartES5(source.charCodeAt(index))) {
              identifier += advance();
            }
            return identifier;
          }
          function skipWhiteSpace(last) {
            while (index < last && (esutils.code.isWhiteSpace(source.charCodeAt(index)) || esutils.code.isLineTerminator(source.charCodeAt(index)))) {
              advance();
            }
          }
          function parseName(last, allowBrackets, allowNestedParams) {
            var name = "", useBrackets, insideString;
            skipWhiteSpace(last);
            if (index >= last) {
              return null;
            }
            if (source.charCodeAt(index) === 91) {
              if (allowBrackets) {
                useBrackets = true;
                name = advance();
              } else {
                return null;
              }
            }
            name += scanIdentifier(last);
            if (allowNestedParams) {
              if (source.charCodeAt(index) === 58 && (name === "module" || name === "external" || name === "event")) {
                name += advance();
                name += scanIdentifier(last);
              }
              if (source.charCodeAt(index) === 91 && source.charCodeAt(index + 1) === 93) {
                name += advance();
                name += advance();
              }
              while (source.charCodeAt(index) === 46 || source.charCodeAt(index) === 47 || source.charCodeAt(index) === 35 || source.charCodeAt(index) === 45 || source.charCodeAt(index) === 126) {
                name += advance();
                name += scanIdentifier(last);
              }
            }
            if (useBrackets) {
              skipWhiteSpace(last);
              if (source.charCodeAt(index) === 61) {
                name += advance();
                skipWhiteSpace(last);
                var ch;
                var bracketDepth = 1;
                while (index < last) {
                  ch = source.charCodeAt(index);
                  if (esutils.code.isWhiteSpace(ch)) {
                    if (!insideString) {
                      skipWhiteSpace(last);
                      ch = source.charCodeAt(index);
                    }
                  }
                  if (ch === 39) {
                    if (!insideString) {
                      insideString = "'";
                    } else {
                      if (insideString === "'") {
                        insideString = "";
                      }
                    }
                  }
                  if (ch === 34) {
                    if (!insideString) {
                      insideString = "\"";
                    } else {
                      if (insideString === "\"") {
                        insideString = "";
                      }
                    }
                  }
                  if (ch === 91) {
                    bracketDepth++;
                  } else if (ch === 93 && --bracketDepth === 0) {
                    break;
                  }
                  name += advance();
                }
              }
              skipWhiteSpace(last);
              if (index >= last || source.charCodeAt(index) !== 93) {
                return null;
              }
              name += advance();
            }
            return name;
          }
          function skipToTag() {
            while (index < length && source.charCodeAt(index) !== 64) {
              advance();
            }
            if (index >= length) {
              return false;
            }
            utility.assert(source.charCodeAt(index) === 64);
            return true;
          }
          function convertIndex(rangeIndex) {
            if (source === originalSource) {
              return rangeIndex;
            }
            return convertUnwrappedCommentIndex(originalSource, rangeIndex);
          }
          function TagParser(options, title) {
            (this || _global$6)._options = options;
            (this || _global$6)._title = title.toLowerCase();
            (this || _global$6)._tag = {
              title: title,
              description: null
            };
            if ((this || _global$6)._options.lineNumbers) {
              (this || _global$6)._tag.lineNumber = lineNumber;
            }
            (this || _global$6)._first = index - title.length - 1;
            (this || _global$6)._last = 0;
            (this || _global$6)._extra = {};
          }
          TagParser.prototype.addError = function addError(errorText) {
            var args = Array.prototype.slice.call(arguments, 1), msg = errorText.replace(/%(\d)/g, function (whole, index) {
                utility.assert(index < args.length, "Message reference must be in range");
                return args[index];
              });
            if (!(this || _global$6)._tag.errors) {
              (this || _global$6)._tag.errors = [];
            }
            if (strict) {
              utility.throwError(msg);
            }
            (this || _global$6)._tag.errors.push(msg);
            return recoverable;
          };
          TagParser.prototype.parseType = function () {
            if (isTypeParameterRequired((this || _global$6)._title)) {
              try {
                (this || _global$6)._tag.type = parseType((this || _global$6)._title, (this || _global$6)._last, (this || _global$6)._options.range);
                if (!(this || _global$6)._tag.type) {
                  if (!isParamTitle((this || _global$6)._title) && !isReturnTitle((this || _global$6)._title)) {
                    if (!this.addError("Missing or invalid tag type")) {
                      return false;
                    }
                  }
                }
              } catch (error) {
                (this || _global$6)._tag.type = null;
                if (!this.addError(error.message)) {
                  return false;
                }
              }
            } else if (isAllowedType((this || _global$6)._title)) {
              try {
                (this || _global$6)._tag.type = parseType((this || _global$6)._title, (this || _global$6)._last, (this || _global$6)._options.range);
              } catch (e) {
              }
            }
            return true;
          };
          TagParser.prototype._parseNamePath = function (optional) {
            var name;
            name = parseName((this || _global$6)._last, sloppy && isAllowedOptional((this || _global$6)._title), true);
            if (!name) {
              if (!optional) {
                if (!this.addError("Missing or invalid tag name")) {
                  return false;
                }
              }
            }
            (this || _global$6)._tag.name = name;
            return true;
          };
          TagParser.prototype.parseNamePath = function () {
            return this._parseNamePath(false);
          };
          TagParser.prototype.parseNamePathOptional = function () {
            return this._parseNamePath(true);
          };
          TagParser.prototype.parseName = function () {
            var assign, name;
            if (isAllowedName((this || _global$6)._title)) {
              (this || _global$6)._tag.name = parseName((this || _global$6)._last, sloppy && isAllowedOptional((this || _global$6)._title), isAllowedNested((this || _global$6)._title));
              if (!(this || _global$6)._tag.name) {
                if (!isNameParameterRequired((this || _global$6)._title)) {
                  return true;
                }
                if (isParamTitle((this || _global$6)._title) && (this || _global$6)._tag.type && (this || _global$6)._tag.type.name) {
                  (this || _global$6)._extra.name = (this || _global$6)._tag.type;
                  (this || _global$6)._tag.name = (this || _global$6)._tag.type.name;
                  (this || _global$6)._tag.type = null;
                } else {
                  if (!this.addError("Missing or invalid tag name")) {
                    return false;
                  }
                }
              } else {
                name = (this || _global$6)._tag.name;
                if (name.charAt(0) === "[" && name.charAt(name.length - 1) === "]") {
                  assign = name.substring(1, name.length - 1).split("=");
                  if (assign.length > 1) {
                    (this || _global$6)._tag["default"] = assign.slice(1).join("=");
                  }
                  (this || _global$6)._tag.name = assign[0];
                  if ((this || _global$6)._tag.type && (this || _global$6)._tag.type.type !== "OptionalType") {
                    (this || _global$6)._tag.type = {
                      type: "OptionalType",
                      expression: (this || _global$6)._tag.type
                    };
                  }
                }
              }
            }
            return true;
          };
          TagParser.prototype.parseDescription = function parseDescription() {
            var description = sliceSource(source, index, (this || _global$6)._last).trim();
            if (description) {
              if (/^-\s+/.test(description)) {
                description = description.substring(2);
              }
              (this || _global$6)._tag.description = description;
            }
            return true;
          };
          TagParser.prototype.parseCaption = function parseDescription() {
            var description = sliceSource(source, index, (this || _global$6)._last).trim();
            var captionStartTag = "<caption>";
            var captionEndTag = "</caption>";
            var captionStart = description.indexOf(captionStartTag);
            var captionEnd = description.indexOf(captionEndTag);
            if (captionStart >= 0 && captionEnd >= 0) {
              (this || _global$6)._tag.caption = description.substring(captionStart + captionStartTag.length, captionEnd).trim();
              (this || _global$6)._tag.description = description.substring(captionEnd + captionEndTag.length).trim();
            } else {
              (this || _global$6)._tag.description = description;
            }
            return true;
          };
          TagParser.prototype.parseKind = function parseKind() {
            var kind, kinds;
            kinds = {
              "class": true,
              "constant": true,
              "event": true,
              "external": true,
              "file": true,
              "function": true,
              "member": true,
              "mixin": true,
              "module": true,
              "namespace": true,
              "typedef": true
            };
            kind = sliceSource(source, index, (this || _global$6)._last).trim();
            (this || _global$6)._tag.kind = kind;
            if (!hasOwnProperty(kinds, kind)) {
              if (!this.addError("Invalid kind name '%0'", kind)) {
                return false;
              }
            }
            return true;
          };
          TagParser.prototype.parseAccess = function parseAccess() {
            var access;
            access = sliceSource(source, index, (this || _global$6)._last).trim();
            (this || _global$6)._tag.access = access;
            if (access !== "private" && access !== "protected" && access !== "public") {
              if (!this.addError("Invalid access name '%0'", access)) {
                return false;
              }
            }
            return true;
          };
          TagParser.prototype.parseThis = function parseThis() {
            var value = sliceSource(source, index, (this || _global$6)._last).trim();
            if (value && value.charAt(0) === "{") {
              var gotType = this.parseType();
              if (gotType && (this || _global$6)._tag.type.type === "NameExpression" || (this || _global$6)._tag.type.type === "UnionType") {
                (this || _global$6)._tag.name = (this || _global$6)._tag.type.name;
                return true;
              } else {
                return this.addError("Invalid name for this");
              }
            } else {
              return this.parseNamePath();
            }
          };
          TagParser.prototype.parseVariation = function parseVariation() {
            var variation, text;
            text = sliceSource(source, index, (this || _global$6)._last).trim();
            variation = parseFloat(text, 10);
            (this || _global$6)._tag.variation = variation;
            if (isNaN(variation)) {
              if (!this.addError("Invalid variation '%0'", text)) {
                return false;
              }
            }
            return true;
          };
          TagParser.prototype.ensureEnd = function () {
            var shouldBeEmpty = sliceSource(source, index, (this || _global$6)._last).trim();
            if (shouldBeEmpty) {
              if (!this.addError("Unknown content '%0'", shouldBeEmpty)) {
                return false;
              }
            }
            return true;
          };
          TagParser.prototype.epilogue = function epilogue() {
            var description;
            description = (this || _global$6)._tag.description;
            if (isAllowedOptional((this || _global$6)._title) && !(this || _global$6)._tag.type && description && description.charAt(0) === "[") {
              (this || _global$6)._tag.type = (this || _global$6)._extra.name;
              if (!(this || _global$6)._tag.name) {
                (this || _global$6)._tag.name = undefined;
              }
              if (!sloppy) {
                if (!this.addError("Missing or invalid tag name")) {
                  return false;
                }
              }
            }
            return true;
          };
          Rules = {
            "access": ["parseAccess"],
            "alias": [
              "parseNamePath",
              "ensureEnd"
            ],
            "augments": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "constructor": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "class": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "extends": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "example": ["parseCaption"],
            "deprecated": ["parseDescription"],
            "global": ["ensureEnd"],
            "inner": ["ensureEnd"],
            "instance": ["ensureEnd"],
            "kind": ["parseKind"],
            "mixes": [
              "parseNamePath",
              "ensureEnd"
            ],
            "mixin": [
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "member": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "method": [
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "module": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "func": [
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "function": [
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "var": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "name": [
              "parseNamePath",
              "ensureEnd"
            ],
            "namespace": [
              "parseType",
              "parseNamePathOptional",
              "ensureEnd"
            ],
            "private": [
              "parseType",
              "parseDescription"
            ],
            "protected": [
              "parseType",
              "parseDescription"
            ],
            "public": [
              "parseType",
              "parseDescription"
            ],
            "readonly": ["ensureEnd"],
            "requires": [
              "parseNamePath",
              "ensureEnd"
            ],
            "since": ["parseDescription"],
            "static": ["ensureEnd"],
            "summary": ["parseDescription"],
            "this": [
              "parseThis",
              "ensureEnd"
            ],
            "todo": ["parseDescription"],
            "typedef": [
              "parseType",
              "parseNamePathOptional"
            ],
            "variation": ["parseVariation"],
            "version": ["parseDescription"]
          };
          TagParser.prototype.parse = function parse() {
            var i, iz, sequences, method;
            if (!(this || _global$6)._title) {
              if (!this.addError("Missing or invalid title")) {
                return null;
              }
            }
            (this || _global$6)._last = seekContent((this || _global$6)._title);
            if ((this || _global$6)._options.range) {
              (this || _global$6)._tag.range = [
                (this || _global$6)._first,
                source.slice(0, (this || _global$6)._last).replace(/\s*$/, "").length
              ].map(convertIndex);
            }
            if (hasOwnProperty(Rules, (this || _global$6)._title)) {
              sequences = Rules[(this || _global$6)._title];
            } else {
              sequences = [
                "parseType",
                "parseName",
                "parseDescription",
                "epilogue"
              ];
            }
            for (i = 0, iz = sequences.length; i < iz; ++i) {
              method = sequences[i];
              if (!this[method]()) {
                return null;
              }
            }
            return (this || _global$6)._tag;
          };
          function parseTag(options) {
            var title, parser, tag;
            if (!skipToTag()) {
              return null;
            }
            title = scanTitle();
            parser = new TagParser(options, title);
            tag = parser.parse();
            while (index < parser._last) {
              advance();
            }
            return tag;
          }
          function scanJSDocDescription(preserveWhitespace) {
            var description = "", ch, atAllowed;
            atAllowed = true;
            while (index < length) {
              ch = source.charCodeAt(index);
              if (atAllowed && ch === 64) {
                break;
              }
              if (esutils.code.isLineTerminator(ch)) {
                atAllowed = true;
              } else if (atAllowed && !esutils.code.isWhiteSpace(ch)) {
                atAllowed = false;
              }
              description += advance();
            }
            return preserveWhitespace ? description : description.trim();
          }
          function parse(comment, options) {
            var tags = [], tag, description, interestingTags, i, iz;
            if (options === undefined) {
              options = {};
            }
            if (typeof options.unwrap === "boolean" && options.unwrap) {
              source = unwrapComment(comment);
            } else {
              source = comment;
            }
            originalSource = comment;
            if (options.tags) {
              if (Array.isArray(options.tags)) {
                interestingTags = {};
                for (i = 0, iz = options.tags.length; i < iz; i++) {
                  if (typeof options.tags[i] === "string") {
                    interestingTags[options.tags[i]] = true;
                  } else {
                    utility.throwError("Invalid \"tags\" parameter: " + options.tags);
                  }
                }
              } else {
                utility.throwError("Invalid \"tags\" parameter: " + options.tags);
              }
            }
            length = source.length;
            index = 0;
            lineNumber = 0;
            recoverable = options.recoverable;
            sloppy = options.sloppy;
            strict = options.strict;
            description = scanJSDocDescription(options.preserveWhitespace);
            while (true) {
              tag = parseTag(options);
              if (!tag) {
                break;
              }
              if (!interestingTags || interestingTags.hasOwnProperty(tag.title)) {
                tags.push(tag);
              }
            }
            return {
              description: description,
              tags: tags
            };
          }
          exports.parse = parse;
        }(jsdoc = {}));
        exports$26.version = utility.VERSION;
        exports$26.parse = jsdoc.parse;
        exports$26.parseType = typed.parseType;
        exports$26.parseParamType = typed.parseParamType;
        exports$26.unwrapComment = unwrapComment;
        exports$26.Syntax = shallowCopy(typed.Syntax);
        exports$26.Error = utility.DoctrineError;
        exports$26.type = {
          Syntax: exports$26.Syntax,
          parseType: typed.parseType,
          parseParamType: typed.parseParamType,
          stringify: typed.stringify
        };
      }());
      const parse$3 = exports$26.parse, version$2 = exports$26.version, parseType = exports$26.parseType, parseParamType = exports$26.parseParamType, unwrapComment = exports$26.unwrapComment, Syntax = exports$26.Syntax, type = exports$26.type;
      const _Error = exports$26.Error;

      var _doctrine2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$26,
        Error: _Error,
        Syntax: Syntax,
        parse: parse$3,
        parseParamType: parseParamType,
        parseType: parseType,
        type: type,
        unwrapComment: unwrapComment,
        version: version$2
      });

      var _doctrine = "default" in _doctrine2 ? exports$26 : _doctrine2;
      var exports$25 = {};
      const doctrine = _doctrine;
      exports$25 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce valid JSDoc comments",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/valid-jsdoc"
          },
          schema: [{
              type: "object",
              properties: {
                prefer: {
                  type: "object",
                  additionalProperties: { type: "string" }
                },
                preferType: {
                  type: "object",
                  additionalProperties: { type: "string" }
                },
                requireReturn: {
                  type: "boolean",
                  default: true
                },
                requireParamDescription: {
                  type: "boolean",
                  default: true
                },
                requireReturnDescription: {
                  type: "boolean",
                  default: true
                },
                matchDescription: { type: "string" },
                requireReturnType: {
                  type: "boolean",
                  default: true
                },
                requireParamType: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: {
            unexpectedTag: "Unexpected @{{title}} tag; function has no return statement.",
            expected: "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.",
            use: "Use @{{name}} instead.",
            useType: "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.",
            syntaxError: "JSDoc syntax error.",
            missingBrace: "JSDoc type missing brace.",
            missingParamDesc: "Missing JSDoc parameter description for '{{name}}'.",
            missingParamType: "Missing JSDoc parameter type for '{{name}}'.",
            missingReturnType: "Missing JSDoc return type.",
            missingReturnDesc: "Missing JSDoc return description.",
            missingReturn: "Missing JSDoc @{{returns}} for function.",
            missingParam: "Missing JSDoc for parameter '{{name}}'.",
            duplicateParam: "Duplicate JSDoc parameter '{{name}}'.",
            unsatisfiedDesc: "JSDoc description does not satisfy the regex pattern."
          },
          deprecated: true,
          replacedBy: []
        },
        create(context) {
          const options = context.options[0] || {}, prefer = options.prefer || {}, sourceCode = context.getSourceCode(), requireReturn = options.requireReturn !== false, requireParamDescription = options.requireParamDescription !== false, requireReturnDescription = options.requireReturnDescription !== false, requireReturnType = options.requireReturnType !== false, requireParamType = options.requireParamType !== false, preferType = options.preferType || {}, checkPreferType = Object.keys(preferType).length !== 0;
          const fns = [];
          function isTypeClass(node) {
            return node.type === "ClassExpression" || node.type === "ClassDeclaration";
          }
          function startFunction(node) {
            fns.push({ returnPresent: node.type === "ArrowFunctionExpression" && node.body.type !== "BlockStatement" || isTypeClass(node) || node.async });
          }
          function addReturn(node) {
            const functionState = fns[fns.length - 1];
            if (functionState && node.argument !== null) {
              functionState.returnPresent = true;
            }
          }
          function isValidReturnType(tag) {
            return tag.type === null || tag.type.name === "void" || tag.type.type === "UndefinedLiteral";
          }
          function canTypeBeValidated(type) {
            return type !== "UndefinedLiteral" && type !== "NullLiteral" && type !== "NullableLiteral" && type !== "FunctionType" && type !== "AllLiteral";
          }
          function getCurrentExpectedTypes(type) {
            let currentType;
            if (type.name) {
              currentType = type;
            } else if (type.expression) {
              currentType = type.expression;
            }
            return {
              currentType,
              expectedTypeName: currentType && preferType[currentType.name]
            };
          }
          function getAbsoluteRange(jsdocComment, parsedJsdocNode) {
            return {
              start: sourceCode.getLocFromIndex(jsdocComment.range[0] + 2 + parsedJsdocNode.range[0]),
              end: sourceCode.getLocFromIndex(jsdocComment.range[0] + 2 + parsedJsdocNode.range[1])
            };
          }
          function validateType(jsdocNode, type) {
            if (!type || !canTypeBeValidated(type.type)) {
              return;
            }
            const typesToCheck = [];
            let elements = [];
            switch (type.type) {
            case "TypeApplication":
              elements = type.applications[0].type === "UnionType" ? type.applications[0].elements : type.applications;
              typesToCheck.push(getCurrentExpectedTypes(type));
              break;
            case "RecordType":
              elements = type.fields;
              break;
            case "UnionType":
            case "ArrayType":
              elements = type.elements;
              break;
            case "FieldType":
              if (type.value) {
                typesToCheck.push(getCurrentExpectedTypes(type.value));
              }
              break;
            default:
              typesToCheck.push(getCurrentExpectedTypes(type));
            }
            elements.forEach(validateType.bind(null, jsdocNode));
            typesToCheck.forEach(typeToCheck => {
              if (typeToCheck.expectedTypeName && typeToCheck.expectedTypeName !== typeToCheck.currentType.name) {
                context.report({
                  node: jsdocNode,
                  messageId: "useType",
                  loc: getAbsoluteRange(jsdocNode, typeToCheck.currentType),
                  data: {
                    currentTypeName: typeToCheck.currentType.name,
                    expectedTypeName: typeToCheck.expectedTypeName
                  },
                  fix(fixer) {
                    return fixer.replaceTextRange(typeToCheck.currentType.range.map(indexInComment => jsdocNode.range[0] + 2 + indexInComment), typeToCheck.expectedTypeName);
                  }
                });
              }
            });
          }
          function checkJSDoc(node) {
            const jsdocNode = sourceCode.getJSDocComment(node), functionData = fns.pop(), paramTagsByName = Object.create(null), paramTags = [];
            let hasReturns = false, returnsTag, hasConstructor = false, isInterface = false, isOverride = false, isAbstract = false;
            if (jsdocNode) {
              let jsdoc;
              try {
                jsdoc = doctrine.parse(jsdocNode.value, {
                  strict: true,
                  unwrap: true,
                  sloppy: true,
                  range: true
                });
              } catch (ex) {
                if (/braces/iu.test(ex.message)) {
                  context.report({
                    node: jsdocNode,
                    messageId: "missingBrace"
                  });
                } else {
                  context.report({
                    node: jsdocNode,
                    messageId: "syntaxError"
                  });
                }
                return;
              }
              jsdoc.tags.forEach(tag => {
                switch (tag.title.toLowerCase()) {
                case "param":
                case "arg":
                case "argument":
                  paramTags.push(tag);
                  break;
                case "return":
                case "returns":
                  hasReturns = true;
                  returnsTag = tag;
                  break;
                case "constructor":
                case "class":
                  hasConstructor = true;
                  break;
                case "override":
                case "inheritdoc":
                  isOverride = true;
                  break;
                case "abstract":
                case "virtual":
                  isAbstract = true;
                  break;
                case "interface":
                  isInterface = true;
                  break;
                }
                if (Object.prototype.hasOwnProperty.call(prefer, tag.title) && tag.title !== prefer[tag.title]) {
                  const entireTagRange = getAbsoluteRange(jsdocNode, tag);
                  context.report({
                    node: jsdocNode,
                    messageId: "use",
                    loc: {
                      start: entireTagRange.start,
                      end: {
                        line: entireTagRange.start.line,
                        column: entireTagRange.start.column + `@${ tag.title }`.length
                      }
                    },
                    data: { name: prefer[tag.title] },
                    fix(fixer) {
                      return fixer.replaceTextRange([
                        jsdocNode.range[0] + tag.range[0] + 3,
                        jsdocNode.range[0] + tag.range[0] + tag.title.length + 3
                      ], prefer[tag.title]);
                    }
                  });
                }
                if (checkPreferType && tag.type) {
                  validateType(jsdocNode, tag.type);
                }
              });
              paramTags.forEach(param => {
                if (requireParamType && !param.type) {
                  context.report({
                    node: jsdocNode,
                    messageId: "missingParamType",
                    loc: getAbsoluteRange(jsdocNode, param),
                    data: { name: param.name }
                  });
                }
                if (!param.description && requireParamDescription) {
                  context.report({
                    node: jsdocNode,
                    messageId: "missingParamDesc",
                    loc: getAbsoluteRange(jsdocNode, param),
                    data: { name: param.name }
                  });
                }
                if (paramTagsByName[param.name]) {
                  context.report({
                    node: jsdocNode,
                    messageId: "duplicateParam",
                    loc: getAbsoluteRange(jsdocNode, param),
                    data: { name: param.name }
                  });
                } else if (param.name.indexOf(".") === -1) {
                  paramTagsByName[param.name] = param;
                }
              });
              if (hasReturns) {
                if (!requireReturn && !functionData.returnPresent && (returnsTag.type === null || !isValidReturnType(returnsTag)) && !isAbstract) {
                  context.report({
                    node: jsdocNode,
                    messageId: "unexpectedTag",
                    loc: getAbsoluteRange(jsdocNode, returnsTag),
                    data: { title: returnsTag.title }
                  });
                } else {
                  if (requireReturnType && !returnsTag.type) {
                    context.report({
                      node: jsdocNode,
                      messageId: "missingReturnType"
                    });
                  }
                  if (!isValidReturnType(returnsTag) && !returnsTag.description && requireReturnDescription) {
                    context.report({
                      node: jsdocNode,
                      messageId: "missingReturnDesc"
                    });
                  }
                }
              }
              if (!isOverride && !hasReturns && !hasConstructor && !isInterface && node.parent.kind !== "get" && node.parent.kind !== "constructor" && node.parent.kind !== "set" && !isTypeClass(node)) {
                if (requireReturn || functionData.returnPresent && !node.async) {
                  context.report({
                    node: jsdocNode,
                    messageId: "missingReturn",
                    data: { returns: prefer.returns || "returns" }
                  });
                }
              }
              const jsdocParamNames = Object.keys(paramTagsByName);
              if (node.params) {
                node.params.forEach((param, paramsIndex) => {
                  const bindingParam = param.type === "AssignmentPattern" ? param.left : param;
                  if (bindingParam.type === "Identifier") {
                    const name = bindingParam.name;
                    if (jsdocParamNames[paramsIndex] && name !== jsdocParamNames[paramsIndex]) {
                      context.report({
                        node: jsdocNode,
                        messageId: "expected",
                        loc: getAbsoluteRange(jsdocNode, paramTagsByName[jsdocParamNames[paramsIndex]]),
                        data: {
                          name,
                          jsdocName: jsdocParamNames[paramsIndex]
                        }
                      });
                    } else if (!paramTagsByName[name] && !isOverride) {
                      context.report({
                        node: jsdocNode,
                        messageId: "missingParam",
                        data: { name }
                      });
                    }
                  }
                });
              }
              if (options.matchDescription) {
                const regex = new RegExp(options.matchDescription, "u");
                if (!regex.test(jsdoc.description)) {
                  context.report({
                    node: jsdocNode,
                    messageId: "unsatisfiedDesc"
                  });
                }
              }
            }
          }
          return {
            ArrowFunctionExpression: startFunction,
            FunctionExpression: startFunction,
            FunctionDeclaration: startFunction,
            ClassExpression: startFunction,
            ClassDeclaration: startFunction,
            "ArrowFunctionExpression:exit": checkJSDoc,
            "FunctionExpression:exit": checkJSDoc,
            "FunctionDeclaration:exit": checkJSDoc,
            "ClassExpression:exit": checkJSDoc,
            "ClassDeclaration:exit": checkJSDoc,
            ReturnStatement: addReturn
          };
        }
      };
      var _validJsdoc = exports$25;

      var _debug$4 = "default" in _debug2 ? _browser : _debug2;
      var exports$23 = {};
      const debug$4 = _debug$4("eslint:rules");
      class LazyLoadingRuleMap$1 extends Map {
        constructor(loaders) {
          let remaining = loaders.length;
          super(debug$4.enabled ? loaders.map(([ruleId, load]) => {
            let cache = null;
            return [
              ruleId,
              () => {
                if (!cache) {
                  debug$4("Loading rule %o (remaining=%d)", ruleId, --remaining);
                  cache = load();
                }
                return cache;
              }
            ];
          }) : loaders);
          Object.defineProperty(LazyLoadingRuleMap$1.prototype, "set", {
            configurable: true,
            value: void 0
          });
        }
        get(ruleId) {
          const load = super.get(ruleId);
          return load && load();
        }
        *values() {
          for (const load of super.values()) {
            yield load();
          }
        }
        *entries() {
          for (const [ruleId, load] of super.entries()) {
            yield [
              ruleId,
              load()
            ];
          }
        }
        forEach(callbackFn, thisArg) {
          for (const [ruleId, load] of super.entries()) {
            callbackFn.call(thisArg, load(), ruleId, this);
          }
        }
      }
      Object.defineProperties(LazyLoadingRuleMap$1.prototype, {
        clear: {
          configurable: true,
          value: void 0
        },
        delete: {
          configurable: true,
          value: void 0
        },
        [Symbol.iterator]: {
          configurable: true,
          writable: true,
          value: LazyLoadingRuleMap$1.prototype.entries
        }
      });
      exports$23 = { LazyLoadingRuleMap: LazyLoadingRuleMap$1 };
      var _lazyLoadingRuleMap = exports$23;
      var exports$22 = {};
      const astUtils$10 = _astUtils;
      const TARGET_NODE_TYPE$2 = /^(?:Arrow)?FunctionExpression$/u;
      const TARGET_METHODS = /^(?:every|filter|find(?:Index)?|flatMap|forEach|map|reduce(?:Right)?|some|sort)$/u;
      function isReachable$2(segment) {
        return segment.reachable;
      }
      function isTargetMethod(node) {
        return astUtils$10.isSpecificMemberAccess(node, null, TARGET_METHODS);
      }
      function fullMethodName(arrayMethodName) {
        if ([
            "from",
            "of",
            "isArray"
          ].includes(arrayMethodName)) {
          return "Array.".concat(arrayMethodName);
        }
        return "Array.prototype.".concat(arrayMethodName);
      }
      function getArrayMethodName(node) {
        let currentNode = node;
        while (currentNode) {
          const parent = currentNode.parent;
          switch (parent.type) {
          case "LogicalExpression":
          case "ConditionalExpression":
          case "ChainExpression":
            currentNode = parent;
            break;
          case "ReturnStatement": {
              const func = astUtils$10.getUpperFunction(parent);
              if (func === null || !astUtils$10.isCallee(func)) {
                return null;
              }
              currentNode = func.parent;
              break;
            }
          case "CallExpression":
            if (astUtils$10.isArrayFromMethod(parent.callee)) {
              if (parent.arguments.length >= 2 && parent.arguments[1] === currentNode) {
                return "from";
              }
            }
            if (isTargetMethod(parent.callee)) {
              if (parent.arguments.length >= 1 && parent.arguments[0] === currentNode) {
                return astUtils$10.getStaticPropertyName(parent.callee);
              }
            }
            return null;
          default:
            return null;
          }
        }
        return null;
      }
      exports$22 = {
        meta: {
          type: "problem",
          docs: {
            description: "enforce `return` statements in callbacks of array methods",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/array-callback-return"
          },
          schema: [{
              type: "object",
              properties: {
                allowImplicit: {
                  type: "boolean",
                  default: false
                },
                checkForEach: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            expectedAtEnd: "{{arrayMethodName}}() expects a value to be returned at the end of {{name}}.",
            expectedInside: "{{arrayMethodName}}() expects a return value from {{name}}.",
            expectedReturnValue: "{{arrayMethodName}}() expects a return value from {{name}}.",
            expectedNoReturnValue: "{{arrayMethodName}}() expects no useless return value from {{name}}."
          }
        },
        create(context) {
          const options = context.options[0] || {
            allowImplicit: false,
            checkForEach: false
          };
          const sourceCode = context.getSourceCode();
          let funcInfo = {
            arrayMethodName: null,
            upper: null,
            codePath: null,
            hasReturn: false,
            shouldCheck: false,
            node: null
          };
          function checkLastSegment(node) {
            if (!funcInfo.shouldCheck) {
              return;
            }
            let messageId = null;
            if (funcInfo.arrayMethodName === "forEach") {
              if (options.checkForEach && node.type === "ArrowFunctionExpression" && node.expression) {
                messageId = "expectedNoReturnValue";
              }
            } else {
              if (node.body.type === "BlockStatement" && funcInfo.codePath.currentSegments.some(isReachable$2)) {
                messageId = funcInfo.hasReturn ? "expectedAtEnd" : "expectedInside";
              }
            }
            if (messageId) {
              const name = astUtils$10.getFunctionNameWithKind(node);
              context.report({
                node,
                loc: astUtils$10.getFunctionHeadLoc(node, sourceCode),
                messageId,
                data: {
                  name,
                  arrayMethodName: fullMethodName(funcInfo.arrayMethodName)
                }
              });
            }
          }
          return {
            onCodePathStart(codePath, node) {
              let methodName = null;
              if (TARGET_NODE_TYPE$2.test(node.type)) {
                methodName = getArrayMethodName(node);
              }
              funcInfo = {
                arrayMethodName: methodName,
                upper: funcInfo,
                codePath,
                hasReturn: false,
                shouldCheck: methodName && !node.async && !node.generator,
                node
              };
            },
            onCodePathEnd() {
              funcInfo = funcInfo.upper;
            },
            ReturnStatement(node) {
              if (!funcInfo.shouldCheck) {
                return;
              }
              funcInfo.hasReturn = true;
              let messageId = null;
              if (funcInfo.arrayMethodName === "forEach") {
                if (options.checkForEach && node.argument) {
                  messageId = "expectedNoReturnValue";
                }
              } else {
                if (!options.allowImplicit && !node.argument) {
                  messageId = "expectedReturnValue";
                }
              }
              if (messageId) {
                context.report({
                  node,
                  messageId,
                  data: {
                    name: astUtils$10.getFunctionNameWithKind(funcInfo.node),
                    arrayMethodName: fullMethodName(funcInfo.arrayMethodName)
                  }
                });
              }
            },
            "FunctionExpression:exit": checkLastSegment,
            "ArrowFunctionExpression:exit": checkLastSegment
          };
        }
      };
      var _arrayCallbackReturn = exports$22;
      var exports$21 = {};
      const astUtils$$ = _astUtils;
      function hasBlockBody(node) {
        return node.body.type === "BlockStatement";
      }
      exports$21 = {
        meta: {
          type: "layout",
          docs: {
            description: "require parentheses around arrow function arguments",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/arrow-parens"
          },
          fixable: "code",
          schema: [
            {
              enum: [
                "always",
                "as-needed"
              ]
            },
            {
              type: "object",
              properties: {
                requireForBlockBody: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            unexpectedParens: "Unexpected parentheses around single function argument.",
            expectedParens: "Expected parentheses around arrow function argument.",
            unexpectedParensInline: "Unexpected parentheses around single function argument having a body with no curly braces.",
            expectedParensBlock: "Expected parentheses around arrow function argument having a body with curly braces."
          }
        },
        create(context) {
          const asNeeded = context.options[0] === "as-needed";
          const requireForBlockBody = asNeeded && context.options[1] && context.options[1].requireForBlockBody === true;
          const sourceCode = context.getSourceCode();
          function findOpeningParenOfParams(node) {
            const tokenBeforeParams = sourceCode.getTokenBefore(node.params[0]);
            if (tokenBeforeParams && astUtils$$.isOpeningParenToken(tokenBeforeParams) && node.range[0] <= tokenBeforeParams.range[0]) {
              return tokenBeforeParams;
            }
            return null;
          }
          function getClosingParenOfParams(node) {
            return sourceCode.getTokenAfter(node.params[0], astUtils$$.isClosingParenToken);
          }
          function hasCommentsInParensOfParams(node, openingParen) {
            return sourceCode.commentsExistBetween(openingParen, getClosingParenOfParams(node));
          }
          function hasUnexpectedTokensBeforeOpeningParen(node, openingParen) {
            const expectedCount = node.async ? 1 : 0;
            return sourceCode.getFirstToken(node, { skip: expectedCount }) !== openingParen;
          }
          return {
            "ArrowFunctionExpression[params.length=1]"(node) {
              const shouldHaveParens = !asNeeded || requireForBlockBody && hasBlockBody(node);
              const openingParen = findOpeningParenOfParams(node);
              const hasParens = openingParen !== null;
              const [param] = node.params;
              if (shouldHaveParens && !hasParens) {
                context.report({
                  node,
                  messageId: requireForBlockBody ? "expectedParensBlock" : "expectedParens",
                  loc: param.loc,
                  *fix(fixer) {
                    yield fixer.insertTextBefore(param, "(");
                    yield fixer.insertTextAfter(param, ")");
                  }
                });
              }
              if (!shouldHaveParens && hasParens && param.type === "Identifier" && !param.typeAnnotation && !node.returnType && !hasCommentsInParensOfParams(node, openingParen) && !hasUnexpectedTokensBeforeOpeningParen(node, openingParen)) {
                context.report({
                  node,
                  messageId: requireForBlockBody ? "unexpectedParensInline" : "unexpectedParens",
                  loc: param.loc,
                  *fix(fixer) {
                    const tokenBeforeOpeningParen = sourceCode.getTokenBefore(openingParen);
                    const closingParen = getClosingParenOfParams(node);
                    if (tokenBeforeOpeningParen && tokenBeforeOpeningParen.range[1] === openingParen.range[0] && !astUtils$$.canTokensBeAdjacent(tokenBeforeOpeningParen, sourceCode.getFirstToken(param))) {
                      yield fixer.insertTextBefore(openingParen, " ");
                    }
                    yield fixer.removeRange([
                      openingParen.range[0],
                      param.range[0]
                    ]);
                    yield fixer.removeRange([
                      param.range[1],
                      closingParen.range[1]
                    ]);
                  }
                });
              }
            }
          };
        }
      };
      var _arrowParens = exports$21;
      var exports$20 = {};
      exports$20 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce the use of variables within the scope they are defined",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/block-scoped-var"
          },
          schema: [],
          messages: { outOfScope: "'{{name}}' used outside of binding context." }
        },
        create(context) {
          let stack = [];
          function enterScope(node) {
            stack.push(node.range);
          }
          function exitScope() {
            stack.pop();
          }
          function report(reference) {
            const identifier = reference.identifier;
            context.report({
              node: identifier,
              messageId: "outOfScope",
              data: { name: identifier.name }
            });
          }
          function checkForVariables(node) {
            if (node.kind !== "var") {
              return;
            }
            const scopeRange = stack[stack.length - 1];
            function isOutsideOfScope(reference) {
              const idRange = reference.identifier.range;
              return idRange[0] < scopeRange[0] || idRange[1] > scopeRange[1];
            }
            const variables = context.getDeclaredVariables(node);
            for (let i = 0; i < variables.length; ++i) {
              variables[i].references.filter(isOutsideOfScope).forEach(report);
            }
          }
          return {
            Program(node) {
              stack = [node.range];
            },
            BlockStatement: enterScope,
            "BlockStatement:exit": exitScope,
            ForStatement: enterScope,
            "ForStatement:exit": exitScope,
            ForInStatement: enterScope,
            "ForInStatement:exit": exitScope,
            ForOfStatement: enterScope,
            "ForOfStatement:exit": exitScope,
            SwitchStatement: enterScope,
            "SwitchStatement:exit": exitScope,
            CatchClause: enterScope,
            "CatchClause:exit": exitScope,
            VariableDeclaration: checkForVariables
          };
        }
      };
      var _blockScopedVar = exports$20;
      var exports$1$ = {};
      const LETTER_PATTERN = _letters;
      const astUtils$_ = _astUtils;
      const DEFAULT_IGNORE_PATTERN = astUtils$_.COMMENTS_IGNORE_PATTERN, WHITESPACE = /\s/gu, MAYBE_URL = /^\s*[^:/?#\s]+:\/\/[^?#]/u;
      const SCHEMA_BODY = {
        type: "object",
        properties: {
          ignorePattern: { type: "string" },
          ignoreInlineComments: { type: "boolean" },
          ignoreConsecutiveComments: { type: "boolean" }
        },
        additionalProperties: false
      };
      const DEFAULTS = {
        ignorePattern: "",
        ignoreInlineComments: false,
        ignoreConsecutiveComments: false
      };
      function getNormalizedOptions(rawOptions, which) {
        return Object.assign({}, DEFAULTS, rawOptions[which] || rawOptions);
      }
      function getAllNormalizedOptions(rawOptions = {}) {
        return {
          Line: getNormalizedOptions(rawOptions, "line"),
          Block: getNormalizedOptions(rawOptions, "block")
        };
      }
      function createRegExpForIgnorePatterns(normalizedOptions) {
        Object.keys(normalizedOptions).forEach(key => {
          const ignorePatternStr = normalizedOptions[key].ignorePattern;
          if (ignorePatternStr) {
            const regExp = RegExp(`^\\s*(?:${ ignorePatternStr })`, "u");
            normalizedOptions[key].ignorePatternRegExp = regExp;
          }
        });
      }
      exports$1$ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce or disallow capitalization of the first letter of a comment",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/capitalized-comments"
          },
          fixable: "code",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              oneOf: [
                SCHEMA_BODY,
                {
                  type: "object",
                  properties: {
                    line: SCHEMA_BODY,
                    block: SCHEMA_BODY
                  },
                  additionalProperties: false
                }
              ]
            }
          ],
          messages: {
            unexpectedLowercaseComment: "Comments should not begin with a lowercase character.",
            unexpectedUppercaseComment: "Comments should not begin with an uppercase character."
          }
        },
        create(context) {
          const capitalize = context.options[0] || "always", normalizedOptions = getAllNormalizedOptions(context.options[1]), sourceCode = context.getSourceCode();
          createRegExpForIgnorePatterns(normalizedOptions);
          function isInlineComment(comment) {
            const previousToken = sourceCode.getTokenBefore(comment, { includeComments: true }), nextToken = sourceCode.getTokenAfter(comment, { includeComments: true });
            return Boolean(previousToken && nextToken && comment.loc.start.line === previousToken.loc.end.line && comment.loc.end.line === nextToken.loc.start.line);
          }
          function isConsecutiveComment(comment) {
            const previousTokenOrComment = sourceCode.getTokenBefore(comment, { includeComments: true });
            return Boolean(previousTokenOrComment && [
              "Block",
              "Line"
            ].indexOf(previousTokenOrComment.type) !== -1);
          }
          function isCommentValid(comment, options) {
            if (DEFAULT_IGNORE_PATTERN.test(comment.value)) {
              return true;
            }
            const commentWithoutAsterisks = comment.value.replace(/\*/gu, "");
            if (options.ignorePatternRegExp && options.ignorePatternRegExp.test(commentWithoutAsterisks)) {
              return true;
            }
            if (options.ignoreInlineComments && isInlineComment(comment)) {
              return true;
            }
            if (options.ignoreConsecutiveComments && isConsecutiveComment(comment)) {
              return true;
            }
            if (MAYBE_URL.test(commentWithoutAsterisks)) {
              return true;
            }
            const commentWordCharsOnly = commentWithoutAsterisks.replace(WHITESPACE, "");
            if (commentWordCharsOnly.length === 0) {
              return true;
            }
            const firstWordChar = commentWordCharsOnly[0];
            if (!LETTER_PATTERN.test(firstWordChar)) {
              return true;
            }
            const isUppercase = firstWordChar !== firstWordChar.toLocaleLowerCase(), isLowercase = firstWordChar !== firstWordChar.toLocaleUpperCase();
            if (capitalize === "always" && isLowercase) {
              return false;
            }
            if (capitalize === "never" && isUppercase) {
              return false;
            }
            return true;
          }
          function processComment(comment) {
            const options = normalizedOptions[comment.type], commentValid = isCommentValid(comment, options);
            if (!commentValid) {
              const messageId = capitalize === "always" ? "unexpectedLowercaseComment" : "unexpectedUppercaseComment";
              context.report({
                node: null,
                loc: comment.loc,
                messageId,
                fix(fixer) {
                  const match = comment.value.match(LETTER_PATTERN);
                  return fixer.replaceTextRange([
                    comment.range[0] + match.index + 2,
                    comment.range[0] + match.index + 3
                  ], capitalize === "always" ? match[0].toLocaleUpperCase() : match[0].toLocaleLowerCase());
                }
              });
            }
          }
          return {
            Program() {
              const comments = sourceCode.getAllComments();
              comments.filter(token => token.type !== "Shebang").forEach(processComment);
            }
          };
        }
      };
      var _capitalizedComments = exports$1$;
      var exports$1_ = {};
      const astUtils$Z = _astUtils;
      const {upperCaseFirst} = _stringUtils;
      function isUnreachable(segment) {
        return !segment.reachable;
      }
      function isClassConstructor(node) {
        return node.type === "FunctionExpression" && node.parent && node.parent.type === "MethodDefinition" && node.parent.kind === "constructor";
      }
      exports$1_ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `return` statements to either always or never specify values",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/consistent-return"
          },
          schema: [{
              type: "object",
              properties: {
                treatUndefinedAsUnspecified: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            missingReturn: "Expected to return a value at the end of {{name}}.",
            missingReturnValue: "{{name}} expected a return value.",
            unexpectedReturnValue: "{{name}} expected no return value."
          }
        },
        create(context) {
          const options = context.options[0] || {};
          const treatUndefinedAsUnspecified = options.treatUndefinedAsUnspecified === true;
          let funcInfo = null;
          function checkLastSegment(node) {
            let loc, name;
            if (!funcInfo.hasReturnValue || funcInfo.codePath.currentSegments.every(isUnreachable) || astUtils$Z.isES5Constructor(node) || isClassConstructor(node)) {
              return;
            }
            if (node.type === "Program") {
              loc = {
                line: 1,
                column: 0
              };
              name = "program";
            } else if (node.type === "ArrowFunctionExpression") {
              loc = context.getSourceCode().getTokenBefore(node.body, astUtils$Z.isArrowToken).loc;
            } else if (node.parent.type === "MethodDefinition" || node.parent.type === "Property" && node.parent.method) {
              loc = node.parent.key.loc;
            } else {
              loc = (node.id || context.getSourceCode().getFirstToken(node)).loc;
            }
            if (!name) {
              name = astUtils$Z.getFunctionNameWithKind(node);
            }
            context.report({
              node,
              loc,
              messageId: "missingReturn",
              data: { name }
            });
          }
          return {
            onCodePathStart(codePath, node) {
              funcInfo = {
                upper: funcInfo,
                codePath,
                hasReturn: false,
                hasReturnValue: false,
                messageId: "",
                node
              };
            },
            onCodePathEnd() {
              funcInfo = funcInfo.upper;
            },
            ReturnStatement(node) {
              const argument = node.argument;
              let hasReturnValue = Boolean(argument);
              if (treatUndefinedAsUnspecified && hasReturnValue) {
                hasReturnValue = !astUtils$Z.isSpecificId(argument, "undefined") && argument.operator !== "void";
              }
              if (!funcInfo.hasReturn) {
                funcInfo.hasReturn = true;
                funcInfo.hasReturnValue = hasReturnValue;
                funcInfo.messageId = hasReturnValue ? "missingReturnValue" : "unexpectedReturnValue";
                funcInfo.data = { name: funcInfo.node.type === "Program" ? "Program" : upperCaseFirst(astUtils$Z.getFunctionNameWithKind(funcInfo.node)) };
              } else if (funcInfo.hasReturnValue !== hasReturnValue) {
                context.report({
                  node,
                  messageId: funcInfo.messageId,
                  data: funcInfo.data
                });
              }
            },
            "Program:exit": checkLastSegment,
            "FunctionDeclaration:exit": checkLastSegment,
            "FunctionExpression:exit": checkLastSegment,
            "ArrowFunctionExpression:exit": checkLastSegment
          };
        }
      };
      var _consistentReturn = exports$1_;
      var exports$1Z = {};
      exports$1Z = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce consistent naming when capturing the current execution context",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/consistent-this"
          },
          schema: {
            type: "array",
            items: {
              type: "string",
              minLength: 1
            },
            uniqueItems: true
          },
          messages: {
            aliasNotAssignedToThis: "Designated alias '{{name}}' is not assigned to 'this'.",
            unexpectedAlias: "Unexpected alias '{{name}}' for 'this'."
          }
        },
        create(context) {
          let aliases = [];
          if (context.options.length === 0) {
            aliases.push("that");
          } else {
            aliases = context.options;
          }
          function reportBadAssignment(node, name) {
            context.report({
              node,
              messageId: "aliasNotAssignedToThis",
              data: { name }
            });
          }
          function checkAssignment(node, name, value) {
            const isThis = value.type === "ThisExpression";
            if (aliases.indexOf(name) !== -1) {
              if (!isThis || node.operator && node.operator !== "=") {
                reportBadAssignment(node, name);
              }
            } else if (isThis) {
              context.report({
                node,
                messageId: "unexpectedAlias",
                data: { name }
              });
            }
          }
          function checkWasAssigned(alias, scope) {
            const variable = scope.set.get(alias);
            if (!variable) {
              return;
            }
            if (variable.defs.some(def => def.node.type === "VariableDeclarator" && def.node.init !== null)) {
              return;
            }
            if (!variable.references.some(reference => {
                const write = reference.writeExpr;
                return reference.from === scope && write && write.type === "ThisExpression" && write.parent.operator === "=";
              })) {
              variable.defs.map(def => def.node).forEach(node => {
                reportBadAssignment(node, alias);
              });
            }
          }
          function ensureWasAssigned() {
            const scope = context.getScope();
            aliases.forEach(alias => {
              checkWasAssigned(alias, scope);
            });
          }
          return {
            "Program:exit": ensureWasAssigned,
            "FunctionExpression:exit": ensureWasAssigned,
            "FunctionDeclaration:exit": ensureWasAssigned,
            VariableDeclarator(node) {
              const id = node.id;
              const isDestructuring = id.type === "ArrayPattern" || id.type === "ObjectPattern";
              if (node.init !== null && !isDestructuring) {
                checkAssignment(node, id.name, node.init);
              }
            },
            AssignmentExpression(node) {
              if (node.left.type === "Identifier") {
                checkAssignment(node, node.left.name, node.right);
              }
            }
          };
        }
      };
      var _consistentThis = exports$1Z;
      var exports$1Y = {};
      const astUtils$Y = _astUtils;
      exports$1Y = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce consistent brace style for all control statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/curly"
          },
          schema: {
            anyOf: [
              {
                type: "array",
                items: [{ enum: ["all"] }],
                minItems: 0,
                maxItems: 1
              },
              {
                type: "array",
                items: [
                  {
                    enum: [
                      "multi",
                      "multi-line",
                      "multi-or-nest"
                    ]
                  },
                  { enum: ["consistent"] }
                ],
                minItems: 0,
                maxItems: 2
              }
            ]
          },
          fixable: "code",
          messages: {
            missingCurlyAfter: "Expected { after '{{name}}'.",
            missingCurlyAfterCondition: "Expected { after '{{name}}' condition.",
            unexpectedCurlyAfter: "Unnecessary { after '{{name}}'.",
            unexpectedCurlyAfterCondition: "Unnecessary { after '{{name}}' condition."
          }
        },
        create(context) {
          const multiOnly = context.options[0] === "multi";
          const multiLine = context.options[0] === "multi-line";
          const multiOrNest = context.options[0] === "multi-or-nest";
          const consistent = context.options[1] === "consistent";
          const sourceCode = context.getSourceCode();
          function isCollapsedOneLiner(node) {
            const before = sourceCode.getTokenBefore(node);
            const last = sourceCode.getLastToken(node);
            const lastExcludingSemicolon = astUtils$Y.isSemicolonToken(last) ? sourceCode.getTokenBefore(last) : last;
            return before.loc.start.line === lastExcludingSemicolon.loc.end.line;
          }
          function isOneLiner(node) {
            if (node.type === "EmptyStatement") {
              return true;
            }
            const first = sourceCode.getFirstToken(node);
            const last = sourceCode.getLastToken(node);
            const lastExcludingSemicolon = astUtils$Y.isSemicolonToken(last) ? sourceCode.getTokenBefore(last) : last;
            return first.loc.start.line === lastExcludingSemicolon.loc.end.line;
          }
          function isLexicalDeclaration(node) {
            if (node.type === "VariableDeclaration") {
              return node.kind === "const" || node.kind === "let";
            }
            return node.type === "FunctionDeclaration" || node.type === "ClassDeclaration";
          }
          function isElseKeywordToken(token) {
            return token.value === "else" && token.type === "Keyword";
          }
          function isFollowedByElseKeyword(node) {
            const nextToken = sourceCode.getTokenAfter(node);
            return Boolean(nextToken) && isElseKeywordToken(nextToken);
          }
          function needsSemicolon(closingBracket) {
            const tokenBefore = sourceCode.getTokenBefore(closingBracket);
            const tokenAfter = sourceCode.getTokenAfter(closingBracket);
            const lastBlockNode = sourceCode.getNodeByRangeIndex(tokenBefore.range[0]);
            if (astUtils$Y.isSemicolonToken(tokenBefore)) {
              return false;
            }
            if (!tokenAfter) {
              return false;
            }
            if (lastBlockNode.type === "BlockStatement" && lastBlockNode.parent.type !== "FunctionExpression" && lastBlockNode.parent.type !== "ArrowFunctionExpression") {
              return false;
            }
            if (tokenBefore.loc.end.line === tokenAfter.loc.start.line) {
              return true;
            }
            if (/^[([/`+-]/u.test(tokenAfter.value)) {
              return true;
            }
            if (tokenBefore.type === "Punctuator" && (tokenBefore.value === "++" || tokenBefore.value === "--")) {
              return true;
            }
            return false;
          }
          function hasUnsafeIf(node) {
            switch (node.type) {
            case "IfStatement":
              if (!node.alternate) {
                return true;
              }
              return hasUnsafeIf(node.alternate);
            case "ForStatement":
            case "ForInStatement":
            case "ForOfStatement":
            case "LabeledStatement":
            case "WithStatement":
            case "WhileStatement":
              return hasUnsafeIf(node.body);
            default:
              return false;
            }
          }
          function areBracesNecessary(node) {
            const statement = node.body[0];
            return isLexicalDeclaration(statement) || hasUnsafeIf(statement) && isFollowedByElseKeyword(node);
          }
          function prepareCheck(node, body, name, opts) {
            const hasBlock = body.type === "BlockStatement";
            let expected = null;
            if (hasBlock && (body.body.length !== 1 || areBracesNecessary(body))) {
              expected = true;
            } else if (multiOnly) {
              expected = false;
            } else if (multiLine) {
              if (!isCollapsedOneLiner(body)) {
                expected = true;
              }
            } else if (multiOrNest) {
              if (hasBlock) {
                const statement = body.body[0];
                const leadingCommentsInBlock = sourceCode.getCommentsBefore(statement);
                expected = !isOneLiner(statement) || leadingCommentsInBlock.length > 0;
              } else {
                expected = !isOneLiner(body);
              }
            } else {
              expected = true;
            }
            return {
              actual: hasBlock,
              expected,
              check() {
                if (this.expected !== null && this.expected !== this.actual) {
                  if (this.expected) {
                    context.report({
                      node,
                      loc: body.loc,
                      messageId: opts && opts.condition ? "missingCurlyAfterCondition" : "missingCurlyAfter",
                      data: { name },
                      fix: fixer => fixer.replaceText(body, `{${ sourceCode.getText(body) }}`)
                    });
                  } else {
                    context.report({
                      node,
                      loc: body.loc,
                      messageId: opts && opts.condition ? "unexpectedCurlyAfterCondition" : "unexpectedCurlyAfter",
                      data: { name },
                      fix(fixer) {
                        const needsPrecedingSpace = node.type === "DoWhileStatement" && sourceCode.getTokenBefore(body).range[1] === body.range[0] && !astUtils$Y.canTokensBeAdjacent("do", sourceCode.getFirstToken(body, { skip: 1 }));
                        const openingBracket = sourceCode.getFirstToken(body);
                        const closingBracket = sourceCode.getLastToken(body);
                        const lastTokenInBlock = sourceCode.getTokenBefore(closingBracket);
                        if (needsSemicolon(closingBracket)) {
                          return null;
                        }
                        const resultingBodyText = sourceCode.getText().slice(openingBracket.range[1], lastTokenInBlock.range[0]) + sourceCode.getText(lastTokenInBlock) + sourceCode.getText().slice(lastTokenInBlock.range[1], closingBracket.range[0]);
                        return fixer.replaceText(body, (needsPrecedingSpace ? " " : "") + resultingBodyText);
                      }
                    });
                  }
                }
              }
            };
          }
          function prepareIfChecks(node) {
            const preparedChecks = [];
            for (let currentNode = node; currentNode; currentNode = currentNode.alternate) {
              preparedChecks.push(prepareCheck(currentNode, currentNode.consequent, "if", { condition: true }));
              if (currentNode.alternate && currentNode.alternate.type !== "IfStatement") {
                preparedChecks.push(prepareCheck(currentNode, currentNode.alternate, "else"));
                break;
              }
            }
            if (consistent) {
              const expected = preparedChecks.some(preparedCheck => {
                if (preparedCheck.expected !== null) {
                  return preparedCheck.expected;
                }
                return preparedCheck.actual;
              });
              preparedChecks.forEach(preparedCheck => {
                preparedCheck.expected = expected;
              });
            }
            return preparedChecks;
          }
          return {
            IfStatement(node) {
              const parent = node.parent;
              const isElseIf = parent.type === "IfStatement" && parent.alternate === node;
              if (!isElseIf) {
                prepareIfChecks(node).forEach(preparedCheck => {
                  preparedCheck.check();
                });
              }
            },
            WhileStatement(node) {
              prepareCheck(node, node.body, "while", { condition: true }).check();
            },
            DoWhileStatement(node) {
              prepareCheck(node, node.body, "do").check();
            },
            ForStatement(node) {
              prepareCheck(node, node.body, "for", { condition: true }).check();
            },
            ForInStatement(node) {
              prepareCheck(node, node.body, "for-in").check();
            },
            ForOfStatement(node) {
              prepareCheck(node, node.body, "for-of").check();
            }
          };
        }
      };
      var _curly = exports$1Y;
      var exports$1X = {};
      exports$1X = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce default clauses in switch statements to be last",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/default-case-last"
          },
          schema: [],
          messages: { notLast: "Default clause should be the last clause." }
        },
        create(context) {
          return {
            SwitchStatement(node) {
              const cases = node.cases, indexOfDefault = cases.findIndex(c => c.test === null);
              if (indexOfDefault !== -1 && indexOfDefault !== cases.length - 1) {
                const defaultClause = cases[indexOfDefault];
                context.report({
                  node: defaultClause,
                  messageId: "notLast"
                });
              }
            }
          };
        }
      };
      var _defaultCaseLast = exports$1X;
      var exports$1W = {};
      exports$1W = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce default parameters to be last",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/default-param-last"
          },
          schema: [],
          messages: { shouldBeLast: "Default parameters should be last." }
        },
        create(context) {
          function handleFunction(node) {
            let hasSeenPlainParam = false;
            for (let i = node.params.length - 1; i >= 0; i -= 1) {
              const param = node.params[i];
              if (param.type !== "AssignmentPattern" && param.type !== "RestElement") {
                hasSeenPlainParam = true;
                continue;
              }
              if (hasSeenPlainParam && param.type === "AssignmentPattern") {
                context.report({
                  node: param,
                  messageId: "shouldBeLast"
                });
              }
            }
          }
          return {
            FunctionDeclaration: handleFunction,
            FunctionExpression: handleFunction,
            ArrowFunctionExpression: handleFunction
          };
        }
      };
      var _defaultParamLast = exports$1W;
      var exports$1V = {};
      exports$1V = {
        meta: {
          type: "problem",
          docs: {
            description: "enforce \"for\" loop update clause moving the counter in the right direction.",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/for-direction"
          },
          fixable: null,
          schema: [],
          messages: { incorrectDirection: "The update clause in this loop moves the variable in the wrong direction." }
        },
        create(context) {
          function report(node) {
            context.report({
              node,
              messageId: "incorrectDirection"
            });
          }
          function getRightDirection(update, dir) {
            if (update.right.type === "UnaryExpression") {
              if (update.right.operator === "-") {
                return -dir;
              }
            } else if (update.right.type === "Identifier") {
              return 0;
            }
            return dir;
          }
          function getUpdateDirection(update, counter) {
            if (update.argument.type === "Identifier" && update.argument.name === counter) {
              if (update.operator === "++") {
                return 1;
              }
              if (update.operator === "--") {
                return -1;
              }
            }
            return 0;
          }
          function getAssignmentDirection(update, counter) {
            if (update.left.name === counter) {
              if (update.operator === "+=") {
                return getRightDirection(update, 1);
              }
              if (update.operator === "-=") {
                return getRightDirection(update, -1);
              }
            }
            return 0;
          }
          return {
            ForStatement(node) {
              if (node.test && node.test.type === "BinaryExpression" && node.test.left.type === "Identifier" && node.update) {
                const counter = node.test.left.name;
                const operator = node.test.operator;
                const update = node.update;
                let wrongDirection;
                if (operator === "<" || operator === "<=") {
                  wrongDirection = -1;
                } else if (operator === ">" || operator === ">=") {
                  wrongDirection = 1;
                } else {
                  return;
                }
                if (update.type === "UpdateExpression") {
                  if (getUpdateDirection(update, counter) === wrongDirection) {
                    report(node);
                  }
                } else if (update.type === "AssignmentExpression" && getAssignmentDirection(update, counter) === wrongDirection) {
                  report(node);
                }
              }
            }
          };
        }
      };
      var _forDirection = exports$1V;
      var _esutils = "default" in _esutils2 ? exports$2$n : _esutils2;
      var exports$1U = {};
      const astUtils$X = _astUtils;
      const esutils = _esutils;
      function isModuleExports(pattern) {
        if (pattern.type === "MemberExpression" && pattern.object.type === "Identifier" && pattern.object.name === "module") {
          if (pattern.property.type === "Identifier" && pattern.property.name === "exports") {
            return true;
          }
          if (pattern.property.type === "Literal" && pattern.property.value === "exports") {
            return true;
          }
        }
        return false;
      }
      function isIdentifier(name, ecmaVersion) {
        if (ecmaVersion >= 6) {
          return esutils.keyword.isIdentifierES6(name);
        }
        return esutils.keyword.isIdentifierES5(name);
      }
      const alwaysOrNever = {
        enum: [
          "always",
          "never"
        ]
      };
      const optionsObject = {
        type: "object",
        properties: {
          considerPropertyDescriptor: { type: "boolean" },
          includeCommonJSModuleExports: { type: "boolean" }
        },
        additionalProperties: false
      };
      exports$1U = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require function names to match the name of the variable or property to which they are assigned",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/func-name-matching"
          },
          schema: {
            anyOf: [
              {
                type: "array",
                additionalItems: false,
                items: [
                  alwaysOrNever,
                  optionsObject
                ]
              },
              {
                type: "array",
                additionalItems: false,
                items: [optionsObject]
              }
            ]
          },
          messages: {
            matchProperty: "Function name `{{funcName}}` should match property name `{{name}}`.",
            matchVariable: "Function name `{{funcName}}` should match variable name `{{name}}`.",
            notMatchProperty: "Function name `{{funcName}}` should not match property name `{{name}}`.",
            notMatchVariable: "Function name `{{funcName}}` should not match variable name `{{name}}`."
          }
        },
        create(context) {
          const options = (typeof context.options[0] === "object" ? context.options[0] : context.options[1]) || {};
          const nameMatches = typeof context.options[0] === "string" ? context.options[0] : "always";
          const considerPropertyDescriptor = options.considerPropertyDescriptor;
          const includeModuleExports = options.includeCommonJSModuleExports;
          const ecmaVersion = context.parserOptions && context.parserOptions.ecmaVersion ? context.parserOptions.ecmaVersion : 5;
          function isPropertyCall(objName, funcName, node) {
            if (!node) {
              return false;
            }
            return node.type === "CallExpression" && astUtils$X.isSpecificMemberAccess(node.callee, objName, funcName);
          }
          function shouldWarn(x, y) {
            return nameMatches === "always" && x !== y || nameMatches === "never" && x === y;
          }
          function report(node, name, funcName, isProp) {
            let messageId;
            if (nameMatches === "always" && isProp) {
              messageId = "matchProperty";
            } else if (nameMatches === "always") {
              messageId = "matchVariable";
            } else if (isProp) {
              messageId = "notMatchProperty";
            } else {
              messageId = "notMatchVariable";
            }
            context.report({
              node,
              messageId,
              data: {
                name,
                funcName
              }
            });
          }
          function isStringLiteral(node) {
            return node.type === "Literal" && typeof node.value === "string";
          }
          return {
            VariableDeclarator(node) {
              if (!node.init || node.init.type !== "FunctionExpression" || node.id.type !== "Identifier") {
                return;
              }
              if (node.init.id && shouldWarn(node.id.name, node.init.id.name)) {
                report(node, node.id.name, node.init.id.name, false);
              }
            },
            AssignmentExpression(node) {
              if (node.right.type !== "FunctionExpression" || node.left.computed && node.left.property.type !== "Literal" || !includeModuleExports && isModuleExports(node.left) || node.left.type !== "Identifier" && node.left.type !== "MemberExpression") {
                return;
              }
              const isProp = node.left.type === "MemberExpression";
              const name = isProp ? astUtils$X.getStaticPropertyName(node.left) : node.left.name;
              if (node.right.id && isIdentifier(name) && shouldWarn(name, node.right.id.name)) {
                report(node, name, node.right.id.name, isProp);
              }
            },
            Property(node) {
              if (node.value.type !== "FunctionExpression" || !node.value.id || node.computed && !isStringLiteral(node.key)) {
                return;
              }
              if (node.key.type === "Identifier") {
                const functionName = node.value.id.name;
                let propertyName = node.key.name;
                if (considerPropertyDescriptor && propertyName === "value") {
                  if (isPropertyCall("Object", "defineProperty", node.parent.parent) || isPropertyCall("Reflect", "defineProperty", node.parent.parent)) {
                    const property = node.parent.parent.arguments[1];
                    if (isStringLiteral(property) && shouldWarn(property.value, functionName)) {
                      report(node, property.value, functionName, true);
                    }
                  } else if (isPropertyCall("Object", "defineProperties", node.parent.parent.parent.parent)) {
                    propertyName = node.parent.parent.key.name;
                    if (!node.parent.parent.computed && shouldWarn(propertyName, functionName)) {
                      report(node, propertyName, functionName, true);
                    }
                  } else if (isPropertyCall("Object", "create", node.parent.parent.parent.parent)) {
                    propertyName = node.parent.parent.key.name;
                    if (!node.parent.parent.computed && shouldWarn(propertyName, functionName)) {
                      report(node, propertyName, functionName, true);
                    }
                  } else if (shouldWarn(propertyName, functionName)) {
                    report(node, propertyName, functionName, true);
                  }
                } else if (shouldWarn(propertyName, functionName)) {
                  report(node, propertyName, functionName, true);
                }
                return;
              }
              if (isStringLiteral(node.key) && isIdentifier(node.key.value, ecmaVersion) && shouldWarn(node.key.value, node.value.id.name)) {
                report(node, node.key.value, node.value.id.name, true);
              }
            }
          };
        }
      };
      var _funcNameMatching = exports$1U;
      var exports$1T = {};
      const astUtils$W = _astUtils;
      function isFunctionName$1(variable) {
        return variable && variable.defs[0].type === "FunctionName";
      }
      exports$1T = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow named `function` expressions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/func-names"
          },
          schema: {
            definitions: {
              value: {
                enum: [
                  "always",
                  "as-needed",
                  "never"
                ]
              }
            },
            items: [
              { $ref: "#/definitions/value" },
              {
                type: "object",
                properties: { generators: { $ref: "#/definitions/value" } },
                additionalProperties: false
              }
            ]
          },
          messages: {
            unnamed: "Unexpected unnamed {{name}}.",
            named: "Unexpected named {{name}}."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function getConfigForNode(node) {
            if (node.generator && context.options.length > 1 && context.options[1].generators) {
              return context.options[1].generators;
            }
            return context.options[0] || "always";
          }
          function isObjectOrClassMethod(node) {
            const parent = node.parent;
            return parent.type === "MethodDefinition" || parent.type === "Property" && (parent.method || parent.kind === "get" || parent.kind === "set");
          }
          function hasInferredName(node) {
            const parent = node.parent;
            return isObjectOrClassMethod(node) || parent.type === "VariableDeclarator" && parent.id.type === "Identifier" && parent.init === node || parent.type === "Property" && parent.value === node || parent.type === "AssignmentExpression" && parent.left.type === "Identifier" && parent.right === node || parent.type === "AssignmentPattern" && parent.left.type === "Identifier" && parent.right === node;
          }
          function reportUnexpectedUnnamedFunction(node) {
            context.report({
              node,
              messageId: "unnamed",
              loc: astUtils$W.getFunctionHeadLoc(node, sourceCode),
              data: { name: astUtils$W.getFunctionNameWithKind(node) }
            });
          }
          function reportUnexpectedNamedFunction(node) {
            context.report({
              node,
              messageId: "named",
              loc: astUtils$W.getFunctionHeadLoc(node, sourceCode),
              data: { name: astUtils$W.getFunctionNameWithKind(node) }
            });
          }
          function handleFunction(node) {
            const nameVar = context.getDeclaredVariables(node)[0];
            if (isFunctionName$1(nameVar) && nameVar.references.length > 0) {
              return;
            }
            const hasName = Boolean(node.id && node.id.name);
            const config = getConfigForNode(node);
            if (config === "never") {
              if (hasName && node.type !== "FunctionDeclaration") {
                reportUnexpectedNamedFunction(node);
              }
            } else if (config === "as-needed") {
              if (!hasName && !hasInferredName(node)) {
                reportUnexpectedUnnamedFunction(node);
              }
            } else {
              if (!hasName && !isObjectOrClassMethod(node)) {
                reportUnexpectedUnnamedFunction(node);
              }
            }
          }
          return {
            "FunctionExpression:exit": handleFunction,
            "ExportDefaultDeclaration > FunctionDeclaration": handleFunction
          };
        }
      };
      var _funcNames = exports$1T;
      var exports$1S = {};
      exports$1S = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce the consistent use of either `function` declarations or expressions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/func-style"
          },
          schema: [
            {
              enum: [
                "declaration",
                "expression"
              ]
            },
            {
              type: "object",
              properties: {
                allowArrowFunctions: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            expression: "Expected a function expression.",
            declaration: "Expected a function declaration."
          }
        },
        create(context) {
          const style = context.options[0], allowArrowFunctions = context.options[1] && context.options[1].allowArrowFunctions, enforceDeclarations = style === "declaration", stack = [];
          const nodesToCheck = {
            FunctionDeclaration(node) {
              stack.push(false);
              if (!enforceDeclarations && node.parent.type !== "ExportDefaultDeclaration") {
                context.report({
                  node,
                  messageId: "expression"
                });
              }
            },
            "FunctionDeclaration:exit"() {
              stack.pop();
            },
            FunctionExpression(node) {
              stack.push(false);
              if (enforceDeclarations && node.parent.type === "VariableDeclarator") {
                context.report({
                  node: node.parent,
                  messageId: "declaration"
                });
              }
            },
            "FunctionExpression:exit"() {
              stack.pop();
            },
            ThisExpression() {
              if (stack.length > 0) {
                stack[stack.length - 1] = true;
              }
            }
          };
          if (!allowArrowFunctions) {
            nodesToCheck.ArrowFunctionExpression = function () {
              stack.push(false);
            };
            nodesToCheck["ArrowFunctionExpression:exit"] = function (node) {
              const hasThisExpr = stack.pop();
              if (enforceDeclarations && !hasThisExpr && node.parent.type === "VariableDeclarator") {
                context.report({
                  node: node.parent,
                  messageId: "declaration"
                });
              }
            };
          }
          return nodesToCheck;
        }
      };
      var _funcStyle = exports$1S;
      var exports$1R = {};
      exports$1R = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce line breaks between arguments of a function call",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/function-call-argument-newline"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never",
                "consistent"
              ]
            }],
          messages: {
            unexpectedLineBreak: "There should be no line break here.",
            missingLineBreak: "There should be a line break after this argument."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const checkers = {
            unexpected: {
              messageId: "unexpectedLineBreak",
              check: (prevToken, currentToken) => prevToken.loc.end.line !== currentToken.loc.start.line,
              createFix: (token, tokenBefore) => fixer => fixer.replaceTextRange([
                tokenBefore.range[1],
                token.range[0]
              ], " ")
            },
            missing: {
              messageId: "missingLineBreak",
              check: (prevToken, currentToken) => prevToken.loc.end.line === currentToken.loc.start.line,
              createFix: (token, tokenBefore) => fixer => fixer.replaceTextRange([
                tokenBefore.range[1],
                token.range[0]
              ], "\n")
            }
          };
          function checkArguments(node, checker) {
            for (let i = 1; i < node.arguments.length; i++) {
              const prevArgToken = sourceCode.getLastToken(node.arguments[i - 1]);
              const currentArgToken = sourceCode.getFirstToken(node.arguments[i]);
              if (checker.check(prevArgToken, currentArgToken)) {
                const tokenBefore = sourceCode.getTokenBefore(currentArgToken, { includeComments: true });
                const hasLineCommentBefore = tokenBefore.type === "Line";
                context.report({
                  node,
                  loc: {
                    start: tokenBefore.loc.end,
                    end: currentArgToken.loc.start
                  },
                  messageId: checker.messageId,
                  fix: hasLineCommentBefore ? null : checker.createFix(currentArgToken, tokenBefore)
                });
              }
            }
          }
          function check(node) {
            if (node.arguments.length < 2) {
              return;
            }
            const option = context.options[0] || "always";
            if (option === "never") {
              checkArguments(node, checkers.unexpected);
            } else if (option === "always") {
              checkArguments(node, checkers.missing);
            } else if (option === "consistent") {
              const firstArgToken = sourceCode.getLastToken(node.arguments[0]);
              const secondArgToken = sourceCode.getFirstToken(node.arguments[1]);
              if (firstArgToken.loc.end.line === secondArgToken.loc.start.line) {
                checkArguments(node, checkers.unexpected);
              } else {
                checkArguments(node, checkers.missing);
              }
            }
          }
          return {
            CallExpression: check,
            NewExpression: check
          };
        }
      };
      var _functionCallArgumentNewline = exports$1R;
      var exports$1Q = {};
      const astUtils$V = _astUtils;
      exports$1Q = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent line breaks inside function parentheses",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/function-paren-newline"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "always",
                    "never",
                    "consistent",
                    "multiline",
                    "multiline-arguments"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    minItems: {
                      type: "integer",
                      minimum: 0
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            expectedBefore: "Expected newline before ')'.",
            expectedAfter: "Expected newline after '('.",
            expectedBetween: "Expected newline between arguments/params.",
            unexpectedBefore: "Unexpected newline before ')'.",
            unexpectedAfter: "Unexpected newline after '('."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const rawOption = context.options[0] || "multiline";
          const multilineOption = rawOption === "multiline";
          const multilineArgumentsOption = rawOption === "multiline-arguments";
          const consistentOption = rawOption === "consistent";
          let minItems;
          if (typeof rawOption === "object") {
            minItems = rawOption.minItems;
          } else if (rawOption === "always") {
            minItems = 0;
          } else if (rawOption === "never") {
            minItems = Infinity;
          } else {
            minItems = null;
          }
          function shouldHaveNewlines(elements, hasLeftNewline) {
            if (multilineArgumentsOption && elements.length === 1) {
              return hasLeftNewline;
            }
            if (multilineOption || multilineArgumentsOption) {
              return elements.some((element, index) => index !== elements.length - 1 && element.loc.end.line !== elements[index + 1].loc.start.line);
            }
            if (consistentOption) {
              return hasLeftNewline;
            }
            return elements.length >= minItems;
          }
          function validateParens(parens, elements) {
            const leftParen = parens.leftParen;
            const rightParen = parens.rightParen;
            const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParen);
            const tokenBeforeRightParen = sourceCode.getTokenBefore(rightParen);
            const hasLeftNewline = !astUtils$V.isTokenOnSameLine(leftParen, tokenAfterLeftParen);
            const hasRightNewline = !astUtils$V.isTokenOnSameLine(tokenBeforeRightParen, rightParen);
            const needsNewlines = shouldHaveNewlines(elements, hasLeftNewline);
            if (hasLeftNewline && !needsNewlines) {
              context.report({
                node: leftParen,
                messageId: "unexpectedAfter",
                fix(fixer) {
                  return sourceCode.getText().slice(leftParen.range[1], tokenAfterLeftParen.range[0]).trim() ? null : fixer.removeRange([
                    leftParen.range[1],
                    tokenAfterLeftParen.range[0]
                  ]);
                }
              });
            } else if (!hasLeftNewline && needsNewlines) {
              context.report({
                node: leftParen,
                messageId: "expectedAfter",
                fix: fixer => fixer.insertTextAfter(leftParen, "\n")
              });
            }
            if (hasRightNewline && !needsNewlines) {
              context.report({
                node: rightParen,
                messageId: "unexpectedBefore",
                fix(fixer) {
                  return sourceCode.getText().slice(tokenBeforeRightParen.range[1], rightParen.range[0]).trim() ? null : fixer.removeRange([
                    tokenBeforeRightParen.range[1],
                    rightParen.range[0]
                  ]);
                }
              });
            } else if (!hasRightNewline && needsNewlines) {
              context.report({
                node: rightParen,
                messageId: "expectedBefore",
                fix: fixer => fixer.insertTextBefore(rightParen, "\n")
              });
            }
          }
          function validateArguments(parens, elements) {
            const leftParen = parens.leftParen;
            const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParen);
            const hasLeftNewline = !astUtils$V.isTokenOnSameLine(leftParen, tokenAfterLeftParen);
            const needsNewlines = shouldHaveNewlines(elements, hasLeftNewline);
            for (let i = 0; i <= elements.length - 2; i++) {
              const currentElement = elements[i];
              const nextElement = elements[i + 1];
              const hasNewLine = currentElement.loc.end.line !== nextElement.loc.start.line;
              if (!hasNewLine && needsNewlines) {
                context.report({
                  node: currentElement,
                  messageId: "expectedBetween",
                  fix: fixer => fixer.insertTextBefore(nextElement, "\n")
                });
              }
            }
          }
          function getParenTokens(node) {
            switch (node.type) {
            case "NewExpression":
              if (!node.arguments.length && !(astUtils$V.isOpeningParenToken(sourceCode.getLastToken(node, { skip: 1 })) && astUtils$V.isClosingParenToken(sourceCode.getLastToken(node)))) {
                return null;
              }
            case "CallExpression":
              return {
                leftParen: sourceCode.getTokenAfter(node.callee, astUtils$V.isOpeningParenToken),
                rightParen: sourceCode.getLastToken(node)
              };
            case "FunctionDeclaration":
            case "FunctionExpression": {
                const leftParen = sourceCode.getFirstToken(node, astUtils$V.isOpeningParenToken);
                const rightParen = node.params.length ? sourceCode.getTokenAfter(node.params[node.params.length - 1], astUtils$V.isClosingParenToken) : sourceCode.getTokenAfter(leftParen);
                return {
                  leftParen,
                  rightParen
                };
              }
            case "ArrowFunctionExpression": {
                const firstToken = sourceCode.getFirstToken(node, { skip: node.async ? 1 : 0 });
                if (!astUtils$V.isOpeningParenToken(firstToken)) {
                  return null;
                }
                return {
                  leftParen: firstToken,
                  rightParen: sourceCode.getTokenBefore(node.body, astUtils$V.isClosingParenToken)
                };
              }
            case "ImportExpression": {
                const leftParen = sourceCode.getFirstToken(node, 1);
                const rightParen = sourceCode.getLastToken(node);
                return {
                  leftParen,
                  rightParen
                };
              }
            default:
              throw new TypeError(`unexpected node with type ${ node.type }`);
            }
          }
          return {
            [[
              "ArrowFunctionExpression",
              "CallExpression",
              "FunctionDeclaration",
              "FunctionExpression",
              "ImportExpression",
              "NewExpression"
            ]](node) {
              const parens = getParenTokens(node);
              let params;
              if (node.type === "ImportExpression") {
                params = [node.source];
              } else if (astUtils$V.isFunction(node)) {
                params = node.params;
              } else {
                params = node.arguments;
              }
              if (parens) {
                validateParens(parens, params);
                if (multilineArgumentsOption) {
                  validateArguments(parens, params);
                }
              }
            }
          };
        }
      };
      var _functionParenNewline = exports$1Q;
      var exports$1P = {};
      const OVERRIDE_SCHEMA = {
        oneOf: [
          {
            enum: [
              "before",
              "after",
              "both",
              "neither"
            ]
          },
          {
            type: "object",
            properties: {
              before: { type: "boolean" },
              after: { type: "boolean" }
            },
            additionalProperties: false
          }
        ]
      };
      exports$1P = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing around `*` operators in generator functions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/generator-star-spacing"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "before",
                    "after",
                    "both",
                    "neither"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    before: { type: "boolean" },
                    after: { type: "boolean" },
                    named: OVERRIDE_SCHEMA,
                    anonymous: OVERRIDE_SCHEMA,
                    method: OVERRIDE_SCHEMA
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            missingBefore: "Missing space before *.",
            missingAfter: "Missing space after *.",
            unexpectedBefore: "Unexpected space before *.",
            unexpectedAfter: "Unexpected space after *."
          }
        },
        create(context) {
          const optionDefinitions = {
            before: {
              before: true,
              after: false
            },
            after: {
              before: false,
              after: true
            },
            both: {
              before: true,
              after: true
            },
            neither: {
              before: false,
              after: false
            }
          };
          function optionToDefinition(option, defaults) {
            if (!option) {
              return defaults;
            }
            return typeof option === "string" ? optionDefinitions[option] : Object.assign({}, defaults, option);
          }
          const modes = function (option) {
            const defaults = optionToDefinition(option, optionDefinitions.before);
            return {
              named: optionToDefinition(option.named, defaults),
              anonymous: optionToDefinition(option.anonymous, defaults),
              method: optionToDefinition(option.method, defaults)
            };
          }(context.options[0] || {});
          const sourceCode = context.getSourceCode();
          function isStarToken(token) {
            return token.value === "*" && token.type === "Punctuator";
          }
          function getStarToken(node) {
            return sourceCode.getFirstToken(node.parent.method || node.parent.type === "MethodDefinition" ? node.parent : node, isStarToken);
          }
          function capitalize(str) {
            return str[0].toUpperCase() + str.slice(1);
          }
          function checkSpacing(kind, side, leftToken, rightToken) {
            if (!!(rightToken.range[0] - leftToken.range[1]) !== modes[kind][side]) {
              const after = leftToken.value === "*";
              const spaceRequired = modes[kind][side];
              const node = after ? leftToken : rightToken;
              const messageId = `${ spaceRequired ? "missing" : "unexpected" }${ capitalize(side) }`;
              context.report({
                node,
                messageId,
                fix(fixer) {
                  if (spaceRequired) {
                    if (after) {
                      return fixer.insertTextAfter(node, " ");
                    }
                    return fixer.insertTextBefore(node, " ");
                  }
                  return fixer.removeRange([
                    leftToken.range[1],
                    rightToken.range[0]
                  ]);
                }
              });
            }
          }
          function checkFunction(node) {
            if (!node.generator) {
              return;
            }
            const starToken = getStarToken(node);
            const prevToken = sourceCode.getTokenBefore(starToken);
            const nextToken = sourceCode.getTokenAfter(starToken);
            let kind = "named";
            if (node.parent.type === "MethodDefinition" || node.parent.type === "Property" && node.parent.method) {
              kind = "method";
            } else if (!node.id) {
              kind = "anonymous";
            }
            if (!(kind === "method" && starToken === sourceCode.getFirstToken(node.parent))) {
              checkSpacing(kind, "before", prevToken, starToken);
            }
            checkSpacing(kind, "after", starToken, nextToken);
          }
          return {
            FunctionDeclaration: checkFunction,
            FunctionExpression: checkFunction
          };
        }
      };
      var _generatorStarSpacing = exports$1P;
      var exports$1O = {};
      const astUtils$U = _astUtils;
      const TARGET_NODE_TYPE$1 = /^(?:Arrow)?FunctionExpression$/u;
      function isReachable$1(segment) {
        return segment.reachable;
      }
      exports$1O = {
        meta: {
          type: "problem",
          docs: {
            description: "enforce `return` statements in getters",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/getter-return"
          },
          fixable: null,
          schema: [{
              type: "object",
              properties: {
                allowImplicit: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            expected: "Expected to return a value in {{name}}.",
            expectedAlways: "Expected {{name}} to always return a value."
          }
        },
        create(context) {
          const options = context.options[0] || { allowImplicit: false };
          const sourceCode = context.getSourceCode();
          let funcInfo = {
            upper: null,
            codePath: null,
            hasReturn: false,
            shouldCheck: false,
            node: null
          };
          function checkLastSegment(node) {
            if (funcInfo.shouldCheck && funcInfo.codePath.currentSegments.some(isReachable$1)) {
              context.report({
                node,
                loc: astUtils$U.getFunctionHeadLoc(node, sourceCode),
                messageId: funcInfo.hasReturn ? "expectedAlways" : "expected",
                data: { name: astUtils$U.getFunctionNameWithKind(funcInfo.node) }
              });
            }
          }
          function isGetter(node) {
            const parent = node.parent;
            if (TARGET_NODE_TYPE$1.test(node.type) && node.body.type === "BlockStatement") {
              if (parent.kind === "get") {
                return true;
              }
              if (parent.type === "Property" && astUtils$U.getStaticPropertyName(parent) === "get" && parent.parent.type === "ObjectExpression") {
                if (parent.parent.parent.type === "CallExpression" && astUtils$U.getStaticPropertyName(parent.parent.parent.callee) === "defineProperty") {
                  return true;
                }
                if (parent.parent.parent.type === "Property" && parent.parent.parent.parent.type === "ObjectExpression" && parent.parent.parent.parent.parent.type === "CallExpression" && astUtils$U.getStaticPropertyName(parent.parent.parent.parent.parent.callee) === "defineProperties") {
                  return true;
                }
              }
            }
            return false;
          }
          return {
            onCodePathStart(codePath, node) {
              funcInfo = {
                upper: funcInfo,
                codePath,
                hasReturn: false,
                shouldCheck: isGetter(node),
                node
              };
            },
            onCodePathEnd() {
              funcInfo = funcInfo.upper;
            },
            ReturnStatement(node) {
              if (funcInfo.shouldCheck) {
                funcInfo.hasReturn = true;
                if (!options.allowImplicit && !node.argument) {
                  context.report({
                    node,
                    messageId: "expected",
                    data: { name: astUtils$U.getFunctionNameWithKind(funcInfo.node) }
                  });
                }
              }
            },
            "FunctionExpression:exit": checkLastSegment,
            "ArrowFunctionExpression:exit": checkLastSegment
          };
        }
      };
      var _getterReturn = exports$1O;
      var exports$1N = {};
      const astUtils$T = _astUtils;
      function areEqualTokenLists(left, right) {
        if (left.length !== right.length) {
          return false;
        }
        for (let i = 0; i < left.length; i++) {
          const leftToken = left[i], rightToken = right[i];
          if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {
            return false;
          }
        }
        return true;
      }
      function areEqualKeys(left, right) {
        if (typeof left === "string" && typeof right === "string") {
          return left === right;
        }
        if (Array.isArray(left) && Array.isArray(right)) {
          return areEqualTokenLists(left, right);
        }
        return false;
      }
      function isAccessorKind(node) {
        return node.kind === "get" || node.kind === "set";
      }
      exports$1N = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require grouped accessor pairs in object literals and classes",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/grouped-accessor-pairs"
          },
          schema: [{
              enum: [
                "anyOrder",
                "getBeforeSet",
                "setBeforeGet"
              ]
            }],
          messages: {
            notGrouped: "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
            invalidOrder: "Expected {{ latterName }} to be before {{ formerName }}."
          }
        },
        create(context) {
          const order = context.options[0] || "anyOrder";
          const sourceCode = context.getSourceCode();
          function report(messageId, formerNode, latterNode) {
            context.report({
              node: latterNode,
              messageId,
              loc: astUtils$T.getFunctionHeadLoc(latterNode.value, sourceCode),
              data: {
                formerName: astUtils$T.getFunctionNameWithKind(formerNode.value),
                latterName: astUtils$T.getFunctionNameWithKind(latterNode.value)
              }
            });
          }
          function createAccessorData(node) {
            const name = astUtils$T.getStaticPropertyName(node);
            const key = name !== null ? name : sourceCode.getTokens(node.key);
            return {
              key,
              getters: node.kind === "get" ? [node] : [],
              setters: node.kind === "set" ? [node] : []
            };
          }
          function mergeAccessorData(accessors, accessorData) {
            const equalKeyElement = accessors.find(a => areEqualKeys(a.key, accessorData.key));
            if (equalKeyElement) {
              equalKeyElement.getters.push(...accessorData.getters);
              equalKeyElement.setters.push(...accessorData.setters);
            } else {
              accessors.push(accessorData);
            }
            return accessors;
          }
          function checkList(nodes, shouldCheck) {
            const accessors = nodes.filter(shouldCheck).filter(isAccessorKind).map(createAccessorData).reduce(mergeAccessorData, []);
            for (const {getters, setters} of accessors) {
              if (getters.length === 1 && setters.length === 1) {
                const [getter] = getters, [setter] = setters, getterIndex = nodes.indexOf(getter), setterIndex = nodes.indexOf(setter), formerNode = getterIndex < setterIndex ? getter : setter, latterNode = getterIndex < setterIndex ? setter : getter;
                if (Math.abs(getterIndex - setterIndex) > 1) {
                  report("notGrouped", formerNode, latterNode);
                } else if (order === "getBeforeSet" && getterIndex > setterIndex || order === "setBeforeGet" && getterIndex < setterIndex) {
                  report("invalidOrder", formerNode, latterNode);
                }
              }
            }
          }
          return {
            ObjectExpression(node) {
              checkList(node.properties, n => n.type === "Property");
            },
            ClassBody(node) {
              checkList(node.body, n => n.type === "MethodDefinition" && !n.static);
              checkList(node.body, n => n.type === "MethodDefinition" && n.static);
            }
          };
        }
      };
      var _groupedAccessorPairs = exports$1N;
      var exports$1M = {};
      exports$1M = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `for-in` loops to include an `if` statement",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/guard-for-in"
          },
          schema: [],
          messages: { wrap: "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype." }
        },
        create(context) {
          return {
            ForInStatement(node) {
              const body = node.body;
              if (body.type === "EmptyStatement") {
                return;
              }
              if (body.type === "IfStatement") {
                return;
              }
              if (body.type === "BlockStatement" && body.body.length === 0) {
                return;
              }
              if (body.type === "BlockStatement" && body.body.length === 1 && body.body[0].type === "IfStatement") {
                return;
              }
              if (body.type === "BlockStatement" && body.body.length >= 1 && body.body[0].type === "IfStatement") {
                const i = body.body[0];
                if (i.consequent.type === "ContinueStatement") {
                  return;
                }
                if (i.consequent.type === "BlockStatement" && i.consequent.body.length === 1 && i.consequent.body[0].type === "ContinueStatement") {
                  return;
                }
              }
              context.report({
                node,
                messageId: "wrap"
              });
            }
          };
        }
      };
      var _guardForIn = exports$1M;
      var exports$1L = {};
      function isAssignmentTarget(node) {
        const parent = node.parent;
        return parent.type === "AssignmentExpression" && parent.left === node || parent.type === "ArrayPattern" || parent.type === "RestElement" || parent.type === "Property" && parent.value === node && parent.parent.type === "ObjectPattern" || parent.type === "AssignmentPattern" && parent.left === node;
      }
      function isRenamedImport(node) {
        const parent = node.parent;
        return parent.type === "ImportSpecifier" && parent.imported !== parent.local && parent.imported === node || parent.type === "ExportSpecifier" && parent.parent.source && parent.local !== parent.exported && parent.local === node;
      }
      function isRenamedInDestructuring(node) {
        const parent = node.parent;
        return !parent.computed && parent.type === "Property" && parent.parent.type === "ObjectPattern" && parent.value !== node && parent.key === node;
      }
      function isShorthandPropertyDefinition(node) {
        const parent = node.parent;
        return parent.type === "Property" && parent.parent.type === "ObjectExpression" && parent.shorthand;
      }
      exports$1L = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow specified identifiers",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/id-denylist"
          },
          schema: {
            type: "array",
            items: { type: "string" },
            uniqueItems: true
          },
          messages: { restricted: "Identifier '{{name}}' is restricted." }
        },
        create(context) {
          const denyList = new Set(context.options);
          const reportedNodes = new Set();
          let globalScope;
          function isRestricted(name) {
            return denyList.has(name);
          }
          function isReferenceToGlobalVariable(node) {
            const variable = globalScope.set.get(node.name);
            return variable && variable.defs.length === 0 && variable.references.some(ref => ref.identifier === node);
          }
          function shouldCheck(node) {
            const parent = node.parent;
            if (parent.type === "MemberExpression" && parent.property === node && !parent.computed) {
              return isAssignmentTarget(parent);
            }
            return parent.type !== "CallExpression" && parent.type !== "NewExpression" && !isRenamedImport(node) && !isRenamedInDestructuring(node) && !(isReferenceToGlobalVariable(node) && !isShorthandPropertyDefinition(node));
          }
          function report(node) {
            if (!reportedNodes.has(node)) {
              context.report({
                node,
                messageId: "restricted",
                data: { name: node.name }
              });
              reportedNodes.add(node);
            }
          }
          return {
            Program() {
              globalScope = context.getScope();
            },
            Identifier(node) {
              if (isRestricted(node.name) && shouldCheck(node)) {
                report(node);
              }
            }
          };
        }
      };
      var _idDenylist = exports$1L;
      var exports$1K = {};
      exports$1K = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce minimum and maximum identifier lengths",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/id-length"
          },
          schema: [{
              type: "object",
              properties: {
                min: {
                  type: "integer",
                  default: 2
                },
                max: { type: "integer" },
                exceptions: {
                  type: "array",
                  uniqueItems: true,
                  items: { type: "string" }
                },
                exceptionPatterns: {
                  type: "array",
                  uniqueItems: true,
                  items: { type: "string" }
                },
                properties: {
                  enum: [
                    "always",
                    "never"
                  ]
                }
              },
              additionalProperties: false
            }],
          messages: {
            tooShort: "Identifier name '{{name}}' is too short (< {{min}}).",
            tooLong: "Identifier name '{{name}}' is too long (> {{max}})."
          }
        },
        create(context) {
          const options = context.options[0] || {};
          const minLength = typeof options.min !== "undefined" ? options.min : 2;
          const maxLength = typeof options.max !== "undefined" ? options.max : Infinity;
          const properties = options.properties !== "never";
          const exceptions = new Set(options.exceptions);
          const exceptionPatterns = (options.exceptionPatterns || []).map(pattern => new RegExp(pattern, "u"));
          const reportedNode = new Set();
          function matchesExceptionPattern(name) {
            return exceptionPatterns.some(pattern => pattern.test(name));
          }
          const SUPPORTED_EXPRESSIONS = {
            MemberExpression: properties && function (parent) {
              return !parent.computed && (parent.parent.left === parent && parent.parent.type === "AssignmentExpression" || parent.parent.type === "Property" && parent.parent.value === parent && parent.parent.parent.type === "ObjectPattern" && parent.parent.parent.parent.left === parent.parent.parent);
            },
            AssignmentPattern(parent, node) {
              return parent.left === node;
            },
            VariableDeclarator(parent, node) {
              return parent.id === node;
            },
            Property(parent, node) {
              if (parent.parent.type === "ObjectPattern") {
                return parent.value !== parent.key && parent.value === node || parent.value === parent.key && parent.key === node && properties;
              }
              return properties && !parent.computed && parent.key === node;
            },
            ImportDefaultSpecifier: true,
            RestElement: true,
            FunctionExpression: true,
            ArrowFunctionExpression: true,
            ClassDeclaration: true,
            FunctionDeclaration: true,
            MethodDefinition: true,
            CatchClause: true,
            ArrayPattern: true
          };
          return {
            Identifier(node) {
              const name = node.name;
              const parent = node.parent;
              const isShort = name.length < minLength;
              const isLong = name.length > maxLength;
              if (!(isShort || isLong) || exceptions.has(name) || matchesExceptionPattern(name)) {
                return;
              }
              const isValidExpression = SUPPORTED_EXPRESSIONS[parent.type];
              if (isValidExpression && !reportedNode.has(node) && (isValidExpression === true || isValidExpression(parent, node))) {
                reportedNode.add(node);
                context.report({
                  node,
                  messageId: isShort ? "tooShort" : "tooLong",
                  data: {
                    name,
                    min: minLength,
                    max: maxLength
                  }
                });
              }
            }
          };
        }
      };
      var _idLength = exports$1K;
      var exports$1J = {};
      exports$1J = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require identifiers to match a specified regular expression",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/id-match"
          },
          schema: [
            { type: "string" },
            {
              type: "object",
              properties: {
                properties: {
                  type: "boolean",
                  default: false
                },
                onlyDeclarations: {
                  type: "boolean",
                  default: false
                },
                ignoreDestructuring: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: { notMatch: "Identifier '{{name}}' does not match the pattern '{{pattern}}'." }
        },
        create(context) {
          const pattern = context.options[0] || "^.+$", regexp = new RegExp(pattern, "u");
          const options = context.options[1] || {}, properties = !!options.properties, onlyDeclarations = !!options.onlyDeclarations, ignoreDestructuring = !!options.ignoreDestructuring;
          const reported = new Map();
          const ALLOWED_PARENT_TYPES = new Set([
            "CallExpression",
            "NewExpression"
          ]);
          const DECLARATION_TYPES = new Set([
            "FunctionDeclaration",
            "VariableDeclarator"
          ]);
          const IMPORT_TYPES = new Set([
            "ImportSpecifier",
            "ImportNamespaceSpecifier",
            "ImportDefaultSpecifier"
          ]);
          function isInvalid(name) {
            return !regexp.test(name);
          }
          function isInsideObjectPattern(node) {
            let {parent} = node;
            while (parent) {
              if (parent.type === "ObjectPattern") {
                return true;
              }
              parent = parent.parent;
            }
            return false;
          }
          function shouldReport(effectiveParent, name) {
            return (!onlyDeclarations || DECLARATION_TYPES.has(effectiveParent.type)) && !ALLOWED_PARENT_TYPES.has(effectiveParent.type) && isInvalid(name);
          }
          function report(node) {
            if (!reported.has(node)) {
              context.report({
                node,
                messageId: "notMatch",
                data: {
                  name: node.name,
                  pattern
                }
              });
              reported.set(node, true);
            }
          }
          return {
            Identifier(node) {
              const name = node.name, parent = node.parent, effectiveParent = parent.type === "MemberExpression" ? parent.parent : parent;
              if (parent.type === "MemberExpression") {
                if (!properties) {
                  return;
                }
                if (parent.object.type === "Identifier" && parent.object.name === name) {
                  if (isInvalid(name)) {
                    report(node);
                  }
                } else if (effectiveParent.type === "AssignmentExpression" && effectiveParent.left.type === "MemberExpression" && effectiveParent.left.property.name === node.name) {
                  if (isInvalid(name)) {
                    report(node);
                  }
                } else if (effectiveParent.type === "AssignmentExpression" && effectiveParent.right.type !== "MemberExpression") {
                  if (isInvalid(name)) {
                    report(node);
                  }
                }
              } else if (parent.type === "Property" || parent.type === "AssignmentPattern") {
                if (parent.parent && parent.parent.type === "ObjectPattern") {
                  if (parent.shorthand && parent.value.left && isInvalid(name)) {
                    report(node);
                  }
                  const assignmentKeyEqualsValue = parent.key.name === parent.value.name;
                  if (!assignmentKeyEqualsValue && parent.key === node) {
                    return;
                  }
                  const valueIsInvalid = parent.value.name && isInvalid(name);
                  if (valueIsInvalid && !(assignmentKeyEqualsValue && ignoreDestructuring)) {
                    report(node);
                  }
                }
                if (!properties || ignoreDestructuring && isInsideObjectPattern(node)) {
                  return;
                }
                if (parent.right !== node && shouldReport(effectiveParent, name)) {
                  report(node);
                }
              } else if (IMPORT_TYPES.has(parent.type)) {
                if (parent.local && parent.local.name === node.name && isInvalid(name)) {
                  report(node);
                }
              } else if (shouldReport(effectiveParent, name)) {
                report(node);
              }
            }
          };
        }
      };
      var _idMatch = exports$1J;
      var exports$1I = {};
      const {isCommentToken, isNotOpeningParenToken} = _astUtils;
      exports$1I = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce the location of arrow function bodies",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/implicit-arrow-linebreak"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "beside",
                "below"
              ]
            }],
          messages: {
            expected: "Expected a linebreak before this expression.",
            unexpected: "Expected no linebreak before this expression."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const option = context.options[0] || "beside";
          function validateExpression(node) {
            if (node.body.type === "BlockStatement") {
              return;
            }
            const arrowToken = sourceCode.getTokenBefore(node.body, isNotOpeningParenToken);
            const firstTokenOfBody = sourceCode.getTokenAfter(arrowToken);
            if (arrowToken.loc.end.line === firstTokenOfBody.loc.start.line && option === "below") {
              context.report({
                node: firstTokenOfBody,
                messageId: "expected",
                fix: fixer => fixer.insertTextBefore(firstTokenOfBody, "\n")
              });
            } else if (arrowToken.loc.end.line !== firstTokenOfBody.loc.start.line && option === "beside") {
              context.report({
                node: firstTokenOfBody,
                messageId: "unexpected",
                fix(fixer) {
                  if (sourceCode.getFirstTokenBetween(arrowToken, firstTokenOfBody, {
                      includeComments: true,
                      filter: isCommentToken
                    })) {
                    return null;
                  }
                  return fixer.replaceTextRange([
                    arrowToken.range[1],
                    firstTokenOfBody.range[0]
                  ], " ");
                }
              });
            }
          }
          return { ArrowFunctionExpression: node => validateExpression(node) };
        }
      };
      var _implicitArrowLinebreak = exports$1I;
      var exports$1H = {};
      const astUtils$S = _astUtils;
      exports$1H = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent indentation",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/indent-legacy"
          },
          deprecated: true,
          replacedBy: ["indent"],
          fixable: "whitespace",
          schema: [
            {
              oneOf: [
                { enum: ["tab"] },
                {
                  type: "integer",
                  minimum: 0
                }
              ]
            },
            {
              type: "object",
              properties: {
                SwitchCase: {
                  type: "integer",
                  minimum: 0
                },
                VariableDeclarator: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    {
                      type: "object",
                      properties: {
                        var: {
                          type: "integer",
                          minimum: 0
                        },
                        let: {
                          type: "integer",
                          minimum: 0
                        },
                        const: {
                          type: "integer",
                          minimum: 0
                        }
                      }
                    }
                  ]
                },
                outerIIFEBody: {
                  type: "integer",
                  minimum: 0
                },
                MemberExpression: {
                  type: "integer",
                  minimum: 0
                },
                FunctionDeclaration: {
                  type: "object",
                  properties: {
                    parameters: {
                      oneOf: [
                        {
                          type: "integer",
                          minimum: 0
                        },
                        { enum: ["first"] }
                      ]
                    },
                    body: {
                      type: "integer",
                      minimum: 0
                    }
                  }
                },
                FunctionExpression: {
                  type: "object",
                  properties: {
                    parameters: {
                      oneOf: [
                        {
                          type: "integer",
                          minimum: 0
                        },
                        { enum: ["first"] }
                      ]
                    },
                    body: {
                      type: "integer",
                      minimum: 0
                    }
                  }
                },
                CallExpression: {
                  type: "object",
                  properties: {
                    parameters: {
                      oneOf: [
                        {
                          type: "integer",
                          minimum: 0
                        },
                        { enum: ["first"] }
                      ]
                    }
                  }
                },
                ArrayExpression: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    { enum: ["first"] }
                  ]
                },
                ObjectExpression: {
                  oneOf: [
                    {
                      type: "integer",
                      minimum: 0
                    },
                    { enum: ["first"] }
                  ]
                }
              },
              additionalProperties: false
            }
          ],
          messages: { expected: "Expected indentation of {{expected}} but found {{actual}}." }
        },
        create(context) {
          const DEFAULT_VARIABLE_INDENT = 1;
          const DEFAULT_PARAMETER_INDENT = null;
          const DEFAULT_FUNCTION_BODY_INDENT = 1;
          let indentType = "space";
          let indentSize = 4;
          const options = {
            SwitchCase: 0,
            VariableDeclarator: {
              var: DEFAULT_VARIABLE_INDENT,
              let: DEFAULT_VARIABLE_INDENT,
              const: DEFAULT_VARIABLE_INDENT
            },
            outerIIFEBody: null,
            FunctionDeclaration: {
              parameters: DEFAULT_PARAMETER_INDENT,
              body: DEFAULT_FUNCTION_BODY_INDENT
            },
            FunctionExpression: {
              parameters: DEFAULT_PARAMETER_INDENT,
              body: DEFAULT_FUNCTION_BODY_INDENT
            },
            CallExpression: { arguments: DEFAULT_PARAMETER_INDENT },
            ArrayExpression: 1,
            ObjectExpression: 1
          };
          const sourceCode = context.getSourceCode();
          if (context.options.length) {
            if (context.options[0] === "tab") {
              indentSize = 1;
              indentType = "tab";
            } else if (typeof context.options[0] === "number") {
              indentSize = context.options[0];
              indentType = "space";
            }
            if (context.options[1]) {
              const opts = context.options[1];
              options.SwitchCase = opts.SwitchCase || 0;
              const variableDeclaratorRules = opts.VariableDeclarator;
              if (typeof variableDeclaratorRules === "number") {
                options.VariableDeclarator = {
                  var: variableDeclaratorRules,
                  let: variableDeclaratorRules,
                  const: variableDeclaratorRules
                };
              } else if (typeof variableDeclaratorRules === "object") {
                Object.assign(options.VariableDeclarator, variableDeclaratorRules);
              }
              if (typeof opts.outerIIFEBody === "number") {
                options.outerIIFEBody = opts.outerIIFEBody;
              }
              if (typeof opts.MemberExpression === "number") {
                options.MemberExpression = opts.MemberExpression;
              }
              if (typeof opts.FunctionDeclaration === "object") {
                Object.assign(options.FunctionDeclaration, opts.FunctionDeclaration);
              }
              if (typeof opts.FunctionExpression === "object") {
                Object.assign(options.FunctionExpression, opts.FunctionExpression);
              }
              if (typeof opts.CallExpression === "object") {
                Object.assign(options.CallExpression, opts.CallExpression);
              }
              if (typeof opts.ArrayExpression === "number" || typeof opts.ArrayExpression === "string") {
                options.ArrayExpression = opts.ArrayExpression;
              }
              if (typeof opts.ObjectExpression === "number" || typeof opts.ObjectExpression === "string") {
                options.ObjectExpression = opts.ObjectExpression;
              }
            }
          }
          const caseIndentStore = {};
          function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {
            const expectedStatement = `${ expectedAmount } ${ indentType }${ expectedAmount === 1 ? "" : "s" }`;
            const foundSpacesWord = `space${ actualSpaces === 1 ? "" : "s" }`;
            const foundTabsWord = `tab${ actualTabs === 1 ? "" : "s" }`;
            let foundStatement;
            if (actualSpaces > 0 && actualTabs > 0) {
              foundStatement = `${ actualSpaces } ${ foundSpacesWord } and ${ actualTabs } ${ foundTabsWord }`;
            } else if (actualSpaces > 0) {
              foundStatement = indentType === "space" ? actualSpaces : `${ actualSpaces } ${ foundSpacesWord }`;
            } else if (actualTabs > 0) {
              foundStatement = indentType === "tab" ? actualTabs : `${ actualTabs } ${ foundTabsWord }`;
            } else {
              foundStatement = "0";
            }
            return {
              expected: expectedStatement,
              actual: foundStatement
            };
          }
          function report(node, needed, gottenSpaces, gottenTabs, loc, isLastNodeCheck) {
            if (gottenSpaces && gottenTabs) {
              return;
            }
            const desiredIndent = (indentType === "space" ? " " : "\t").repeat(needed);
            const textRange = isLastNodeCheck ? [
              node.range[1] - node.loc.end.column,
              node.range[1] - node.loc.end.column + gottenSpaces + gottenTabs
            ] : [
              node.range[0] - node.loc.start.column,
              node.range[0] - node.loc.start.column + gottenSpaces + gottenTabs
            ];
            context.report({
              node,
              loc,
              messageId: "expected",
              data: createErrorMessageData(needed, gottenSpaces, gottenTabs),
              fix: fixer => fixer.replaceTextRange(textRange, desiredIndent)
            });
          }
          function getNodeIndent(node, byLastLine) {
            const token = byLastLine ? sourceCode.getLastToken(node) : sourceCode.getFirstToken(node);
            const srcCharsBeforeNode = sourceCode.getText(token, token.loc.start.column).split("");
            const indentChars = srcCharsBeforeNode.slice(0, srcCharsBeforeNode.findIndex(char => char !== " " && char !== "\t"));
            const spaces = indentChars.filter(char => char === " ").length;
            const tabs = indentChars.filter(char => char === "\t").length;
            return {
              space: spaces,
              tab: tabs,
              goodChar: indentType === "space" ? spaces : tabs,
              badChar: indentType === "space" ? tabs : spaces
            };
          }
          function isNodeFirstInLine(node, byEndLocation) {
            const firstToken = byEndLocation === true ? sourceCode.getLastToken(node, 1) : sourceCode.getTokenBefore(node), startLine = byEndLocation === true ? node.loc.end.line : node.loc.start.line, endLine = firstToken ? firstToken.loc.end.line : -1;
            return startLine !== endLine;
          }
          function checkNodeIndent(node, neededIndent) {
            const actualIndent = getNodeIndent(node, false);
            if (node.type !== "ArrayExpression" && node.type !== "ObjectExpression" && (actualIndent.goodChar !== neededIndent || actualIndent.badChar !== 0) && isNodeFirstInLine(node)) {
              report(node, neededIndent, actualIndent.space, actualIndent.tab);
            }
            if (node.type === "IfStatement" && node.alternate) {
              const elseToken = sourceCode.getTokenBefore(node.alternate);
              checkNodeIndent(elseToken, neededIndent);
              if (!isNodeFirstInLine(node.alternate)) {
                checkNodeIndent(node.alternate, neededIndent);
              }
            }
            if (node.type === "TryStatement" && node.handler) {
              const catchToken = sourceCode.getFirstToken(node.handler);
              checkNodeIndent(catchToken, neededIndent);
            }
            if (node.type === "TryStatement" && node.finalizer) {
              const finallyToken = sourceCode.getTokenBefore(node.finalizer);
              checkNodeIndent(finallyToken, neededIndent);
            }
            if (node.type === "DoWhileStatement") {
              const whileToken = sourceCode.getTokenAfter(node.body);
              checkNodeIndent(whileToken, neededIndent);
            }
          }
          function checkNodesIndent(nodes, indent) {
            nodes.forEach(node => checkNodeIndent(node, indent));
          }
          function checkLastNodeLineIndent(node, lastLineIndent) {
            const lastToken = sourceCode.getLastToken(node);
            const endIndent = getNodeIndent(lastToken, true);
            if ((endIndent.goodChar !== lastLineIndent || endIndent.badChar !== 0) && isNodeFirstInLine(node, true)) {
              report(node, lastLineIndent, endIndent.space, endIndent.tab, {
                line: lastToken.loc.start.line,
                column: lastToken.loc.start.column
              }, true);
            }
          }
          function checkLastReturnStatementLineIndent(node, firstLineIndent) {
            const lastToken = sourceCode.getLastToken(node, astUtils$S.isClosingParenToken);
            const textBeforeClosingParenthesis = sourceCode.getText(lastToken, lastToken.loc.start.column).slice(0, -1);
            if (textBeforeClosingParenthesis.trim()) {
              return;
            }
            const endIndent = getNodeIndent(lastToken, true);
            if (endIndent.goodChar !== firstLineIndent) {
              report(node, firstLineIndent, endIndent.space, endIndent.tab, {
                line: lastToken.loc.start.line,
                column: lastToken.loc.start.column
              }, true);
            }
          }
          function checkFirstNodeLineIndent(node, firstLineIndent) {
            const startIndent = getNodeIndent(node, false);
            if ((startIndent.goodChar !== firstLineIndent || startIndent.badChar !== 0) && isNodeFirstInLine(node)) {
              report(node, firstLineIndent, startIndent.space, startIndent.tab, {
                line: node.loc.start.line,
                column: node.loc.start.column
              });
            }
          }
          function getParentNodeByType(node, type, stopAtList) {
            let parent = node.parent;
            const stopAtSet = new Set(stopAtList || ["Program"]);
            while (parent.type !== type && !stopAtSet.has(parent.type) && parent.type !== "Program") {
              parent = parent.parent;
            }
            return parent.type === type ? parent : null;
          }
          function getVariableDeclaratorNode(node) {
            return getParentNodeByType(node, "VariableDeclarator");
          }
          function isNodeInVarOnTop(node, varNode) {
            return varNode && varNode.parent.loc.start.line === node.loc.start.line && varNode.parent.declarations.length > 1;
          }
          function isArgBeforeCalleeNodeMultiline(node) {
            const parent = node.parent;
            if (parent.arguments.length >= 2 && parent.arguments[1] === node) {
              return parent.arguments[0].loc.end.line > parent.arguments[0].loc.start.line;
            }
            return false;
          }
          function isOuterIIFE(node) {
            const parent = node.parent;
            let stmt = parent.parent;
            if (parent.type !== "CallExpression" || parent.callee !== node) {
              return false;
            }
            while (stmt.type === "UnaryExpression" && (stmt.operator === "!" || stmt.operator === "~" || stmt.operator === "+" || stmt.operator === "-") || stmt.type === "AssignmentExpression" || stmt.type === "LogicalExpression" || stmt.type === "SequenceExpression" || stmt.type === "VariableDeclarator") {
              stmt = stmt.parent;
            }
            return (stmt.type === "ExpressionStatement" || stmt.type === "VariableDeclaration") && stmt.parent && stmt.parent.type === "Program";
          }
          function checkIndentInFunctionBlock(node) {
            const calleeNode = node.parent;
            let indent;
            if (calleeNode.parent && (calleeNode.parent.type === "Property" || calleeNode.parent.type === "ArrayExpression")) {
              indent = getNodeIndent(calleeNode, false).goodChar;
            } else {
              indent = getNodeIndent(calleeNode).goodChar;
            }
            if (calleeNode.parent.type === "CallExpression") {
              const calleeParent = calleeNode.parent;
              if (calleeNode.type !== "FunctionExpression" && calleeNode.type !== "ArrowFunctionExpression") {
                if (calleeParent && calleeParent.loc.start.line < node.loc.start.line) {
                  indent = getNodeIndent(calleeParent).goodChar;
                }
              } else {
                if (isArgBeforeCalleeNodeMultiline(calleeNode) && calleeParent.callee.loc.start.line === calleeParent.callee.loc.end.line && !isNodeFirstInLine(calleeNode)) {
                  indent = getNodeIndent(calleeParent).goodChar;
                }
              }
            }
            let functionOffset = indentSize;
            if (options.outerIIFEBody !== null && isOuterIIFE(calleeNode)) {
              functionOffset = options.outerIIFEBody * indentSize;
            } else if (calleeNode.type === "FunctionExpression") {
              functionOffset = options.FunctionExpression.body * indentSize;
            } else if (calleeNode.type === "FunctionDeclaration") {
              functionOffset = options.FunctionDeclaration.body * indentSize;
            }
            indent += functionOffset;
            const parentVarNode = getVariableDeclaratorNode(node);
            if (parentVarNode && isNodeInVarOnTop(node, parentVarNode)) {
              indent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];
            }
            if (node.body.length > 0) {
              checkNodesIndent(node.body, indent);
            }
            checkLastNodeLineIndent(node, indent - functionOffset);
          }
          function isSingleLineNode(node) {
            const lastToken = sourceCode.getLastToken(node), startLine = node.loc.start.line, endLine = lastToken.loc.end.line;
            return startLine === endLine;
          }
          function checkIndentInArrayOrObjectBlock(node) {
            if (isSingleLineNode(node)) {
              return;
            }
            let elements = node.type === "ArrayExpression" ? node.elements : node.properties;
            elements = elements.filter(elem => elem !== null);
            let nodeIndent;
            let elementsIndent;
            const parentVarNode = getVariableDeclaratorNode(node);
            if (isNodeFirstInLine(node)) {
              const parent = node.parent;
              nodeIndent = getNodeIndent(parent).goodChar;
              if (!parentVarNode || parentVarNode.loc.start.line !== node.loc.start.line) {
                if (parent.type !== "VariableDeclarator" || parentVarNode === parentVarNode.parent.declarations[0]) {
                  if (parent.type === "VariableDeclarator" && parentVarNode.loc.start.line === parent.loc.start.line) {
                    nodeIndent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];
                  } else if (parent.type === "ObjectExpression" || parent.type === "ArrayExpression") {
                    const parentElements = node.parent.type === "ObjectExpression" ? node.parent.properties : node.parent.elements;
                    if (parentElements[0] && parentElements[0].loc.start.line === parent.loc.start.line && parentElements[0].loc.end.line !== parent.loc.start.line) ; else if (typeof options[parent.type] === "number") {
                      nodeIndent += options[parent.type] * indentSize;
                    } else {
                      nodeIndent = parentElements[0].loc.start.column;
                    }
                  } else if (parent.type === "CallExpression" || parent.type === "NewExpression") {
                    if (typeof options.CallExpression.arguments === "number") {
                      nodeIndent += options.CallExpression.arguments * indentSize;
                    } else if (options.CallExpression.arguments === "first") {
                      if (parent.arguments.indexOf(node) !== -1) {
                        nodeIndent = parent.arguments[0].loc.start.column;
                      }
                    } else {
                      nodeIndent += indentSize;
                    }
                  } else if (parent.type === "LogicalExpression" || parent.type === "ArrowFunctionExpression") {
                    nodeIndent += indentSize;
                  }
                }
              }
              checkFirstNodeLineIndent(node, nodeIndent);
            } else {
              nodeIndent = getNodeIndent(node).goodChar;
            }
            if (options[node.type] === "first") {
              elementsIndent = elements.length ? elements[0].loc.start.column : 0;
            } else {
              elementsIndent = nodeIndent + indentSize * options[node.type];
            }
            if (isNodeInVarOnTop(node, parentVarNode)) {
              elementsIndent += indentSize * options.VariableDeclarator[parentVarNode.parent.kind];
            }
            checkNodesIndent(elements, elementsIndent);
            if (elements.length > 0) {
              if (elements[elements.length - 1].loc.end.line === node.loc.end.line) {
                return;
              }
            }
            checkLastNodeLineIndent(node, nodeIndent + (isNodeInVarOnTop(node, parentVarNode) ? options.VariableDeclarator[parentVarNode.parent.kind] * indentSize : 0));
          }
          function isNodeBodyBlock(node) {
            return node.type === "BlockStatement" || node.type === "ClassBody" || node.body && node.body.type === "BlockStatement" || node.consequent && node.consequent.type === "BlockStatement";
          }
          function blockIndentationCheck(node) {
            if (isSingleLineNode(node)) {
              return;
            }
            if (node.parent && (node.parent.type === "FunctionExpression" || node.parent.type === "FunctionDeclaration" || node.parent.type === "ArrowFunctionExpression")) {
              checkIndentInFunctionBlock(node);
              return;
            }
            let indent;
            let nodesToCheck = [];
            const statementsWithProperties = [
              "IfStatement",
              "WhileStatement",
              "ForStatement",
              "ForInStatement",
              "ForOfStatement",
              "DoWhileStatement",
              "ClassDeclaration",
              "TryStatement"
            ];
            if (node.parent && statementsWithProperties.indexOf(node.parent.type) !== -1 && isNodeBodyBlock(node)) {
              indent = getNodeIndent(node.parent).goodChar;
            } else if (node.parent && node.parent.type === "CatchClause") {
              indent = getNodeIndent(node.parent.parent).goodChar;
            } else {
              indent = getNodeIndent(node).goodChar;
            }
            if (node.type === "IfStatement" && node.consequent.type !== "BlockStatement") {
              nodesToCheck = [node.consequent];
            } else if (Array.isArray(node.body)) {
              nodesToCheck = node.body;
            } else {
              nodesToCheck = [node.body];
            }
            if (nodesToCheck.length > 0) {
              checkNodesIndent(nodesToCheck, indent + indentSize);
            }
            if (node.type === "BlockStatement") {
              checkLastNodeLineIndent(node, indent);
            }
          }
          function filterOutSameLineVars(node) {
            return node.declarations.reduce((finalCollection, elem) => {
              const lastElem = finalCollection[finalCollection.length - 1];
              if (elem.loc.start.line !== node.loc.start.line && !lastElem || lastElem && lastElem.loc.start.line !== elem.loc.start.line) {
                finalCollection.push(elem);
              }
              return finalCollection;
            }, []);
          }
          function checkIndentInVariableDeclarations(node) {
            const elements = filterOutSameLineVars(node);
            const nodeIndent = getNodeIndent(node).goodChar;
            const lastElement = elements[elements.length - 1];
            const elementsIndent = nodeIndent + indentSize * options.VariableDeclarator[node.kind];
            checkNodesIndent(elements, elementsIndent);
            if (sourceCode.getLastToken(node).loc.end.line <= lastElement.loc.end.line) {
              return;
            }
            const tokenBeforeLastElement = sourceCode.getTokenBefore(lastElement);
            if (tokenBeforeLastElement.value === ",") {
              checkLastNodeLineIndent(node, getNodeIndent(tokenBeforeLastElement).goodChar);
            } else {
              checkLastNodeLineIndent(node, elementsIndent - indentSize);
            }
          }
          function blockLessNodes(node) {
            if (node.body.type !== "BlockStatement") {
              blockIndentationCheck(node);
            }
          }
          function expectedCaseIndent(node, providedSwitchIndent) {
            const switchNode = node.type === "SwitchStatement" ? node : node.parent;
            const switchIndent = typeof providedSwitchIndent === "undefined" ? getNodeIndent(switchNode).goodChar : providedSwitchIndent;
            let caseIndent;
            if (caseIndentStore[switchNode.loc.start.line]) {
              return caseIndentStore[switchNode.loc.start.line];
            }
            if (switchNode.cases.length > 0 && options.SwitchCase === 0) {
              caseIndent = switchIndent;
            } else {
              caseIndent = switchIndent + indentSize * options.SwitchCase;
            }
            caseIndentStore[switchNode.loc.start.line] = caseIndent;
            return caseIndent;
          }
          function isWrappedInParenthesis(node) {
            const regex = /^return\s*?\(\s*?\);*?/u;
            const statementWithoutArgument = sourceCode.getText(node).replace(sourceCode.getText(node.argument), "");
            return regex.test(statementWithoutArgument);
          }
          return {
            Program(node) {
              if (node.body.length > 0) {
                checkNodesIndent(node.body, getNodeIndent(node).goodChar);
              }
            },
            ClassBody: blockIndentationCheck,
            BlockStatement: blockIndentationCheck,
            WhileStatement: blockLessNodes,
            ForStatement: blockLessNodes,
            ForInStatement: blockLessNodes,
            ForOfStatement: blockLessNodes,
            DoWhileStatement: blockLessNodes,
            IfStatement(node) {
              if (node.consequent.type !== "BlockStatement" && node.consequent.loc.start.line > node.loc.start.line) {
                blockIndentationCheck(node);
              }
            },
            VariableDeclaration(node) {
              if (node.declarations[node.declarations.length - 1].loc.start.line > node.declarations[0].loc.start.line) {
                checkIndentInVariableDeclarations(node);
              }
            },
            ObjectExpression(node) {
              checkIndentInArrayOrObjectBlock(node);
            },
            ArrayExpression(node) {
              checkIndentInArrayOrObjectBlock(node);
            },
            MemberExpression(node) {
              if (typeof options.MemberExpression === "undefined") {
                return;
              }
              if (isSingleLineNode(node)) {
                return;
              }
              if (getParentNodeByType(node, "VariableDeclarator", [
                  "FunctionExpression",
                  "ArrowFunctionExpression"
                ])) {
                return;
              }
              if (getParentNodeByType(node, "AssignmentExpression", ["FunctionExpression"])) {
                return;
              }
              const propertyIndent = getNodeIndent(node).goodChar + indentSize * options.MemberExpression;
              const checkNodes = [node.property];
              const dot = sourceCode.getTokenBefore(node.property);
              if (dot.type === "Punctuator" && dot.value === ".") {
                checkNodes.push(dot);
              }
              checkNodesIndent(checkNodes, propertyIndent);
            },
            SwitchStatement(node) {
              const switchIndent = getNodeIndent(node).goodChar;
              const caseIndent = expectedCaseIndent(node, switchIndent);
              checkNodesIndent(node.cases, caseIndent);
              checkLastNodeLineIndent(node, switchIndent);
            },
            SwitchCase(node) {
              if (isSingleLineNode(node)) {
                return;
              }
              const caseIndent = expectedCaseIndent(node);
              checkNodesIndent(node.consequent, caseIndent + indentSize);
            },
            FunctionDeclaration(node) {
              if (isSingleLineNode(node)) {
                return;
              }
              if (options.FunctionDeclaration.parameters === "first" && node.params.length) {
                checkNodesIndent(node.params.slice(1), node.params[0].loc.start.column);
              } else if (options.FunctionDeclaration.parameters !== null) {
                checkNodesIndent(node.params, getNodeIndent(node).goodChar + indentSize * options.FunctionDeclaration.parameters);
              }
            },
            FunctionExpression(node) {
              if (isSingleLineNode(node)) {
                return;
              }
              if (options.FunctionExpression.parameters === "first" && node.params.length) {
                checkNodesIndent(node.params.slice(1), node.params[0].loc.start.column);
              } else if (options.FunctionExpression.parameters !== null) {
                checkNodesIndent(node.params, getNodeIndent(node).goodChar + indentSize * options.FunctionExpression.parameters);
              }
            },
            ReturnStatement(node) {
              if (isSingleLineNode(node)) {
                return;
              }
              const firstLineIndent = getNodeIndent(node).goodChar;
              if (isWrappedInParenthesis(node)) {
                checkLastReturnStatementLineIndent(node, firstLineIndent);
              } else {
                checkNodeIndent(node, firstLineIndent);
              }
            },
            CallExpression(node) {
              if (isSingleLineNode(node)) {
                return;
              }
              if (options.CallExpression.arguments === "first" && node.arguments.length) {
                checkNodesIndent(node.arguments.slice(1), node.arguments[0].loc.start.column);
              } else if (options.CallExpression.arguments !== null) {
                checkNodesIndent(node.arguments, getNodeIndent(node).goodChar + indentSize * options.CallExpression.arguments);
              }
            }
          };
        }
      };
      var _indentLegacy = exports$1H;
      var exports$1G = {};
      const astUtils$R = _astUtils;
      exports$1G = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow newlines around directives",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/lines-around-directive"
          },
          schema: [{
              oneOf: [
                {
                  enum: [
                    "always",
                    "never"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    before: {
                      enum: [
                        "always",
                        "never"
                      ]
                    },
                    after: {
                      enum: [
                        "always",
                        "never"
                      ]
                    }
                  },
                  additionalProperties: false,
                  minProperties: 2
                }
              ]
            }],
          fixable: "whitespace",
          messages: {
            expected: "Expected newline {{location}} \"{{value}}\" directive.",
            unexpected: "Unexpected newline {{location}} \"{{value}}\" directive."
          },
          deprecated: true,
          replacedBy: ["padding-line-between-statements"]
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const config = context.options[0] || "always";
          const expectLineBefore = typeof config === "string" ? config : config.before;
          const expectLineAfter = typeof config === "string" ? config : config.after;
          function hasNewlineBefore(node) {
            const tokenBefore = sourceCode.getTokenBefore(node, { includeComments: true });
            const tokenLineBefore = tokenBefore ? tokenBefore.loc.end.line : 0;
            return node.loc.start.line - tokenLineBefore >= 2;
          }
          function getLastTokenOnLine(node) {
            const lastToken = sourceCode.getLastToken(node);
            const secondToLastToken = sourceCode.getTokenBefore(lastToken);
            return astUtils$R.isSemicolonToken(lastToken) && lastToken.loc.start.line > secondToLastToken.loc.end.line ? secondToLastToken : lastToken;
          }
          function hasNewlineAfter(node) {
            const lastToken = getLastTokenOnLine(node);
            const tokenAfter = sourceCode.getTokenAfter(lastToken, { includeComments: true });
            return tokenAfter.loc.start.line - lastToken.loc.end.line >= 2;
          }
          function reportError(node, location, expected) {
            context.report({
              node,
              messageId: expected ? "expected" : "unexpected",
              data: {
                value: node.expression.value,
                location
              },
              fix(fixer) {
                const lastToken = getLastTokenOnLine(node);
                if (expected) {
                  return location === "before" ? fixer.insertTextBefore(node, "\n") : fixer.insertTextAfter(lastToken, "\n");
                }
                return fixer.removeRange(location === "before" ? [
                  node.range[0] - 1,
                  node.range[0]
                ] : [
                  lastToken.range[1],
                  lastToken.range[1] + 1
                ]);
              }
            });
          }
          function checkDirectives(node) {
            const directives = astUtils$R.getDirectivePrologue(node);
            if (!directives.length) {
              return;
            }
            const firstDirective = directives[0];
            const leadingComments = sourceCode.getCommentsBefore(firstDirective);
            if (leadingComments.length) {
              if (expectLineBefore === "always" && !hasNewlineBefore(firstDirective)) {
                reportError(firstDirective, "before", true);
              }
              if (expectLineBefore === "never" && hasNewlineBefore(firstDirective)) {
                reportError(firstDirective, "before", false);
              }
            } else if (node.type === "Program" && expectLineBefore === "never" && !leadingComments.length && hasNewlineBefore(firstDirective)) {
              reportError(firstDirective, "before", false);
            }
            const lastDirective = directives[directives.length - 1];
            const statements = node.type === "Program" ? node.body : node.body.body;
            if (lastDirective === statements[statements.length - 1] && !lastDirective.trailingComments) {
              return;
            }
            if (expectLineAfter === "always" && !hasNewlineAfter(lastDirective)) {
              reportError(lastDirective, "after", true);
            }
            if (expectLineAfter === "never" && hasNewlineAfter(lastDirective)) {
              reportError(lastDirective, "after", false);
            }
          }
          return {
            Program: checkDirectives,
            FunctionDeclaration: checkDirectives,
            FunctionExpression: checkDirectives,
            ArrowFunctionExpression: checkDirectives
          };
        }
      };
      var _linesAroundDirective = exports$1G;
      var exports$1F = {};
      const astUtils$Q = _astUtils;
      exports$1F = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce a maximum number of statements allowed per line",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/max-statements-per-line"
          },
          schema: [{
              type: "object",
              properties: {
                max: {
                  type: "integer",
                  minimum: 1,
                  default: 1
                }
              },
              additionalProperties: false
            }],
          messages: { exceed: "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}." }
        },
        create(context) {
          const sourceCode = context.getSourceCode(), options = context.options[0] || {}, maxStatementsPerLine = typeof options.max !== "undefined" ? options.max : 1;
          let lastStatementLine = 0, numberOfStatementsOnThisLine = 0, firstExtraStatement;
          const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;
          function reportFirstExtraStatementAndClear() {
            if (firstExtraStatement) {
              context.report({
                node: firstExtraStatement,
                messageId: "exceed",
                data: {
                  numberOfStatementsOnThisLine,
                  maxStatementsPerLine,
                  statements: numberOfStatementsOnThisLine === 1 ? "statement" : "statements"
                }
              });
            }
            firstExtraStatement = null;
          }
          function getActualLastToken(node) {
            return sourceCode.getLastToken(node, astUtils$Q.isNotSemicolonToken);
          }
          function enterStatement(node) {
            const line = node.loc.start.line;
            if (SINGLE_CHILD_ALLOWED.test(node.parent.type) && node.parent.alternate !== node) {
              return;
            }
            if (line === lastStatementLine) {
              numberOfStatementsOnThisLine += 1;
            } else {
              reportFirstExtraStatementAndClear();
              numberOfStatementsOnThisLine = 1;
              lastStatementLine = line;
            }
            if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {
              firstExtraStatement = firstExtraStatement || node;
            }
          }
          function leaveStatement(node) {
            const line = getActualLastToken(node).loc.end.line;
            if (line !== lastStatementLine) {
              reportFirstExtraStatementAndClear();
              numberOfStatementsOnThisLine = 1;
              lastStatementLine = line;
            }
          }
          return {
            BreakStatement: enterStatement,
            ClassDeclaration: enterStatement,
            ContinueStatement: enterStatement,
            DebuggerStatement: enterStatement,
            DoWhileStatement: enterStatement,
            ExpressionStatement: enterStatement,
            ForInStatement: enterStatement,
            ForOfStatement: enterStatement,
            ForStatement: enterStatement,
            FunctionDeclaration: enterStatement,
            IfStatement: enterStatement,
            ImportDeclaration: enterStatement,
            LabeledStatement: enterStatement,
            ReturnStatement: enterStatement,
            SwitchStatement: enterStatement,
            ThrowStatement: enterStatement,
            TryStatement: enterStatement,
            VariableDeclaration: enterStatement,
            WhileStatement: enterStatement,
            WithStatement: enterStatement,
            ExportNamedDeclaration: enterStatement,
            ExportDefaultDeclaration: enterStatement,
            ExportAllDeclaration: enterStatement,
            "BreakStatement:exit": leaveStatement,
            "ClassDeclaration:exit": leaveStatement,
            "ContinueStatement:exit": leaveStatement,
            "DebuggerStatement:exit": leaveStatement,
            "DoWhileStatement:exit": leaveStatement,
            "ExpressionStatement:exit": leaveStatement,
            "ForInStatement:exit": leaveStatement,
            "ForOfStatement:exit": leaveStatement,
            "ForStatement:exit": leaveStatement,
            "FunctionDeclaration:exit": leaveStatement,
            "IfStatement:exit": leaveStatement,
            "ImportDeclaration:exit": leaveStatement,
            "LabeledStatement:exit": leaveStatement,
            "ReturnStatement:exit": leaveStatement,
            "SwitchStatement:exit": leaveStatement,
            "ThrowStatement:exit": leaveStatement,
            "TryStatement:exit": leaveStatement,
            "VariableDeclaration:exit": leaveStatement,
            "WhileStatement:exit": leaveStatement,
            "WithStatement:exit": leaveStatement,
            "ExportNamedDeclaration:exit": leaveStatement,
            "ExportDefaultDeclaration:exit": leaveStatement,
            "ExportAllDeclaration:exit": leaveStatement,
            "Program:exit": reportFirstExtraStatementAndClear
          };
        }
      };
      var _maxStatementsPerLine = exports$1F;
      var exports$1E = {};
      const astUtils$P = _astUtils;
      exports$1E = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce a particular style for multiline comments",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/multiline-comment-style"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "starred-block",
                "separate-lines",
                "bare-block"
              ]
            }],
          messages: {
            expectedBlock: "Expected a block comment instead of consecutive line comments.",
            expectedBareBlock: "Expected a block comment without padding stars.",
            startNewline: "Expected a linebreak after '/*'.",
            endNewline: "Expected a linebreak before '*/'.",
            missingStar: "Expected a '*' at the start of this line.",
            alignment: "Expected this line to be aligned with the start of the comment.",
            expectedLines: "Expected multiple line comments instead of a block comment."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const option = context.options[0] || "starred-block";
          function isStarredCommentLine(line) {
            return /^\s*\*/u.test(line);
          }
          function isStarredBlockComment([firstComment]) {
            if (firstComment.type !== "Block") {
              return false;
            }
            const lines = firstComment.value.split(astUtils$P.LINEBREAK_MATCHER);
            return lines.length > 0 && lines.every((line, i) => (i === 0 || i === lines.length - 1 ? /^\s*$/u : /^\s*\*/u).test(line));
          }
          function isJSDocComment([firstComment]) {
            if (firstComment.type !== "Block") {
              return false;
            }
            const lines = firstComment.value.split(astUtils$P.LINEBREAK_MATCHER);
            return /^\*\s*$/u.test(lines[0]) && lines.slice(1, -1).every(line => /^\s* /u.test(line)) && /^\s*$/u.test(lines[lines.length - 1]);
          }
          function processSeparateLineComments(commentGroup) {
            const allLinesHaveLeadingSpace = commentGroup.map(({value}) => value).filter(line => line.trim().length).every(line => line.startsWith(" "));
            return commentGroup.map(({value}) => allLinesHaveLeadingSpace ? value.replace(/^ /u, "") : value);
          }
          function processStarredBlockComment(comment) {
            const lines = comment.value.split(astUtils$P.LINEBREAK_MATCHER).filter((line, i, linesArr) => !(i === 0 || i === linesArr.length - 1)).map(line => line.replace(/^\s*$/u, ""));
            const allLinesHaveLeadingSpace = lines.map(line => line.replace(/\s*\*/u, "")).filter(line => line.trim().length).every(line => line.startsWith(" "));
            return lines.map(line => line.replace(allLinesHaveLeadingSpace ? /\s*\* ?/u : /\s*\*/u, ""));
          }
          function processBareBlockComment(comment) {
            const lines = comment.value.split(astUtils$P.LINEBREAK_MATCHER).map(line => line.replace(/^\s*$/u, ""));
            const leadingWhitespace = `${ sourceCode.text.slice(comment.range[0] - comment.loc.start.column, comment.range[0]) }   `;
            let offset = "";
            for (const [i, line] of lines.entries()) {
              if (!line.trim().length || i === 0) {
                continue;
              }
              const [, lineOffset] = line.match(/^(\s*\*?\s*)/u);
              if (lineOffset.length < leadingWhitespace.length) {
                const newOffset = leadingWhitespace.slice(lineOffset.length - leadingWhitespace.length);
                if (newOffset.length > offset.length) {
                  offset = newOffset;
                }
              }
            }
            return lines.map(line => {
              const match = line.match(/^(\s*\*?\s*)(.*)/u);
              const [, lineOffset, lineContents] = match;
              if (lineOffset.length > leadingWhitespace.length) {
                return `${ lineOffset.slice(leadingWhitespace.length - (offset.length + lineOffset.length)) }${ lineContents }`;
              }
              if (lineOffset.length < leadingWhitespace.length) {
                return `${ lineOffset.slice(leadingWhitespace.length) }${ lineContents }`;
              }
              return lineContents;
            });
          }
          function getCommentLines(commentGroup) {
            const [firstComment] = commentGroup;
            if (firstComment.type === "Line") {
              return processSeparateLineComments(commentGroup);
            }
            if (isStarredBlockComment(commentGroup)) {
              return processStarredBlockComment(firstComment);
            }
            return processBareBlockComment(firstComment);
          }
          function getInitialOffset(comment) {
            return sourceCode.text.slice(comment.range[0] - comment.loc.start.column, comment.range[0]);
          }
          function convertToStarredBlock(firstComment, commentLinesList) {
            const initialOffset = getInitialOffset(firstComment);
            return `/*\n${ commentLinesList.map(line => `${ initialOffset } * ${ line }`).join("\n") }\n${ initialOffset } */`;
          }
          function convertToSeparateLines(firstComment, commentLinesList) {
            return commentLinesList.map(line => `// ${ line }`).join(`\n${ getInitialOffset(firstComment) }`);
          }
          function convertToBlock(firstComment, commentLinesList) {
            return `/* ${ commentLinesList.join(`\n${ getInitialOffset(firstComment) }   `) } */`;
          }
          const commentGroupCheckers = {
            "starred-block"(commentGroup) {
              const [firstComment] = commentGroup;
              const commentLines = getCommentLines(commentGroup);
              if (commentLines.some(value => value.includes("*/"))) {
                return;
              }
              if (commentGroup.length > 1) {
                context.report({
                  loc: {
                    start: firstComment.loc.start,
                    end: commentGroup[commentGroup.length - 1].loc.end
                  },
                  messageId: "expectedBlock",
                  fix(fixer) {
                    const range = [
                      firstComment.range[0],
                      commentGroup[commentGroup.length - 1].range[1]
                    ];
                    return commentLines.some(value => value.startsWith("/")) ? null : fixer.replaceTextRange(range, convertToStarredBlock(firstComment, commentLines));
                  }
                });
              } else {
                const lines = firstComment.value.split(astUtils$P.LINEBREAK_MATCHER);
                const expectedLeadingWhitespace = getInitialOffset(firstComment);
                const expectedLinePrefix = `${ expectedLeadingWhitespace } *`;
                if (!/^\*?\s*$/u.test(lines[0])) {
                  const start = firstComment.value.startsWith("*") ? firstComment.range[0] + 1 : firstComment.range[0];
                  context.report({
                    loc: {
                      start: firstComment.loc.start,
                      end: {
                        line: firstComment.loc.start.line,
                        column: firstComment.loc.start.column + 2
                      }
                    },
                    messageId: "startNewline",
                    fix: fixer => fixer.insertTextAfterRange([
                      start,
                      start + 2
                    ], `\n${ expectedLinePrefix }`)
                  });
                }
                if (!/^\s*$/u.test(lines[lines.length - 1])) {
                  context.report({
                    loc: {
                      start: {
                        line: firstComment.loc.end.line,
                        column: firstComment.loc.end.column - 2
                      },
                      end: firstComment.loc.end
                    },
                    messageId: "endNewline",
                    fix: fixer => fixer.replaceTextRange([
                      firstComment.range[1] - 2,
                      firstComment.range[1]
                    ], `\n${ expectedLinePrefix }/`)
                  });
                }
                for (let lineNumber = firstComment.loc.start.line + 1; lineNumber <= firstComment.loc.end.line; lineNumber++) {
                  const lineText = sourceCode.lines[lineNumber - 1];
                  const errorType = isStarredCommentLine(lineText) ? "alignment" : "missingStar";
                  if (!lineText.startsWith(expectedLinePrefix)) {
                    context.report({
                      loc: {
                        start: {
                          line: lineNumber,
                          column: 0
                        },
                        end: {
                          line: lineNumber,
                          column: lineText.length
                        }
                      },
                      messageId: errorType,
                      fix(fixer) {
                        const lineStartIndex = sourceCode.getIndexFromLoc({
                          line: lineNumber,
                          column: 0
                        });
                        if (errorType === "alignment") {
                          const [, commentTextPrefix = ""] = lineText.match(/^(\s*\*)/u) || [];
                          const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;
                          return fixer.replaceTextRange([
                            lineStartIndex,
                            commentTextStartIndex
                          ], expectedLinePrefix);
                        }
                        const [, commentTextPrefix = ""] = lineText.match(/^(\s*)/u) || [];
                        const commentTextStartIndex = lineStartIndex + commentTextPrefix.length;
                        let offset;
                        for (const [idx, line] of lines.entries()) {
                          if (!/\S+/u.test(line)) {
                            continue;
                          }
                          const lineTextToAlignWith = sourceCode.lines[firstComment.loc.start.line - 1 + idx];
                          const [, prefix = "", initialOffset = ""] = lineTextToAlignWith.match(/^(\s*(?:\/?\*)?(\s*))/u) || [];
                          offset = `${ commentTextPrefix.slice(prefix.length) }${ initialOffset }`;
                          if (/^\s*\//u.test(lineText) && offset.length === 0) {
                            offset += " ";
                          }
                          break;
                        }
                        return fixer.replaceTextRange([
                          lineStartIndex,
                          commentTextStartIndex
                        ], `${ expectedLinePrefix }${ offset }`);
                      }
                    });
                  }
                }
              }
            },
            "separate-lines"(commentGroup) {
              const [firstComment] = commentGroup;
              if (firstComment.type !== "Block" || isJSDocComment(commentGroup)) {
                return;
              }
              const commentLines = getCommentLines(commentGroup);
              const tokenAfter = sourceCode.getTokenAfter(firstComment, { includeComments: true });
              if (tokenAfter && firstComment.loc.end.line === tokenAfter.loc.start.line) {
                return;
              }
              context.report({
                loc: {
                  start: firstComment.loc.start,
                  end: {
                    line: firstComment.loc.start.line,
                    column: firstComment.loc.start.column + 2
                  }
                },
                messageId: "expectedLines",
                fix(fixer) {
                  return fixer.replaceText(firstComment, convertToSeparateLines(firstComment, commentLines));
                }
              });
            },
            "bare-block"(commentGroup) {
              if (isJSDocComment(commentGroup)) {
                return;
              }
              const [firstComment] = commentGroup;
              const commentLines = getCommentLines(commentGroup);
              if (firstComment.type === "Line" && commentLines.length > 1 && !commentLines.some(value => value.includes("*/"))) {
                context.report({
                  loc: {
                    start: firstComment.loc.start,
                    end: commentGroup[commentGroup.length - 1].loc.end
                  },
                  messageId: "expectedBlock",
                  fix(fixer) {
                    return fixer.replaceTextRange([
                      firstComment.range[0],
                      commentGroup[commentGroup.length - 1].range[1]
                    ], convertToBlock(firstComment, commentLines));
                  }
                });
              }
              if (isStarredBlockComment(commentGroup)) {
                context.report({
                  loc: {
                    start: firstComment.loc.start,
                    end: {
                      line: firstComment.loc.start.line,
                      column: firstComment.loc.start.column + 2
                    }
                  },
                  messageId: "expectedBareBlock",
                  fix(fixer) {
                    return fixer.replaceText(firstComment, convertToBlock(firstComment, commentLines));
                  }
                });
              }
            }
          };
          return {
            Program() {
              return sourceCode.getAllComments().filter(comment => comment.type !== "Shebang").filter(comment => !astUtils$P.COMMENTS_IGNORE_PATTERN.test(comment.value)).filter(comment => {
                const tokenBefore = sourceCode.getTokenBefore(comment, { includeComments: true });
                return !tokenBefore || tokenBefore.loc.end.line < comment.loc.start.line;
              }).reduce((commentGroups, comment, index, commentList) => {
                const tokenBefore = sourceCode.getTokenBefore(comment, { includeComments: true });
                if (comment.type === "Line" && index && commentList[index - 1].type === "Line" && tokenBefore && tokenBefore.loc.end.line === comment.loc.start.line - 1 && tokenBefore === commentList[index - 1]) {
                  commentGroups[commentGroups.length - 1].push(comment);
                } else {
                  commentGroups.push([comment]);
                }
                return commentGroups;
              }, []).filter(commentGroup => !(commentGroup.length === 1 && commentGroup[0].loc.start.line === commentGroup[0].loc.end.line)).forEach(commentGroupCheckers[option]);
            }
          };
        }
      };
      var _multilineCommentStyle = exports$1E;
      var exports$1D = {};
      const astUtils$O = _astUtils;
      exports$1D = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce newlines between operands of ternary expressions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/multiline-ternary"
          },
          schema: [{
              enum: [
                "always",
                "always-multiline",
                "never"
              ]
            }],
          messages: {
            expectedTestCons: "Expected newline between test and consequent of ternary expression.",
            expectedConsAlt: "Expected newline between consequent and alternate of ternary expression.",
            unexpectedTestCons: "Unexpected newline between test and consequent of ternary expression.",
            unexpectedConsAlt: "Unexpected newline between consequent and alternate of ternary expression."
          },
          fixable: "whitespace"
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const option = context.options[0];
          const multiline = option !== "never";
          const allowSingleLine = option === "always-multiline";
          return {
            ConditionalExpression(node) {
              const questionToken = sourceCode.getTokenAfter(node.test, astUtils$O.isNotClosingParenToken);
              const colonToken = sourceCode.getTokenAfter(node.consequent, astUtils$O.isNotClosingParenToken);
              const firstTokenOfTest = sourceCode.getFirstToken(node);
              const lastTokenOfTest = sourceCode.getTokenBefore(questionToken);
              const firstTokenOfConsequent = sourceCode.getTokenAfter(questionToken);
              const lastTokenOfConsequent = sourceCode.getTokenBefore(colonToken);
              const firstTokenOfAlternate = sourceCode.getTokenAfter(colonToken);
              const areTestAndConsequentOnSameLine = astUtils$O.isTokenOnSameLine(lastTokenOfTest, firstTokenOfConsequent);
              const areConsequentAndAlternateOnSameLine = astUtils$O.isTokenOnSameLine(lastTokenOfConsequent, firstTokenOfAlternate);
              const hasComments = !!sourceCode.getCommentsInside(node).length;
              if (!multiline) {
                if (!areTestAndConsequentOnSameLine) {
                  context.report({
                    node: node.test,
                    loc: {
                      start: firstTokenOfTest.loc.start,
                      end: lastTokenOfTest.loc.end
                    },
                    messageId: "unexpectedTestCons",
                    fix: fixer => {
                      if (hasComments) {
                        return null;
                      }
                      const fixers = [];
                      const areTestAndQuestionOnSameLine = astUtils$O.isTokenOnSameLine(lastTokenOfTest, questionToken);
                      const areQuestionAndConsOnSameLine = astUtils$O.isTokenOnSameLine(questionToken, firstTokenOfConsequent);
                      if (!areTestAndQuestionOnSameLine) {
                        fixers.push(fixer.removeRange([
                          lastTokenOfTest.range[1],
                          questionToken.range[0]
                        ]));
                      }
                      if (!areQuestionAndConsOnSameLine) {
                        fixers.push(fixer.removeRange([
                          questionToken.range[1],
                          firstTokenOfConsequent.range[0]
                        ]));
                      }
                      return fixers;
                    }
                  });
                }
                if (!areConsequentAndAlternateOnSameLine) {
                  context.report({
                    node: node.consequent,
                    loc: {
                      start: firstTokenOfConsequent.loc.start,
                      end: lastTokenOfConsequent.loc.end
                    },
                    messageId: "unexpectedConsAlt",
                    fix: fixer => {
                      if (hasComments) {
                        return null;
                      }
                      const fixers = [];
                      const areConsAndColonOnSameLine = astUtils$O.isTokenOnSameLine(lastTokenOfConsequent, colonToken);
                      const areColonAndAltOnSameLine = astUtils$O.isTokenOnSameLine(colonToken, firstTokenOfAlternate);
                      if (!areConsAndColonOnSameLine) {
                        fixers.push(fixer.removeRange([
                          lastTokenOfConsequent.range[1],
                          colonToken.range[0]
                        ]));
                      }
                      if (!areColonAndAltOnSameLine) {
                        fixers.push(fixer.removeRange([
                          colonToken.range[1],
                          firstTokenOfAlternate.range[0]
                        ]));
                      }
                      return fixers;
                    }
                  });
                }
              } else {
                if (allowSingleLine && node.loc.start.line === node.loc.end.line) {
                  return;
                }
                if (areTestAndConsequentOnSameLine) {
                  context.report({
                    node: node.test,
                    loc: {
                      start: firstTokenOfTest.loc.start,
                      end: lastTokenOfTest.loc.end
                    },
                    messageId: "expectedTestCons",
                    fix: fixer => hasComments ? null : fixer.replaceTextRange([
                      lastTokenOfTest.range[1],
                      questionToken.range[0]
                    ], "\n")
                  });
                }
                if (areConsequentAndAlternateOnSameLine) {
                  context.report({
                    node: node.consequent,
                    loc: {
                      start: firstTokenOfConsequent.loc.start,
                      end: lastTokenOfConsequent.loc.end
                    },
                    messageId: "expectedConsAlt",
                    fix: fixer => hasComments ? null : fixer.replaceTextRange([
                      lastTokenOfConsequent.range[1],
                      colonToken.range[0]
                    ], "\n")
                  });
                }
              }
            }
          };
        }
      };
      var _multilineTernary = exports$1D;
      var exports$1C = {};
      const astUtils$N = _astUtils;
      exports$1C = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow an empty line after variable declarations",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/newline-after-var"
          },
          schema: [{
              enum: [
                "never",
                "always"
              ]
            }],
          fixable: "whitespace",
          messages: {
            expected: "Expected blank line after variable declarations.",
            unexpected: "Unexpected blank line after variable declarations."
          },
          deprecated: true,
          replacedBy: ["padding-line-between-statements"]
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const mode = context.options[0] === "never" ? "never" : "always";
          const commentEndLine = sourceCode.getAllComments().reduce((result, token) => {
            result[token.loc.start.line] = token.loc.end.line;
            return result;
          }, {});
          function getLastToken(node) {
            const lastToken = sourceCode.getLastToken(node);
            if (lastToken.type === "Punctuator" && lastToken.value === ";") {
              const prevToken = sourceCode.getTokenBefore(lastToken);
              if (prevToken.loc.end.line !== lastToken.loc.start.line) {
                return prevToken;
              }
            }
            return lastToken;
          }
          function isVar(keyword) {
            return keyword === "var" || keyword === "let" || keyword === "const";
          }
          function isForTypeSpecifier(keyword) {
            return keyword === "ForStatement" || keyword === "ForInStatement" || keyword === "ForOfStatement";
          }
          function isExportSpecifier(nodeType) {
            return nodeType === "ExportNamedDeclaration" || nodeType === "ExportSpecifier" || nodeType === "ExportDefaultDeclaration" || nodeType === "ExportAllDeclaration";
          }
          function isLastNode(node) {
            const token = sourceCode.getTokenAfter(node);
            return !token || token.type === "Punctuator" && token.value === "}";
          }
          function getLastCommentLineOfBlock(commentStartLine) {
            const currentCommentEnd = commentEndLine[commentStartLine];
            return commentEndLine[currentCommentEnd + 1] ? getLastCommentLineOfBlock(currentCommentEnd + 1) : currentCommentEnd;
          }
          function hasBlankLineAfterComment(token, commentStartLine) {
            return token.loc.start.line > getLastCommentLineOfBlock(commentStartLine) + 1;
          }
          function checkForBlankLine(node) {
            const lastToken = getLastToken(node), nextToken = lastToken === sourceCode.getLastToken(node) ? sourceCode.getTokenAfter(node) : sourceCode.getLastToken(node), nextLineNum = lastToken.loc.end.line + 1;
            if (!nextToken) {
              return;
            }
            if (isForTypeSpecifier(node.parent.type)) {
              return;
            }
            if (isExportSpecifier(node.parent.type)) {
              return;
            }
            if (nextToken.type === "Keyword" && isVar(nextToken.value)) {
              return;
            }
            if (isLastNode(node)) {
              return;
            }
            const noNextLineToken = nextToken.loc.start.line > nextLineNum;
            const hasNextLineComment = typeof commentEndLine[nextLineNum] !== "undefined";
            if (mode === "never" && noNextLineToken && !hasNextLineComment) {
              context.report({
                node,
                messageId: "unexpected",
                data: { identifier: node.name },
                fix(fixer) {
                  const linesBetween = sourceCode.getText().slice(lastToken.range[1], nextToken.range[0]).split(astUtils$N.LINEBREAK_MATCHER);
                  return fixer.replaceTextRange([
                    lastToken.range[1],
                    nextToken.range[0]
                  ], `${ linesBetween.slice(0, -1).join("") }\n${ linesBetween[linesBetween.length - 1] }`);
                }
              });
            }
            if (mode === "always" && (!noNextLineToken || hasNextLineComment && !hasBlankLineAfterComment(nextToken, nextLineNum))) {
              context.report({
                node,
                messageId: "expected",
                data: { identifier: node.name },
                fix(fixer) {
                  if ((noNextLineToken ? getLastCommentLineOfBlock(nextLineNum) : lastToken.loc.end.line) === nextToken.loc.start.line) {
                    return fixer.insertTextBefore(nextToken, "\n\n");
                  }
                  return fixer.insertTextBeforeRange([
                    nextToken.range[0] - nextToken.loc.start.column,
                    nextToken.range[1]
                  ], "\n");
                }
              });
            }
          }
          return { VariableDeclaration: checkForBlankLine };
        }
      };
      var _newlineAfterVar = exports$1C;
      var exports$1B = {};
      exports$1B = {
        meta: {
          type: "layout",
          docs: {
            description: "require an empty line before `return` statements",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/newline-before-return"
          },
          fixable: "whitespace",
          schema: [],
          messages: { expected: "Expected newline before return statement." },
          deprecated: true,
          replacedBy: ["padding-line-between-statements"]
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function isPrecededByTokens(node, testTokens) {
            const tokenBefore = sourceCode.getTokenBefore(node);
            return testTokens.some(token => tokenBefore.value === token);
          }
          function isFirstNode(node) {
            const parentType = node.parent.type;
            if (node.parent.body) {
              return Array.isArray(node.parent.body) ? node.parent.body[0] === node : node.parent.body === node;
            }
            if (parentType === "IfStatement") {
              return isPrecededByTokens(node, [
                "else",
                ")"
              ]);
            }
            if (parentType === "DoWhileStatement") {
              return isPrecededByTokens(node, ["do"]);
            }
            if (parentType === "SwitchCase") {
              return isPrecededByTokens(node, [":"]);
            }
            return isPrecededByTokens(node, [")"]);
          }
          function calcCommentLines(node, lineNumTokenBefore) {
            const comments = sourceCode.getCommentsBefore(node);
            let numLinesComments = 0;
            if (!comments.length) {
              return numLinesComments;
            }
            comments.forEach(comment => {
              numLinesComments++;
              if (comment.type === "Block") {
                numLinesComments += comment.loc.end.line - comment.loc.start.line;
              }
              if (comment.loc.start.line === lineNumTokenBefore) {
                numLinesComments--;
              }
              if (comment.loc.end.line === node.loc.start.line) {
                numLinesComments--;
              }
            });
            return numLinesComments;
          }
          function getLineNumberOfTokenBefore(node) {
            const tokenBefore = sourceCode.getTokenBefore(node);
            let lineNumTokenBefore;
            if (tokenBefore) {
              lineNumTokenBefore = tokenBefore.loc.end.line;
            } else {
              lineNumTokenBefore = 0;
            }
            return lineNumTokenBefore;
          }
          function hasNewlineBefore(node) {
            const lineNumNode = node.loc.start.line;
            const lineNumTokenBefore = getLineNumberOfTokenBefore(node);
            const commentLines = calcCommentLines(node, lineNumTokenBefore);
            return lineNumNode - lineNumTokenBefore - commentLines > 1;
          }
          function canFix(node) {
            const leadingComments = sourceCode.getCommentsBefore(node);
            const lastLeadingComment = leadingComments[leadingComments.length - 1];
            const tokenBefore = sourceCode.getTokenBefore(node);
            if (leadingComments.length === 0) {
              return true;
            }
            if (lastLeadingComment.loc.end.line === tokenBefore.loc.end.line && lastLeadingComment.loc.end.line !== node.loc.start.line) {
              return true;
            }
            return false;
          }
          return {
            ReturnStatement(node) {
              if (!isFirstNode(node) && !hasNewlineBefore(node)) {
                context.report({
                  node,
                  messageId: "expected",
                  fix(fixer) {
                    if (canFix(node)) {
                      const tokenBefore = sourceCode.getTokenBefore(node);
                      const newlines = node.loc.start.line === tokenBefore.loc.end.line ? "\n\n" : "\n";
                      return fixer.insertTextBefore(node, newlines);
                    }
                    return null;
                  }
                });
              }
            }
          };
        }
      };
      var _newlineBeforeReturn = exports$1B;
      var exports$1A = {};
      const astUtils$M = _astUtils;
      exports$1A = {
        meta: {
          type: "layout",
          docs: {
            description: "require a newline after each call in a method chain",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/newline-per-chained-call"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                ignoreChainWithDepth: {
                  type: "integer",
                  minimum: 1,
                  maximum: 10,
                  default: 2
                }
              },
              additionalProperties: false
            }],
          messages: { expected: "Expected line break before `{{callee}}`." }
        },
        create(context) {
          const options = context.options[0] || {}, ignoreChainWithDepth = options.ignoreChainWithDepth || 2;
          const sourceCode = context.getSourceCode();
          function getPrefix(node) {
            if (node.computed) {
              if (node.optional) {
                return "?.[";
              }
              return "[";
            }
            if (node.optional) {
              return "?.";
            }
            return ".";
          }
          function getPropertyText(node) {
            const prefix = getPrefix(node);
            const lines = sourceCode.getText(node.property).split(astUtils$M.LINEBREAK_MATCHER);
            const suffix = node.computed && lines.length === 1 ? "]" : "";
            return prefix + lines[0] + suffix;
          }
          return {
            "CallExpression:exit"(node) {
              const callee = astUtils$M.skipChainExpression(node.callee);
              if (callee.type !== "MemberExpression") {
                return;
              }
              let parent = astUtils$M.skipChainExpression(callee.object);
              let depth = 1;
              while (parent && parent.callee) {
                depth += 1;
                parent = astUtils$M.skipChainExpression(astUtils$M.skipChainExpression(parent.callee).object);
              }
              if (depth > ignoreChainWithDepth && astUtils$M.isTokenOnSameLine(callee.object, callee.property)) {
                const firstTokenAfterObject = sourceCode.getTokenAfter(callee.object, astUtils$M.isNotClosingParenToken);
                context.report({
                  node: callee.property,
                  loc: {
                    start: firstTokenAfterObject.loc.start,
                    end: callee.loc.end
                  },
                  messageId: "expected",
                  data: { callee: getPropertyText(callee) },
                  fix(fixer) {
                    return fixer.insertTextBefore(firstTokenAfterObject, "\n");
                  }
                });
              }
            }
          };
        }
      };
      var _newlinePerChainedCall = exports$1A;
      var exports$1z = {};
      exports$1z = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow using an async function as a Promise executor",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-async-promise-executor"
          },
          fixable: null,
          schema: [],
          messages: { async: "Promise executor functions should not be async." }
        },
        create(context) {
          return {
            "NewExpression[callee.name='Promise'][arguments.0.async=true]"(node) {
              context.report({
                node: context.getSourceCode().getFirstToken(node.arguments[0], token => token.value === "async"),
                messageId: "async"
              });
            }
          };
        }
      };
      var _noAsyncPromiseExecutor = exports$1z;
      var exports$1y = {};
      function isBoundary(node) {
        const t = node.type;
        return t === "FunctionDeclaration" || t === "FunctionExpression" || t === "ArrowFunctionExpression" || t === "ForOfStatement" && node.await === true;
      }
      function isLooped(node, parent) {
        switch (parent.type) {
        case "ForStatement":
          return node === parent.test || node === parent.update || node === parent.body;
        case "ForOfStatement":
        case "ForInStatement":
          return node === parent.body;
        case "WhileStatement":
        case "DoWhileStatement":
          return node === parent.test || node === parent.body;
        default:
          return false;
        }
      }
      exports$1y = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow `await` inside of loops",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-await-in-loop"
          },
          schema: [],
          messages: { unexpectedAwait: "Unexpected `await` inside a loop." }
        },
        create(context) {
          function validate(awaitNode) {
            if (awaitNode.type === "ForOfStatement" && !awaitNode.await) {
              return;
            }
            let node = awaitNode;
            let parent = node.parent;
            while (parent && !isBoundary(parent)) {
              if (isLooped(node, parent)) {
                context.report({
                  node: awaitNode,
                  messageId: "unexpectedAwait"
                });
                return;
              }
              node = parent;
              parent = parent.parent;
            }
          }
          return {
            AwaitExpression: validate,
            ForOfStatement: validate
          };
        }
      };
      var _noAwaitInLoop = exports$1y;
      var exports$1x = {};
      exports$1x = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow lexical declarations in case clauses",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-case-declarations"
          },
          schema: [],
          messages: { unexpected: "Unexpected lexical declaration in case block." }
        },
        create(context) {
          function isLexicalDeclaration(node) {
            switch (node.type) {
            case "FunctionDeclaration":
            case "ClassDeclaration":
              return true;
            case "VariableDeclaration":
              return node.kind !== "var";
            default:
              return false;
            }
          }
          return {
            SwitchCase(node) {
              for (let i = 0; i < node.consequent.length; i++) {
                const statement = node.consequent[i];
                if (isLexicalDeclaration(statement)) {
                  context.report({
                    node: statement,
                    messageId: "unexpected"
                  });
                }
              }
            }
          };
        }
      };
      var _noCaseDeclarations = exports$1x;
      var exports$1w = {};
      exports$1w = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow comparing against -0",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-compare-neg-zero"
          },
          fixable: null,
          schema: [],
          messages: { unexpected: "Do not use the '{{operator}}' operator to compare against -0." }
        },
        create(context) {
          function isNegZero(node) {
            return node.type === "UnaryExpression" && node.operator === "-" && node.argument.type === "Literal" && node.argument.value === 0;
          }
          const OPERATORS_TO_CHECK = new Set([
            ">",
            ">=",
            "<",
            "<=",
            "==",
            "===",
            "!=",
            "!=="
          ]);
          return {
            BinaryExpression(node) {
              if (OPERATORS_TO_CHECK.has(node.operator)) {
                if (isNegZero(node.left) || isNegZero(node.right)) {
                  context.report({
                    node,
                    messageId: "unexpected",
                    data: { operator: node.operator }
                  });
                }
              }
            }
          };
        }
      };
      var _noCompareNegZero = exports$1w;
      var exports$1v = {};
      const astUtils$L = _astUtils;
      const TEST_CONDITION_PARENT_TYPES = new Set([
        "IfStatement",
        "WhileStatement",
        "DoWhileStatement",
        "ForStatement",
        "ConditionalExpression"
      ]);
      const NODE_DESCRIPTIONS = {
        DoWhileStatement: "a 'do...while' statement",
        ForStatement: "a 'for' statement",
        IfStatement: "an 'if' statement",
        WhileStatement: "a 'while' statement"
      };
      exports$1v = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow assignment operators in conditional expressions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-cond-assign"
          },
          schema: [{
              enum: [
                "except-parens",
                "always"
              ]
            }],
          messages: {
            unexpected: "Unexpected assignment within {{type}}.",
            missing: "Expected a conditional expression and instead saw an assignment."
          }
        },
        create(context) {
          const prohibitAssign = context.options[0] || "except-parens";
          const sourceCode = context.getSourceCode();
          function isConditionalTestExpression(node) {
            return node.parent && TEST_CONDITION_PARENT_TYPES.has(node.parent.type) && node === node.parent.test;
          }
          function findConditionalAncestor(node) {
            let currentAncestor = node;
            do {
              if (isConditionalTestExpression(currentAncestor)) {
                return currentAncestor.parent;
              }
            } while ((currentAncestor = currentAncestor.parent) && !astUtils$L.isFunction(currentAncestor));
            return null;
          }
          function isParenthesisedTwice(node) {
            const previousToken = sourceCode.getTokenBefore(node, 1), nextToken = sourceCode.getTokenAfter(node, 1);
            return astUtils$L.isParenthesised(sourceCode, node) && previousToken && astUtils$L.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] && astUtils$L.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];
          }
          function testForAssign(node) {
            if (node.test && node.test.type === "AssignmentExpression" && (node.type === "ForStatement" ? !astUtils$L.isParenthesised(sourceCode, node.test) : !isParenthesisedTwice(node.test))) {
              context.report({
                node: node.test,
                messageId: "missing"
              });
            }
          }
          function testForConditionalAncestor(node) {
            const ancestor = findConditionalAncestor(node);
            if (ancestor) {
              context.report({
                node,
                messageId: "unexpected",
                data: { type: NODE_DESCRIPTIONS[ancestor.type] || ancestor.type }
              });
            }
          }
          if (prohibitAssign === "always") {
            return { AssignmentExpression: testForConditionalAncestor };
          }
          return {
            DoWhileStatement: testForAssign,
            ForStatement: testForAssign,
            IfStatement: testForAssign,
            WhileStatement: testForAssign,
            ConditionalExpression: testForAssign
          };
        }
      };
      var _noCondAssign = exports$1v;
      var exports$1u = {};
      const astUtils$K = _astUtils;
      function isConditional(node) {
        return node && node.type === "ConditionalExpression";
      }
      exports$1u = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow arrow functions where they could be confused with comparisons",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-confusing-arrow"
          },
          fixable: "code",
          schema: [{
              type: "object",
              properties: {
                allowParens: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { confusing: "Arrow function used ambiguously with a conditional expression." }
        },
        create(context) {
          const config = context.options[0] || {};
          const allowParens = config.allowParens || config.allowParens === void 0;
          const sourceCode = context.getSourceCode();
          function checkArrowFunc(node) {
            const body = node.body;
            if (isConditional(body) && !(allowParens && astUtils$K.isParenthesised(sourceCode, body))) {
              context.report({
                node,
                messageId: "confusing",
                fix(fixer) {
                  return allowParens && fixer.replaceText(node.body, `(${ sourceCode.getText(node.body) })`);
                }
              });
            }
          }
          return { ArrowFunctionExpression: checkArrowFunc };
        }
      };
      var _noConfusingArrow = exports$1u;
      var exports$1t = {};
      const astUtils$J = _astUtils;
      exports$1t = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow reassigning `const` variables",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-const-assign"
          },
          schema: [],
          messages: { const: "'{{name}}' is constant." }
        },
        create(context) {
          function checkVariable(variable) {
            astUtils$J.getModifyingReferences(variable.references).forEach(reference => {
              context.report({
                node: reference.identifier,
                messageId: "const",
                data: { name: reference.identifier.name }
              });
            });
          }
          return {
            VariableDeclaration(node) {
              if (node.kind === "const") {
                context.getDeclaredVariables(node).forEach(checkVariable);
              }
            }
          };
        }
      };
      var _noConstAssign = exports$1t;
      var exports$1s = {};
      exports$1s = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow constant expressions in conditions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-constant-condition"
          },
          schema: [{
              type: "object",
              properties: {
                checkLoops: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpected: "Unexpected constant condition." }
        },
        create(context) {
          const options = context.options[0] || {}, checkLoops = options.checkLoops !== false, loopSetStack = [];
          let loopsInCurrentScope = new Set();
          function getBooleanValue(node) {
            if (node.value === null) {
              if (node.raw === "null") {
                return false;
              }
              if (typeof node.regex === "object") {
                return true;
              }
              return null;
            }
            return !!node.value;
          }
          function isLogicalIdentity(node, operator) {
            switch (node.type) {
            case "Literal":
              return operator === "||" && getBooleanValue(node) === true || operator === "&&" && getBooleanValue(node) === false;
            case "UnaryExpression":
              return operator === "&&" && node.operator === "void";
            case "LogicalExpression":
              return operator === node.operator && (isLogicalIdentity(node.left, operator) || isLogicalIdentity(node.right, operator));
            case "AssignmentExpression":
              return [
                "||=",
                "&&="
              ].includes(node.operator) && operator === node.operator.slice(0, -1) && isLogicalIdentity(node.right, operator);
            }
            return false;
          }
          function isConstant(node, inBooleanPosition) {
            if (!node) {
              return true;
            }
            switch (node.type) {
            case "Literal":
            case "ArrowFunctionExpression":
            case "FunctionExpression":
            case "ObjectExpression":
              return true;
            case "TemplateLiteral":
              return inBooleanPosition && node.quasis.some(quasi => quasi.value.cooked.length) || node.expressions.every(exp => isConstant(exp, inBooleanPosition));
            case "ArrayExpression": {
                if (node.parent.type === "BinaryExpression" && node.parent.operator === "+") {
                  return node.elements.every(element => isConstant(element, false));
                }
                return true;
              }
            case "UnaryExpression":
              if (node.operator === "void" || node.operator === "typeof" && inBooleanPosition) {
                return true;
              }
              if (node.operator === "!") {
                return isConstant(node.argument, true);
              }
              return isConstant(node.argument, false);
            case "BinaryExpression":
              return isConstant(node.left, false) && isConstant(node.right, false) && node.operator !== "in";
            case "LogicalExpression": {
                const isLeftConstant = isConstant(node.left, inBooleanPosition);
                const isRightConstant = isConstant(node.right, inBooleanPosition);
                const isLeftShortCircuit = isLeftConstant && isLogicalIdentity(node.left, node.operator);
                const isRightShortCircuit = inBooleanPosition && isRightConstant && isLogicalIdentity(node.right, node.operator);
                return isLeftConstant && isRightConstant || isLeftShortCircuit || isRightShortCircuit;
              }
            case "AssignmentExpression":
              if (node.operator === "=") {
                return isConstant(node.right, inBooleanPosition);
              }
              if ([
                  "||=",
                  "&&="
                ].includes(node.operator) && inBooleanPosition) {
                return isLogicalIdentity(node.right, node.operator.slice(0, -1));
              }
              return false;
            case "SequenceExpression":
              return isConstant(node.expressions[node.expressions.length - 1], inBooleanPosition);
            }
            return false;
          }
          function trackConstantConditionLoop(node) {
            if (node.test && isConstant(node.test, true)) {
              loopsInCurrentScope.add(node);
            }
          }
          function checkConstantConditionLoopInSet(node) {
            if (loopsInCurrentScope.has(node)) {
              loopsInCurrentScope.delete(node);
              context.report({
                node: node.test,
                messageId: "unexpected"
              });
            }
          }
          function reportIfConstant(node) {
            if (node.test && isConstant(node.test, true)) {
              context.report({
                node: node.test,
                messageId: "unexpected"
              });
            }
          }
          function enterFunction() {
            loopSetStack.push(loopsInCurrentScope);
            loopsInCurrentScope = new Set();
          }
          function exitFunction() {
            loopsInCurrentScope = loopSetStack.pop();
          }
          function checkLoop(node) {
            if (checkLoops) {
              trackConstantConditionLoop(node);
            }
          }
          return {
            ConditionalExpression: reportIfConstant,
            IfStatement: reportIfConstant,
            WhileStatement: checkLoop,
            "WhileStatement:exit": checkConstantConditionLoopInSet,
            DoWhileStatement: checkLoop,
            "DoWhileStatement:exit": checkConstantConditionLoopInSet,
            ForStatement: checkLoop,
            "ForStatement > .test": node => checkLoop(node.parent),
            "ForStatement:exit": checkConstantConditionLoopInSet,
            FunctionDeclaration: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            FunctionExpression: enterFunction,
            "FunctionExpression:exit": exitFunction,
            YieldExpression: () => loopsInCurrentScope.clear()
          };
        }
      };
      var _noConstantCondition = exports$1s;
      var exports$1r = {};
      exports$1r = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow returning value from constructor",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-constructor-return"
          },
          schema: {},
          fixable: null,
          messages: { unexpected: "Unexpected return statement in constructor." }
        },
        create(context) {
          const stack = [];
          return {
            onCodePathStart(_, node) {
              stack.push(node);
            },
            onCodePathEnd() {
              stack.pop();
            },
            ReturnStatement(node) {
              const last = stack[stack.length - 1];
              if (!last.parent) {
                return;
              }
              if (last.parent.type === "MethodDefinition" && last.parent.kind === "constructor" && (node.parent.parent === last || node.argument)) {
                context.report({
                  node,
                  messageId: "unexpected"
                });
              }
            }
          };
        }
      };
      var _noConstructorReturn = exports$1r;
      var exports$1q = {};
      exports$1q = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow division operators explicitly at the beginning of regular expressions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-div-regex"
          },
          fixable: "code",
          schema: [],
          messages: { unexpected: "A regular expression literal can be confused with '/='." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            Literal(node) {
              const token = sourceCode.getFirstToken(node);
              if (token.type === "RegularExpression" && token.value[1] === "=") {
                context.report({
                  node,
                  messageId: "unexpected",
                  fix(fixer) {
                    return fixer.replaceTextRange([
                      token.range[0] + 1,
                      token.range[0] + 2
                    ], "[=]");
                  }
                });
              }
            }
          };
        }
      };
      var _noDivRegex = exports$1q;
      var exports$1p = {};
      exports$1p = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow duplicate arguments in `function` definitions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-dupe-args"
          },
          schema: [],
          messages: { unexpected: "Duplicate param '{{name}}'." }
        },
        create(context) {
          function isParameter(def) {
            return def.type === "Parameter";
          }
          function checkParams(node) {
            const variables = context.getDeclaredVariables(node);
            for (let i = 0; i < variables.length; ++i) {
              const variable = variables[i];
              const defs = variable.defs.filter(isParameter);
              if (defs.length >= 2) {
                context.report({
                  node,
                  messageId: "unexpected",
                  data: { name: variable.name }
                });
              }
            }
          }
          return {
            FunctionDeclaration: checkParams,
            FunctionExpression: checkParams
          };
        }
      };
      var _noDupeArgs = exports$1p;
      var exports$1o = {};
      const astUtils$I = _astUtils;
      function isSubsetByComparator(comparator, arrA, arrB) {
        return arrA.every(a => arrB.some(b => comparator(a, b)));
      }
      function splitByLogicalOperator(operator, node) {
        if (node.type === "LogicalExpression" && node.operator === operator) {
          return [
            ...splitByLogicalOperator(operator, node.left),
            ...splitByLogicalOperator(operator, node.right)
          ];
        }
        return [node];
      }
      const splitByOr = splitByLogicalOperator.bind(null, "||");
      const splitByAnd = splitByLogicalOperator.bind(null, "&&");
      exports$1o = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow duplicate conditions in if-else-if chains",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-dupe-else-if"
          },
          schema: [],
          messages: { unexpected: "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function equal(a, b) {
            if (a.type !== b.type) {
              return false;
            }
            if (a.type === "LogicalExpression" && (a.operator === "||" || a.operator === "&&") && a.operator === b.operator) {
              return equal(a.left, b.left) && equal(a.right, b.right) || equal(a.left, b.right) && equal(a.right, b.left);
            }
            return astUtils$I.equalTokens(a, b, sourceCode);
          }
          const isSubset = isSubsetByComparator.bind(null, equal);
          return {
            IfStatement(node) {
              const test = node.test, conditionsToCheck = test.type === "LogicalExpression" && test.operator === "&&" ? [
                  test,
                  ...splitByAnd(test)
                ] : [test];
              let current = node, listToCheck = conditionsToCheck.map(c => splitByOr(c).map(splitByAnd));
              while (current.parent && current.parent.type === "IfStatement" && current.parent.alternate === current) {
                current = current.parent;
                const currentOrOperands = splitByOr(current.test).map(splitByAnd);
                listToCheck = listToCheck.map(orOperands => orOperands.filter(orOperand => !currentOrOperands.some(currentOrOperand => isSubset(currentOrOperand, orOperand))));
                if (listToCheck.some(orOperands => orOperands.length === 0)) {
                  context.report({
                    node: test,
                    messageId: "unexpected"
                  });
                  break;
                }
              }
            }
          };
        }
      };
      var _noDupeElseIf = exports$1o;
      var exports$1n = {};
      const astUtils$H = _astUtils;
      const FixTracker$1 = _fixTracker;
      exports$1n = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `else` blocks after `return` statements in `if` statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-else-return"
          },
          schema: [{
              type: "object",
              properties: {
                allowElseIf: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: { unexpected: "Unnecessary 'else' after 'return'." }
        },
        create(context) {
          function isSafeToDeclare(names, scope) {
            if (names.length === 0) {
              return true;
            }
            const functionScope = scope.variableScope;
            const declaredVariables = scope.variables.filter(({defs}) => defs.length > 0);
            if (declaredVariables.some(({name}) => names.includes(name))) {
              return false;
            }
            if (scope !== functionScope && scope.upper.type === "catch") {
              if (scope.upper.variables.some(({name}) => names.includes(name))) {
                return false;
              }
            }
            const usedImplicitVariables = scope.variables.filter(({defs, references}) => defs.length === 0 && references.length > 0);
            if (usedImplicitVariables.some(({name}) => names.includes(name))) {
              return false;
            }
            if (scope.through.some(t => names.includes(t.identifier.name))) {
              return false;
            }
            if (scope !== functionScope) {
              const scopeNodeRange = scope.block.range;
              const variablesToCheck = functionScope.variables.filter(({name}) => names.includes(name));
              if (variablesToCheck.some(v => v.defs.some(({
                  node: {range}
                }) => scopeNodeRange[0] <= range[0] && range[1] <= scopeNodeRange[1]))) {
                return false;
              }
            }
            return true;
          }
          function isSafeFromNameCollisions(node, scope) {
            if (node.type === "FunctionDeclaration") {
              return false;
            }
            if (node.type !== "BlockStatement") {
              return true;
            }
            const elseBlockScope = scope.childScopes.find(({block}) => block === node);
            if (!elseBlockScope) {
              return true;
            }
            const namesToCheck = elseBlockScope.variables.map(({name}) => name);
            return isSafeToDeclare(namesToCheck, scope);
          }
          function displayReport(node) {
            const currentScope = context.getScope();
            context.report({
              node,
              messageId: "unexpected",
              fix: fixer => {
                if (!isSafeFromNameCollisions(node, currentScope)) {
                  return null;
                }
                const sourceCode = context.getSourceCode();
                const startToken = sourceCode.getFirstToken(node);
                const elseToken = sourceCode.getTokenBefore(startToken);
                const source = sourceCode.getText(node);
                const lastIfToken = sourceCode.getTokenBefore(elseToken);
                let fixedSource, firstTokenOfElseBlock;
                if (startToken.type === "Punctuator" && startToken.value === "{") {
                  firstTokenOfElseBlock = sourceCode.getTokenAfter(startToken);
                } else {
                  firstTokenOfElseBlock = startToken;
                }
                const ifBlockMaybeUnsafe = node.parent.consequent.type !== "BlockStatement" && lastIfToken.value !== ";";
                const elseBlockUnsafe = /^[([/+`-]/u.test(firstTokenOfElseBlock.value);
                if (ifBlockMaybeUnsafe && elseBlockUnsafe) {
                  return null;
                }
                const endToken = sourceCode.getLastToken(node);
                const lastTokenOfElseBlock = sourceCode.getTokenBefore(endToken);
                if (lastTokenOfElseBlock.value !== ";") {
                  const nextToken = sourceCode.getTokenAfter(endToken);
                  const nextTokenUnsafe = nextToken && /^[([/+`-]/u.test(nextToken.value);
                  const nextTokenOnSameLine = nextToken && nextToken.loc.start.line === lastTokenOfElseBlock.loc.start.line;
                  if (nextTokenUnsafe || nextTokenOnSameLine && nextToken.value !== "}") {
                    return null;
                  }
                }
                if (startToken.type === "Punctuator" && startToken.value === "{") {
                  fixedSource = source.slice(1, -1);
                } else {
                  fixedSource = source;
                }
                return new FixTracker$1(fixer, sourceCode).retainEnclosingFunction(node).replaceTextRange([
                  elseToken.range[0],
                  node.range[1]
                ], fixedSource);
              }
            });
          }
          function checkForReturn(node) {
            return node.type === "ReturnStatement";
          }
          function naiveHasReturn(node) {
            if (node.type === "BlockStatement") {
              const body = node.body, lastChildNode = body[body.length - 1];
              return lastChildNode && checkForReturn(lastChildNode);
            }
            return checkForReturn(node);
          }
          function hasElse(node) {
            return node.alternate && node.consequent;
          }
          function checkForIf(node) {
            return node.type === "IfStatement" && hasElse(node) && naiveHasReturn(node.alternate) && naiveHasReturn(node.consequent);
          }
          function checkForReturnOrIf(node) {
            return checkForReturn(node) || checkForIf(node);
          }
          function alwaysReturns(node) {
            if (node.type === "BlockStatement") {
              return node.body.some(checkForReturnOrIf);
            }
            return checkForReturnOrIf(node);
          }
          function checkIfWithoutElse(node) {
            const parent = node.parent;
            if (!astUtils$H.STATEMENT_LIST_PARENTS.has(parent.type)) {
              return;
            }
            const consequents = [];
            let alternate;
            for (let currentNode = node; currentNode.type === "IfStatement"; currentNode = currentNode.alternate) {
              if (!currentNode.alternate) {
                return;
              }
              consequents.push(currentNode.consequent);
              alternate = currentNode.alternate;
            }
            if (consequents.every(alwaysReturns)) {
              displayReport(alternate);
            }
          }
          function checkIfWithElse(node) {
            const parent = node.parent;
            if (!astUtils$H.STATEMENT_LIST_PARENTS.has(parent.type)) {
              return;
            }
            const alternate = node.alternate;
            if (alternate && alwaysReturns(node.consequent)) {
              displayReport(alternate);
            }
          }
          const allowElseIf = !(context.options[0] && context.options[0].allowElseIf === false);
          return { "IfStatement:exit": allowElseIf ? checkIfWithoutElse : checkIfWithElse };
        }
      };
      var _noElseReturn = exports$1n;
      var exports$1m = {};
      const regex = /^\/([^\\[]|\\.|\[([^\\\]]|\\.)+\])*\/[gimuys]*$/u;
      exports$1m = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow empty character classes in regular expressions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-empty-character-class"
          },
          schema: [],
          messages: { unexpected: "Empty class." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            Literal(node) {
              const token = sourceCode.getFirstToken(node);
              if (token.type === "RegularExpression" && !regex.test(token.value)) {
                context.report({
                  node,
                  messageId: "unexpected"
                });
              }
            }
          };
        }
      };
      var _noEmptyCharacterClass = exports$1m;
      var exports$1l = {};
      exports$1l = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `null` comparisons without type-checking operators",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-eq-null"
          },
          schema: [],
          messages: { unexpected: "Use '===' to compare with null." }
        },
        create(context) {
          return {
            BinaryExpression(node) {
              const badOperator = node.operator === "==" || node.operator === "!=";
              if (node.right.type === "Literal" && node.right.raw === "null" && badOperator || node.left.type === "Literal" && node.left.raw === "null" && badOperator) {
                context.report({
                  node,
                  messageId: "unexpected"
                });
              }
            }
          };
        }
      };
      var _noEqNull = exports$1l;
      var exports$1k = {};
      const astUtils$G = _astUtils;
      const SIDE_EFFECT_FREE_NODE_TYPES = new Set([
        "Literal",
        "Identifier",
        "ThisExpression",
        "FunctionExpression"
      ]);
      exports$1k = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary calls to `.bind()`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-extra-bind"
          },
          schema: [],
          fixable: "code",
          messages: { unexpected: "The function binding is unnecessary." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let scopeInfo = null;
          function isSideEffectFree(node) {
            return SIDE_EFFECT_FREE_NODE_TYPES.has(node.type);
          }
          function report(node) {
            const memberNode = node.parent;
            const callNode = memberNode.parent.type === "ChainExpression" ? memberNode.parent.parent : memberNode.parent;
            context.report({
              node: callNode,
              messageId: "unexpected",
              loc: memberNode.property.loc,
              fix(fixer) {
                if (!isSideEffectFree(callNode.arguments[0])) {
                  return null;
                }
                const tokenPairs = [
                  [
                    sourceCode.getTokenAfter(memberNode.object, astUtils$G.isNotClosingParenToken),
                    sourceCode.getLastToken(memberNode)
                  ],
                  [
                    sourceCode.getTokenAfter(memberNode, astUtils$G.isNotClosingParenToken),
                    sourceCode.getLastToken(callNode)
                  ]
                ];
                const firstTokenToRemove = tokenPairs[0][0];
                const lastTokenToRemove = tokenPairs[1][1];
                if (sourceCode.commentsExistBetween(firstTokenToRemove, lastTokenToRemove)) {
                  return null;
                }
                return tokenPairs.map(([start, end]) => fixer.removeRange([
                  start.range[0],
                  end.range[1]
                ]));
              }
            });
          }
          function isCalleeOfBindMethod(node) {
            if (!astUtils$G.isSpecificMemberAccess(node.parent, null, "bind")) {
              return false;
            }
            const bindNode = node.parent.parent.type === "ChainExpression" ? node.parent.parent : node.parent;
            return bindNode.parent.type === "CallExpression" && bindNode.parent.callee === bindNode && bindNode.parent.arguments.length === 1 && bindNode.parent.arguments[0].type !== "SpreadElement";
          }
          function enterFunction(node) {
            scopeInfo = {
              isBound: isCalleeOfBindMethod(node),
              thisFound: false,
              upper: scopeInfo
            };
          }
          function exitFunction(node) {
            if (scopeInfo.isBound && !scopeInfo.thisFound) {
              report(node);
            }
            scopeInfo = scopeInfo.upper;
          }
          function exitArrowFunction(node) {
            if (isCalleeOfBindMethod(node)) {
              report(node);
            }
          }
          function markAsThisFound() {
            if (scopeInfo) {
              scopeInfo.thisFound = true;
            }
          }
          return {
            "ArrowFunctionExpression:exit": exitArrowFunction,
            FunctionDeclaration: enterFunction,
            "FunctionDeclaration:exit": exitFunction,
            FunctionExpression: enterFunction,
            "FunctionExpression:exit": exitFunction,
            ThisExpression: markAsThisFound
          };
        }
      };
      var _noExtraBind = exports$1k;
      var _eslintUtils$9 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$1j = {};
      const astUtils$F = _astUtils;
      const eslintUtils$1 = _eslintUtils$9;
      const precedence = astUtils$F.getPrecedence;
      exports$1j = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary boolean casts",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-extra-boolean-cast"
          },
          schema: [{
              type: "object",
              properties: {
                enforceForLogicalOperands: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: {
            unexpectedCall: "Redundant Boolean call.",
            unexpectedNegation: "Redundant double negation."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const BOOLEAN_NODE_TYPES = [
            "IfStatement",
            "DoWhileStatement",
            "WhileStatement",
            "ConditionalExpression",
            "ForStatement"
          ];
          function isBooleanFunctionOrConstructorCall(node) {
            return (node.type === "CallExpression" || node.type === "NewExpression") && node.callee.type === "Identifier" && node.callee.name === "Boolean";
          }
          function isLogicalContext(node) {
            return node.type === "LogicalExpression" && (node.operator === "||" || node.operator === "&&") && context.options.length && context.options[0].enforceForLogicalOperands === true;
          }
          function isInBooleanContext(node) {
            return isBooleanFunctionOrConstructorCall(node.parent) && node === node.parent.arguments[0] || BOOLEAN_NODE_TYPES.indexOf(node.parent.type) !== -1 && node === node.parent.test || node.parent.type === "UnaryExpression" && node.parent.operator === "!";
          }
          function isInFlaggedContext(node) {
            if (node.parent.type === "ChainExpression") {
              return isInFlaggedContext(node.parent);
            }
            return isInBooleanContext(node) || isLogicalContext(node.parent) && isInFlaggedContext(node.parent);
          }
          function hasCommentsInside(node) {
            return Boolean(sourceCode.getCommentsInside(node).length);
          }
          function isParenthesized(node) {
            return eslintUtils$1.isParenthesized(1, node, sourceCode);
          }
          function needsParens(previousNode, node) {
            if (previousNode.parent.type === "ChainExpression") {
              return needsParens(previousNode.parent, node);
            }
            if (isParenthesized(previousNode)) {
              return false;
            }
            const parent = previousNode.parent;
            switch (parent.type) {
            case "CallExpression":
            case "NewExpression":
              return node.type === "SequenceExpression";
            case "IfStatement":
            case "DoWhileStatement":
            case "WhileStatement":
            case "ForStatement":
              return false;
            case "ConditionalExpression":
              return precedence(node) <= precedence(parent);
            case "UnaryExpression":
              return precedence(node) < precedence(parent);
            case "LogicalExpression":
              if (astUtils$F.isMixedLogicalAndCoalesceExpressions(node, parent)) {
                return true;
              }
              if (previousNode === parent.left) {
                return precedence(node) < precedence(parent);
              }
              return precedence(node) <= precedence(parent);
            default:
              throw new Error(`Unexpected parent type: ${ parent.type }`);
            }
          }
          return {
            UnaryExpression(node) {
              const parent = node.parent;
              if (node.operator !== "!" || parent.type !== "UnaryExpression" || parent.operator !== "!") {
                return;
              }
              if (isInFlaggedContext(parent)) {
                context.report({
                  node: parent,
                  messageId: "unexpectedNegation",
                  fix(fixer) {
                    if (hasCommentsInside(parent)) {
                      return null;
                    }
                    if (needsParens(parent, node.argument)) {
                      return fixer.replaceText(parent, `(${ sourceCode.getText(node.argument) })`);
                    }
                    let prefix = "";
                    const tokenBefore = sourceCode.getTokenBefore(parent);
                    const firstReplacementToken = sourceCode.getFirstToken(node.argument);
                    if (tokenBefore && tokenBefore.range[1] === parent.range[0] && !astUtils$F.canTokensBeAdjacent(tokenBefore, firstReplacementToken)) {
                      prefix = " ";
                    }
                    return fixer.replaceText(parent, prefix + sourceCode.getText(node.argument));
                  }
                });
              }
            },
            CallExpression(node) {
              if (node.callee.type !== "Identifier" || node.callee.name !== "Boolean") {
                return;
              }
              if (isInFlaggedContext(node)) {
                context.report({
                  node,
                  messageId: "unexpectedCall",
                  fix(fixer) {
                    const parent = node.parent;
                    if (node.arguments.length === 0) {
                      if (parent.type === "UnaryExpression" && parent.operator === "!") {
                        if (hasCommentsInside(parent)) {
                          return null;
                        }
                        const replacement = "true";
                        let prefix = "";
                        const tokenBefore = sourceCode.getTokenBefore(parent);
                        if (tokenBefore && tokenBefore.range[1] === parent.range[0] && !astUtils$F.canTokensBeAdjacent(tokenBefore, replacement)) {
                          prefix = " ";
                        }
                        return fixer.replaceText(parent, prefix + replacement);
                      }
                      if (hasCommentsInside(node)) {
                        return null;
                      }
                      return fixer.replaceText(node, "false");
                    }
                    if (node.arguments.length === 1) {
                      const argument = node.arguments[0];
                      if (argument.type === "SpreadElement" || hasCommentsInside(node)) {
                        return null;
                      }
                      if (needsParens(node, argument)) {
                        return fixer.replaceText(node, `(${ sourceCode.getText(argument) })`);
                      }
                      return fixer.replaceText(node, sourceCode.getText(argument));
                    }
                    return null;
                  }
                });
              }
            }
          };
        }
      };
      var _noExtraBooleanCast = exports$1j;
      var exports$1i = {};
      const astUtils$E = _astUtils;
      exports$1i = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary labels",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-extra-label"
          },
          schema: [],
          fixable: "code",
          messages: { unexpected: "This label '{{name}}' is unnecessary." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let scopeInfo = null;
          function enterBreakableStatement(node) {
            scopeInfo = {
              label: node.parent.type === "LabeledStatement" ? node.parent.label : null,
              breakable: true,
              upper: scopeInfo
            };
          }
          function exitBreakableStatement() {
            scopeInfo = scopeInfo.upper;
          }
          function enterLabeledStatement(node) {
            if (!astUtils$E.isBreakableStatement(node.body)) {
              scopeInfo = {
                label: node.label,
                breakable: false,
                upper: scopeInfo
              };
            }
          }
          function exitLabeledStatement(node) {
            if (!astUtils$E.isBreakableStatement(node.body)) {
              scopeInfo = scopeInfo.upper;
            }
          }
          function reportIfUnnecessary(node) {
            if (!node.label) {
              return;
            }
            const labelNode = node.label;
            for (let info = scopeInfo; info !== null; info = info.upper) {
              if (info.breakable || info.label && info.label.name === labelNode.name) {
                if (info.breakable && info.label && info.label.name === labelNode.name) {
                  context.report({
                    node: labelNode,
                    messageId: "unexpected",
                    data: labelNode,
                    fix(fixer) {
                      const breakOrContinueToken = sourceCode.getFirstToken(node);
                      if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {
                        return null;
                      }
                      return fixer.removeRange([
                        breakOrContinueToken.range[1],
                        labelNode.range[1]
                      ]);
                    }
                  });
                }
                return;
              }
            }
          }
          return {
            WhileStatement: enterBreakableStatement,
            "WhileStatement:exit": exitBreakableStatement,
            DoWhileStatement: enterBreakableStatement,
            "DoWhileStatement:exit": exitBreakableStatement,
            ForStatement: enterBreakableStatement,
            "ForStatement:exit": exitBreakableStatement,
            ForInStatement: enterBreakableStatement,
            "ForInStatement:exit": exitBreakableStatement,
            ForOfStatement: enterBreakableStatement,
            "ForOfStatement:exit": exitBreakableStatement,
            SwitchStatement: enterBreakableStatement,
            "SwitchStatement:exit": exitBreakableStatement,
            LabeledStatement: enterLabeledStatement,
            "LabeledStatement:exit": exitLabeledStatement,
            BreakStatement: reportIfUnnecessary,
            ContinueStatement: reportIfUnnecessary
          };
        }
      };
      var _noExtraLabel = exports$1i;
      var exports$1h = {};
      const DEFAULT_FALLTHROUGH_COMMENT = /falls?\s?through/iu;
      function hasFallthroughComment(caseWhichFallsThrough, subsequentCase, context, fallthroughCommentPattern) {
        const sourceCode = context.getSourceCode();
        if (caseWhichFallsThrough.consequent.length === 1 && caseWhichFallsThrough.consequent[0].type === "BlockStatement") {
          const trailingCloseBrace = sourceCode.getLastToken(caseWhichFallsThrough.consequent[0]);
          const commentInBlock = sourceCode.getCommentsBefore(trailingCloseBrace).pop();
          if (commentInBlock && fallthroughCommentPattern.test(commentInBlock.value)) {
            return true;
          }
        }
        const comment = sourceCode.getCommentsBefore(subsequentCase).pop();
        return Boolean(comment && fallthroughCommentPattern.test(comment.value));
      }
      function isReachable(segment) {
        return segment.reachable;
      }
      function hasBlankLinesBetween(node, token) {
        return token.loc.start.line > node.loc.end.line + 1;
      }
      exports$1h = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow fallthrough of `case` statements",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-fallthrough"
          },
          schema: [{
              type: "object",
              properties: {
                commentPattern: {
                  type: "string",
                  default: ""
                }
              },
              additionalProperties: false
            }],
          messages: {
            case: "Expected a 'break' statement before 'case'.",
            default: "Expected a 'break' statement before 'default'."
          }
        },
        create(context) {
          const options = context.options[0] || {};
          let currentCodePath = null;
          const sourceCode = context.getSourceCode();
          let fallthroughCase = null;
          let fallthroughCommentPattern = null;
          if (options.commentPattern) {
            fallthroughCommentPattern = new RegExp(options.commentPattern, "u");
          } else {
            fallthroughCommentPattern = DEFAULT_FALLTHROUGH_COMMENT;
          }
          return {
            onCodePathStart(codePath) {
              currentCodePath = codePath;
            },
            onCodePathEnd() {
              currentCodePath = currentCodePath.upper;
            },
            SwitchCase(node) {
              if (fallthroughCase && !hasFallthroughComment(fallthroughCase, node, context, fallthroughCommentPattern)) {
                context.report({
                  messageId: node.test ? "case" : "default",
                  node
                });
              }
              fallthroughCase = null;
            },
            "SwitchCase:exit"(node) {
              const nextToken = sourceCode.getTokenAfter(node);
              if (currentCodePath.currentSegments.some(isReachable) && (node.consequent.length > 0 || hasBlankLinesBetween(node, nextToken)) && node.parent.cases[node.parent.cases.length - 1] !== node) {
                fallthroughCase = node;
              }
            }
          };
        }
      };
      var _noFallthrough = exports$1h;
      var exports$1g = {};
      const astUtils$D = _astUtils;
      exports$1g = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow reassigning `function` declarations",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-func-assign"
          },
          schema: [],
          messages: { isAFunction: "'{{name}}' is a function." }
        },
        create(context) {
          function checkReference(references) {
            astUtils$D.getModifyingReferences(references).forEach(reference => {
              context.report({
                node: reference.identifier,
                messageId: "isAFunction",
                data: { name: reference.identifier.name }
              });
            });
          }
          function checkVariable(variable) {
            if (variable.defs[0].type === "FunctionName") {
              checkReference(variable.references);
            }
          }
          function checkForFunction(node) {
            context.getDeclaredVariables(node).forEach(checkVariable);
          }
          return {
            FunctionDeclaration: checkForFunction,
            FunctionExpression: checkForFunction
          };
        }
      };
      var _noFuncAssign = exports$1g;
      var exports$1f = {};
      const astUtils$C = _astUtils;
      const INDEX_OF_PATTERN = /^(?:i|lastI)ndexOf$/u;
      const ALLOWABLE_OPERATORS = [
        "~",
        "!!",
        "+",
        "*"
      ];
      function parseOptions(options) {
        return {
          boolean: "boolean" in options ? options.boolean : true,
          number: "number" in options ? options.number : true,
          string: "string" in options ? options.string : true,
          disallowTemplateShorthand: "disallowTemplateShorthand" in options ? options.disallowTemplateShorthand : false,
          allow: options.allow || []
        };
      }
      function isDoubleLogicalNegating(node) {
        return node.operator === "!" && node.argument.type === "UnaryExpression" && node.argument.operator === "!";
      }
      function isBinaryNegatingOfIndexOf(node) {
        if (node.operator !== "~") {
          return false;
        }
        const callNode = astUtils$C.skipChainExpression(node.argument);
        return callNode.type === "CallExpression" && astUtils$C.isSpecificMemberAccess(callNode.callee, null, INDEX_OF_PATTERN);
      }
      function isMultiplyByOne(node) {
        return node.operator === "*" && (node.left.type === "Literal" && node.left.value === 1 || node.right.type === "Literal" && node.right.value === 1);
      }
      function isNumeric(node) {
        return node.type === "Literal" && typeof node.value === "number" || node.type === "CallExpression" && (node.callee.name === "Number" || node.callee.name === "parseInt" || node.callee.name === "parseFloat");
      }
      function getNonNumericOperand(node) {
        const left = node.left, right = node.right;
        if (right.type !== "BinaryExpression" && !isNumeric(right)) {
          return right;
        }
        if (left.type !== "BinaryExpression" && !isNumeric(left)) {
          return left;
        }
        return null;
      }
      function isStringType(node) {
        return astUtils$C.isStringLiteral(node) || node.type === "CallExpression" && node.callee.type === "Identifier" && node.callee.name === "String";
      }
      function isEmptyString(node) {
        return astUtils$C.isStringLiteral(node) && (node.value === "" || node.type === "TemplateLiteral" && node.quasis.length === 1 && node.quasis[0].value.cooked === "");
      }
      function isConcatWithEmptyString(node) {
        return node.operator === "+" && (isEmptyString(node.left) && !isStringType(node.right) || isEmptyString(node.right) && !isStringType(node.left));
      }
      function isAppendEmptyString(node) {
        return node.operator === "+=" && isEmptyString(node.right);
      }
      function getNonEmptyOperand(node) {
        return isEmptyString(node.left) ? node.right : node.left;
      }
      exports$1f = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow shorthand type conversions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-implicit-coercion"
          },
          fixable: "code",
          schema: [{
              type: "object",
              properties: {
                boolean: {
                  type: "boolean",
                  default: true
                },
                number: {
                  type: "boolean",
                  default: true
                },
                string: {
                  type: "boolean",
                  default: true
                },
                disallowTemplateShorthand: {
                  type: "boolean",
                  default: false
                },
                allow: {
                  type: "array",
                  items: { enum: ALLOWABLE_OPERATORS },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { useRecommendation: "use `{{recommendation}}` instead." }
        },
        create(context) {
          const options = parseOptions(context.options[0] || {});
          const sourceCode = context.getSourceCode();
          function report(node, recommendation, shouldFix) {
            context.report({
              node,
              messageId: "useRecommendation",
              data: { recommendation },
              fix(fixer) {
                if (!shouldFix) {
                  return null;
                }
                const tokenBefore = sourceCode.getTokenBefore(node);
                if (tokenBefore && tokenBefore.range[1] === node.range[0] && !astUtils$C.canTokensBeAdjacent(tokenBefore, recommendation)) {
                  return fixer.replaceText(node, ` ${ recommendation }`);
                }
                return fixer.replaceText(node, recommendation);
              }
            });
          }
          return {
            UnaryExpression(node) {
              let operatorAllowed;
              operatorAllowed = options.allow.indexOf("!!") >= 0;
              if (!operatorAllowed && options.boolean && isDoubleLogicalNegating(node)) {
                const recommendation = `Boolean(${ sourceCode.getText(node.argument.argument) })`;
                report(node, recommendation, true);
              }
              operatorAllowed = options.allow.indexOf("~") >= 0;
              if (!operatorAllowed && options.boolean && isBinaryNegatingOfIndexOf(node)) {
                const comparison = node.argument.type === "ChainExpression" ? ">= 0" : "!== -1";
                const recommendation = `${ sourceCode.getText(node.argument) } ${ comparison }`;
                report(node, recommendation, false);
              }
              operatorAllowed = options.allow.indexOf("+") >= 0;
              if (!operatorAllowed && options.number && node.operator === "+" && !isNumeric(node.argument)) {
                const recommendation = `Number(${ sourceCode.getText(node.argument) })`;
                report(node, recommendation, true);
              }
            },
            "BinaryExpression:exit"(node) {
              let operatorAllowed;
              operatorAllowed = options.allow.indexOf("*") >= 0;
              const nonNumericOperand = !operatorAllowed && options.number && isMultiplyByOne(node) && getNonNumericOperand(node);
              if (nonNumericOperand) {
                const recommendation = `Number(${ sourceCode.getText(nonNumericOperand) })`;
                report(node, recommendation, true);
              }
              operatorAllowed = options.allow.indexOf("+") >= 0;
              if (!operatorAllowed && options.string && isConcatWithEmptyString(node)) {
                const recommendation = `String(${ sourceCode.getText(getNonEmptyOperand(node)) })`;
                report(node, recommendation, true);
              }
            },
            AssignmentExpression(node) {
              const operatorAllowed = options.allow.indexOf("+") >= 0;
              if (!operatorAllowed && options.string && isAppendEmptyString(node)) {
                const code = sourceCode.getText(getNonEmptyOperand(node));
                const recommendation = `${ code } = String(${ code })`;
                report(node, recommendation, true);
              }
            },
            TemplateLiteral(node) {
              if (!options.disallowTemplateShorthand) {
                return;
              }
              if (node.parent.type === "TaggedTemplateExpression") {
                return;
              }
              if (node.expressions.length !== 1) {
                return;
              }
              if (node.quasis[0].value.cooked !== "") {
                return;
              }
              if (node.quasis[1].value.cooked !== "") {
                return;
              }
              if (isStringType(node.expressions[0])) {
                return;
              }
              const code = sourceCode.getText(node.expressions[0]);
              const recommendation = `String(${ code })`;
              report(node, recommendation, true);
            }
          };
        }
      };
      var _noImplicitCoercion = exports$1f;
      var exports$1e = {};
      exports$1e = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow declarations in the global scope",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-implicit-globals"
          },
          schema: [{
              type: "object",
              properties: {
                lexicalBindings: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            globalNonLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
            globalLexicalBinding: "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
            globalVariableLeak: "Global variable leak, declare the variable if it is intended to be local.",
            assignmentToReadonlyGlobal: "Unexpected assignment to read-only global variable.",
            redeclarationOfReadonlyGlobal: "Unexpected redeclaration of read-only global variable."
          }
        },
        create(context) {
          const checkLexicalBindings = context.options[0] && context.options[0].lexicalBindings === true;
          function report(node, messageId, kind) {
            context.report({
              node,
              messageId,
              data: { kind }
            });
          }
          return {
            Program() {
              const scope = context.getScope();
              scope.variables.forEach(variable => {
                const isReadonlyEslintGlobalVariable = variable.writeable === false;
                const isWritableEslintGlobalVariable = variable.writeable === true;
                if (isWritableEslintGlobalVariable) {
                  return;
                }
                variable.defs.forEach(def => {
                  const defNode = def.node;
                  if (def.type === "FunctionName" || def.type === "Variable" && def.parent.kind === "var") {
                    if (isReadonlyEslintGlobalVariable) {
                      report(defNode, "redeclarationOfReadonlyGlobal");
                    } else {
                      report(defNode, "globalNonLexicalBinding", def.type === "FunctionName" ? "function" : `'${ def.parent.kind }'`);
                    }
                  }
                  if (checkLexicalBindings) {
                    if (def.type === "ClassName" || def.type === "Variable" && (def.parent.kind === "let" || def.parent.kind === "const")) {
                      if (isReadonlyEslintGlobalVariable) {
                        report(defNode, "redeclarationOfReadonlyGlobal");
                      } else {
                        report(defNode, "globalLexicalBinding", def.type === "ClassName" ? "class" : `'${ def.parent.kind }'`);
                      }
                    }
                  }
                });
              });
              scope.implicit.variables.forEach(variable => {
                const scopeVariable = scope.set.get(variable.name);
                let messageId;
                if (scopeVariable) {
                  if (scopeVariable.writeable) {
                    return;
                  }
                  messageId = "assignmentToReadonlyGlobal";
                } else {
                  messageId = "globalVariableLeak";
                }
                variable.defs.forEach(def => {
                  report(def.node, messageId);
                });
              });
            }
          };
        }
      };
      var _noImplicitGlobals = exports$1e;
      var _eslintUtils$8 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$1d = {};
      const {findVariable: findVariable$3} = _eslintUtils$8;
      const astUtils$B = _astUtils;
      const WellKnownMutationFunctions = {
        Object: /^(?:assign|definePropert(?:y|ies)|freeze|setPrototypeOf)$/u,
        Reflect: /^(?:(?:define|delete)Property|set(?:PrototypeOf)?)$/u
      };
      function isAssignmentLeft(node) {
        const {parent} = node;
        return parent.type === "AssignmentExpression" && parent.left === node || parent.type === "ArrayPattern" || parent.type === "Property" && parent.value === node && parent.parent.type === "ObjectPattern" || parent.type === "RestElement" || parent.type === "AssignmentPattern" && parent.left === node;
      }
      function isOperandOfMutationUnaryOperator(node) {
        const argumentNode = node.parent.type === "ChainExpression" ? node.parent : node;
        const {parent} = argumentNode;
        return parent.type === "UpdateExpression" && parent.argument === argumentNode || parent.type === "UnaryExpression" && parent.operator === "delete" && parent.argument === argumentNode;
      }
      function isIterationVariable(node) {
        const {parent} = node;
        return parent.type === "ForInStatement" && parent.left === node || parent.type === "ForOfStatement" && parent.left === node;
      }
      function isArgumentOfWellKnownMutationFunction(node, scope) {
        const {parent} = node;
        if (parent.type !== "CallExpression" || parent.arguments[0] !== node) {
          return false;
        }
        const callee = astUtils$B.skipChainExpression(parent.callee);
        if (!astUtils$B.isSpecificMemberAccess(callee, "Object", WellKnownMutationFunctions.Object) && !astUtils$B.isSpecificMemberAccess(callee, "Reflect", WellKnownMutationFunctions.Reflect)) {
          return false;
        }
        const variable = findVariable$3(scope, callee.object);
        return variable !== null && variable.scope.type === "global";
      }
      function isMemberWrite(id, scope) {
        const {parent} = id;
        return parent.type === "MemberExpression" && parent.object === id && (isAssignmentLeft(parent) || isOperandOfMutationUnaryOperator(parent) || isIterationVariable(parent)) || isArgumentOfWellKnownMutationFunction(id, scope);
      }
      function getWriteNode(id) {
        let node = id.parent;
        while (node && node.type !== "AssignmentExpression" && node.type !== "UpdateExpression" && node.type !== "UnaryExpression" && node.type !== "CallExpression" && node.type !== "ForInStatement" && node.type !== "ForOfStatement") {
          node = node.parent;
        }
        return node || id;
      }
      exports$1d = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow assigning to imported bindings",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-import-assign"
          },
          schema: [],
          messages: {
            readonly: "'{{name}}' is read-only.",
            readonlyMember: "The members of '{{name}}' are read-only."
          }
        },
        create(context) {
          return {
            ImportDeclaration(node) {
              const scope = context.getScope();
              for (const variable of context.getDeclaredVariables(node)) {
                const shouldCheckMembers = variable.defs.some(d => d.node.type === "ImportNamespaceSpecifier");
                let prevIdNode = null;
                for (const reference of variable.references) {
                  const idNode = reference.identifier;
                  if (idNode === prevIdNode) {
                    continue;
                  }
                  prevIdNode = idNode;
                  if (reference.isWrite()) {
                    context.report({
                      node: getWriteNode(idNode),
                      messageId: "readonly",
                      data: { name: idNode.name }
                    });
                  } else if (shouldCheckMembers && isMemberWrite(idNode, scope)) {
                    context.report({
                      node: getWriteNode(idNode),
                      messageId: "readonlyMember",
                      data: { name: idNode.name }
                    });
                  }
                }
              }
            }
          };
        }
      };
      var _noImportAssign = exports$1d;
      var exports$1c = {};
      const astUtils$A = _astUtils;
      const validParent = new Set([
        "Program",
        "ExportNamedDeclaration",
        "ExportDefaultDeclaration"
      ]);
      const validBlockStatementParent = new Set([
        "FunctionDeclaration",
        "FunctionExpression",
        "ArrowFunctionExpression"
      ]);
      exports$1c = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow variable or `function` declarations in nested blocks",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-inner-declarations"
          },
          schema: [{
              enum: [
                "functions",
                "both"
              ]
            }],
          messages: { moveDeclToRoot: "Move {{type}} declaration to {{body}} root." }
        },
        create(context) {
          function check(node) {
            const parent = node.parent;
            if (parent.type === "BlockStatement" && validBlockStatementParent.has(parent.parent.type)) {
              return;
            }
            if (validParent.has(parent.type)) {
              return;
            }
            const upperFunction = astUtils$A.getUpperFunction(parent);
            context.report({
              node,
              messageId: "moveDeclToRoot",
              data: {
                type: node.type === "FunctionDeclaration" ? "function" : "variable",
                body: upperFunction === null ? "program" : "function body"
              }
            });
          }
          return {
            FunctionDeclaration: check,
            VariableDeclaration(node) {
              if (context.options[0] === "both" && node.kind === "var") {
                check(node);
              }
            }
          };
        }
      };
      var _noInnerDeclarations = exports$1c;
      var exports$1b = {};
      const astUtils$z = _astUtils;
      exports$1b = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow labels that share a name with a variable",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-label-var"
          },
          schema: [],
          messages: { identifierClashWithLabel: "Found identifier with same name as label." }
        },
        create(context) {
          function findIdentifier(scope, name) {
            return astUtils$z.getVariableByName(scope, name) !== null;
          }
          return {
            LabeledStatement(node) {
              const scope = context.getScope();
              if (findIdentifier(scope, node.label.name)) {
                context.report({
                  node,
                  messageId: "identifierClashWithLabel"
                });
              }
            }
          };
        }
      };
      var _noLabelVar = exports$1b;
      var exports$1a = {};
      const astUtils$y = _astUtils;
      exports$1a = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow labeled statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-labels"
          },
          schema: [{
              type: "object",
              properties: {
                allowLoop: {
                  type: "boolean",
                  default: false
                },
                allowSwitch: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            unexpectedLabel: "Unexpected labeled statement.",
            unexpectedLabelInBreak: "Unexpected label in break statement.",
            unexpectedLabelInContinue: "Unexpected label in continue statement."
          }
        },
        create(context) {
          const options = context.options[0];
          const allowLoop = options && options.allowLoop;
          const allowSwitch = options && options.allowSwitch;
          let scopeInfo = null;
          function getBodyKind(node) {
            if (astUtils$y.isLoop(node)) {
              return "loop";
            }
            if (node.type === "SwitchStatement") {
              return "switch";
            }
            return "other";
          }
          function isAllowed(kind) {
            switch (kind) {
            case "loop":
              return allowLoop;
            case "switch":
              return allowSwitch;
            default:
              return false;
            }
          }
          function getKind(label) {
            let info = scopeInfo;
            while (info) {
              if (info.label === label) {
                return info.kind;
              }
              info = info.upper;
            }
            return "other";
          }
          return {
            LabeledStatement(node) {
              scopeInfo = {
                label: node.label.name,
                kind: getBodyKind(node.body),
                upper: scopeInfo
              };
            },
            "LabeledStatement:exit"(node) {
              if (!isAllowed(scopeInfo.kind)) {
                context.report({
                  node,
                  messageId: "unexpectedLabel"
                });
              }
              scopeInfo = scopeInfo.upper;
            },
            BreakStatement(node) {
              if (node.label && !isAllowed(getKind(node.label.name))) {
                context.report({
                  node,
                  messageId: "unexpectedLabelInBreak"
                });
              }
            },
            ContinueStatement(node) {
              if (node.label && !isAllowed(getKind(node.label.name))) {
                context.report({
                  node,
                  messageId: "unexpectedLabelInContinue"
                });
              }
            }
          };
        }
      };
      var _noLabels = exports$1a;
      var exports$19 = {};
      exports$19 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary nested blocks",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-lone-blocks"
          },
          schema: [],
          messages: {
            redundantBlock: "Block is redundant.",
            redundantNestedBlock: "Nested block is redundant."
          }
        },
        create(context) {
          const loneBlocks = [];
          let ruleDef;
          function report(node) {
            const messageId = node.parent.type === "BlockStatement" ? "redundantNestedBlock" : "redundantBlock";
            context.report({
              node,
              messageId
            });
          }
          function isLoneBlock(node) {
            return node.parent.type === "BlockStatement" || node.parent.type === "Program" || node.parent.type === "SwitchCase" && !(node.parent.consequent[0] === node && node.parent.consequent.length === 1);
          }
          function markLoneBlock() {
            if (loneBlocks.length === 0) {
              return;
            }
            const block = context.getAncestors().pop();
            if (loneBlocks[loneBlocks.length - 1] === block) {
              loneBlocks.pop();
            }
          }
          ruleDef = {
            BlockStatement(node) {
              if (isLoneBlock(node)) {
                report(node);
              }
            }
          };
          if (context.parserOptions.ecmaVersion >= 6) {
            ruleDef = {
              BlockStatement(node) {
                if (isLoneBlock(node)) {
                  loneBlocks.push(node);
                }
              },
              "BlockStatement:exit"(node) {
                if (loneBlocks.length > 0 && loneBlocks[loneBlocks.length - 1] === node) {
                  loneBlocks.pop();
                  report(node);
                } else if (node.parent.type === "BlockStatement" && node.parent.body.length === 1) {
                  report(node);
                }
              }
            };
            ruleDef.VariableDeclaration = function (node) {
              if (node.kind === "let" || node.kind === "const") {
                markLoneBlock();
              }
            };
            ruleDef.FunctionDeclaration = function () {
              if (context.getScope().isStrict) {
                markLoneBlock();
              }
            };
            ruleDef.ClassDeclaration = markLoneBlock;
          }
          return ruleDef;
        }
      };
      var _noLoneBlocks = exports$19;
      var exports$18 = {};
      exports$18 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `if` statements as the only statement in `else` blocks",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-lonely-if"
          },
          schema: [],
          fixable: "code",
          messages: { unexpectedLonelyIf: "Unexpected if as the only statement in an else block." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            IfStatement(node) {
              const ancestors = context.getAncestors(), parent = ancestors.pop(), grandparent = ancestors.pop();
              if (parent && parent.type === "BlockStatement" && parent.body.length === 1 && grandparent && grandparent.type === "IfStatement" && parent === grandparent.alternate) {
                context.report({
                  node,
                  messageId: "unexpectedLonelyIf",
                  fix(fixer) {
                    const openingElseCurly = sourceCode.getFirstToken(parent);
                    const closingElseCurly = sourceCode.getLastToken(parent);
                    const elseKeyword = sourceCode.getTokenBefore(openingElseCurly);
                    const tokenAfterElseBlock = sourceCode.getTokenAfter(closingElseCurly);
                    const lastIfToken = sourceCode.getLastToken(node.consequent);
                    const sourceText = sourceCode.getText();
                    if (sourceText.slice(openingElseCurly.range[1], node.range[0]).trim() || sourceText.slice(node.range[1], closingElseCurly.range[0]).trim()) {
                      return null;
                    }
                    if (node.consequent.type !== "BlockStatement" && lastIfToken.value !== ";" && tokenAfterElseBlock && (node.consequent.loc.end.line === tokenAfterElseBlock.loc.start.line || /^[([/+`-]/u.test(tokenAfterElseBlock.value) || lastIfToken.value === "++" || lastIfToken.value === "--")) {
                      return null;
                    }
                    return fixer.replaceTextRange([
                      openingElseCurly.range[0],
                      closingElseCurly.range[1]
                    ], (elseKeyword.range[1] === openingElseCurly.range[0] ? " " : "") + sourceCode.getText(node));
                  }
                });
              }
            }
          };
        }
      };
      var _noLonelyIf = exports$18;
      var exports$17 = {};
      const astUtils$x = _astUtils;
      const ARITHMETIC_OPERATORS = [
        "+",
        "-",
        "*",
        "/",
        "%",
        "**"
      ];
      const BITWISE_OPERATORS = [
        "&",
        "|",
        "^",
        "~",
        "<<",
        ">>",
        ">>>"
      ];
      const COMPARISON_OPERATORS = [
        "==",
        "!=",
        "===",
        "!==",
        ">",
        ">=",
        "<",
        "<="
      ];
      const LOGICAL_OPERATORS = [
        "&&",
        "||"
      ];
      const RELATIONAL_OPERATORS = [
        "in",
        "instanceof"
      ];
      const TERNARY_OPERATOR = ["?:"];
      const COALESCE_OPERATOR = ["??"];
      const ALL_OPERATORS = [].concat(ARITHMETIC_OPERATORS, BITWISE_OPERATORS, COMPARISON_OPERATORS, LOGICAL_OPERATORS, RELATIONAL_OPERATORS, TERNARY_OPERATOR, COALESCE_OPERATOR);
      const DEFAULT_GROUPS = [
        ARITHMETIC_OPERATORS,
        BITWISE_OPERATORS,
        COMPARISON_OPERATORS,
        LOGICAL_OPERATORS,
        RELATIONAL_OPERATORS
      ];
      const TARGET_NODE_TYPE = /^(?:Binary|Logical|Conditional)Expression$/u;
      function normalizeOptions(options = {}) {
        const hasGroups = options.groups && options.groups.length > 0;
        const groups = hasGroups ? options.groups : DEFAULT_GROUPS;
        const allowSamePrecedence = options.allowSamePrecedence !== false;
        return {
          groups,
          allowSamePrecedence
        };
      }
      function includesBothInAGroup(groups, left, right) {
        return groups.some(group => group.indexOf(left) !== -1 && group.indexOf(right) !== -1);
      }
      function getChildNode(node) {
        return node.type === "ConditionalExpression" ? node.test : node.left;
      }
      exports$17 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow mixed binary operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-mixed-operators"
          },
          schema: [{
              type: "object",
              properties: {
                groups: {
                  type: "array",
                  items: {
                    type: "array",
                    items: { enum: ALL_OPERATORS },
                    minItems: 2,
                    uniqueItems: true
                  },
                  uniqueItems: true
                },
                allowSamePrecedence: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedMixedOperator: "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'. Use parentheses to clarify the intended order of operations." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const options = normalizeOptions(context.options[0]);
          function shouldIgnore(node) {
            const a = node;
            const b = node.parent;
            return !includesBothInAGroup(options.groups, a.operator, b.type === "ConditionalExpression" ? "?:" : b.operator) || options.allowSamePrecedence && astUtils$x.getPrecedence(a) === astUtils$x.getPrecedence(b);
          }
          function isMixedWithParent(node) {
            return node.operator !== node.parent.operator && !astUtils$x.isParenthesised(sourceCode, node);
          }
          function getOperatorToken(node) {
            return sourceCode.getTokenAfter(getChildNode(node), astUtils$x.isNotClosingParenToken);
          }
          function reportBothOperators(node) {
            const parent = node.parent;
            const left = getChildNode(parent) === node ? node : parent;
            const right = getChildNode(parent) !== node ? node : parent;
            const data = {
              leftOperator: left.operator || "?:",
              rightOperator: right.operator || "?:"
            };
            context.report({
              node: left,
              loc: getOperatorToken(left).loc,
              messageId: "unexpectedMixedOperator",
              data
            });
            context.report({
              node: right,
              loc: getOperatorToken(right).loc,
              messageId: "unexpectedMixedOperator",
              data
            });
          }
          function check(node) {
            if (TARGET_NODE_TYPE.test(node.parent.type) && isMixedWithParent(node) && !shouldIgnore(node)) {
              reportBothOperators(node);
            }
          }
          return {
            BinaryExpression: check,
            LogicalExpression: check
          };
        }
      };
      var _noMixedOperators = exports$17;
      var exports$16 = {};
      exports$16 = {
        meta: {
          deprecated: true,
          replacedBy: [],
          type: "suggestion",
          docs: {
            description: "disallow `require` calls to be mixed with regular variable declarations",
            category: "Node.js and CommonJS",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-mixed-requires"
          },
          schema: [{
              oneOf: [
                { type: "boolean" },
                {
                  type: "object",
                  properties: {
                    grouping: { type: "boolean" },
                    allowCall: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            noMixRequire: "Do not mix 'require' and other declarations.",
            noMixCoreModuleFileComputed: "Do not mix core, module, file and computed requires."
          }
        },
        create(context) {
          const options = context.options[0];
          let grouping = false, allowCall = false;
          if (typeof options === "object") {
            grouping = options.grouping;
            allowCall = options.allowCall;
          } else {
            grouping = !!options;
          }
          function getBuiltinModules() {
            return [
              "assert",
              "buffer",
              "child_process",
              "cluster",
              "crypto",
              "dgram",
              "dns",
              "domain",
              "events",
              "fs",
              "http",
              "https",
              "net",
              "os",
              "path",
              "punycode",
              "querystring",
              "readline",
              "repl",
              "smalloc",
              "stream",
              "string_decoder",
              "tls",
              "tty",
              "url",
              "util",
              "v8",
              "vm",
              "zlib"
            ];
          }
          const BUILTIN_MODULES = getBuiltinModules();
          const DECL_REQUIRE = "require", DECL_UNINITIALIZED = "uninitialized", DECL_OTHER = "other";
          const REQ_CORE = "core", REQ_FILE = "file", REQ_MODULE = "module", REQ_COMPUTED = "computed";
          function getDeclarationType(initExpression) {
            if (!initExpression) {
              return DECL_UNINITIALIZED;
            }
            if (initExpression.type === "CallExpression" && initExpression.callee.type === "Identifier" && initExpression.callee.name === "require") {
              return DECL_REQUIRE;
            }
            if (allowCall && initExpression.type === "CallExpression" && initExpression.callee.type === "CallExpression") {
              return getDeclarationType(initExpression.callee);
            }
            if (initExpression.type === "MemberExpression") {
              return getDeclarationType(initExpression.object);
            }
            return DECL_OTHER;
          }
          function inferModuleType(initExpression) {
            if (initExpression.type === "MemberExpression") {
              return inferModuleType(initExpression.object);
            }
            if (initExpression.arguments.length === 0) {
              return REQ_COMPUTED;
            }
            const arg = initExpression.arguments[0];
            if (arg.type !== "Literal" || typeof arg.value !== "string") {
              return REQ_COMPUTED;
            }
            if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {
              return REQ_CORE;
            }
            if (/^\.{0,2}\//u.test(arg.value)) {
              return REQ_FILE;
            }
            return REQ_MODULE;
          }
          function isMixed(declarations) {
            const contains = {};
            declarations.forEach(declaration => {
              const type = getDeclarationType(declaration.init);
              contains[type] = true;
            });
            return !!(contains[DECL_REQUIRE] && (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER]));
          }
          function isGrouped(declarations) {
            const found = {};
            declarations.forEach(declaration => {
              if (getDeclarationType(declaration.init) === DECL_REQUIRE) {
                found[inferModuleType(declaration.init)] = true;
              }
            });
            return Object.keys(found).length <= 1;
          }
          return {
            VariableDeclaration(node) {
              if (isMixed(node.declarations)) {
                context.report({
                  node,
                  messageId: "noMixRequire"
                });
              } else if (grouping && !isGrouped(node.declarations)) {
                context.report({
                  node,
                  messageId: "noMixCoreModuleFileComputed"
                });
              }
            }
          };
        }
      };
      var _noMixedRequires = exports$16;
      var exports$15 = {};
      exports$15 = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow mixed spaces and tabs for indentation",
            category: "Stylistic Issues",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs"
          },
          schema: [{
              enum: [
                "smart-tabs",
                true,
                false
              ]
            }],
          messages: { mixedSpacesAndTabs: "Mixed spaces and tabs." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let smartTabs;
          switch (context.options[0]) {
          case true:
          case "smart-tabs":
            smartTabs = true;
            break;
          default:
            smartTabs = false;
          }
          return {
            "Program:exit"(node) {
              const lines = sourceCode.lines, comments = sourceCode.getAllComments(), ignoredCommentLines = new Set();
              comments.forEach(comment => {
                for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {
                  ignoredCommentLines.add(i);
                }
              });
              let regex = /^(?=( +|\t+))\1(?:\t| )/u;
              if (smartTabs) {
                regex = /^(?=(\t*))\1(?=( +))\2\t/u;
              }
              lines.forEach((line, i) => {
                const match = regex.exec(line);
                if (match) {
                  const lineNumber = i + 1;
                  const loc = {
                    start: {
                      line: lineNumber,
                      column: match[0].length - 2
                    },
                    end: {
                      line: lineNumber,
                      column: match[0].length
                    }
                  };
                  if (!ignoredCommentLines.has(lineNumber)) {
                    const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));
                    if (!(containingNode && [
                        "Literal",
                        "TemplateElement"
                      ].includes(containingNode.type))) {
                      context.report({
                        node,
                        loc,
                        messageId: "mixedSpacesAndTabs"
                      });
                    }
                  }
                }
              });
            }
          };
        }
      };
      var _noMixedSpacesAndTabs = exports$15;
      var exports$14 = {};
      const astUtils$w = _astUtils;
      exports$14 = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow multiple spaces",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-multi-spaces"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                exceptions: {
                  type: "object",
                  patternProperties: { "^([A-Z][a-z]*)+$": { type: "boolean" } },
                  additionalProperties: false
                },
                ignoreEOLComments: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: { multipleSpaces: "Multiple spaces found before '{{displayValue}}'." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const options = context.options[0] || {};
          const ignoreEOLComments = options.ignoreEOLComments;
          const exceptions = Object.assign({ Property: true }, options.exceptions);
          const hasExceptions = Object.keys(exceptions).filter(key => exceptions[key]).length > 0;
          function formatReportedCommentValue(token) {
            const valueLines = token.value.split("\n");
            const value = valueLines[0];
            const formattedValue = `${ value.slice(0, 12) }...`;
            return valueLines.length === 1 && value.length <= 12 ? value : formattedValue;
          }
          return {
            Program() {
              sourceCode.tokensAndComments.forEach((leftToken, leftIndex, tokensAndComments) => {
                if (leftIndex === tokensAndComments.length - 1) {
                  return;
                }
                const rightToken = tokensAndComments[leftIndex + 1];
                if (!sourceCode.text.slice(leftToken.range[1], rightToken.range[0]).includes("  ") || leftToken.loc.end.line < rightToken.loc.start.line) {
                  return;
                }
                if (ignoreEOLComments && astUtils$w.isCommentToken(rightToken) && (leftIndex === tokensAndComments.length - 2 || rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line)) {
                  return;
                }
                if (hasExceptions) {
                  const parentNode = sourceCode.getNodeByRangeIndex(rightToken.range[0] - 1);
                  if (parentNode && exceptions[parentNode.type]) {
                    return;
                  }
                }
                let displayValue;
                if (rightToken.type === "Block") {
                  displayValue = `/*${ formatReportedCommentValue(rightToken) }*/`;
                } else if (rightToken.type === "Line") {
                  displayValue = `//${ formatReportedCommentValue(rightToken) }`;
                } else {
                  displayValue = rightToken.value;
                }
                context.report({
                  node: rightToken,
                  loc: {
                    start: leftToken.loc.end,
                    end: rightToken.loc.start
                  },
                  messageId: "multipleSpaces",
                  data: { displayValue },
                  fix: fixer => fixer.replaceTextRange([
                    leftToken.range[1],
                    rightToken.range[0]
                  ], " ")
                });
              });
            }
          };
        }
      };
      var _noMultiSpaces = exports$14;
      var exports$13 = {};
      exports$13 = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow multiple empty lines",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-multiple-empty-lines"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                max: {
                  type: "integer",
                  minimum: 0
                },
                maxEOF: {
                  type: "integer",
                  minimum: 0
                },
                maxBOF: {
                  type: "integer",
                  minimum: 0
                }
              },
              required: ["max"],
              additionalProperties: false
            }],
          messages: {
            blankBeginningOfFile: "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
            blankEndOfFile: "Too many blank lines at the end of file. Max of {{max}} allowed.",
            consecutiveBlank: "More than {{max}} blank {{pluralizedLines}} not allowed."
          }
        },
        create(context) {
          let max = 2, maxEOF = max, maxBOF = max;
          if (context.options.length) {
            max = context.options[0].max;
            maxEOF = typeof context.options[0].maxEOF !== "undefined" ? context.options[0].maxEOF : max;
            maxBOF = typeof context.options[0].maxBOF !== "undefined" ? context.options[0].maxBOF : max;
          }
          const sourceCode = context.getSourceCode();
          const allLines = sourceCode.lines[sourceCode.lines.length - 1] === "" ? sourceCode.lines.slice(0, -1) : sourceCode.lines;
          const templateLiteralLines = new Set();
          return {
            TemplateLiteral(node) {
              node.quasis.forEach(literalPart => {
                for (let ignoredLine = literalPart.loc.start.line; ignoredLine < literalPart.loc.end.line; ignoredLine++) {
                  templateLiteralLines.add(ignoredLine);
                }
              });
            },
            "Program:exit"(node) {
              return allLines.reduce((nonEmptyLineNumbers, line, index) => {
                if (line.trim() || templateLiteralLines.has(index + 1)) {
                  nonEmptyLineNumbers.push(index + 1);
                }
                return nonEmptyLineNumbers;
              }, []).concat(allLines.length + 1).reduce((lastLineNumber, lineNumber) => {
                let messageId, maxAllowed;
                if (lastLineNumber === 0) {
                  messageId = "blankBeginningOfFile";
                  maxAllowed = maxBOF;
                } else if (lineNumber === allLines.length + 1) {
                  messageId = "blankEndOfFile";
                  maxAllowed = maxEOF;
                } else {
                  messageId = "consecutiveBlank";
                  maxAllowed = max;
                }
                if (lineNumber - lastLineNumber - 1 > maxAllowed) {
                  context.report({
                    node,
                    loc: {
                      start: {
                        line: lastLineNumber + maxAllowed + 1,
                        column: 0
                      },
                      end: {
                        line: lineNumber,
                        column: 0
                      }
                    },
                    messageId,
                    data: {
                      max: maxAllowed,
                      pluralizedLines: maxAllowed === 1 ? "line" : "lines"
                    },
                    fix(fixer) {
                      const rangeStart = sourceCode.getIndexFromLoc({
                        line: lastLineNumber + 1,
                        column: 0
                      });
                      const lineNumberAfterRemovedLines = lineNumber - maxAllowed;
                      const rangeEnd = lineNumberAfterRemovedLines <= allLines.length ? sourceCode.getIndexFromLoc({
                        line: lineNumberAfterRemovedLines,
                        column: 0
                      }) : sourceCode.text.length;
                      return fixer.removeRange([
                        rangeStart,
                        rangeEnd
                      ]);
                    }
                  });
                }
                return lineNumber;
              }, 0);
            }
          };
        }
      };
      var _noMultipleEmptyLines = exports$13;
      var exports$12 = {};
      exports$12 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow assignments to native objects or read-only global variables",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-native-reassign"
          },
          deprecated: true,
          replacedBy: ["no-global-assign"],
          schema: [{
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: { type: "string" },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { nativeReassign: "Read-only global '{{name}}' should not be modified." }
        },
        create(context) {
          const config = context.options[0];
          const exceptions = config && config.exceptions || [];
          function checkReference(reference, index, references) {
            const identifier = reference.identifier;
            if (reference.init === false && reference.isWrite() && (index === 0 || references[index - 1].identifier !== identifier)) {
              context.report({
                node: identifier,
                messageId: "nativeReassign",
                data: identifier
              });
            }
          }
          function checkVariable(variable) {
            if (variable.writeable === false && exceptions.indexOf(variable.name) === -1) {
              variable.references.forEach(checkReference);
            }
          }
          return {
            Program() {
              const globalScope = context.getScope();
              globalScope.variables.forEach(checkVariable);
            }
          };
        }
      };
      var _noNativeReassign = exports$12;
      var exports$11 = {};
      exports$11 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow negated conditions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-negated-condition"
          },
          schema: [],
          messages: { unexpectedNegated: "Unexpected negated condition." }
        },
        create(context) {
          function hasElseWithoutCondition(node) {
            return node.alternate && node.alternate.type !== "IfStatement";
          }
          function isNegatedUnaryExpression(test) {
            return test.type === "UnaryExpression" && test.operator === "!";
          }
          function isNegatedBinaryExpression(test) {
            return test.type === "BinaryExpression" && (test.operator === "!=" || test.operator === "!==");
          }
          function isNegatedIf(node) {
            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);
          }
          return {
            IfStatement(node) {
              if (!hasElseWithoutCondition(node)) {
                return;
              }
              if (isNegatedIf(node)) {
                context.report({
                  node,
                  messageId: "unexpectedNegated"
                });
              }
            },
            ConditionalExpression(node) {
              if (isNegatedIf(node)) {
                context.report({
                  node,
                  messageId: "unexpectedNegated"
                });
              }
            }
          };
        }
      };
      var _noNegatedCondition = exports$11;
      var exports$10 = {};
      exports$10 = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow negating the left operand in `in` expressions",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-negated-in-lhs"
          },
          replacedBy: ["no-unsafe-negation"],
          deprecated: true,
          schema: [],
          messages: { negatedLHS: "The 'in' expression's left operand is negated." }
        },
        create(context) {
          return {
            BinaryExpression(node) {
              if (node.operator === "in" && node.left.type === "UnaryExpression" && node.left.operator === "!") {
                context.report({
                  node,
                  messageId: "negatedLHS"
                });
              }
            }
          };
        }
      };
      var _noNegatedInLhs = exports$10;
      var exports$$ = {};
      exports$$ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow nested ternary expressions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-nested-ternary"
          },
          schema: [],
          messages: { noNestedTernary: "Do not nest ternary expressions." }
        },
        create(context) {
          return {
            ConditionalExpression(node) {
              if (node.alternate.type === "ConditionalExpression" || node.consequent.type === "ConditionalExpression") {
                context.report({
                  node,
                  messageId: "noNestedTernary"
                });
              }
            }
          };
        }
      };
      var _noNestedTernary = exports$$;
      var exports$_ = {};
      const QUICK_TEST_REGEX = /\\[89]/u;
      function getUnicodeEscape(character) {
        return `\\u${ character.charCodeAt(0).toString(16).padStart(4, "0") }`;
      }
      exports$_ = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `\\8` and `\\9` escape sequences in string literals",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-nonoctal-decimal-escape",
            suggestion: true
          },
          schema: [],
          messages: {
            decimalEscape: "Don't use '{{decimalEscape}}' escape sequence.",
            refactor: "Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.",
            escapeBackslash: "Replace '{{original}}' with '{{replacement}}' to include the actual backslash character."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function createSuggestion(messageId, range, replacement) {
            return {
              messageId,
              data: {
                original: sourceCode.getText().slice(...range),
                replacement
              },
              fix(fixer) {
                return fixer.replaceTextRange(range, replacement);
              }
            };
          }
          return {
            Literal(node) {
              if (typeof node.value !== "string") {
                return;
              }
              if (!QUICK_TEST_REGEX.test(node.raw)) {
                return;
              }
              const regex = /(?:[^\\]|(?<previousEscape>\\.))*?(?<decimalEscape>\\[89])/suy;
              let match;
              while (match = regex.exec(node.raw)) {
                const {previousEscape, decimalEscape} = match.groups;
                const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;
                const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;
                const decimalEscapeRange = [
                  decimalEscapeRangeStart,
                  decimalEscapeRangeEnd
                ];
                const suggest = [];
                if (previousEscape === "\\0") {
                  suggest.push(createSuggestion("refactor", [
                    decimalEscapeRangeStart - previousEscape.length,
                    decimalEscapeRangeEnd
                  ], `${ getUnicodeEscape("\0") }${ decimalEscape[1] }`), createSuggestion("refactor", decimalEscapeRange, getUnicodeEscape(decimalEscape[1])));
                } else {
                  suggest.push(createSuggestion("refactor", decimalEscapeRange, decimalEscape[1]));
                }
                suggest.push(createSuggestion("escapeBackslash", decimalEscapeRange, `\\${ decimalEscape }`));
                context.report({
                  node,
                  loc: {
                    start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),
                    end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)
                  },
                  messageId: "decimalEscape",
                  data: { decimalEscape },
                  suggest
                });
              }
            }
          };
        }
      };
      var _noNonoctalDecimalEscape = exports$_;
      var exports$Z = {};
      exports$Z = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow octal literals",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-octal"
          },
          schema: [],
          messages: { noOcatal: "Octal literals should not be used." }
        },
        create(context) {
          return {
            Literal(node) {
              if (typeof node.value === "number" && /^0[0-9]/u.test(node.raw)) {
                context.report({
                  node,
                  messageId: "noOcatal"
                });
              }
            }
          };
        }
      };
      var _noOctal = exports$Z;
      var _eslintUtils$7 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$Y = {};
      const {findVariable: findVariable$2} = _eslintUtils$7;
      const functionTypesToCheck = new Set([
        "ArrowFunctionExpression",
        "FunctionExpression"
      ]);
      function isGlobalReference$1(node, scope) {
        const variable = findVariable$2(scope, node);
        return variable !== null && variable.scope.type === "global" && variable.defs.length === 0;
      }
      function getOuterScope$1(scope) {
        const upper = scope.upper;
        if (upper.type === "function-expression-name") {
          return upper.upper;
        }
        return upper;
      }
      function isPromiseExecutor(node, scope) {
        const parent = node.parent;
        return parent.type === "NewExpression" && parent.arguments[0] === node && parent.callee.type === "Identifier" && parent.callee.name === "Promise" && isGlobalReference$1(parent.callee, getOuterScope$1(scope));
      }
      exports$Y = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow returning values from Promise executor functions",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-promise-executor-return"
          },
          schema: [],
          messages: { returnsValue: "Return values from promise executor functions cannot be read." }
        },
        create(context) {
          let funcInfo = null;
          function report(node) {
            context.report({
              node,
              messageId: "returnsValue"
            });
          }
          return {
            onCodePathStart(_, node) {
              funcInfo = {
                upper: funcInfo,
                shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())
              };
              if (funcInfo.shouldCheck && node.type === "ArrowFunctionExpression" && node.expression) {
                report(node.body);
              }
            },
            onCodePathEnd() {
              funcInfo = funcInfo.upper;
            },
            ReturnStatement(node) {
              if (funcInfo.shouldCheck && node.argument) {
                report(node);
              }
            }
          };
        }
      };
      var _noPromiseExecutorReturn = exports$Y;
      var exports$X = {};
      const astUtils$v = _astUtils;
      exports$X = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow variable redeclaration",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-redeclare"
          },
          messages: {
            redeclared: "'{{id}}' is already defined.",
            redeclaredAsBuiltin: "'{{id}}' is already defined as a built-in global variable.",
            redeclaredBySyntax: "'{{id}}' is already defined by a variable declaration."
          },
          schema: [{
              type: "object",
              properties: {
                builtinGlobals: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }]
        },
        create(context) {
          const options = { builtinGlobals: Boolean(context.options.length === 0 || context.options[0].builtinGlobals) };
          const sourceCode = context.getSourceCode();
          function* iterateDeclarations(variable) {
            if (options.builtinGlobals && (variable.eslintImplicitGlobalSetting === "readonly" || variable.eslintImplicitGlobalSetting === "writable")) {
              yield { type: "builtin" };
            }
            for (const id of variable.identifiers) {
              yield {
                type: "syntax",
                node: id,
                loc: id.loc
              };
            }
            if (variable.eslintExplicitGlobalComments) {
              for (const comment of variable.eslintExplicitGlobalComments) {
                yield {
                  type: "comment",
                  node: comment,
                  loc: astUtils$v.getNameLocationInGlobalDirectiveComment(sourceCode, comment, variable.name)
                };
              }
            }
          }
          function findVariablesInScope(scope) {
            for (const variable of scope.variables) {
              const [declaration, ...extraDeclarations] = iterateDeclarations(variable);
              if (extraDeclarations.length === 0) {
                continue;
              }
              const detailMessageId = declaration.type === "builtin" ? "redeclaredAsBuiltin" : "redeclaredBySyntax";
              const data = { id: variable.name };
              for (const {type, node, loc} of extraDeclarations) {
                const messageId = type === declaration.type ? "redeclared" : detailMessageId;
                context.report({
                  node,
                  loc,
                  messageId,
                  data
                });
              }
            }
          }
          function checkForBlock(node) {
            const scope = context.getScope();
            if (scope.block === node) {
              findVariablesInScope(scope);
            }
          }
          return {
            Program() {
              const scope = context.getScope();
              findVariablesInScope(scope);
              if (scope.type === "global" && scope.childScopes[0] && scope.block === scope.childScopes[0].block) {
                findVariablesInScope(scope.childScopes[0]);
              }
            },
            FunctionDeclaration: checkForBlock,
            FunctionExpression: checkForBlock,
            ArrowFunctionExpression: checkForBlock,
            BlockStatement: checkForBlock,
            ForStatement: checkForBlock,
            ForInStatement: checkForBlock,
            ForOfStatement: checkForBlock,
            SwitchStatement: checkForBlock
          };
        }
      };
      var _noRedeclare = exports$X;
      var _regexpp$2 = "default" in _regexpp2 ? exports$3J : _regexpp2;
      var exports$W = {};
      const astUtils$u = _astUtils;
      const regexpp$1 = _regexpp$2;
      const regExpParser = new regexpp$1.RegExpParser();
      const DOUBLE_SPACE = / {2}/u;
      function isString(node) {
        return node && node.type === "Literal" && typeof node.value === "string";
      }
      exports$W = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow multiple spaces in regular expressions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-regex-spaces"
          },
          schema: [],
          fixable: "code",
          messages: { multipleSpaces: "Spaces are hard to count. Use {{{length}}}." }
        },
        create(context) {
          function checkRegex(nodeToReport, pattern, rawPattern, rawPatternStartRange, flags) {
            if (!DOUBLE_SPACE.test(rawPattern)) {
              return;
            }
            const characterClassNodes = [];
            let regExpAST;
            try {
              regExpAST = regExpParser.parsePattern(pattern, 0, pattern.length, flags.includes("u"));
            } catch {
              return;
            }
            regexpp$1.visitRegExpAST(regExpAST, {
              onCharacterClassEnter(ccNode) {
                characterClassNodes.push(ccNode);
              }
            });
            const spacesPattern = /( {2,})(?: [+*{?]|[^+*{?]|$)/gu;
            let match;
            while (match = spacesPattern.exec(pattern)) {
              const {
                1: {length},
                index
              } = match;
              if (characterClassNodes.every(({start, end}) => index < start || end <= index)) {
                context.report({
                  node: nodeToReport,
                  messageId: "multipleSpaces",
                  data: { length },
                  fix(fixer) {
                    if (pattern !== rawPattern) {
                      return null;
                    }
                    return fixer.replaceTextRange([
                      rawPatternStartRange + index,
                      rawPatternStartRange + index + length
                    ], ` {${ length }}`);
                  }
                });
                return;
              }
            }
          }
          function checkLiteral(node) {
            if (node.regex) {
              const pattern = node.regex.pattern;
              const rawPattern = node.raw.slice(1, node.raw.lastIndexOf("/"));
              const rawPatternStartRange = node.range[0] + 1;
              const flags = node.regex.flags;
              checkRegex(node, pattern, rawPattern, rawPatternStartRange, flags);
            }
          }
          function checkFunction(node) {
            const scope = context.getScope();
            const regExpVar = astUtils$u.getVariableByName(scope, "RegExp");
            const shadowed = regExpVar && regExpVar.defs.length > 0;
            const patternNode = node.arguments[0];
            const flagsNode = node.arguments[1];
            if (node.callee.type === "Identifier" && node.callee.name === "RegExp" && isString(patternNode) && !shadowed) {
              const pattern = patternNode.value;
              const rawPattern = patternNode.raw.slice(1, -1);
              const rawPatternStartRange = patternNode.range[0] + 1;
              const flags = isString(flagsNode) ? flagsNode.value : "";
              checkRegex(node, pattern, rawPattern, rawPatternStartRange, flags);
            }
          }
          return {
            Literal: checkLiteral,
            CallExpression: checkFunction,
            NewExpression: checkFunction
          };
        }
      };
      var _noRegexSpaces = exports$W;
      var exports$V = {};
      exports$V = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow specified names in exports",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-restricted-exports"
          },
          schema: [{
              type: "object",
              properties: {
                restrictedNamedExports: {
                  type: "array",
                  items: { type: "string" },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { restrictedNamed: "'{{name}}' is restricted from being used as an exported name." }
        },
        create(context) {
          const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);
          function checkExportedName(node) {
            const name = node.name;
            if (restrictedNames.has(name)) {
              context.report({
                node,
                messageId: "restrictedNamed",
                data: { name }
              });
            }
          }
          return {
            ExportAllDeclaration(node) {
              if (node.exported) {
                checkExportedName(node.exported);
              }
            },
            ExportNamedDeclaration(node) {
              const declaration = node.declaration;
              if (declaration) {
                if (declaration.type === "FunctionDeclaration" || declaration.type === "ClassDeclaration") {
                  checkExportedName(declaration.id);
                } else if (declaration.type === "VariableDeclaration") {
                  context.getDeclaredVariables(declaration).map(v => v.defs.find(d => d.parent === declaration)).map(d => d.name).forEach(checkExportedName);
                }
              } else {
                node.specifiers.map(s => s.exported).forEach(checkExportedName);
              }
            }
          };
        }
      };
      var _noRestrictedExports = exports$V;
      var exports$U = {};
      const astUtils$t = _astUtils;
      const SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;
      exports$U = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow assignment operators in `return` statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-return-assign"
          },
          schema: [{
              enum: [
                "except-parens",
                "always"
              ]
            }],
          messages: {
            returnAssignment: "Return statement should not contain assignment.",
            arrowAssignment: "Arrow function should not return assignment."
          }
        },
        create(context) {
          const always = (context.options[0] || "except-parens") !== "except-parens";
          const sourceCode = context.getSourceCode();
          return {
            AssignmentExpression(node) {
              if (!always && astUtils$t.isParenthesised(sourceCode, node)) {
                return;
              }
              let currentChild = node;
              let parent = currentChild.parent;
              while (parent && !SENTINEL_TYPE.test(parent.type)) {
                currentChild = parent;
                parent = parent.parent;
              }
              if (parent && parent.type === "ReturnStatement") {
                context.report({
                  node: parent,
                  messageId: "returnAssignment"
                });
              } else if (parent && parent.type === "ArrowFunctionExpression" && parent.body === currentChild) {
                context.report({
                  node: parent,
                  messageId: "arrowAssignment"
                });
              }
            }
          };
        }
      };
      var _noReturnAssign = exports$U;
      var exports$T = {};
      const astUtils$s = _astUtils;
      exports$T = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unnecessary `return await`",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-return-await"
          },
          fixable: null,
          schema: [],
          messages: { redundantUseOfAwait: "Redundant use of `await` on a return value." }
        },
        create(context) {
          function reportUnnecessaryAwait(node) {
            context.report({
              node: context.getSourceCode().getFirstToken(node),
              loc: node.loc,
              messageId: "redundantUseOfAwait"
            });
          }
          function hasErrorHandler(node) {
            let ancestor = node;
            while (!astUtils$s.isFunction(ancestor) && ancestor.type !== "Program") {
              if (ancestor.parent.type === "TryStatement" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {
                return true;
              }
              ancestor = ancestor.parent;
            }
            return false;
          }
          function isInTailCallPosition(node) {
            if (node.parent.type === "ArrowFunctionExpression") {
              return true;
            }
            if (node.parent.type === "ReturnStatement") {
              return !hasErrorHandler(node.parent);
            }
            if (node.parent.type === "ConditionalExpression" && (node === node.parent.consequent || node === node.parent.alternate)) {
              return isInTailCallPosition(node.parent);
            }
            if (node.parent.type === "LogicalExpression" && node === node.parent.right) {
              return isInTailCallPosition(node.parent);
            }
            if (node.parent.type === "SequenceExpression" && node === node.parent.expressions[node.parent.expressions.length - 1]) {
              return isInTailCallPosition(node.parent);
            }
            return false;
          }
          return {
            AwaitExpression(node) {
              if (isInTailCallPosition(node) && !hasErrorHandler(node)) {
                reportUnnecessaryAwait(node);
              }
            }
          };
        }
      };
      var _noReturnAwait = exports$T;
      var exports$S = {};
      const astUtils$r = _astUtils;
      const SPACES = /\s+/gu;
      function eachSelfAssignment(left, right, props, report) {
        if (!left || !right) ; else if (left.type === "Identifier" && right.type === "Identifier" && left.name === right.name) {
          report(right);
        } else if (left.type === "ArrayPattern" && right.type === "ArrayExpression") {
          const end = Math.min(left.elements.length, right.elements.length);
          for (let i = 0; i < end; ++i) {
            const leftElement = left.elements[i];
            const rightElement = right.elements[i];
            if (leftElement && leftElement.type === "RestElement" && i < right.elements.length - 1) {
              break;
            }
            eachSelfAssignment(leftElement, rightElement, props, report);
            if (rightElement && rightElement.type === "SpreadElement") {
              break;
            }
          }
        } else if (left.type === "RestElement" && right.type === "SpreadElement") {
          eachSelfAssignment(left.argument, right.argument, props, report);
        } else if (left.type === "ObjectPattern" && right.type === "ObjectExpression" && right.properties.length >= 1) {
          let startJ = 0;
          for (let i = right.properties.length - 1; i >= 0; --i) {
            const propType = right.properties[i].type;
            if (propType === "SpreadElement" || propType === "ExperimentalSpreadProperty") {
              startJ = i + 1;
              break;
            }
          }
          for (let i = 0; i < left.properties.length; ++i) {
            for (let j = startJ; j < right.properties.length; ++j) {
              eachSelfAssignment(left.properties[i], right.properties[j], props, report);
            }
          }
        } else if (left.type === "Property" && right.type === "Property" && right.kind === "init" && !right.method) {
          const leftName = astUtils$r.getStaticPropertyName(left);
          if (leftName !== null && leftName === astUtils$r.getStaticPropertyName(right)) {
            eachSelfAssignment(left.value, right.value, props, report);
          }
        } else if (props && astUtils$r.skipChainExpression(left).type === "MemberExpression" && astUtils$r.skipChainExpression(right).type === "MemberExpression" && astUtils$r.isSameReference(left, right)) {
          report(right);
        }
      }
      exports$S = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow assignments where both sides are exactly the same",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-self-assign"
          },
          schema: [{
              type: "object",
              properties: {
                props: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { selfAssignment: "'{{name}}' is assigned to itself." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const [{
              props = true
            } = {}] = context.options;
          function report(node) {
            context.report({
              node,
              messageId: "selfAssignment",
              data: { name: sourceCode.getText(node).replace(SPACES, "") }
            });
          }
          return {
            AssignmentExpression(node) {
              if (node.operator === "=") {
                eachSelfAssignment(node.left, node.right, props, report);
              }
            }
          };
        }
      };
      var _noSelfAssign = exports$S;
      var exports$R = {};
      exports$R = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow comparisons where both sides are exactly the same",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-self-compare"
          },
          schema: [],
          messages: { comparingToSelf: "Comparing to itself is potentially pointless." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function hasSameTokens(nodeA, nodeB) {
            const tokensA = sourceCode.getTokens(nodeA);
            const tokensB = sourceCode.getTokens(nodeB);
            return tokensA.length === tokensB.length && tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);
          }
          return {
            BinaryExpression(node) {
              const operators = new Set([
                "===",
                "==",
                "!==",
                "!=",
                ">",
                "<",
                ">=",
                "<="
              ]);
              if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {
                context.report({
                  node,
                  messageId: "comparingToSelf"
                });
              }
            }
          };
        }
      };
      var _noSelfCompare = exports$R;
      var exports$Q = {};
      const astUtils$q = _astUtils;
      const DEFAULT_OPTIONS = { allowInParentheses: true };
      exports$Q = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow comma operators",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-sequences"
          },
          schema: [{
              properties: {
                allowInParentheses: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedCommaExpression: "Unexpected use of comma operator." }
        },
        create(context) {
          const options = Object.assign({}, DEFAULT_OPTIONS, context.options[0]);
          const sourceCode = context.getSourceCode();
          const parenthesized = {
            DoWhileStatement: "test",
            IfStatement: "test",
            SwitchStatement: "discriminant",
            WhileStatement: "test",
            WithStatement: "object",
            ArrowFunctionExpression: "body"
          };
          function requiresExtraParens(node) {
            return node.parent && parenthesized[node.parent.type] && node === node.parent[parenthesized[node.parent.type]];
          }
          function isParenthesised(node) {
            return astUtils$q.isParenthesised(sourceCode, node);
          }
          function isParenthesisedTwice(node) {
            const previousToken = sourceCode.getTokenBefore(node, 1), nextToken = sourceCode.getTokenAfter(node, 1);
            return isParenthesised(node) && previousToken && nextToken && astUtils$q.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] && astUtils$q.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];
          }
          return {
            SequenceExpression(node) {
              if (node.parent.type === "ForStatement" && (node === node.parent.init || node === node.parent.update)) {
                return;
              }
              if (options.allowInParentheses) {
                if (requiresExtraParens(node)) {
                  if (isParenthesisedTwice(node)) {
                    return;
                  }
                } else {
                  if (isParenthesised(node)) {
                    return;
                  }
                }
              }
              const firstCommaToken = sourceCode.getTokenAfter(node.expressions[0], astUtils$q.isCommaToken);
              context.report({
                node,
                loc: firstCommaToken.loc,
                messageId: "unexpectedCommaExpression"
              });
            }
          };
        }
      };
      var _noSequences = exports$Q;
      var _eslintUtils$6 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$P = {};
      const astUtils$p = _astUtils;
      const {findVariable: findVariable$1} = _eslintUtils$6;
      function isGlobalReference(node, scope) {
        const variable = findVariable$1(scope, node);
        return variable !== null && variable.scope.type === "global" && variable.defs.length === 0;
      }
      function isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {
        const callNode = node.parent;
        return callNode.type === "CallExpression" && callNode.arguments[index] === node && astUtils$p.isSpecificMemberAccess(callNode.callee, objectName, methodName) && isGlobalReference(astUtils$p.skipChainExpression(callNode.callee).object, scope);
      }
      function isPropertyDescriptor(node, scope) {
        if (isArgumentOfGlobalMethodCall(node, scope, "Object", "defineProperty", 2) || isArgumentOfGlobalMethodCall(node, scope, "Reflect", "defineProperty", 2)) {
          return true;
        }
        const parent = node.parent;
        if (parent.type === "Property" && parent.value === node) {
          const grandparent = parent.parent;
          if (grandparent.type === "ObjectExpression" && (isArgumentOfGlobalMethodCall(grandparent, scope, "Object", "create", 1) || isArgumentOfGlobalMethodCall(grandparent, scope, "Object", "defineProperties", 1))) {
            return true;
          }
        }
        return false;
      }
      function isSetter(node, scope) {
        const parent = node.parent;
        if (parent.kind === "set" && parent.value === node) {
          return true;
        }
        if (parent.type === "Property" && parent.value === node && astUtils$p.getStaticPropertyName(parent) === "set" && parent.parent.type === "ObjectExpression" && isPropertyDescriptor(parent.parent, scope)) {
          return true;
        }
        return false;
      }
      function getOuterScope(scope) {
        const upper = scope.upper;
        if (upper.type === "function-expression-name") {
          return upper.upper;
        }
        return upper;
      }
      exports$P = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow returning values from setters",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-setter-return"
          },
          schema: [],
          messages: { returnsValue: "Setter cannot return a value." }
        },
        create(context) {
          let funcInfo = null;
          function enterFunction(node) {
            const outerScope = getOuterScope(context.getScope());
            funcInfo = {
              upper: funcInfo,
              isSetter: isSetter(node, outerScope)
            };
          }
          function exitFunction() {
            funcInfo = funcInfo.upper;
          }
          function report(node) {
            context.report({
              node,
              messageId: "returnsValue"
            });
          }
          return {
            FunctionDeclaration: enterFunction,
            FunctionExpression: enterFunction,
            ArrowFunctionExpression(node) {
              enterFunction(node);
              if (funcInfo.isSetter && node.expression) {
                report(node.body);
              }
            },
            "FunctionDeclaration:exit": exitFunction,
            "FunctionExpression:exit": exitFunction,
            "ArrowFunctionExpression:exit": exitFunction,
            ReturnStatement(node) {
              if (funcInfo && funcInfo.isSetter && node.argument) {
                report(node);
              }
            }
          };
        }
      };
      var _noSetterReturn = exports$P;
      var exports$O = {};
      function safelyShadowsUndefined(variable) {
        return variable.name === "undefined" && variable.references.every(ref => !ref.isWrite()) && variable.defs.every(def => def.node.type === "VariableDeclarator" && def.node.init === null);
      }
      exports$O = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow identifiers from shadowing restricted names",
            category: "Variables",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-shadow-restricted-names"
          },
          schema: [],
          messages: { shadowingRestrictedName: "Shadowing of global property '{{name}}'." }
        },
        create(context) {
          const RESTRICTED = new Set([
            "undefined",
            "NaN",
            "Infinity",
            "arguments",
            "eval"
          ]);
          return {
            "VariableDeclaration, :function, CatchClause"(node) {
              for (const variable of context.getDeclaredVariables(node)) {
                if (variable.defs.length > 0 && RESTRICTED.has(variable.name) && !safelyShadowsUndefined(variable)) {
                  context.report({
                    node: variable.defs[0].name,
                    messageId: "shadowingRestrictedName",
                    data: { name: variable.name }
                  });
                }
              }
            }
          };
        }
      };
      var _noShadowRestrictedNames = exports$O;
      var exports$N = {};
      exports$N = {
        meta: {
          type: "layout",
          docs: {
            description: "disallow spacing between function identifiers and their applications (deprecated)",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-spaced-func"
          },
          deprecated: true,
          replacedBy: ["func-call-spacing"],
          fixable: "whitespace",
          schema: [],
          messages: { noSpacedFunction: "Unexpected space between function name and paren." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function detectOpenSpaces(node) {
            const lastCalleeToken = sourceCode.getLastToken(node.callee);
            let prevToken = lastCalleeToken, parenToken = sourceCode.getTokenAfter(lastCalleeToken);
            while (parenToken && parenToken.range[1] < node.range[1] && parenToken.value !== "(") {
              prevToken = parenToken;
              parenToken = sourceCode.getTokenAfter(parenToken);
            }
            if (parenToken && parenToken.range[1] < node.range[1] && sourceCode.isSpaceBetweenTokens(prevToken, parenToken)) {
              context.report({
                node,
                loc: lastCalleeToken.loc.start,
                messageId: "noSpacedFunction",
                fix(fixer) {
                  return fixer.removeRange([
                    prevToken.range[1],
                    parenToken.range[0]
                  ]);
                }
              });
            }
          }
          return {
            CallExpression: detectOpenSpaces,
            NewExpression: detectOpenSpaces
          };
        }
      };
      var _noSpacedFunc = exports$N;
      var exports$M = {};
      exports$M = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow template literal placeholder syntax in regular strings",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-template-curly-in-string"
          },
          schema: [],
          messages: { unexpectedTemplateExpression: "Unexpected template string expression." }
        },
        create(context) {
          const regex = /\$\{[^}]+\}/u;
          return {
            Literal(node) {
              if (typeof node.value === "string" && regex.test(node.value)) {
                context.report({
                  node,
                  messageId: "unexpectedTemplateExpression"
                });
              }
            }
          };
        }
      };
      var _noTemplateCurlyInString = exports$M;
      var exports$L = {};
      exports$L = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow ternary operators",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-ternary"
          },
          schema: [],
          messages: { noTernaryOperator: "Ternary operator used." }
        },
        create(context) {
          return {
            ConditionalExpression(node) {
              context.report({
                node,
                messageId: "noTernaryOperator"
              });
            }
          };
        }
      };
      var _noTernary = exports$L;
      var exports$K = {};
      const astUtils$o = _astUtils;
      function isConstructorFunction(node) {
        return node.type === "FunctionExpression" && node.parent.type === "MethodDefinition" && node.parent.kind === "constructor";
      }
      exports$K = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow `this`/`super` before calling `super()` in constructors",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-this-before-super"
          },
          schema: [],
          messages: { noBeforeSuper: "'{{kind}}' is not allowed before 'super()'." }
        },
        create(context) {
          let funcInfo = null;
          let segInfoMap = Object.create(null);
          function isCalled(segment) {
            return !segment.reachable || segInfoMap[segment.id].superCalled;
          }
          function isInConstructorOfDerivedClass() {
            return Boolean(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends);
          }
          function isBeforeCallOfSuper() {
            return isInConstructorOfDerivedClass() && !funcInfo.codePath.currentSegments.every(isCalled);
          }
          function setInvalid(node) {
            const segments = funcInfo.codePath.currentSegments;
            for (let i = 0; i < segments.length; ++i) {
              const segment = segments[i];
              if (segment.reachable) {
                segInfoMap[segment.id].invalidNodes.push(node);
              }
            }
          }
          function setSuperCalled() {
            const segments = funcInfo.codePath.currentSegments;
            for (let i = 0; i < segments.length; ++i) {
              const segment = segments[i];
              if (segment.reachable) {
                segInfoMap[segment.id].superCalled = true;
              }
            }
          }
          return {
            onCodePathStart(codePath, node) {
              if (isConstructorFunction(node)) {
                const classNode = node.parent.parent.parent;
                funcInfo = {
                  upper: funcInfo,
                  isConstructor: true,
                  hasExtends: Boolean(classNode.superClass && !astUtils$o.isNullOrUndefined(classNode.superClass)),
                  codePath
                };
              } else {
                funcInfo = {
                  upper: funcInfo,
                  isConstructor: false,
                  hasExtends: false,
                  codePath
                };
              }
            },
            onCodePathEnd(codePath) {
              const isDerivedClass = funcInfo.hasExtends;
              funcInfo = funcInfo.upper;
              if (!isDerivedClass) {
                return;
              }
              codePath.traverseSegments((segment, controller) => {
                const info = segInfoMap[segment.id];
                for (let i = 0; i < info.invalidNodes.length; ++i) {
                  const invalidNode = info.invalidNodes[i];
                  context.report({
                    messageId: "noBeforeSuper",
                    node: invalidNode,
                    data: { kind: invalidNode.type === "Super" ? "super" : "this" }
                  });
                }
                if (info.superCalled) {
                  controller.skip();
                }
              });
            },
            onCodePathSegmentStart(segment) {
              if (!isInConstructorOfDerivedClass()) {
                return;
              }
              segInfoMap[segment.id] = {
                superCalled: segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled),
                invalidNodes: []
              };
            },
            onCodePathSegmentLoop(fromSegment, toSegment) {
              if (!isInConstructorOfDerivedClass()) {
                return;
              }
              funcInfo.codePath.traverseSegments({
                first: toSegment,
                last: fromSegment
              }, (segment, controller) => {
                const info = segInfoMap[segment.id];
                if (info.superCalled) {
                  info.invalidNodes = [];
                  controller.skip();
                } else if (segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled)) {
                  info.superCalled = true;
                  info.invalidNodes = [];
                }
              });
            },
            ThisExpression(node) {
              if (isBeforeCallOfSuper()) {
                setInvalid(node);
              }
            },
            Super(node) {
              if (!astUtils$o.isCallee(node) && isBeforeCallOfSuper()) {
                setInvalid(node);
              }
            },
            "CallExpression:exit"(node) {
              if (node.callee.type === "Super" && isBeforeCallOfSuper()) {
                setSuperCalled();
              }
            },
            "Program:exit"() {
              segInfoMap = Object.create(null);
            }
          };
        }
      };
      var _noThisBeforeSuper = exports$K;
      var exports$J = {};
      const astUtils$n = _astUtils;
      exports$J = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow initializing variables to `undefined`",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-undef-init"
          },
          schema: [],
          fixable: "code",
          messages: { unnecessaryUndefinedInit: "It's not necessary to initialize '{{name}}' to undefined." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            VariableDeclarator(node) {
              const name = sourceCode.getText(node.id), init = node.init && node.init.name, scope = context.getScope(), undefinedVar = astUtils$n.getVariableByName(scope, "undefined"), shadowed = undefinedVar && undefinedVar.defs.length > 0, lastToken = sourceCode.getLastToken(node);
              if (init === "undefined" && node.parent.kind !== "const" && !shadowed) {
                context.report({
                  node,
                  messageId: "unnecessaryUndefinedInit",
                  data: { name },
                  fix(fixer) {
                    if (node.parent.kind === "var") {
                      return null;
                    }
                    if (node.id.type === "ArrayPattern" || node.id.type === "ObjectPattern") {
                      return null;
                    }
                    if (sourceCode.commentsExistBetween(node.id, lastToken)) {
                      return null;
                    }
                    return fixer.removeRange([
                      node.id.range[1],
                      node.range[1]
                    ]);
                  }
                });
              }
            }
          };
        }
      };
      var _noUndefInit = exports$J;
      var exports$I = {};
      exports$I = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `undefined` as an identifier",
            category: "Variables",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-undefined"
          },
          schema: [],
          messages: { unexpectedUndefined: "Unexpected use of undefined." }
        },
        create(context) {
          function report(node) {
            context.report({
              node,
              messageId: "unexpectedUndefined"
            });
          }
          function checkScope(scope) {
            const undefinedVar = scope.set.get("undefined");
            if (!undefinedVar) {
              return;
            }
            const references = undefinedVar.references;
            const defs = undefinedVar.defs;
            references.filter(ref => !ref.init).forEach(ref => report(ref.identifier));
            defs.forEach(def => report(def.name));
          }
          return {
            "Program:exit"() {
              const globalScope = context.getScope();
              const stack = [globalScope];
              while (stack.length) {
                const scope = stack.pop();
                stack.push(...scope.childScopes);
                checkScope(scope);
              }
            }
          };
        }
      };
      var _noUndefined = exports$I;
      var exports$H = {};
      exports$H = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow dangling underscores in identifiers",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-underscore-dangle"
          },
          schema: [{
              type: "object",
              properties: {
                allow: {
                  type: "array",
                  items: { type: "string" }
                },
                allowAfterThis: {
                  type: "boolean",
                  default: false
                },
                allowAfterSuper: {
                  type: "boolean",
                  default: false
                },
                allowAfterThisConstructor: {
                  type: "boolean",
                  default: false
                },
                enforceInMethodNames: {
                  type: "boolean",
                  default: false
                },
                allowFunctionParams: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: { unexpectedUnderscore: "Unexpected dangling '_' in '{{identifier}}'." }
        },
        create(context) {
          const options = context.options[0] || {};
          const ALLOWED_VARIABLES = options.allow ? options.allow : [];
          const allowAfterThis = typeof options.allowAfterThis !== "undefined" ? options.allowAfterThis : false;
          const allowAfterSuper = typeof options.allowAfterSuper !== "undefined" ? options.allowAfterSuper : false;
          const allowAfterThisConstructor = typeof options.allowAfterThisConstructor !== "undefined" ? options.allowAfterThisConstructor : false;
          const enforceInMethodNames = typeof options.enforceInMethodNames !== "undefined" ? options.enforceInMethodNames : false;
          const allowFunctionParams = typeof options.allowFunctionParams !== "undefined" ? options.allowFunctionParams : true;
          function isAllowed(identifier) {
            return ALLOWED_VARIABLES.some(ident => ident === identifier);
          }
          function hasDanglingUnderscore(identifier) {
            const len = identifier.length;
            return identifier !== "_" && (identifier[0] === "_" || identifier[len - 1] === "_");
          }
          function isSpecialCaseIdentifierForMemberExpression(identifier) {
            return identifier === "__proto__";
          }
          function isSpecialCaseIdentifierInVariableExpression(identifier) {
            return identifier === "_";
          }
          function isThisConstructorReference(node) {
            return node.object.type === "MemberExpression" && node.object.property.name === "constructor" && node.object.object.type === "ThisExpression";
          }
          function checkForDanglingUnderscoreInFunctionParameters(node) {
            if (!allowFunctionParams) {
              node.params.forEach(param => {
                const {type} = param;
                let nodeToCheck;
                if (type === "RestElement") {
                  nodeToCheck = param.argument;
                } else if (type === "AssignmentPattern") {
                  nodeToCheck = param.left;
                } else {
                  nodeToCheck = param;
                }
                if (nodeToCheck.type === "Identifier") {
                  const identifier = nodeToCheck.name;
                  if (hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {
                    context.report({
                      node: param,
                      messageId: "unexpectedUnderscore",
                      data: { identifier }
                    });
                  }
                }
              });
            }
          }
          function checkForDanglingUnderscoreInFunction(node) {
            if (node.type === "FunctionDeclaration" && node.id) {
              const identifier = node.id.name;
              if (typeof identifier !== "undefined" && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {
                context.report({
                  node,
                  messageId: "unexpectedUnderscore",
                  data: { identifier }
                });
              }
            }
            checkForDanglingUnderscoreInFunctionParameters(node);
          }
          function checkForDanglingUnderscoreInVariableExpression(node) {
            const identifier = node.id.name;
            if (typeof identifier !== "undefined" && hasDanglingUnderscore(identifier) && !isSpecialCaseIdentifierInVariableExpression(identifier) && !isAllowed(identifier)) {
              context.report({
                node,
                messageId: "unexpectedUnderscore",
                data: { identifier }
              });
            }
          }
          function checkForDanglingUnderscoreInMemberExpression(node) {
            const identifier = node.property.name, isMemberOfThis = node.object.type === "ThisExpression", isMemberOfSuper = node.object.type === "Super", isMemberOfThisConstructor = isThisConstructorReference(node);
            if (typeof identifier !== "undefined" && hasDanglingUnderscore(identifier) && !(isMemberOfThis && allowAfterThis) && !(isMemberOfSuper && allowAfterSuper) && !(isMemberOfThisConstructor && allowAfterThisConstructor) && !isSpecialCaseIdentifierForMemberExpression(identifier) && !isAllowed(identifier)) {
              context.report({
                node,
                messageId: "unexpectedUnderscore",
                data: { identifier }
              });
            }
          }
          function checkForDanglingUnderscoreInMethod(node) {
            const identifier = node.key.name;
            const isMethod = node.type === "MethodDefinition" || node.type === "Property" && node.method;
            if (typeof identifier !== "undefined" && enforceInMethodNames && isMethod && hasDanglingUnderscore(identifier) && !isAllowed(identifier)) {
              context.report({
                node,
                messageId: "unexpectedUnderscore",
                data: { identifier }
              });
            }
          }
          return {
            FunctionDeclaration: checkForDanglingUnderscoreInFunction,
            VariableDeclarator: checkForDanglingUnderscoreInVariableExpression,
            MemberExpression: checkForDanglingUnderscoreInMemberExpression,
            MethodDefinition: checkForDanglingUnderscoreInMethod,
            Property: checkForDanglingUnderscoreInMethod,
            FunctionExpression: checkForDanglingUnderscoreInFunction,
            ArrowFunctionExpression: checkForDanglingUnderscoreInFunction
          };
        }
      };
      var _noUnderscoreDangle = exports$H;
      var exports$G = {};
      const astUtils$m = _astUtils;
      exports$G = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow confusing multiline expressions",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unexpected-multiline"
          },
          schema: [],
          messages: {
            function: "Unexpected newline between function and ( of function call.",
            property: "Unexpected newline between object and [ of property access.",
            taggedTemplate: "Unexpected newline between template tag and template literal.",
            division: "Unexpected newline between numerator and division operator."
          }
        },
        create(context) {
          const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;
          const sourceCode = context.getSourceCode();
          function checkForBreakAfter(node, messageId) {
            const openParen = sourceCode.getTokenAfter(node, astUtils$m.isNotClosingParenToken);
            const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);
            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {
              context.report({
                node,
                loc: openParen.loc,
                messageId
              });
            }
          }
          return {
            MemberExpression(node) {
              if (!node.computed || node.optional) {
                return;
              }
              checkForBreakAfter(node.object, "property");
            },
            TaggedTemplateExpression(node) {
              const {quasi} = node;
              const tokenBefore = sourceCode.getTokenBefore(quasi);
              if (tokenBefore.loc.end.line !== quasi.loc.start.line) {
                context.report({
                  node,
                  loc: {
                    start: quasi.loc.start,
                    end: {
                      line: quasi.loc.start.line,
                      column: quasi.loc.start.column + 1
                    }
                  },
                  messageId: "taggedTemplate"
                });
              }
            },
            CallExpression(node) {
              if (node.arguments.length === 0 || node.optional) {
                return;
              }
              checkForBreakAfter(node.callee, "function");
            },
            "BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left"(node) {
              const secondSlash = sourceCode.getTokenAfter(node, token => token.value === "/");
              const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);
              if (tokenAfterOperator.type === "Identifier" && REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) && secondSlash.range[1] === tokenAfterOperator.range[0]) {
                checkForBreakAfter(node.left, "division");
              }
            }
          };
        }
      };
      var _noUnexpectedMultiline = exports$G;
      var exports$F = {};
      const Traverser$2 = _traverser, astUtils$l = _astUtils;
      const SENTINEL_PATTERN = /(?:(?:Call|Class|Function|Member|New|Yield)Expression|Statement|Declaration)$/u;
      const LOOP_PATTERN = /^(?:DoWhile|For|While)Statement$/u;
      const GROUP_PATTERN = /^(?:BinaryExpression|ConditionalExpression)$/u;
      const SKIP_PATTERN = /^(?:ArrowFunction|Class|Function)Expression$/u;
      const DYNAMIC_PATTERN = /^(?:Call|Member|New|TaggedTemplate|Yield)Expression$/u;
      function isWriteReference(reference) {
        if (reference.init) {
          const def = reference.resolved && reference.resolved.defs[0];
          if (!def || def.type !== "Variable" || def.parent.kind !== "var") {
            return false;
          }
        }
        return reference.isWrite();
      }
      function isUnmodified(condition) {
        return !condition.modified;
      }
      function isUnmodifiedAndNotBelongToGroup(condition) {
        return !(condition.modified || condition.group);
      }
      function isInRange(node, reference) {
        const or = node.range;
        const ir = reference.identifier.range;
        return or[0] <= ir[0] && ir[1] <= or[1];
      }
      const isInLoop = {
        WhileStatement: isInRange,
        DoWhileStatement: isInRange,
        ForStatement(node, reference) {
          return isInRange(node, reference) && !(node.init && isInRange(node.init, reference));
        }
      };
      function getEncloseFunctionDeclaration(reference) {
        let node = reference.identifier;
        while (node) {
          if (node.type === "FunctionDeclaration") {
            return node.id ? node : null;
          }
          node = node.parent;
        }
        return null;
      }
      function updateModifiedFlag(conditions, modifiers) {
        for (let i = 0; i < conditions.length; ++i) {
          const condition = conditions[i];
          for (let j = 0; !condition.modified && j < modifiers.length; ++j) {
            const modifier = modifiers[j];
            let funcNode, funcVar;
            const inLoop = condition.isInLoop(modifier) || Boolean((funcNode = getEncloseFunctionDeclaration(modifier)) && (funcVar = astUtils$l.getVariableByName(modifier.from.upper, funcNode.id.name)) && funcVar.references.some(condition.isInLoop));
            condition.modified = inLoop;
          }
        }
      }
      exports$F = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow unmodified loop conditions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-unmodified-loop-condition"
          },
          schema: [],
          messages: { loopConditionNotModified: "'{{name}}' is not modified in this loop." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let groupMap = null;
          function report(condition) {
            const node = condition.reference.identifier;
            context.report({
              node,
              messageId: "loopConditionNotModified",
              data: node
            });
          }
          function registerConditionsToGroup(conditions) {
            for (let i = 0; i < conditions.length; ++i) {
              const condition = conditions[i];
              if (condition.group) {
                let group = groupMap.get(condition.group);
                if (!group) {
                  group = [];
                  groupMap.set(condition.group, group);
                }
                group.push(condition);
              }
            }
          }
          function checkConditionsInGroup(conditions) {
            if (conditions.every(isUnmodified)) {
              conditions.forEach(report);
            }
          }
          function hasDynamicExpressions(root) {
            let retv = false;
            Traverser$2.traverse(root, {
              visitorKeys: sourceCode.visitorKeys,
              enter(node) {
                if (DYNAMIC_PATTERN.test(node.type)) {
                  retv = true;
                  this.break();
                } else if (SKIP_PATTERN.test(node.type)) {
                  this.skip();
                }
              }
            });
            return retv;
          }
          function toLoopCondition(reference) {
            if (reference.init) {
              return null;
            }
            let group = null;
            let child = reference.identifier;
            let node = child.parent;
            while (node) {
              if (SENTINEL_PATTERN.test(node.type)) {
                if (LOOP_PATTERN.test(node.type) && node.test === child) {
                  return {
                    reference,
                    group,
                    isInLoop: isInLoop[node.type].bind(null, node),
                    modified: false
                  };
                }
                break;
              }
              if (GROUP_PATTERN.test(node.type)) {
                if (hasDynamicExpressions(node)) {
                  break;
                } else {
                  group = node;
                }
              }
              child = node;
              node = node.parent;
            }
            return null;
          }
          function checkReferences(variable) {
            const conditions = variable.references.map(toLoopCondition).filter(Boolean);
            if (conditions.length === 0) {
              return;
            }
            registerConditionsToGroup(conditions);
            const modifiers = variable.references.filter(isWriteReference);
            if (modifiers.length > 0) {
              updateModifiedFlag(conditions, modifiers);
            }
            conditions.filter(isUnmodifiedAndNotBelongToGroup).forEach(report);
          }
          return {
            "Program:exit"() {
              const queue = [context.getScope()];
              groupMap = new Map();
              let scope;
              while (scope = queue.pop()) {
                queue.push(...scope.childScopes);
                scope.variables.forEach(checkReferences);
              }
              groupMap.forEach(checkConditionsInGroup);
              groupMap = null;
            }
          };
        }
      };
      var _noUnmodifiedLoopCondition = exports$F;
      var exports$E = {};
      const astUtils$k = _astUtils;
      const BOOLEAN_OPERATORS = new Set([
        "==",
        "===",
        "!=",
        "!==",
        ">",
        ">=",
        "<",
        "<=",
        "in",
        "instanceof"
      ]);
      const OPERATOR_INVERSES = {
        "==": "!=",
        "!=": "==",
        "===": "!==",
        "!==": "==="
      };
      const OR_PRECEDENCE = astUtils$k.getPrecedence({
        type: "LogicalExpression",
        operator: "||"
      });
      exports$E = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow ternary operators when simpler alternatives exist",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-unneeded-ternary"
          },
          schema: [{
              type: "object",
              properties: {
                defaultAssignment: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: {
            unnecessaryConditionalExpression: "Unnecessary use of boolean literals in conditional expression.",
            unnecessaryConditionalAssignment: "Unnecessary use of conditional expression for default assignment."
          }
        },
        create(context) {
          const options = context.options[0] || {};
          const defaultAssignment = options.defaultAssignment !== false;
          const sourceCode = context.getSourceCode();
          function isBooleanLiteral(node) {
            return node.type === "Literal" && typeof node.value === "boolean";
          }
          function invertExpression(node) {
            if (node.type === "BinaryExpression" && Object.prototype.hasOwnProperty.call(OPERATOR_INVERSES, node.operator)) {
              const operatorToken = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);
              const text = sourceCode.getText();
              return text.slice(node.range[0], operatorToken.range[0]) + OPERATOR_INVERSES[node.operator] + text.slice(operatorToken.range[1], node.range[1]);
            }
            if (astUtils$k.getPrecedence(node) < astUtils$k.getPrecedence({ type: "UnaryExpression" })) {
              return `!(${ astUtils$k.getParenthesisedText(sourceCode, node) })`;
            }
            return `!${ astUtils$k.getParenthesisedText(sourceCode, node) }`;
          }
          function isBooleanExpression(node) {
            return node.type === "BinaryExpression" && BOOLEAN_OPERATORS.has(node.operator) || node.type === "UnaryExpression" && node.operator === "!";
          }
          function matchesDefaultAssignment(node) {
            return node.test.type === "Identifier" && node.consequent.type === "Identifier" && node.test.name === node.consequent.name;
          }
          return {
            ConditionalExpression(node) {
              if (isBooleanLiteral(node.alternate) && isBooleanLiteral(node.consequent)) {
                context.report({
                  node,
                  messageId: "unnecessaryConditionalExpression",
                  fix(fixer) {
                    if (node.consequent.value === node.alternate.value) {
                      return node.test.type === "Identifier" ? fixer.replaceText(node, node.consequent.value.toString()) : null;
                    }
                    if (node.alternate.value) {
                      return fixer.replaceText(node, invertExpression(node.test));
                    }
                    return fixer.replaceText(node, isBooleanExpression(node.test) ? astUtils$k.getParenthesisedText(sourceCode, node.test) : `!${ invertExpression(node.test) }`);
                  }
                });
              } else if (!defaultAssignment && matchesDefaultAssignment(node)) {
                context.report({
                  node,
                  messageId: "unnecessaryConditionalAssignment",
                  fix: fixer => {
                    const shouldParenthesizeAlternate = (astUtils$k.getPrecedence(node.alternate) < OR_PRECEDENCE || astUtils$k.isCoalesceExpression(node.alternate)) && !astUtils$k.isParenthesised(sourceCode, node.alternate);
                    const alternateText = shouldParenthesizeAlternate ? `(${ sourceCode.getText(node.alternate) })` : astUtils$k.getParenthesisedText(sourceCode, node.alternate);
                    const testText = astUtils$k.getParenthesisedText(sourceCode, node.test);
                    return fixer.replaceText(node, `${ testText } || ${ alternateText }`);
                  }
                });
              }
            }
          };
        }
      };
      var _noUnneededTernary = exports$E;
      var exports$D = {};
      const allLoopTypes = [
        "WhileStatement",
        "DoWhileStatement",
        "ForStatement",
        "ForInStatement",
        "ForOfStatement"
      ];
      function isLoopingTarget(node) {
        const parent = node.parent;
        if (parent) {
          switch (parent.type) {
          case "WhileStatement":
            return node === parent.test;
          case "DoWhileStatement":
            return node === parent.body;
          case "ForStatement":
            return node === (parent.update || parent.test || parent.body);
          case "ForInStatement":
          case "ForOfStatement":
            return node === parent.left;
          }
        }
        return false;
      }
      function getDifference(arrA, arrB) {
        return arrA.filter(a => !arrB.includes(a));
      }
      exports$D = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow loops with a body that allows only one iteration",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-unreachable-loop"
          },
          schema: [{
              type: "object",
              properties: {
                ignore: {
                  type: "array",
                  items: { enum: allLoopTypes },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { invalid: "Invalid loop. Its body allows only one iteration." }
        },
        create(context) {
          const ignoredLoopTypes = context.options[0] && context.options[0].ignore || [], loopTypesToCheck = getDifference(allLoopTypes, ignoredLoopTypes), loopSelector = loopTypesToCheck.join(","), loopsByTargetSegments = new Map(), loopsToReport = new Set();
          let currentCodePath = null;
          return {
            onCodePathStart(codePath) {
              currentCodePath = codePath;
            },
            onCodePathEnd() {
              currentCodePath = currentCodePath.upper;
            },
            [loopSelector](node) {
              if (currentCodePath.currentSegments.some(segment => segment.reachable)) {
                loopsToReport.add(node);
              }
            },
            onCodePathSegmentStart(segment, node) {
              if (isLoopingTarget(node)) {
                const loop = node.parent;
                loopsByTargetSegments.set(segment, loop);
              }
            },
            onCodePathSegmentLoop(_, toSegment, node) {
              const loop = loopsByTargetSegments.get(toSegment);
              if (node === loop || node.type === "ContinueStatement") {
                loopsToReport.delete(loop);
              }
            },
            "Program:exit"() {
              loopsToReport.forEach(node => context.report({
                node,
                messageId: "invalid"
              }));
            }
          };
        }
      };
      var _noUnreachableLoop = exports$D;
      var exports$C = {};
      const astUtils$j = _astUtils;
      function isInOrInstanceOfOperator(op) {
        return op === "in" || op === "instanceof";
      }
      function isOrderingRelationalOperator(op) {
        return op === "<" || op === ">" || op === ">=" || op === "<=";
      }
      function isNegation(node) {
        return node.type === "UnaryExpression" && node.operator === "!";
      }
      exports$C = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow negating the left operand of relational operators",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unsafe-negation",
            suggestion: true
          },
          schema: [{
              type: "object",
              properties: {
                enforceForOrderingRelations: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: null,
          messages: {
            unexpected: "Unexpected negating the left operand of '{{operator}}' operator.",
            suggestNegatedExpression: "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
            suggestParenthesisedNegation: "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const options = context.options[0] || {};
          const enforceForOrderingRelations = options.enforceForOrderingRelations === true;
          return {
            BinaryExpression(node) {
              const operator = node.operator;
              const orderingRelationRuleApplies = enforceForOrderingRelations && isOrderingRelationalOperator(operator);
              if ((isInOrInstanceOfOperator(operator) || orderingRelationRuleApplies) && isNegation(node.left) && !astUtils$j.isParenthesised(sourceCode, node.left)) {
                context.report({
                  node,
                  loc: node.left.loc,
                  messageId: "unexpected",
                  data: { operator },
                  suggest: [
                    {
                      messageId: "suggestNegatedExpression",
                      data: { operator },
                      fix(fixer) {
                        const negationToken = sourceCode.getFirstToken(node.left);
                        const fixRange = [
                          negationToken.range[1],
                          node.range[1]
                        ];
                        const text = sourceCode.text.slice(fixRange[0], fixRange[1]);
                        return fixer.replaceTextRange(fixRange, `(${ text })`);
                      }
                    },
                    {
                      messageId: "suggestParenthesisedNegation",
                      fix(fixer) {
                        return fixer.replaceText(node.left, `(${ sourceCode.getText(node.left) })`);
                      }
                    }
                  ]
                });
              }
            }
          };
        }
      };
      var _noUnsafeNegation = exports$C;
      var exports$B = {};
      const UNSAFE_ARITHMETIC_OPERATORS = new Set([
        "+",
        "-",
        "/",
        "*",
        "%",
        "**"
      ]);
      const UNSAFE_ASSIGNMENT_OPERATORS = new Set([
        "+=",
        "-=",
        "/=",
        "*=",
        "%=",
        "**="
      ]);
      const UNSAFE_RELATIONAL_OPERATORS = new Set([
        "in",
        "instanceof"
      ]);
      function isDestructuringPattern(node) {
        return node.type === "ObjectPattern" || node.type === "ArrayPattern";
      }
      exports$B = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow use of optional chaining in contexts where the `undefined` value is not allowed",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-unsafe-optional-chaining"
          },
          schema: [{
              type: "object",
              properties: {
                disallowArithmeticOperators: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: null,
          messages: {
            unsafeOptionalChain: "Unsafe usage of optional chaining. If it short-circuits with 'undefined' the evaluation will throw TypeError.",
            unsafeArithmetic: "Unsafe arithmetic operation on optional chaining. It can result in NaN."
          }
        },
        create(context) {
          const options = context.options[0] || {};
          const disallowArithmeticOperators = options.disallowArithmeticOperators || false;
          function reportUnsafeUsage(node) {
            context.report({
              messageId: "unsafeOptionalChain",
              node
            });
          }
          function reportUnsafeArithmetic(node) {
            context.report({
              messageId: "unsafeArithmetic",
              node
            });
          }
          function checkUndefinedShortCircuit(node, reportFunc) {
            if (!node) {
              return;
            }
            switch (node.type) {
            case "LogicalExpression":
              if (node.operator === "||" || node.operator === "??") {
                checkUndefinedShortCircuit(node.right, reportFunc);
              } else if (node.operator === "&&") {
                checkUndefinedShortCircuit(node.left, reportFunc);
                checkUndefinedShortCircuit(node.right, reportFunc);
              }
              break;
            case "SequenceExpression":
              checkUndefinedShortCircuit(node.expressions[node.expressions.length - 1], reportFunc);
              break;
            case "ConditionalExpression":
              checkUndefinedShortCircuit(node.consequent, reportFunc);
              checkUndefinedShortCircuit(node.alternate, reportFunc);
              break;
            case "AwaitExpression":
              checkUndefinedShortCircuit(node.argument, reportFunc);
              break;
            case "ChainExpression":
              reportFunc(node);
              break;
            }
          }
          function checkUnsafeUsage(node) {
            checkUndefinedShortCircuit(node, reportUnsafeUsage);
          }
          function checkUnsafeArithmetic(node) {
            checkUndefinedShortCircuit(node, reportUnsafeArithmetic);
          }
          return {
            "AssignmentExpression, AssignmentPattern"(node) {
              if (isDestructuringPattern(node.left)) {
                checkUnsafeUsage(node.right);
              }
            },
            "ClassDeclaration, ClassExpression"(node) {
              checkUnsafeUsage(node.superClass);
            },
            CallExpression(node) {
              if (!node.optional) {
                checkUnsafeUsage(node.callee);
              }
            },
            NewExpression(node) {
              checkUnsafeUsage(node.callee);
            },
            VariableDeclarator(node) {
              if (isDestructuringPattern(node.id)) {
                checkUnsafeUsage(node.init);
              }
            },
            MemberExpression(node) {
              if (!node.optional) {
                checkUnsafeUsage(node.object);
              }
            },
            TaggedTemplateExpression(node) {
              checkUnsafeUsage(node.tag);
            },
            ForOfStatement(node) {
              checkUnsafeUsage(node.right);
            },
            SpreadElement(node) {
              if (node.parent && node.parent.type !== "ObjectExpression") {
                checkUnsafeUsage(node.argument);
              }
            },
            BinaryExpression(node) {
              if (UNSAFE_RELATIONAL_OPERATORS.has(node.operator)) {
                checkUnsafeUsage(node.right);
              }
              if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)) {
                checkUnsafeArithmetic(node.right);
                checkUnsafeArithmetic(node.left);
              }
            },
            WithStatement(node) {
              checkUnsafeUsage(node.object);
            },
            UnaryExpression(node) {
              if (disallowArithmeticOperators && UNSAFE_ARITHMETIC_OPERATORS.has(node.operator)) {
                checkUnsafeArithmetic(node.argument);
              }
            },
            AssignmentExpression(node) {
              if (disallowArithmeticOperators && UNSAFE_ASSIGNMENT_OPERATORS.has(node.operator)) {
                checkUnsafeArithmetic(node.right);
              }
            }
          };
        }
      };
      var _noUnsafeOptionalChaining = exports$B;
      var exports$A = {};
      exports$A = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow unused labels",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-unused-labels"
          },
          schema: [],
          fixable: "code",
          messages: { unused: "'{{name}}:' is defined but never used." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          let scopeInfo = null;
          function enterLabeledScope(node) {
            scopeInfo = {
              label: node.label.name,
              used: false,
              upper: scopeInfo
            };
          }
          function exitLabeledScope(node) {
            if (!scopeInfo.used) {
              context.report({
                node: node.label,
                messageId: "unused",
                data: node.label,
                fix(fixer) {
                  if (sourceCode.getTokenAfter(node.label, { includeComments: true }) === sourceCode.getTokenBefore(node.body, { includeComments: true })) {
                    return fixer.removeRange([
                      node.range[0],
                      node.body.range[0]
                    ]);
                  }
                  return null;
                }
              });
            }
            scopeInfo = scopeInfo.upper;
          }
          function markAsUsed(node) {
            if (!node.label) {
              return;
            }
            const label = node.label.name;
            let info = scopeInfo;
            while (info) {
              if (info.label === label) {
                info.used = true;
                break;
              }
              info = info.upper;
            }
          }
          return {
            LabeledStatement: enterLabeledScope,
            "LabeledStatement:exit": exitLabeledScope,
            BreakStatement: markAsUsed,
            ContinueStatement: markAsUsed
          };
        }
      };
      var _noUnusedLabels = exports$A;
      var _eslintUtils$5 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var _regexpp$1 = "default" in _regexpp2 ? exports$3J : _regexpp2;
      var exports$z = {};
      const {
        CALL: CALL$4,
        CONSTRUCT: CONSTRUCT$2,
        ReferenceTracker: ReferenceTracker$4,
        getStringIfConstant: getStringIfConstant$1
      } = _eslintUtils$5;
      const {RegExpParser, visitRegExpAST} = _regexpp$1;
      const parser$1 = new RegExpParser();
      function getPathToRoot(node) {
        const path = [];
        let current = node;
        do {
          path.push(current);
          current = current.parent;
        } while (current);
        return path;
      }
      function isLookaround(node) {
        return node.type === "Assertion" && (node.kind === "lookahead" || node.kind === "lookbehind");
      }
      function isNegativeLookaround(node) {
        return isLookaround(node) && node.negate;
      }
      exports$z = {
        meta: {
          type: "problem",
          docs: {
            description: "disallow useless backreferences in regular expressions",
            category: "Possible Errors",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-backreference"
          },
          schema: [],
          messages: {
            nested: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",
            forward: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",
            backward: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",
            disjunctive: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",
            intoNegativeLookaround: "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround."
          }
        },
        create(context) {
          function checkRegex(node, pattern, flags) {
            let regExpAST;
            try {
              regExpAST = parser$1.parsePattern(pattern, 0, pattern.length, flags.includes("u"));
            } catch {
              return;
            }
            visitRegExpAST(regExpAST, {
              onBackreferenceEnter(bref) {
                const group = bref.resolved, brefPath = getPathToRoot(bref), groupPath = getPathToRoot(group);
                let messageId = null;
                if (brefPath.includes(group)) {
                  messageId = "nested";
                } else {
                  let i = brefPath.length - 1, j = groupPath.length - 1;
                  do {
                    i--;
                    j--;
                  } while (brefPath[i] === groupPath[j]);
                  const indexOfLowestCommonAncestor = j + 1, groupCut = groupPath.slice(0, indexOfLowestCommonAncestor), commonPath = groupPath.slice(indexOfLowestCommonAncestor), lowestCommonLookaround = commonPath.find(isLookaround), isMatchingBackward = lowestCommonLookaround && lowestCommonLookaround.kind === "lookbehind";
                  if (!isMatchingBackward && bref.end <= group.start) {
                    messageId = "forward";
                  } else if (isMatchingBackward && group.end <= bref.start) {
                    messageId = "backward";
                  } else if (groupCut[groupCut.length - 1].type === "Alternative") {
                    messageId = "disjunctive";
                  } else if (groupCut.some(isNegativeLookaround)) {
                    messageId = "intoNegativeLookaround";
                  }
                }
                if (messageId) {
                  context.report({
                    node,
                    messageId,
                    data: {
                      bref: bref.raw,
                      group: group.raw
                    }
                  });
                }
              }
            });
          }
          return {
            "Literal[regex]"(node) {
              const {pattern, flags} = node.regex;
              checkRegex(node, pattern, flags);
            },
            Program() {
              const scope = context.getScope(), tracker = new ReferenceTracker$4(scope), traceMap = {
                  RegExp: {
                    [CALL$4]: true,
                    [CONSTRUCT$2]: true
                  }
                };
              for (const {node} of tracker.iterateGlobalReferences(traceMap)) {
                const [patternNode, flagsNode] = node.arguments, pattern = getStringIfConstant$1(patternNode, scope), flags = getStringIfConstant$1(flagsNode, scope);
                if (typeof pattern === "string") {
                  checkRegex(node, pattern, flags || "");
                }
              }
            }
          };
        }
      };
      var _noUselessBackreference = exports$z;
      var exports$y = {};
      const astUtils$i = _astUtils, FixTracker = _fixTracker;
      function remove(array, element) {
        const index = array.indexOf(element);
        if (index !== -1) {
          array.splice(index, 1);
        }
      }
      function isRemovable(node) {
        return astUtils$i.STATEMENT_LIST_PARENTS.has(node.parent.type);
      }
      function isInFinally(node) {
        for (let currentNode = node; currentNode && currentNode.parent && !astUtils$i.isFunction(currentNode); currentNode = currentNode.parent) {
          if (currentNode.parent.type === "TryStatement" && currentNode.parent.finalizer === currentNode) {
            return true;
          }
        }
        return false;
      }
      exports$y = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow redundant return statements",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-useless-return"
          },
          fixable: "code",
          schema: [],
          messages: { unnecessaryReturn: "Unnecessary return statement." }
        },
        create(context) {
          const segmentInfoMap = new WeakMap();
          const usedUnreachableSegments = new WeakSet();
          const sourceCode = context.getSourceCode();
          let scopeInfo = null;
          function isReturned(segment) {
            const info = segmentInfoMap.get(segment);
            return !info || info.returned;
          }
          function getUselessReturns(uselessReturns, prevSegments, providedTraversedSegments) {
            const traversedSegments = providedTraversedSegments || new WeakSet();
            for (const segment of prevSegments) {
              if (!segment.reachable) {
                if (!traversedSegments.has(segment)) {
                  traversedSegments.add(segment);
                  getUselessReturns(uselessReturns, segment.allPrevSegments.filter(isReturned), traversedSegments);
                }
                continue;
              }
              uselessReturns.push(...segmentInfoMap.get(segment).uselessReturns);
            }
            return uselessReturns;
          }
          function markReturnStatementsOnSegmentAsUsed(segment) {
            if (!segment.reachable) {
              usedUnreachableSegments.add(segment);
              segment.allPrevSegments.filter(isReturned).filter(prevSegment => !usedUnreachableSegments.has(prevSegment)).forEach(markReturnStatementsOnSegmentAsUsed);
              return;
            }
            const info = segmentInfoMap.get(segment);
            for (const node of info.uselessReturns) {
              remove(scopeInfo.uselessReturns, node);
            }
            info.uselessReturns = [];
          }
          function markReturnStatementsOnCurrentSegmentsAsUsed() {
            scopeInfo.codePath.currentSegments.forEach(markReturnStatementsOnSegmentAsUsed);
          }
          return {
            onCodePathStart(codePath) {
              scopeInfo = {
                upper: scopeInfo,
                uselessReturns: [],
                codePath
              };
            },
            onCodePathEnd() {
              for (const node of scopeInfo.uselessReturns) {
                context.report({
                  node,
                  loc: node.loc,
                  messageId: "unnecessaryReturn",
                  fix(fixer) {
                    if (isRemovable(node) && !sourceCode.getCommentsInside(node).length) {
                      return new FixTracker(fixer, sourceCode).retainEnclosingFunction(node).remove(node);
                    }
                    return null;
                  }
                });
              }
              scopeInfo = scopeInfo.upper;
            },
            onCodePathSegmentStart(segment) {
              const info = {
                uselessReturns: getUselessReturns([], segment.allPrevSegments),
                returned: false
              };
              segmentInfoMap.set(segment, info);
            },
            ReturnStatement(node) {
              if (node.argument) {
                markReturnStatementsOnCurrentSegmentsAsUsed();
              }
              if (node.argument || astUtils$i.isInLoop(node) || isInFinally(node) || !scopeInfo.codePath.currentSegments.some(s => s.reachable)) {
                return;
              }
              for (const segment of scopeInfo.codePath.currentSegments) {
                const info = segmentInfoMap.get(segment);
                if (info) {
                  info.uselessReturns.push(node);
                  info.returned = true;
                }
              }
              scopeInfo.uselessReturns.push(node);
            },
            ClassDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
            ContinueStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            DebuggerStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            DoWhileStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            EmptyStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ExpressionStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ForInStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ForOfStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ForStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            IfStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ImportDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
            LabeledStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            SwitchStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ThrowStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            TryStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            VariableDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
            WhileStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            WithStatement: markReturnStatementsOnCurrentSegmentsAsUsed,
            ExportNamedDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
            ExportDefaultDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed,
            ExportAllDeclaration: markReturnStatementsOnCurrentSegmentsAsUsed
          };
        }
      };
      var _noUselessReturn = exports$y;
      var exports$x = {};
      const astUtils$h = _astUtils;
      function isGlobal(variable) {
        return Boolean(variable.scope) && variable.scope.type === "global";
      }
      function getEnclosingFunctionScope(scope) {
        let currentScope = scope;
        while (currentScope.type !== "function" && currentScope.type !== "global") {
          currentScope = currentScope.upper;
        }
        return currentScope;
      }
      function isReferencedInClosure(variable) {
        const enclosingFunctionScope = getEnclosingFunctionScope(variable.scope);
        return variable.references.some(reference => getEnclosingFunctionScope(reference.from) !== enclosingFunctionScope);
      }
      function isLoopAssignee(node) {
        return (node.parent.type === "ForOfStatement" || node.parent.type === "ForInStatement") && node === node.parent.left;
      }
      function isDeclarationInitialized(node) {
        return node.declarations.every(declarator => declarator.init !== null);
      }
      const SCOPE_NODE_TYPE = /^(?:Program|BlockStatement|SwitchStatement|ForStatement|ForInStatement|ForOfStatement)$/u;
      function getScopeNode(node) {
        for (let currentNode = node; currentNode; currentNode = currentNode.parent) {
          if (SCOPE_NODE_TYPE.test(currentNode.type)) {
            return currentNode;
          }
        }
        return null;
      }
      function isRedeclared(variable) {
        return variable.defs.length >= 2;
      }
      function isUsedFromOutsideOf(scopeNode) {
        function isOutsideOfScope(reference) {
          const scope = scopeNode.range;
          const id = reference.identifier.range;
          return id[0] < scope[0] || id[1] > scope[1];
        }
        return function (variable) {
          return variable.references.some(isOutsideOfScope);
        };
      }
      function hasReferenceInTDZ(node) {
        const initStart = node.range[0];
        const initEnd = node.range[1];
        return variable => {
          const id = variable.defs[0].name;
          const idStart = id.range[0];
          const defaultValue = id.parent.type === "AssignmentPattern" ? id.parent.right : null;
          const defaultStart = defaultValue && defaultValue.range[0];
          const defaultEnd = defaultValue && defaultValue.range[1];
          return variable.references.some(reference => {
            const start = reference.identifier.range[0];
            const end = reference.identifier.range[1];
            return !reference.init && (start < idStart || defaultValue !== null && start >= defaultStart && end <= defaultEnd || start >= initStart && end <= initEnd);
          });
        };
      }
      function hasNameDisallowedForLetDeclarations(variable) {
        return variable.name === "let";
      }
      exports$x = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `let` or `const` instead of `var`",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-var"
          },
          schema: [],
          fixable: "code",
          messages: { unexpectedVar: "Unexpected var, use let or const instead." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function hasSelfReferenceInTDZ(declarator) {
            if (!declarator.init) {
              return false;
            }
            const variables = context.getDeclaredVariables(declarator);
            return variables.some(hasReferenceInTDZ(declarator.init));
          }
          function canFix(node) {
            const variables = context.getDeclaredVariables(node);
            const scopeNode = getScopeNode(node);
            if (node.parent.type === "SwitchCase" || node.declarations.some(hasSelfReferenceInTDZ) || variables.some(isGlobal) || variables.some(isRedeclared) || variables.some(isUsedFromOutsideOf(scopeNode)) || variables.some(hasNameDisallowedForLetDeclarations)) {
              return false;
            }
            if (astUtils$h.isInLoop(node)) {
              if (variables.some(isReferencedInClosure)) {
                return false;
              }
              if (!isLoopAssignee(node) && !isDeclarationInitialized(node)) {
                return false;
              }
            }
            if (!isLoopAssignee(node) && !(node.parent.type === "ForStatement" && node.parent.init === node) && !astUtils$h.STATEMENT_LIST_PARENTS.has(node.parent.type)) {
              return false;
            }
            return true;
          }
          function report(node) {
            context.report({
              node,
              messageId: "unexpectedVar",
              fix(fixer) {
                const varToken = sourceCode.getFirstToken(node, { filter: t => t.value === "var" });
                return canFix(node) ? fixer.replaceText(varToken, "let") : null;
              }
            });
          }
          return {
            "VariableDeclaration:exit"(node) {
              if (node.kind === "var") {
                report(node);
              }
            }
          };
        }
      };
      var _noVar = exports$x;
      var exports$w = {};
      exports$w = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `void` operators",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/no-void"
          },
          messages: { noVoid: "Expected 'undefined' and instead saw 'void'." },
          schema: [{
              type: "object",
              properties: {
                allowAsStatement: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }]
        },
        create(context) {
          const allowAsStatement = context.options[0] && context.options[0].allowAsStatement;
          return {
            "UnaryExpression[operator=\"void\"]"(node) {
              if (allowAsStatement && node.parent && node.parent.type === "ExpressionStatement") {
                return;
              }
              context.report({
                node,
                messageId: "noVoid"
              });
            }
          };
        }
      };
      var _noVoid = exports$w;
      var exports$v = {};
      exports$v = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow `with` statements",
            category: "Best Practices",
            recommended: true,
            url: "https://eslint.org/docs/rules/no-with"
          },
          schema: [],
          messages: { unexpectedWith: "Unexpected use of 'with' statement." }
        },
        create(context) {
          return {
            WithStatement(node) {
              context.report({
                node,
                messageId: "unexpectedWith"
              });
            }
          };
        }
      };
      var _noWith = exports$v;
      var exports$u = {};
      const POSITION_SCHEMA = {
        enum: [
          "beside",
          "below",
          "any"
        ]
      };
      exports$u = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce the location of single-line statements",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/nonblock-statement-body-position"
          },
          fixable: "whitespace",
          schema: [
            POSITION_SCHEMA,
            {
              properties: {
                overrides: {
                  properties: {
                    if: POSITION_SCHEMA,
                    else: POSITION_SCHEMA,
                    while: POSITION_SCHEMA,
                    do: POSITION_SCHEMA,
                    for: POSITION_SCHEMA
                  },
                  additionalProperties: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            expectNoLinebreak: "Expected no linebreak before this statement.",
            expectLinebreak: "Expected a linebreak before this statement."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function getOption(keywordName) {
            return context.options[1] && context.options[1].overrides && context.options[1].overrides[keywordName] || context.options[0] || "beside";
          }
          function validateStatement(node, keywordName) {
            const option = getOption(keywordName);
            if (node.type === "BlockStatement" || option === "any") {
              return;
            }
            const tokenBefore = sourceCode.getTokenBefore(node);
            if (tokenBefore.loc.end.line === node.loc.start.line && option === "below") {
              context.report({
                node,
                messageId: "expectLinebreak",
                fix: fixer => fixer.insertTextBefore(node, "\n")
              });
            } else if (tokenBefore.loc.end.line !== node.loc.start.line && option === "beside") {
              context.report({
                node,
                messageId: "expectNoLinebreak",
                fix(fixer) {
                  if (sourceCode.getText().slice(tokenBefore.range[1], node.range[0]).trim()) {
                    return null;
                  }
                  return fixer.replaceTextRange([
                    tokenBefore.range[1],
                    node.range[0]
                  ], " ");
                }
              });
            }
          }
          return {
            IfStatement(node) {
              validateStatement(node.consequent, "if");
              if (node.alternate && node.alternate.type !== "IfStatement") {
                validateStatement(node.alternate, "else");
              }
            },
            WhileStatement: node => validateStatement(node.body, "while"),
            DoWhileStatement: node => validateStatement(node.body, "do"),
            ForStatement: node => validateStatement(node.body, "for"),
            ForInStatement: node => validateStatement(node.body, "for"),
            ForOfStatement: node => validateStatement(node.body, "for")
          };
        }
      };
      var _nonblockStatementBodyPosition = exports$u;
      var exports$t = {};
      const astUtils$g = _astUtils;
      function isInStatementList(node) {
        return astUtils$g.STATEMENT_LIST_PARENTS.has(node.parent.type);
      }
      exports$t = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce variables to be declared either together or separately in functions",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/one-var"
          },
          fixable: "code",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "always",
                    "never",
                    "consecutive"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    separateRequires: { type: "boolean" },
                    var: {
                      enum: [
                        "always",
                        "never",
                        "consecutive"
                      ]
                    },
                    let: {
                      enum: [
                        "always",
                        "never",
                        "consecutive"
                      ]
                    },
                    const: {
                      enum: [
                        "always",
                        "never",
                        "consecutive"
                      ]
                    }
                  },
                  additionalProperties: false
                },
                {
                  type: "object",
                  properties: {
                    initialized: {
                      enum: [
                        "always",
                        "never",
                        "consecutive"
                      ]
                    },
                    uninitialized: {
                      enum: [
                        "always",
                        "never",
                        "consecutive"
                      ]
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            combineUninitialized: "Combine this with the previous '{{type}}' statement with uninitialized variables.",
            combineInitialized: "Combine this with the previous '{{type}}' statement with initialized variables.",
            splitUninitialized: "Split uninitialized '{{type}}' declarations into multiple statements.",
            splitInitialized: "Split initialized '{{type}}' declarations into multiple statements.",
            splitRequires: "Split requires to be separated into a single block.",
            combine: "Combine this with the previous '{{type}}' statement.",
            split: "Split '{{type}}' declarations into multiple statements."
          }
        },
        create(context) {
          const MODE_ALWAYS = "always";
          const MODE_NEVER = "never";
          const MODE_CONSECUTIVE = "consecutive";
          const mode = context.options[0] || MODE_ALWAYS;
          const options = {};
          if (typeof mode === "string") {
            options.var = {
              uninitialized: mode,
              initialized: mode
            };
            options.let = {
              uninitialized: mode,
              initialized: mode
            };
            options.const = {
              uninitialized: mode,
              initialized: mode
            };
          } else if (typeof mode === "object") {
            options.separateRequires = !!mode.separateRequires;
            options.var = {
              uninitialized: mode.var,
              initialized: mode.var
            };
            options.let = {
              uninitialized: mode.let,
              initialized: mode.let
            };
            options.const = {
              uninitialized: mode.const,
              initialized: mode.const
            };
            if (Object.prototype.hasOwnProperty.call(mode, "uninitialized")) {
              options.var.uninitialized = mode.uninitialized;
              options.let.uninitialized = mode.uninitialized;
              options.const.uninitialized = mode.uninitialized;
            }
            if (Object.prototype.hasOwnProperty.call(mode, "initialized")) {
              options.var.initialized = mode.initialized;
              options.let.initialized = mode.initialized;
              options.const.initialized = mode.initialized;
            }
          }
          const sourceCode = context.getSourceCode();
          const functionStack = [];
          const blockStack = [];
          function startBlock() {
            blockStack.push({
              let: {
                initialized: false,
                uninitialized: false
              },
              const: {
                initialized: false,
                uninitialized: false
              }
            });
          }
          function startFunction() {
            functionStack.push({
              initialized: false,
              uninitialized: false
            });
            startBlock();
          }
          function endBlock() {
            blockStack.pop();
          }
          function endFunction() {
            functionStack.pop();
            endBlock();
          }
          function isRequire(decl) {
            return decl.init && decl.init.type === "CallExpression" && decl.init.callee.name === "require";
          }
          function recordTypes(statementType, declarations, currentScope) {
            for (let i = 0; i < declarations.length; i++) {
              if (declarations[i].init === null) {
                if (options[statementType] && options[statementType].uninitialized === MODE_ALWAYS) {
                  currentScope.uninitialized = true;
                }
              } else {
                if (options[statementType] && options[statementType].initialized === MODE_ALWAYS) {
                  if (options.separateRequires && isRequire(declarations[i])) {
                    currentScope.required = true;
                  } else {
                    currentScope.initialized = true;
                  }
                }
              }
            }
          }
          function getCurrentScope(statementType) {
            let currentScope;
            if (statementType === "var") {
              currentScope = functionStack[functionStack.length - 1];
            } else if (statementType === "let") {
              currentScope = blockStack[blockStack.length - 1].let;
            } else if (statementType === "const") {
              currentScope = blockStack[blockStack.length - 1].const;
            }
            return currentScope;
          }
          function countDeclarations(declarations) {
            const counts = {
              uninitialized: 0,
              initialized: 0
            };
            for (let i = 0; i < declarations.length; i++) {
              if (declarations[i].init === null) {
                counts.uninitialized++;
              } else {
                counts.initialized++;
              }
            }
            return counts;
          }
          function hasOnlyOneStatement(statementType, declarations) {
            const declarationCounts = countDeclarations(declarations);
            const currentOptions = options[statementType] || {};
            const currentScope = getCurrentScope(statementType);
            const hasRequires = declarations.some(isRequire);
            if (currentOptions.uninitialized === MODE_ALWAYS && currentOptions.initialized === MODE_ALWAYS) {
              if (currentScope.uninitialized || currentScope.initialized) {
                if (!hasRequires) {
                  return false;
                }
              }
            }
            if (declarationCounts.uninitialized > 0) {
              if (currentOptions.uninitialized === MODE_ALWAYS && currentScope.uninitialized) {
                return false;
              }
            }
            if (declarationCounts.initialized > 0) {
              if (currentOptions.initialized === MODE_ALWAYS && currentScope.initialized) {
                if (!hasRequires) {
                  return false;
                }
              }
            }
            if (currentScope.required && hasRequires) {
              return false;
            }
            recordTypes(statementType, declarations, currentScope);
            return true;
          }
          function joinDeclarations(declarations) {
            const declaration = declarations[0];
            const body = Array.isArray(declaration.parent.parent.body) ? declaration.parent.parent.body : [];
            const currentIndex = body.findIndex(node => node.range[0] === declaration.parent.range[0]);
            const previousNode = body[currentIndex - 1];
            return fixer => {
              const type = sourceCode.getTokenBefore(declaration);
              const prevSemi = sourceCode.getTokenBefore(type);
              const res = [];
              if (previousNode && previousNode.kind === sourceCode.getText(type)) {
                if (prevSemi.value === ";") {
                  res.push(fixer.replaceText(prevSemi, ","));
                } else {
                  res.push(fixer.insertTextAfter(prevSemi, ","));
                }
                res.push(fixer.replaceText(type, ""));
              }
              return res;
            };
          }
          function splitDeclarations(declaration) {
            const {parent} = declaration;
            if (!isInStatementList(parent.type === "ExportNamedDeclaration" ? parent : declaration)) {
              return null;
            }
            return fixer => declaration.declarations.map(declarator => {
              const tokenAfterDeclarator = sourceCode.getTokenAfter(declarator);
              if (tokenAfterDeclarator === null) {
                return null;
              }
              const afterComma = sourceCode.getTokenAfter(tokenAfterDeclarator, { includeComments: true });
              if (tokenAfterDeclarator.value !== ",") {
                return null;
              }
              const exportPlacement = declaration.parent.type === "ExportNamedDeclaration" ? "export " : "";
              if (afterComma.range[0] === tokenAfterDeclarator.range[1]) {
                return fixer.replaceText(tokenAfterDeclarator, `; ${ exportPlacement }${ declaration.kind } `);
              }
              if (afterComma.loc.start.line > tokenAfterDeclarator.loc.end.line || afterComma.type === "Line" || afterComma.type === "Block") {
                let lastComment = afterComma;
                while (lastComment.type === "Line" || lastComment.type === "Block") {
                  lastComment = sourceCode.getTokenAfter(lastComment, { includeComments: true });
                }
                return fixer.replaceTextRange([
                  tokenAfterDeclarator.range[0],
                  lastComment.range[0]
                ], `;${ sourceCode.text.slice(tokenAfterDeclarator.range[1], lastComment.range[0]) }${ exportPlacement }${ declaration.kind } `);
              }
              return fixer.replaceText(tokenAfterDeclarator, `; ${ exportPlacement }${ declaration.kind }`);
            }).filter(x => x);
          }
          function checkVariableDeclaration(node) {
            const parent = node.parent;
            const type = node.kind;
            if (!options[type]) {
              return;
            }
            const declarations = node.declarations;
            const declarationCounts = countDeclarations(declarations);
            const mixedRequires = declarations.some(isRequire) && !declarations.every(isRequire);
            if (options[type].initialized === MODE_ALWAYS) {
              if (options.separateRequires && mixedRequires) {
                context.report({
                  node,
                  messageId: "splitRequires"
                });
              }
            }
            const nodeIndex = parent.body && parent.body.length > 0 && parent.body.indexOf(node) || 0;
            if (nodeIndex > 0) {
              const previousNode = parent.body[nodeIndex - 1];
              const isPreviousNodeDeclaration = previousNode.type === "VariableDeclaration";
              const declarationsWithPrevious = declarations.concat(previousNode.declarations || []);
              if (isPreviousNodeDeclaration && previousNode.kind === type && !(declarationsWithPrevious.some(isRequire) && !declarationsWithPrevious.every(isRequire))) {
                const previousDeclCounts = countDeclarations(previousNode.declarations);
                if (options[type].initialized === MODE_CONSECUTIVE && options[type].uninitialized === MODE_CONSECUTIVE) {
                  context.report({
                    node,
                    messageId: "combine",
                    data: { type },
                    fix: joinDeclarations(declarations)
                  });
                } else if (options[type].initialized === MODE_CONSECUTIVE && declarationCounts.initialized > 0 && previousDeclCounts.initialized > 0) {
                  context.report({
                    node,
                    messageId: "combineInitialized",
                    data: { type },
                    fix: joinDeclarations(declarations)
                  });
                } else if (options[type].uninitialized === MODE_CONSECUTIVE && declarationCounts.uninitialized > 0 && previousDeclCounts.uninitialized > 0) {
                  context.report({
                    node,
                    messageId: "combineUninitialized",
                    data: { type },
                    fix: joinDeclarations(declarations)
                  });
                }
              }
            }
            if (!hasOnlyOneStatement(type, declarations)) {
              if (options[type].initialized === MODE_ALWAYS && options[type].uninitialized === MODE_ALWAYS) {
                context.report({
                  node,
                  messageId: "combine",
                  data: { type },
                  fix: joinDeclarations(declarations)
                });
              } else {
                if (options[type].initialized === MODE_ALWAYS && declarationCounts.initialized > 0) {
                  context.report({
                    node,
                    messageId: "combineInitialized",
                    data: { type },
                    fix: joinDeclarations(declarations)
                  });
                }
                if (options[type].uninitialized === MODE_ALWAYS && declarationCounts.uninitialized > 0) {
                  if (node.parent.left === node && (node.parent.type === "ForInStatement" || node.parent.type === "ForOfStatement")) {
                    return;
                  }
                  context.report({
                    node,
                    messageId: "combineUninitialized",
                    data: { type },
                    fix: joinDeclarations(declarations)
                  });
                }
              }
            }
            if (parent.type !== "ForStatement" || parent.init !== node) {
              const totalDeclarations = declarationCounts.uninitialized + declarationCounts.initialized;
              if (totalDeclarations > 1) {
                if (options[type].initialized === MODE_NEVER && options[type].uninitialized === MODE_NEVER) {
                  context.report({
                    node,
                    messageId: "split",
                    data: { type },
                    fix: splitDeclarations(node)
                  });
                } else if (options[type].initialized === MODE_NEVER && declarationCounts.initialized > 0) {
                  context.report({
                    node,
                    messageId: "splitInitialized",
                    data: { type },
                    fix: splitDeclarations(node)
                  });
                } else if (options[type].uninitialized === MODE_NEVER && declarationCounts.uninitialized > 0) {
                  context.report({
                    node,
                    messageId: "splitUninitialized",
                    data: { type },
                    fix: splitDeclarations(node)
                  });
                }
              }
            }
          }
          return {
            Program: startFunction,
            FunctionDeclaration: startFunction,
            FunctionExpression: startFunction,
            ArrowFunctionExpression: startFunction,
            BlockStatement: startBlock,
            ForStatement: startBlock,
            ForInStatement: startBlock,
            ForOfStatement: startBlock,
            SwitchStatement: startBlock,
            VariableDeclaration: checkVariableDeclaration,
            "ForStatement:exit": endBlock,
            "ForOfStatement:exit": endBlock,
            "ForInStatement:exit": endBlock,
            "SwitchStatement:exit": endBlock,
            "BlockStatement:exit": endBlock,
            "Program:exit": endFunction,
            "FunctionDeclaration:exit": endFunction,
            "FunctionExpression:exit": endFunction,
            "ArrowFunctionExpression:exit": endFunction
          };
        }
      };
      var _oneVar = exports$t;
      var exports$s = {};
      exports$s = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow newlines around variable declarations",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/one-var-declaration-per-line"
          },
          schema: [{
              enum: [
                "always",
                "initializations"
              ]
            }],
          fixable: "whitespace",
          messages: { expectVarOnNewline: "Expected variable declaration to be on a new line." }
        },
        create(context) {
          const always = context.options[0] === "always";
          function isForTypeSpecifier(keyword) {
            return keyword === "ForStatement" || keyword === "ForInStatement" || keyword === "ForOfStatement";
          }
          function checkForNewLine(node) {
            if (isForTypeSpecifier(node.parent.type)) {
              return;
            }
            const declarations = node.declarations;
            let prev;
            declarations.forEach(current => {
              if (prev && prev.loc.end.line === current.loc.start.line) {
                if (always || prev.init || current.init) {
                  context.report({
                    node,
                    messageId: "expectVarOnNewline",
                    loc: current.loc,
                    fix: fixer => fixer.insertTextBefore(current, "\n")
                  });
                }
              }
              prev = current;
            });
          }
          return { VariableDeclaration: checkForNewLine };
        }
      };
      var _oneVarDeclarationPerLine = exports$s;
      var exports$r$1 = {};
      const astUtils$f = _astUtils;
      function isCommutativeOperatorWithShorthand(operator) {
        return [
          "*",
          "&",
          "^",
          "|"
        ].indexOf(operator) >= 0;
      }
      function isNonCommutativeOperatorWithShorthand(operator) {
        return [
          "+",
          "-",
          "/",
          "%",
          "<<",
          ">>",
          ">>>",
          "**"
        ].indexOf(operator) >= 0;
      }
      function canBeFixed(node) {
        return node.type === "Identifier" || node.type === "MemberExpression" && (node.object.type === "Identifier" || node.object.type === "ThisExpression") && (!node.computed || node.property.type === "Literal");
      }
      exports$r$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow assignment operator shorthand where possible",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/operator-assignment"
          },
          schema: [{
              enum: [
                "always",
                "never"
              ]
            }],
          fixable: "code",
          messages: {
            replaced: "Assignment (=) can be replaced with operator assignment ({{operator}}=).",
            unexpected: "Unexpected operator assignment ({{operator}}=) shorthand."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function getOperatorToken(node) {
            return sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);
          }
          function verify(node) {
            if (node.operator !== "=" || node.right.type !== "BinaryExpression") {
              return;
            }
            const left = node.left;
            const expr = node.right;
            const operator = expr.operator;
            if (isCommutativeOperatorWithShorthand(operator) || isNonCommutativeOperatorWithShorthand(operator)) {
              if (astUtils$f.isSameReference(left, expr.left, true)) {
                context.report({
                  node,
                  messageId: "replaced",
                  data: { operator },
                  fix(fixer) {
                    if (canBeFixed(left) && canBeFixed(expr.left)) {
                      const equalsToken = getOperatorToken(node);
                      const operatorToken = getOperatorToken(expr);
                      const leftText = sourceCode.getText().slice(node.range[0], equalsToken.range[0]);
                      const rightText = sourceCode.getText().slice(operatorToken.range[1], node.right.range[1]);
                      if (sourceCode.commentsExistBetween(equalsToken, operatorToken)) {
                        return null;
                      }
                      return fixer.replaceText(node, `${ leftText }${ expr.operator }=${ rightText }`);
                    }
                    return null;
                  }
                });
              } else if (astUtils$f.isSameReference(left, expr.right, true) && isCommutativeOperatorWithShorthand(operator)) {
                context.report({
                  node,
                  messageId: "replaced",
                  data: { operator }
                });
              }
            }
          }
          function prohibit(node) {
            if (node.operator !== "=" && !astUtils$f.isLogicalAssignmentOperator(node.operator)) {
              context.report({
                node,
                messageId: "unexpected",
                data: { operator: node.operator },
                fix(fixer) {
                  if (canBeFixed(node.left)) {
                    const firstToken = sourceCode.getFirstToken(node);
                    const operatorToken = getOperatorToken(node);
                    const leftText = sourceCode.getText().slice(node.range[0], operatorToken.range[0]);
                    const newOperator = node.operator.slice(0, -1);
                    let rightText;
                    if (sourceCode.commentsExistBetween(firstToken, operatorToken)) {
                      return null;
                    }
                    if (astUtils$f.getPrecedence(node.right) <= astUtils$f.getPrecedence({
                        type: "BinaryExpression",
                        operator: newOperator
                      }) && !astUtils$f.isParenthesised(sourceCode, node.right)) {
                      rightText = `${ sourceCode.text.slice(operatorToken.range[1], node.right.range[0]) }(${ sourceCode.getText(node.right) })`;
                    } else {
                      const tokenAfterOperator = sourceCode.getTokenAfter(operatorToken, { includeComments: true });
                      let rightTextPrefix = "";
                      if (operatorToken.range[1] === tokenAfterOperator.range[0] && !astUtils$f.canTokensBeAdjacent({
                          type: "Punctuator",
                          value: newOperator
                        }, tokenAfterOperator)) {
                        rightTextPrefix = " ";
                      }
                      rightText = `${ rightTextPrefix }${ sourceCode.text.slice(operatorToken.range[1], node.range[1]) }`;
                    }
                    return fixer.replaceText(node, `${ leftText }= ${ leftText }${ newOperator }${ rightText }`);
                  }
                  return null;
                }
              });
            }
          }
          return { AssignmentExpression: context.options[0] !== "never" ? verify : prohibit };
        }
      };
      var _operatorAssignment = exports$r$1;
      var exports$q$1 = {};
      const astUtils$e = _astUtils;
      const LT = `[${ Array.from(astUtils$e.LINEBREAKS).join("") }]`;
      const PADDING_LINE_SEQUENCE = new RegExp(String.raw`^(\s*?${ LT })\s*${ LT }(\s*;?)$`, "u");
      const CJS_EXPORT = /^(?:module\s*\.\s*)?exports(?:\s*\.|\s*\[|$)/u;
      const CJS_IMPORT = /^require\(/u;
      function newKeywordTester(keyword) {
        return { test: (node, sourceCode) => sourceCode.getFirstToken(node).value === keyword };
      }
      function newSinglelineKeywordTester(keyword) {
        return { test: (node, sourceCode) => node.loc.start.line === node.loc.end.line && sourceCode.getFirstToken(node).value === keyword };
      }
      function newMultilineKeywordTester(keyword) {
        return { test: (node, sourceCode) => node.loc.start.line !== node.loc.end.line && sourceCode.getFirstToken(node).value === keyword };
      }
      function newNodeTypeTester(type) {
        return { test: node => node.type === type };
      }
      function isIIFEStatement(node) {
        if (node.type === "ExpressionStatement") {
          let call = astUtils$e.skipChainExpression(node.expression);
          if (call.type === "UnaryExpression") {
            call = astUtils$e.skipChainExpression(call.argument);
          }
          return call.type === "CallExpression" && astUtils$e.isFunction(call.callee);
        }
        return false;
      }
      function isBlockLikeStatement(sourceCode, node) {
        if (node.type === "DoWhileStatement" && node.body.type === "BlockStatement") {
          return true;
        }
        if (isIIFEStatement(node)) {
          return true;
        }
        const lastToken = sourceCode.getLastToken(node, astUtils$e.isNotSemicolonToken);
        const belongingNode = lastToken && astUtils$e.isClosingBraceToken(lastToken) ? sourceCode.getNodeByRangeIndex(lastToken.range[0]) : null;
        return Boolean(belongingNode) && (belongingNode.type === "BlockStatement" || belongingNode.type === "SwitchStatement");
      }
      function isDirective(node, sourceCode) {
        return node.type === "ExpressionStatement" && (node.parent.type === "Program" || node.parent.type === "BlockStatement" && astUtils$e.isFunction(node.parent.parent)) && node.expression.type === "Literal" && typeof node.expression.value === "string" && !astUtils$e.isParenthesised(sourceCode, node.expression);
      }
      function isDirectivePrologue(node, sourceCode) {
        if (isDirective(node, sourceCode)) {
          for (const sibling of node.parent.body) {
            if (sibling === node) {
              break;
            }
            if (!isDirective(sibling, sourceCode)) {
              return false;
            }
          }
          return true;
        }
        return false;
      }
      function getActualLastToken(sourceCode, node) {
        const semiToken = sourceCode.getLastToken(node);
        const prevToken = sourceCode.getTokenBefore(semiToken);
        const nextToken = sourceCode.getTokenAfter(semiToken);
        const isSemicolonLessStyle = Boolean(prevToken && nextToken && prevToken.range[0] >= node.range[0] && astUtils$e.isSemicolonToken(semiToken) && semiToken.loc.start.line !== prevToken.loc.end.line && semiToken.loc.end.line === nextToken.loc.start.line);
        return isSemicolonLessStyle ? prevToken : semiToken;
      }
      function replacerToRemovePaddingLines(_, trailingSpaces, indentSpaces) {
        return trailingSpaces + indentSpaces;
      }
      function verifyForAny() {
      }
      function verifyForNever(context, _, nextNode, paddingLines) {
        if (paddingLines.length === 0) {
          return;
        }
        context.report({
          node: nextNode,
          messageId: "unexpectedBlankLine",
          fix(fixer) {
            if (paddingLines.length >= 2) {
              return null;
            }
            const prevToken = paddingLines[0][0];
            const nextToken = paddingLines[0][1];
            const start = prevToken.range[1];
            const end = nextToken.range[0];
            const text = context.getSourceCode().text.slice(start, end).replace(PADDING_LINE_SEQUENCE, replacerToRemovePaddingLines);
            return fixer.replaceTextRange([
              start,
              end
            ], text);
          }
        });
      }
      function verifyForAlways(context, prevNode, nextNode, paddingLines) {
        if (paddingLines.length > 0) {
          return;
        }
        context.report({
          node: nextNode,
          messageId: "expectedBlankLine",
          fix(fixer) {
            const sourceCode = context.getSourceCode();
            let prevToken = getActualLastToken(sourceCode, prevNode);
            const nextToken = sourceCode.getFirstTokenBetween(prevToken, nextNode, {
              includeComments: true,
              filter(token) {
                if (astUtils$e.isTokenOnSameLine(prevToken, token)) {
                  prevToken = token;
                  return false;
                }
                return true;
              }
            }) || nextNode;
            const insertText = astUtils$e.isTokenOnSameLine(prevToken, nextToken) ? "\n\n" : "\n";
            return fixer.insertTextAfter(prevToken, insertText);
          }
        });
      }
      const PaddingTypes = {
        any: { verify: verifyForAny },
        never: { verify: verifyForNever },
        always: { verify: verifyForAlways }
      };
      const StatementTypes = {
        "*": { test: () => true },
        "block-like": { test: (node, sourceCode) => isBlockLikeStatement(sourceCode, node) },
        "cjs-export": { test: (node, sourceCode) => node.type === "ExpressionStatement" && node.expression.type === "AssignmentExpression" && CJS_EXPORT.test(sourceCode.getText(node.expression.left)) },
        "cjs-import": { test: (node, sourceCode) => node.type === "VariableDeclaration" && node.declarations.length > 0 && Boolean(node.declarations[0].init) && CJS_IMPORT.test(sourceCode.getText(node.declarations[0].init)) },
        directive: { test: isDirectivePrologue },
        expression: { test: (node, sourceCode) => node.type === "ExpressionStatement" && !isDirectivePrologue(node, sourceCode) },
        iife: { test: isIIFEStatement },
        "multiline-block-like": { test: (node, sourceCode) => node.loc.start.line !== node.loc.end.line && isBlockLikeStatement(sourceCode, node) },
        "multiline-expression": { test: (node, sourceCode) => node.loc.start.line !== node.loc.end.line && node.type === "ExpressionStatement" && !isDirectivePrologue(node, sourceCode) },
        "multiline-const": newMultilineKeywordTester("const"),
        "multiline-let": newMultilineKeywordTester("let"),
        "multiline-var": newMultilineKeywordTester("var"),
        "singleline-const": newSinglelineKeywordTester("const"),
        "singleline-let": newSinglelineKeywordTester("let"),
        "singleline-var": newSinglelineKeywordTester("var"),
        block: newNodeTypeTester("BlockStatement"),
        empty: newNodeTypeTester("EmptyStatement"),
        function: newNodeTypeTester("FunctionDeclaration"),
        break: newKeywordTester("break"),
        case: newKeywordTester("case"),
        class: newKeywordTester("class"),
        const: newKeywordTester("const"),
        continue: newKeywordTester("continue"),
        debugger: newKeywordTester("debugger"),
        default: newKeywordTester("default"),
        do: newKeywordTester("do"),
        export: newKeywordTester("export"),
        for: newKeywordTester("for"),
        if: newKeywordTester("if"),
        import: newKeywordTester("import"),
        let: newKeywordTester("let"),
        return: newKeywordTester("return"),
        switch: newKeywordTester("switch"),
        throw: newKeywordTester("throw"),
        try: newKeywordTester("try"),
        var: newKeywordTester("var"),
        while: newKeywordTester("while"),
        with: newKeywordTester("with")
      };
      exports$q$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow padding lines between statements",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/padding-line-between-statements"
          },
          fixable: "whitespace",
          schema: {
            definitions: {
              paddingType: { enum: Object.keys(PaddingTypes) },
              statementType: {
                anyOf: [
                  { enum: Object.keys(StatementTypes) },
                  {
                    type: "array",
                    items: { enum: Object.keys(StatementTypes) },
                    minItems: 1,
                    uniqueItems: true,
                    additionalItems: false
                  }
                ]
              }
            },
            type: "array",
            items: {
              type: "object",
              properties: {
                blankLine: { $ref: "#/definitions/paddingType" },
                prev: { $ref: "#/definitions/statementType" },
                next: { $ref: "#/definitions/statementType" }
              },
              additionalProperties: false,
              required: [
                "blankLine",
                "prev",
                "next"
              ]
            },
            additionalItems: false
          },
          messages: {
            unexpectedBlankLine: "Unexpected blank line before this statement.",
            expectedBlankLine: "Expected blank line before this statement."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const configureList = context.options || [];
          let scopeInfo = null;
          function enterScope() {
            scopeInfo = {
              upper: scopeInfo,
              prevNode: null
            };
          }
          function exitScope() {
            scopeInfo = scopeInfo.upper;
          }
          function match(node, type) {
            let innerStatementNode = node;
            while (innerStatementNode.type === "LabeledStatement") {
              innerStatementNode = innerStatementNode.body;
            }
            if (Array.isArray(type)) {
              return type.some(match.bind(null, innerStatementNode));
            }
            return StatementTypes[type].test(innerStatementNode, sourceCode);
          }
          function getPaddingType(prevNode, nextNode) {
            for (let i = configureList.length - 1; i >= 0; --i) {
              const configure = configureList[i];
              const matched = match(prevNode, configure.prev) && match(nextNode, configure.next);
              if (matched) {
                return PaddingTypes[configure.blankLine];
              }
            }
            return PaddingTypes.any;
          }
          function getPaddingLineSequences(prevNode, nextNode) {
            const pairs = [];
            let prevToken = getActualLastToken(sourceCode, prevNode);
            if (nextNode.loc.start.line - prevToken.loc.end.line >= 2) {
              do {
                const token = sourceCode.getTokenAfter(prevToken, { includeComments: true });
                if (token.loc.start.line - prevToken.loc.end.line >= 2) {
                  pairs.push([
                    prevToken,
                    token
                  ]);
                }
                prevToken = token;
              } while (prevToken.range[0] < nextNode.range[0]);
            }
            return pairs;
          }
          function verify(node) {
            const parentType = node.parent.type;
            const validParent = astUtils$e.STATEMENT_LIST_PARENTS.has(parentType) || parentType === "SwitchStatement";
            if (!validParent) {
              return;
            }
            const prevNode = scopeInfo.prevNode;
            if (prevNode) {
              const type = getPaddingType(prevNode, node);
              const paddingLines = getPaddingLineSequences(prevNode, node);
              type.verify(context, prevNode, node, paddingLines);
            }
            scopeInfo.prevNode = node;
          }
          function verifyThenEnterScope(node) {
            verify(node);
            enterScope();
          }
          return {
            Program: enterScope,
            BlockStatement: enterScope,
            SwitchStatement: enterScope,
            "Program:exit": exitScope,
            "BlockStatement:exit": exitScope,
            "SwitchStatement:exit": exitScope,
            ":statement": verify,
            SwitchCase: verifyThenEnterScope,
            "SwitchCase:exit": exitScope
          };
        }
      };
      var _paddingLineBetweenStatements = exports$q$1;
      var exports$p$1 = {};
      const astUtils$d = _astUtils;
      function isFunctionName(variable) {
        return variable && variable.defs[0].type === "FunctionName";
      }
      function checkMetaProperty(node, metaName, propertyName) {
        return node.meta.name === metaName && node.property.name === propertyName;
      }
      function getVariableOfArguments(scope) {
        const variables = scope.variables;
        for (let i = 0; i < variables.length; ++i) {
          const variable = variables[i];
          if (variable.name === "arguments") {
            return variable.identifiers.length === 0 ? variable : null;
          }
        }
        return null;
      }
      function getCallbackInfo(node) {
        const retv = {
          isCallback: false,
          isLexicalThis: false
        };
        let currentNode = node;
        let parent = node.parent;
        let bound = false;
        while (currentNode) {
          switch (parent.type) {
          case "LogicalExpression":
          case "ChainExpression":
          case "ConditionalExpression":
            break;
          case "MemberExpression":
            if (parent.object === currentNode && !parent.property.computed && parent.property.type === "Identifier" && parent.property.name === "bind") {
              const maybeCallee = parent.parent.type === "ChainExpression" ? parent.parent : parent;
              if (astUtils$d.isCallee(maybeCallee)) {
                if (!bound) {
                  bound = true;
                  retv.isLexicalThis = maybeCallee.parent.arguments.length === 1 && maybeCallee.parent.arguments[0].type === "ThisExpression";
                }
                parent = maybeCallee.parent;
              } else {
                return retv;
              }
            } else {
              return retv;
            }
            break;
          case "CallExpression":
          case "NewExpression":
            if (parent.callee !== currentNode) {
              retv.isCallback = true;
            }
            return retv;
          default:
            return retv;
          }
          currentNode = parent;
          parent = parent.parent;
        }
        throw new Error("unreachable");
      }
      function hasDuplicateParams(paramsList) {
        return paramsList.every(param => param.type === "Identifier") && paramsList.length !== new Set(paramsList.map(param => param.name)).size;
      }
      exports$p$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require using arrow functions for callbacks",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-arrow-callback"
          },
          schema: [{
              type: "object",
              properties: {
                allowNamedFunctions: {
                  type: "boolean",
                  default: false
                },
                allowUnboundThis: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: { preferArrowCallback: "Unexpected function expression." }
        },
        create(context) {
          const options = context.options[0] || {};
          const allowUnboundThis = options.allowUnboundThis !== false;
          const allowNamedFunctions = options.allowNamedFunctions;
          const sourceCode = context.getSourceCode();
          let stack = [];
          function enterScope() {
            stack.push({
              this: false,
              super: false,
              meta: false
            });
          }
          function exitScope() {
            return stack.pop();
          }
          return {
            Program() {
              stack = [];
            },
            ThisExpression() {
              const info = stack[stack.length - 1];
              if (info) {
                info.this = true;
              }
            },
            Super() {
              const info = stack[stack.length - 1];
              if (info) {
                info.super = true;
              }
            },
            MetaProperty(node) {
              const info = stack[stack.length - 1];
              if (info && checkMetaProperty(node, "new", "target")) {
                info.meta = true;
              }
            },
            FunctionDeclaration: enterScope,
            "FunctionDeclaration:exit": exitScope,
            FunctionExpression: enterScope,
            "FunctionExpression:exit"(node) {
              const scopeInfo = exitScope();
              if (allowNamedFunctions && node.id && node.id.name) {
                return;
              }
              if (node.generator) {
                return;
              }
              const nameVar = context.getDeclaredVariables(node)[0];
              if (isFunctionName(nameVar) && nameVar.references.length > 0) {
                return;
              }
              const variable = getVariableOfArguments(context.getScope());
              if (variable && variable.references.length > 0) {
                return;
              }
              const callbackInfo = getCallbackInfo(node);
              if (callbackInfo.isCallback && (!allowUnboundThis || !scopeInfo.this || callbackInfo.isLexicalThis) && !scopeInfo.super && !scopeInfo.meta) {
                context.report({
                  node,
                  messageId: "preferArrowCallback",
                  *fix(fixer) {
                    if (!callbackInfo.isLexicalThis && scopeInfo.this || hasDuplicateParams(node.params)) {
                      return;
                    }
                    if (callbackInfo.isLexicalThis) {
                      const memberNode = node.parent;
                      if (memberNode.type !== "MemberExpression") {
                        return;
                      }
                      const callNode = memberNode.parent;
                      const firstTokenToRemove = sourceCode.getTokenAfter(memberNode.object, astUtils$d.isNotClosingParenToken);
                      const lastTokenToRemove = sourceCode.getLastToken(callNode);
                      if (astUtils$d.isParenthesised(sourceCode, memberNode)) {
                        return;
                      }
                      if (sourceCode.commentsExistBetween(firstTokenToRemove, lastTokenToRemove)) {
                        return;
                      }
                      yield fixer.removeRange([
                        firstTokenToRemove.range[0],
                        lastTokenToRemove.range[1]
                      ]);
                    }
                    const functionToken = sourceCode.getFirstToken(node, node.async ? 1 : 0);
                    const leftParenToken = sourceCode.getTokenAfter(functionToken, astUtils$d.isOpeningParenToken);
                    if (sourceCode.commentsExistBetween(functionToken, leftParenToken)) {
                      yield fixer.remove(functionToken);
                      if (node.id) {
                        yield fixer.remove(node.id);
                      }
                    } else {
                      yield fixer.removeRange([
                        functionToken.range[0],
                        leftParenToken.range[0]
                      ]);
                    }
                    yield fixer.insertTextBefore(node.body, "=> ");
                    let replacedNode = callbackInfo.isLexicalThis ? node.parent.parent : node;
                    if (replacedNode.type === "ChainExpression") {
                      replacedNode = replacedNode.parent;
                    }
                    if (replacedNode.parent.type !== "CallExpression" && replacedNode.parent.type !== "ConditionalExpression" && !astUtils$d.isParenthesised(sourceCode, replacedNode) && !astUtils$d.isParenthesised(sourceCode, node)) {
                      yield fixer.insertTextBefore(replacedNode, "(");
                      yield fixer.insertTextAfter(replacedNode, ")");
                    }
                  }
                });
              }
            }
          };
        }
      };
      var _preferArrowCallback = exports$p$1;
      var exports$o$1 = {};
      const astUtils$c = _astUtils;
      const PRECEDENCE_OF_ASSIGNMENT_EXPR = astUtils$c.getPrecedence({ type: "AssignmentExpression" });
      exports$o$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require destructuring from arrays and/or objects",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-destructuring"
          },
          fixable: "code",
          schema: [
            {
              oneOf: [
                {
                  type: "object",
                  properties: {
                    VariableDeclarator: {
                      type: "object",
                      properties: {
                        array: { type: "boolean" },
                        object: { type: "boolean" }
                      },
                      additionalProperties: false
                    },
                    AssignmentExpression: {
                      type: "object",
                      properties: {
                        array: { type: "boolean" },
                        object: { type: "boolean" }
                      },
                      additionalProperties: false
                    }
                  },
                  additionalProperties: false
                },
                {
                  type: "object",
                  properties: {
                    array: { type: "boolean" },
                    object: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            },
            {
              type: "object",
              properties: { enforceForRenamedProperties: { type: "boolean" } },
              additionalProperties: false
            }
          ],
          messages: { preferDestructuring: "Use {{type}} destructuring." }
        },
        create(context) {
          const enabledTypes = context.options[0];
          const enforceForRenamedProperties = context.options[1] && context.options[1].enforceForRenamedProperties;
          let normalizedOptions = {
            VariableDeclarator: {
              array: true,
              object: true
            },
            AssignmentExpression: {
              array: true,
              object: true
            }
          };
          if (enabledTypes) {
            normalizedOptions = typeof enabledTypes.array !== "undefined" || typeof enabledTypes.object !== "undefined" ? {
              VariableDeclarator: enabledTypes,
              AssignmentExpression: enabledTypes
            } : enabledTypes;
          }
          function shouldCheck(nodeType, destructuringType) {
            return normalizedOptions && normalizedOptions[nodeType] && normalizedOptions[nodeType][destructuringType];
          }
          function isArrayIndexAccess(node) {
            return Number.isInteger(node.property.value);
          }
          function report(reportNode, type, fix) {
            context.report({
              node: reportNode,
              messageId: "preferDestructuring",
              data: { type },
              fix
            });
          }
          function shouldFix(node) {
            return node.type === "VariableDeclarator" && node.id.type === "Identifier" && node.init.type === "MemberExpression" && !node.init.computed && node.init.property.type === "Identifier" && node.id.name === node.init.property.name;
          }
          function fixIntoObjectDestructuring(fixer, node) {
            const rightNode = node.init;
            const sourceCode = context.getSourceCode();
            if (sourceCode.getCommentsInside(node).length > sourceCode.getCommentsInside(rightNode.object).length) {
              return null;
            }
            let objectText = sourceCode.getText(rightNode.object);
            if (astUtils$c.getPrecedence(rightNode.object) < PRECEDENCE_OF_ASSIGNMENT_EXPR) {
              objectText = `(${ objectText })`;
            }
            return fixer.replaceText(node, `{${ rightNode.property.name }} = ${ objectText }`);
          }
          function performCheck(leftNode, rightNode, reportNode) {
            if (rightNode.type !== "MemberExpression" || rightNode.object.type === "Super") {
              return;
            }
            if (isArrayIndexAccess(rightNode)) {
              if (shouldCheck(reportNode.type, "array")) {
                report(reportNode, "array", null);
              }
              return;
            }
            const fix = shouldFix(reportNode) ? fixer => fixIntoObjectDestructuring(fixer, reportNode) : null;
            if (shouldCheck(reportNode.type, "object") && enforceForRenamedProperties) {
              report(reportNode, "object", fix);
              return;
            }
            if (shouldCheck(reportNode.type, "object")) {
              const property = rightNode.property;
              if (property.type === "Literal" && leftNode.name === property.value || property.type === "Identifier" && leftNode.name === property.name && !rightNode.computed) {
                report(reportNode, "object", fix);
              }
            }
          }
          function checkVariableDeclarator(node) {
            if (!node.init) {
              return;
            }
            if (node.init.type !== "MemberExpression") {
              return;
            }
            performCheck(node.id, node.init, node);
          }
          function checkAssignmentExpression(node) {
            if (node.operator === "=") {
              performCheck(node.left, node.right, node);
            }
          }
          return {
            VariableDeclarator: checkVariableDeclarator,
            AssignmentExpression: checkAssignmentExpression
          };
        }
      };
      var _preferDestructuring = exports$o$1;
      var _eslintUtils$4 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$n$1 = {};
      const astUtils$b = _astUtils;
      const {
        CALL: CALL$3,
        ReferenceTracker: ReferenceTracker$3
      } = _eslintUtils$4;
      const PRECEDENCE_OF_EXPONENTIATION_EXPR = astUtils$b.getPrecedence({
        type: "BinaryExpression",
        operator: "**"
      });
      function doesBaseNeedParens(base) {
        return astUtils$b.getPrecedence(base) <= PRECEDENCE_OF_EXPONENTIATION_EXPR || base.type === "AwaitExpression" || base.type === "UnaryExpression";
      }
      function doesExponentNeedParens(exponent) {
        return astUtils$b.getPrecedence(exponent) < PRECEDENCE_OF_EXPONENTIATION_EXPR;
      }
      function doesExponentiationExpressionNeedParens(node, sourceCode) {
        const parent = node.parent.type === "ChainExpression" ? node.parent.parent : node.parent;
        const needsParens = parent.type === "ClassDeclaration" || parent.type.endsWith("Expression") && astUtils$b.getPrecedence(parent) >= PRECEDENCE_OF_EXPONENTIATION_EXPR && !(parent.type === "BinaryExpression" && parent.operator === "**" && parent.right === node) && !((parent.type === "CallExpression" || parent.type === "NewExpression") && parent.arguments.includes(node)) && !(parent.type === "MemberExpression" && parent.computed && parent.property === node) && !(parent.type === "ArrayExpression");
        return needsParens && !astUtils$b.isParenthesised(sourceCode, node);
      }
      function parenthesizeIfShould(text, shouldParenthesize) {
        return shouldParenthesize ? `(${ text })` : text;
      }
      exports$n$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow the use of `Math.pow` in favor of the `**` operator",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-exponentiation-operator"
          },
          schema: [],
          fixable: "code",
          messages: { useExponentiation: "Use the '**' operator instead of 'Math.pow'." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          function report(node) {
            context.report({
              node,
              messageId: "useExponentiation",
              fix(fixer) {
                if (node.arguments.length !== 2 || node.arguments.some(arg => arg.type === "SpreadElement") || sourceCode.getCommentsInside(node).length > 0) {
                  return null;
                }
                const base = node.arguments[0], exponent = node.arguments[1], baseText = sourceCode.getText(base), exponentText = sourceCode.getText(exponent), shouldParenthesizeBase = doesBaseNeedParens(base), shouldParenthesizeExponent = doesExponentNeedParens(exponent), shouldParenthesizeAll = doesExponentiationExpressionNeedParens(node, sourceCode);
                let prefix = "", suffix = "";
                if (!shouldParenthesizeAll) {
                  if (!shouldParenthesizeBase) {
                    const firstReplacementToken = sourceCode.getFirstToken(base), tokenBefore = sourceCode.getTokenBefore(node);
                    if (tokenBefore && tokenBefore.range[1] === node.range[0] && !astUtils$b.canTokensBeAdjacent(tokenBefore, firstReplacementToken)) {
                      prefix = " ";
                    }
                  }
                  if (!shouldParenthesizeExponent) {
                    const lastReplacementToken = sourceCode.getLastToken(exponent), tokenAfter = sourceCode.getTokenAfter(node);
                    if (tokenAfter && node.range[1] === tokenAfter.range[0] && !astUtils$b.canTokensBeAdjacent(lastReplacementToken, tokenAfter)) {
                      suffix = " ";
                    }
                  }
                }
                const baseReplacement = parenthesizeIfShould(baseText, shouldParenthesizeBase), exponentReplacement = parenthesizeIfShould(exponentText, shouldParenthesizeExponent), replacement = parenthesizeIfShould(`${ baseReplacement }**${ exponentReplacement }`, shouldParenthesizeAll);
                return fixer.replaceText(node, `${ prefix }${ replacement }${ suffix }`);
              }
            });
          }
          return {
            Program() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker$3(scope);
              const trackMap = { Math: { pow: { [CALL$3]: true } } };
              for (const {node} of tracker.iterateGlobalReferences(trackMap)) {
                report(node);
              }
            }
          };
        }
      };
      var _preferExponentiationOperator = exports$n$1;
      var _eslintUtils$3 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var _regexpp = "default" in _regexpp2 ? exports$3J : _regexpp2;
      var exports$m$1 = {};
      const {
        CALL: CALL$2,
        CONSTRUCT: CONSTRUCT$1,
        ReferenceTracker: ReferenceTracker$2,
        getStringIfConstant
      } = _eslintUtils$3;
      const regexpp = _regexpp;
      const parser = new regexpp.RegExpParser();
      exports$m$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce using named capture group in regular expression",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-named-capture-group"
          },
          schema: [],
          messages: { required: "Capture group '{{group}}' should be converted to a named or non-capturing group." }
        },
        create(context) {
          function checkRegex(pattern, node, uFlag) {
            let ast;
            try {
              ast = parser.parsePattern(pattern, 0, pattern.length, uFlag);
            } catch {
              return;
            }
            regexpp.visitRegExpAST(ast, {
              onCapturingGroupEnter(group) {
                if (!group.name) {
                  context.report({
                    node,
                    messageId: "required",
                    data: { group: group.raw }
                  });
                }
              }
            });
          }
          return {
            Literal(node) {
              if (node.regex) {
                checkRegex(node.regex.pattern, node, node.regex.flags.includes("u"));
              }
            },
            Program() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker$2(scope);
              const traceMap = {
                RegExp: {
                  [CALL$2]: true,
                  [CONSTRUCT$1]: true
                }
              };
              for (const {node} of tracker.iterateGlobalReferences(traceMap)) {
                const regex = getStringIfConstant(node.arguments[0]);
                const flags = getStringIfConstant(node.arguments[1]);
                if (regex) {
                  checkRegex(regex, node, flags && flags.includes("u"));
                }
              }
            }
          };
        }
      };
      var _preferNamedCaptureGroup = exports$m$1;
      var _eslintUtils$2 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$l$1 = {};
      const {
        CALL: CALL$1,
        ReferenceTracker: ReferenceTracker$1
      } = _eslintUtils$2;
      const {isCommaToken, isOpeningParenToken, isClosingParenToken, isParenthesised} = _astUtils;
      const ANY_SPACE = /\s/u;
      function hasArraySpread(node) {
        return node.arguments.some(arg => arg.type === "SpreadElement");
      }
      function isAccessorProperty(node) {
        return node.type === "Property" && (node.kind === "get" || node.kind === "set");
      }
      function hasAccessors(node) {
        return node.properties.some(isAccessorProperty);
      }
      function hasArgumentsWithAccessors(node) {
        return node.arguments.filter(arg => arg.type === "ObjectExpression").some(hasAccessors);
      }
      function needsParens(node, sourceCode) {
        const parent = node.parent;
        switch (parent.type) {
        case "VariableDeclarator":
        case "ArrayExpression":
        case "ReturnStatement":
        case "CallExpression":
        case "Property":
          return false;
        case "AssignmentExpression":
          return parent.left === node && !isParenthesised(sourceCode, node);
        default:
          return !isParenthesised(sourceCode, node);
        }
      }
      function argNeedsParens(node, sourceCode) {
        switch (node.type) {
        case "AssignmentExpression":
        case "ArrowFunctionExpression":
        case "ConditionalExpression":
          return !isParenthesised(sourceCode, node);
        default:
          return false;
        }
      }
      function getParenTokens(node, leftArgumentListParen, sourceCode) {
        const parens = [
          sourceCode.getFirstToken(node),
          sourceCode.getLastToken(node)
        ];
        let leftNext = sourceCode.getTokenBefore(node);
        let rightNext = sourceCode.getTokenAfter(node);
        while (leftNext && rightNext && leftNext.range[0] > leftArgumentListParen.range[0] && isOpeningParenToken(leftNext) && isClosingParenToken(rightNext)) {
          parens.push(leftNext, rightNext);
          leftNext = sourceCode.getTokenBefore(leftNext);
          rightNext = sourceCode.getTokenAfter(rightNext);
        }
        return parens.sort((a, b) => a.range[0] - b.range[0]);
      }
      function getStartWithSpaces(token, sourceCode) {
        const text = sourceCode.text;
        let start = token.range[0];
        {
          const prevToken = sourceCode.getTokenBefore(token, { includeComments: true });
          if (prevToken && prevToken.type === "Line") {
            return start;
          }
        }
        while (ANY_SPACE.test(text[start - 1] || "")) {
          start -= 1;
        }
        return start;
      }
      function getEndWithSpaces(token, sourceCode) {
        const text = sourceCode.text;
        let end = token.range[1];
        while (ANY_SPACE.test(text[end] || "")) {
          end += 1;
        }
        return end;
      }
      function defineFixer(node, sourceCode) {
        return function* (fixer) {
          const leftParen = sourceCode.getTokenAfter(node.callee, isOpeningParenToken);
          const rightParen = sourceCode.getLastToken(node);
          yield fixer.removeRange([
            node.range[0],
            leftParen.range[0]
          ]);
          if (needsParens(node, sourceCode)) {
            yield fixer.replaceText(leftParen, "({");
            yield fixer.replaceText(rightParen, "})");
          } else {
            yield fixer.replaceText(leftParen, "{");
            yield fixer.replaceText(rightParen, "}");
          }
          for (const argNode of node.arguments) {
            const innerParens = getParenTokens(argNode, leftParen, sourceCode);
            const left = innerParens.shift();
            const right = innerParens.pop();
            if (argNode.type === "ObjectExpression") {
              const maybeTrailingComma = sourceCode.getLastToken(argNode, 1);
              const maybeArgumentComma = sourceCode.getTokenAfter(right);
              for (const innerParen of innerParens) {
                yield fixer.remove(innerParen);
              }
              const leftRange = [
                left.range[0],
                getEndWithSpaces(left, sourceCode)
              ];
              const rightRange = [
                Math.max(getStartWithSpaces(right, sourceCode), leftRange[1]),
                right.range[1]
              ];
              yield fixer.removeRange(leftRange);
              yield fixer.removeRange(rightRange);
              if ((argNode.properties.length === 0 || isCommaToken(maybeTrailingComma)) && isCommaToken(maybeArgumentComma)) {
                yield fixer.remove(maybeArgumentComma);
              }
            } else {
              if (argNeedsParens(argNode, sourceCode)) {
                yield fixer.insertTextBefore(left, "...(");
                yield fixer.insertTextAfter(right, ")");
              } else {
                yield fixer.insertTextBefore(left, "...");
              }
            }
          }
        };
      }
      exports$l$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-object-spread"
          },
          schema: [],
          fixable: "code",
          messages: {
            useSpreadMessage: "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
            useLiteralMessage: "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            Program() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker$1(scope);
              const trackMap = { Object: { assign: { [CALL$1]: true } } };
              for (const {node} of tracker.iterateGlobalReferences(trackMap)) {
                if (node.arguments.length >= 1 && node.arguments[0].type === "ObjectExpression" && !hasArraySpread(node) && !(node.arguments.length > 1 && hasArgumentsWithAccessors(node))) {
                  const messageId = node.arguments.length === 1 ? "useLiteralMessage" : "useSpreadMessage";
                  const fix = defineFixer(node, sourceCode);
                  context.report({
                    node,
                    messageId,
                    fix
                  });
                }
              }
            }
          };
        }
      };
      var _preferObjectSpread = exports$l$1;
      var exports$k$1 = {};
      exports$k$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `Reflect` methods where applicable",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-reflect"
          },
          deprecated: true,
          replacedBy: [],
          schema: [{
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: {
                    enum: [
                      "apply",
                      "call",
                      "delete",
                      "defineProperty",
                      "getOwnPropertyDescriptor",
                      "getPrototypeOf",
                      "setPrototypeOf",
                      "isExtensible",
                      "getOwnPropertyNames",
                      "preventExtensions"
                    ]
                  },
                  uniqueItems: true
                }
              },
              additionalProperties: false
            }],
          messages: { preferReflect: "Avoid using {{existing}}, instead use {{substitute}}." }
        },
        create(context) {
          const existingNames = {
            apply: "Function.prototype.apply",
            call: "Function.prototype.call",
            defineProperty: "Object.defineProperty",
            getOwnPropertyDescriptor: "Object.getOwnPropertyDescriptor",
            getPrototypeOf: "Object.getPrototypeOf",
            setPrototypeOf: "Object.setPrototypeOf",
            isExtensible: "Object.isExtensible",
            getOwnPropertyNames: "Object.getOwnPropertyNames",
            preventExtensions: "Object.preventExtensions"
          };
          const reflectSubstitutes = {
            apply: "Reflect.apply",
            call: "Reflect.apply",
            defineProperty: "Reflect.defineProperty",
            getOwnPropertyDescriptor: "Reflect.getOwnPropertyDescriptor",
            getPrototypeOf: "Reflect.getPrototypeOf",
            setPrototypeOf: "Reflect.setPrototypeOf",
            isExtensible: "Reflect.isExtensible",
            getOwnPropertyNames: "Reflect.getOwnPropertyNames",
            preventExtensions: "Reflect.preventExtensions"
          };
          const exceptions = (context.options[0] || {}).exceptions || [];
          function report(node, existing, substitute) {
            context.report({
              node,
              messageId: "preferReflect",
              data: {
                existing,
                substitute
              }
            });
          }
          return {
            CallExpression(node) {
              const methodName = (node.callee.property || {}).name;
              const isReflectCall = (node.callee.object || {}).name === "Reflect";
              const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);
              const userConfiguredException = exceptions.indexOf(methodName) !== -1;
              if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {
                report(node, existingNames[methodName], reflectSubstitutes[methodName]);
              }
            },
            UnaryExpression(node) {
              const isDeleteOperator = node.operator === "delete";
              const targetsIdentifier = node.argument.type === "Identifier";
              const userConfiguredException = exceptions.indexOf("delete") !== -1;
              if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {
                report(node, "the delete keyword", "Reflect.deleteProperty");
              }
            }
          };
        }
      };
      var _preferReflect = exports$k$1;
      var _eslintUtils$1 = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$j$1 = {};
      const astUtils$a = _astUtils;
      const {CALL, CONSTRUCT, ReferenceTracker, findVariable} = _eslintUtils$1;
      function isStringLiteral(node) {
        return node.type === "Literal" && typeof node.value === "string";
      }
      function isRegexLiteral(node) {
        return node.type === "Literal" && Object.prototype.hasOwnProperty.call(node, "regex");
      }
      function isStaticTemplateLiteral$1(node) {
        return node.type === "TemplateLiteral" && node.expressions.length === 0;
      }
      exports$j$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "disallow use of the `RegExp` constructor in favor of regular expression literals",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/prefer-regex-literals"
          },
          schema: [{
              type: "object",
              properties: {
                disallowRedundantWrapping: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            unexpectedRegExp: "Use a regular expression literal instead of the 'RegExp' constructor.",
            unexpectedRedundantRegExp: "Regular expression literal is unnecessarily wrapped within a 'RegExp' constructor.",
            unexpectedRedundantRegExpWithFlags: "Use regular expression literal with flags instead of the 'RegExp' constructor."
          }
        },
        create(context) {
          const [{
              disallowRedundantWrapping = false
            } = {}] = context.options;
          function isGlobalReference(node) {
            const scope = context.getScope();
            const variable = findVariable(scope, node);
            return variable !== null && variable.scope.type === "global" && variable.defs.length === 0;
          }
          function isStringRawTaggedStaticTemplateLiteral(node) {
            return node.type === "TaggedTemplateExpression" && astUtils$a.isSpecificMemberAccess(node.tag, "String", "raw") && isGlobalReference(astUtils$a.skipChainExpression(node.tag).object) && isStaticTemplateLiteral$1(node.quasi);
          }
          function isStaticString(node) {
            return isStringLiteral(node) || isStaticTemplateLiteral$1(node) || isStringRawTaggedStaticTemplateLiteral(node);
          }
          function hasOnlyStaticStringArguments(node) {
            const args = node.arguments;
            if ((args.length === 1 || args.length === 2) && args.every(isStaticString)) {
              return true;
            }
            return false;
          }
          function isUnnecessarilyWrappedRegexLiteral(node) {
            const args = node.arguments;
            if (args.length === 1 && isRegexLiteral(args[0])) {
              return true;
            }
            if (args.length === 2 && isRegexLiteral(args[0]) && isStaticString(args[1])) {
              return true;
            }
            return false;
          }
          return {
            Program() {
              const scope = context.getScope();
              const tracker = new ReferenceTracker(scope);
              const traceMap = {
                RegExp: {
                  [CALL]: true,
                  [CONSTRUCT]: true
                }
              };
              for (const {node} of tracker.iterateGlobalReferences(traceMap)) {
                if (disallowRedundantWrapping && isUnnecessarilyWrappedRegexLiteral(node)) {
                  if (node.arguments.length === 2) {
                    context.report({
                      node,
                      messageId: "unexpectedRedundantRegExpWithFlags"
                    });
                  } else {
                    context.report({
                      node,
                      messageId: "unexpectedRedundantRegExp"
                    });
                  }
                } else if (hasOnlyStaticStringArguments(node)) {
                  context.report({
                    node,
                    messageId: "unexpectedRegExp"
                  });
                }
              }
            }
          };
        }
      };
      var _preferRegexLiterals = exports$j$1;
      var exports$i$1 = {};
      exports$i$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require generator functions to contain `yield`",
            category: "ECMAScript 6",
            recommended: true,
            url: "https://eslint.org/docs/rules/require-yield"
          },
          schema: [],
          messages: { missingYield: "This generator function does not have 'yield'." }
        },
        create(context) {
          const stack = [];
          function beginChecking(node) {
            if (node.generator) {
              stack.push(0);
            }
          }
          function endChecking(node) {
            if (!node.generator) {
              return;
            }
            const countYield = stack.pop();
            if (countYield === 0 && node.body.body.length > 0) {
              context.report({
                node,
                messageId: "missingYield"
              });
            }
          }
          return {
            FunctionDeclaration: beginChecking,
            "FunctionDeclaration:exit": endChecking,
            FunctionExpression: beginChecking,
            "FunctionExpression:exit": endChecking,
            YieldExpression() {
              if (stack.length > 0) {
                stack[stack.length - 1] += 1;
              }
            }
          };
        }
      };
      var _requireYield = exports$i$1;
      var exports$h$1 = {};
      exports$h$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce spacing between rest and spread operators and their expressions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/rest-spread-spacing"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never"
              ]
            }],
          messages: {
            unexpectedWhitespace: "Unexpected whitespace after {{type}} operator.",
            expectedWhitespace: "Expected whitespace after {{type}} operator."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode(), alwaysSpace = context.options[0] === "always";
          function checkWhiteSpace(node) {
            const operator = sourceCode.getFirstToken(node), nextToken = sourceCode.getTokenAfter(operator), hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);
            let type;
            switch (node.type) {
            case "SpreadElement":
              type = "spread";
              if (node.parent.type === "ObjectExpression") {
                type += " property";
              }
              break;
            case "RestElement":
              type = "rest";
              if (node.parent.type === "ObjectPattern") {
                type += " property";
              }
              break;
            case "ExperimentalSpreadProperty":
              type = "spread property";
              break;
            case "ExperimentalRestProperty":
              type = "rest property";
              break;
            default:
              return;
            }
            if (alwaysSpace && !hasWhitespace) {
              context.report({
                node,
                loc: operator.loc,
                messageId: "expectedWhitespace",
                data: { type },
                fix(fixer) {
                  return fixer.replaceTextRange([
                    operator.range[1],
                    nextToken.range[0]
                  ], " ");
                }
              });
            } else if (!alwaysSpace && hasWhitespace) {
              context.report({
                node,
                loc: {
                  start: operator.loc.end,
                  end: nextToken.loc.start
                },
                messageId: "unexpectedWhitespace",
                data: { type },
                fix(fixer) {
                  return fixer.removeRange([
                    operator.range[1],
                    nextToken.range[0]
                  ]);
                }
              });
            }
          }
          return {
            SpreadElement: checkWhiteSpace,
            RestElement: checkWhiteSpace,
            ExperimentalSpreadProperty: checkWhiteSpace,
            ExperimentalRestProperty: checkWhiteSpace
          };
        }
      };
      var _restSpreadSpacing = exports$h$1;
      var exports$g$1 = {};
      const astUtils$9 = _astUtils;
      exports$g$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before and after semicolons",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/semi-spacing"
          },
          fixable: "whitespace",
          schema: [{
              type: "object",
              properties: {
                before: {
                  type: "boolean",
                  default: false
                },
                after: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          messages: {
            unexpectedWhitespaceBefore: "Unexpected whitespace before semicolon.",
            unexpectedWhitespaceAfter: "Unexpected whitespace after semicolon.",
            missingWhitespaceBefore: "Missing whitespace before semicolon.",
            missingWhitespaceAfter: "Missing whitespace after semicolon."
          }
        },
        create(context) {
          const config = context.options[0], sourceCode = context.getSourceCode();
          let requireSpaceBefore = false, requireSpaceAfter = true;
          if (typeof config === "object") {
            requireSpaceBefore = config.before;
            requireSpaceAfter = config.after;
          }
          function hasLeadingSpace(token) {
            const tokenBefore = sourceCode.getTokenBefore(token);
            return tokenBefore && astUtils$9.isTokenOnSameLine(tokenBefore, token) && sourceCode.isSpaceBetweenTokens(tokenBefore, token);
          }
          function hasTrailingSpace(token) {
            const tokenAfter = sourceCode.getTokenAfter(token);
            return tokenAfter && astUtils$9.isTokenOnSameLine(token, tokenAfter) && sourceCode.isSpaceBetweenTokens(token, tokenAfter);
          }
          function isLastTokenInCurrentLine(token) {
            const tokenAfter = sourceCode.getTokenAfter(token);
            return !(tokenAfter && astUtils$9.isTokenOnSameLine(token, tokenAfter));
          }
          function isFirstTokenInCurrentLine(token) {
            const tokenBefore = sourceCode.getTokenBefore(token);
            return !(tokenBefore && astUtils$9.isTokenOnSameLine(token, tokenBefore));
          }
          function isBeforeClosingParen(token) {
            const nextToken = sourceCode.getTokenAfter(token);
            return nextToken && astUtils$9.isClosingBraceToken(nextToken) || astUtils$9.isClosingParenToken(nextToken);
          }
          function checkSemicolonSpacing(token, node) {
            if (astUtils$9.isSemicolonToken(token)) {
              if (hasLeadingSpace(token)) {
                if (!requireSpaceBefore) {
                  const tokenBefore = sourceCode.getTokenBefore(token);
                  const loc = {
                    start: tokenBefore.loc.end,
                    end: token.loc.start
                  };
                  context.report({
                    node,
                    loc,
                    messageId: "unexpectedWhitespaceBefore",
                    fix(fixer) {
                      return fixer.removeRange([
                        tokenBefore.range[1],
                        token.range[0]
                      ]);
                    }
                  });
                }
              } else {
                if (requireSpaceBefore) {
                  const loc = token.loc;
                  context.report({
                    node,
                    loc,
                    messageId: "missingWhitespaceBefore",
                    fix(fixer) {
                      return fixer.insertTextBefore(token, " ");
                    }
                  });
                }
              }
              if (!isFirstTokenInCurrentLine(token) && !isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {
                if (hasTrailingSpace(token)) {
                  if (!requireSpaceAfter) {
                    const tokenAfter = sourceCode.getTokenAfter(token);
                    const loc = {
                      start: token.loc.end,
                      end: tokenAfter.loc.start
                    };
                    context.report({
                      node,
                      loc,
                      messageId: "unexpectedWhitespaceAfter",
                      fix(fixer) {
                        return fixer.removeRange([
                          token.range[1],
                          tokenAfter.range[0]
                        ]);
                      }
                    });
                  }
                } else {
                  if (requireSpaceAfter) {
                    const loc = token.loc;
                    context.report({
                      node,
                      loc,
                      messageId: "missingWhitespaceAfter",
                      fix(fixer) {
                        return fixer.insertTextAfter(token, " ");
                      }
                    });
                  }
                }
              }
            }
          }
          function checkNode(node) {
            const token = sourceCode.getLastToken(node);
            checkSemicolonSpacing(token, node);
          }
          return {
            VariableDeclaration: checkNode,
            ExpressionStatement: checkNode,
            BreakStatement: checkNode,
            ContinueStatement: checkNode,
            DebuggerStatement: checkNode,
            DoWhileStatement: checkNode,
            ReturnStatement: checkNode,
            ThrowStatement: checkNode,
            ImportDeclaration: checkNode,
            ExportNamedDeclaration: checkNode,
            ExportAllDeclaration: checkNode,
            ExportDefaultDeclaration: checkNode,
            ForStatement(node) {
              if (node.init) {
                checkSemicolonSpacing(sourceCode.getTokenAfter(node.init), node);
              }
              if (node.test) {
                checkSemicolonSpacing(sourceCode.getTokenAfter(node.test), node);
              }
            }
          };
        }
      };
      var _semiSpacing = exports$g$1;
      var exports$f$1 = {};
      const astUtils$8 = _astUtils;
      const SELECTOR = `:matches(${ [
  "BreakStatement",
  "ContinueStatement",
  "DebuggerStatement",
  "DoWhileStatement",
  "ExportAllDeclaration",
  "ExportDefaultDeclaration",
  "ExportNamedDeclaration",
  "ExpressionStatement",
  "ImportDeclaration",
  "ReturnStatement",
  "ThrowStatement",
  "VariableDeclaration"
].join(",") })`;
      function getChildren(node) {
        const t = node.type;
        if (t === "BlockStatement" || t === "Program") {
          return node.body;
        }
        if (t === "SwitchCase") {
          return node.consequent;
        }
        return null;
      }
      function isLastChild(node) {
        const t = node.parent.type;
        if (t === "IfStatement" && node.parent.consequent === node && node.parent.alternate) {
          return true;
        }
        if (t === "DoWhileStatement") {
          return true;
        }
        const nodeList = getChildren(node.parent);
        return nodeList !== null && nodeList[nodeList.length - 1] === node;
      }
      exports$f$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce location of semicolons",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/semi-style"
          },
          schema: [{
              enum: [
                "last",
                "first"
              ]
            }],
          fixable: "whitespace",
          messages: { expectedSemiColon: "Expected this semicolon to be at {{pos}}." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const option = context.options[0] || "last";
          function check(semiToken, expected) {
            const prevToken = sourceCode.getTokenBefore(semiToken);
            const nextToken = sourceCode.getTokenAfter(semiToken);
            const prevIsSameLine = !prevToken || astUtils$8.isTokenOnSameLine(prevToken, semiToken);
            const nextIsSameLine = !nextToken || astUtils$8.isTokenOnSameLine(semiToken, nextToken);
            if (expected === "last" && !prevIsSameLine || expected === "first" && !nextIsSameLine) {
              context.report({
                loc: semiToken.loc,
                messageId: "expectedSemiColon",
                data: { pos: expected === "last" ? "the end of the previous line" : "the beginning of the next line" },
                fix(fixer) {
                  if (prevToken && nextToken && sourceCode.commentsExistBetween(prevToken, nextToken)) {
                    return null;
                  }
                  const start = prevToken ? prevToken.range[1] : semiToken.range[0];
                  const end = nextToken ? nextToken.range[0] : semiToken.range[1];
                  const text = expected === "last" ? ";\n" : "\n;";
                  return fixer.replaceTextRange([
                    start,
                    end
                  ], text);
                }
              });
            }
          }
          return {
            [SELECTOR](node) {
              if (option === "first" && isLastChild(node)) {
                return;
              }
              const lastToken = sourceCode.getLastToken(node);
              if (astUtils$8.isSemicolonToken(lastToken)) {
                check(lastToken, option);
              }
            },
            ForStatement(node) {
              const firstSemi = node.init && sourceCode.getTokenAfter(node.init, astUtils$8.isSemicolonToken);
              const secondSemi = node.test && sourceCode.getTokenAfter(node.test, astUtils$8.isSemicolonToken);
              if (firstSemi) {
                check(firstSemi, "last");
              }
              if (secondSemi) {
                check(secondSemi, "last");
              }
            }
          };
        }
      };
      var _semiStyle = exports$f$1;
      var exports$e$1 = {};
      exports$e$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require variables within the same declaration block to be sorted",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/sort-vars"
          },
          schema: [{
              type: "object",
              properties: {
                ignoreCase: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          fixable: "code",
          messages: { sortVars: "Variables within the same declaration block should be sorted alphabetically." }
        },
        create(context) {
          const configuration = context.options[0] || {}, ignoreCase = configuration.ignoreCase || false, sourceCode = context.getSourceCode();
          return {
            VariableDeclaration(node) {
              const idDeclarations = node.declarations.filter(decl => decl.id.type === "Identifier");
              const getSortableName = ignoreCase ? decl => decl.id.name.toLowerCase() : decl => decl.id.name;
              const unfixable = idDeclarations.some(decl => decl.init !== null && decl.init.type !== "Literal");
              let fixed = false;
              idDeclarations.slice(1).reduce((memo, decl) => {
                const lastVariableName = getSortableName(memo), currentVariableName = getSortableName(decl);
                if (currentVariableName < lastVariableName) {
                  context.report({
                    node: decl,
                    messageId: "sortVars",
                    fix(fixer) {
                      if (unfixable || fixed) {
                        return null;
                      }
                      return fixer.replaceTextRange([
                        idDeclarations[0].range[0],
                        idDeclarations[idDeclarations.length - 1].range[1]
                      ], idDeclarations.slice().sort((declA, declB) => {
                        const aName = getSortableName(declA);
                        const bName = getSortableName(declB);
                        return aName > bName ? 1 : -1;
                      }).reduce((sourceText, identifier, index) => {
                        const textAfterIdentifier = index === idDeclarations.length - 1 ? "" : sourceCode.getText().slice(idDeclarations[index].range[1], idDeclarations[index + 1].range[0]);
                        return sourceText + sourceCode.getText(identifier) + textAfterIdentifier;
                      }, ""));
                    }
                  });
                  fixed = true;
                  return memo;
                }
                return decl;
              }, idDeclarations[0]);
            }
          };
        }
      };
      var _sortVars = exports$e$1;
      var exports$d$1 = {};
      const astUtils$7 = _astUtils;
      function isFunctionBody(node) {
        const parent = node.parent;
        return node.type === "BlockStatement" && astUtils$7.isFunction(parent) && parent.body === node;
      }
      exports$d$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before blocks",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/space-before-blocks"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "always",
                    "never"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    keywords: {
                      enum: [
                        "always",
                        "never",
                        "off"
                      ]
                    },
                    functions: {
                      enum: [
                        "always",
                        "never",
                        "off"
                      ]
                    },
                    classes: {
                      enum: [
                        "always",
                        "never",
                        "off"
                      ]
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            unexpectedSpace: "Unexpected space before opening brace.",
            missingSpace: "Missing space before opening brace."
          }
        },
        create(context) {
          const config = context.options[0], sourceCode = context.getSourceCode();
          let alwaysFunctions = true, alwaysKeywords = true, alwaysClasses = true, neverFunctions = false, neverKeywords = false, neverClasses = false;
          if (typeof config === "object") {
            alwaysFunctions = config.functions === "always";
            alwaysKeywords = config.keywords === "always";
            alwaysClasses = config.classes === "always";
            neverFunctions = config.functions === "never";
            neverKeywords = config.keywords === "never";
            neverClasses = config.classes === "never";
          } else if (config === "never") {
            alwaysFunctions = false;
            alwaysKeywords = false;
            alwaysClasses = false;
            neverFunctions = true;
            neverKeywords = true;
            neverClasses = true;
          }
          function isConflicted(precedingToken, node) {
            return astUtils$7.isArrowToken(precedingToken) || astUtils$7.isKeywordToken(precedingToken) && !isFunctionBody(node);
          }
          function checkPrecedingSpace(node) {
            const precedingToken = sourceCode.getTokenBefore(node);
            if (precedingToken && !isConflicted(precedingToken, node) && astUtils$7.isTokenOnSameLine(precedingToken, node)) {
              const hasSpace = sourceCode.isSpaceBetweenTokens(precedingToken, node);
              let requireSpace;
              let requireNoSpace;
              if (isFunctionBody(node)) {
                requireSpace = alwaysFunctions;
                requireNoSpace = neverFunctions;
              } else if (node.type === "ClassBody") {
                requireSpace = alwaysClasses;
                requireNoSpace = neverClasses;
              } else {
                requireSpace = alwaysKeywords;
                requireNoSpace = neverKeywords;
              }
              if (requireSpace && !hasSpace) {
                context.report({
                  node,
                  messageId: "missingSpace",
                  fix(fixer) {
                    return fixer.insertTextBefore(node, " ");
                  }
                });
              } else if (requireNoSpace && hasSpace) {
                context.report({
                  node,
                  messageId: "unexpectedSpace",
                  fix(fixer) {
                    return fixer.removeRange([
                      precedingToken.range[1],
                      node.range[0]
                    ]);
                  }
                });
              }
            }
          }
          function checkSpaceBeforeCaseBlock(node) {
            const cases = node.cases;
            let openingBrace;
            if (cases.length > 0) {
              openingBrace = sourceCode.getTokenBefore(cases[0]);
            } else {
              openingBrace = sourceCode.getLastToken(node, 1);
            }
            checkPrecedingSpace(openingBrace);
          }
          return {
            BlockStatement: checkPrecedingSpace,
            ClassBody: checkPrecedingSpace,
            SwitchStatement: checkSpaceBeforeCaseBlock
          };
        }
      };
      var _spaceBeforeBlocks = exports$d$1;
      var exports$c$1 = {};
      const astUtils$6 = _astUtils;
      exports$c$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce consistent spacing before `function` definition opening parenthesis",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/space-before-function-paren"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "always",
                    "never"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    anonymous: {
                      enum: [
                        "always",
                        "never",
                        "ignore"
                      ]
                    },
                    named: {
                      enum: [
                        "always",
                        "never",
                        "ignore"
                      ]
                    },
                    asyncArrow: {
                      enum: [
                        "always",
                        "never",
                        "ignore"
                      ]
                    }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            unexpectedSpace: "Unexpected space before function parentheses.",
            missingSpace: "Missing space before function parentheses."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const baseConfig = typeof context.options[0] === "string" ? context.options[0] : "always";
          const overrideConfig = typeof context.options[0] === "object" ? context.options[0] : {};
          function isNamedFunction(node) {
            if (node.id) {
              return true;
            }
            const parent = node.parent;
            return parent.type === "MethodDefinition" || parent.type === "Property" && (parent.kind === "get" || parent.kind === "set" || parent.method);
          }
          function getConfigForFunction(node) {
            if (node.type === "ArrowFunctionExpression") {
              if (node.async && astUtils$6.isOpeningParenToken(sourceCode.getFirstToken(node, { skip: 1 }))) {
                return overrideConfig.asyncArrow || baseConfig;
              }
            } else if (isNamedFunction(node)) {
              return overrideConfig.named || baseConfig;
            } else if (!node.generator) {
              return overrideConfig.anonymous || baseConfig;
            }
            return "ignore";
          }
          function checkFunction(node) {
            const functionConfig = getConfigForFunction(node);
            if (functionConfig === "ignore") {
              return;
            }
            const rightToken = sourceCode.getFirstToken(node, astUtils$6.isOpeningParenToken);
            const leftToken = sourceCode.getTokenBefore(rightToken);
            const hasSpacing = sourceCode.isSpaceBetweenTokens(leftToken, rightToken);
            if (hasSpacing && functionConfig === "never") {
              context.report({
                node,
                loc: {
                  start: leftToken.loc.end,
                  end: rightToken.loc.start
                },
                messageId: "unexpectedSpace",
                fix(fixer) {
                  const comments = sourceCode.getCommentsBefore(rightToken);
                  if (comments.some(comment => comment.type === "Line")) {
                    return null;
                  }
                  return fixer.replaceTextRange([
                    leftToken.range[1],
                    rightToken.range[0]
                  ], comments.reduce((text, comment) => text + sourceCode.getText(comment), ""));
                }
              });
            } else if (!hasSpacing && functionConfig === "always") {
              context.report({
                node,
                loc: rightToken.loc,
                messageId: "missingSpace",
                fix: fixer => fixer.insertTextAfter(leftToken, " ")
              });
            }
          }
          return {
            ArrowFunctionExpression: checkFunction,
            FunctionDeclaration: checkFunction,
            FunctionExpression: checkFunction
          };
        }
      };
      var _spaceBeforeFunctionParen = exports$c$1;
      var _escapeStringRegexp = "default" in _escapeStringRegexp2 ? exports$1$s : _escapeStringRegexp2;
      var exports$b$1 = {};
      const escapeRegExp = _escapeStringRegexp;
      const astUtils$5 = _astUtils;
      function escape$1(s) {
        return `(?:${ escapeRegExp(s) })`;
      }
      function escapeAndRepeat(s) {
        return `${ escape$1(s) }+`;
      }
      function parseMarkersOption(markers) {
        if (markers.indexOf("*") === -1) {
          return markers.concat("*");
        }
        return markers;
      }
      function createExceptionsPattern(exceptions) {
        let pattern = "";
        if (exceptions.length === 0) {
          pattern += "\\s";
        } else {
          pattern += "(?:\\s|";
          if (exceptions.length === 1) {
            pattern += escapeAndRepeat(exceptions[0]);
          } else {
            pattern += "(?:";
            pattern += exceptions.map(escapeAndRepeat).join("|");
            pattern += ")";
          }
          pattern += `(?:$|[${ Array.from(astUtils$5.LINEBREAKS).join("") }]))`;
        }
        return pattern;
      }
      function createAlwaysStylePattern(markers, exceptions) {
        let pattern = "^";
        if (markers.length === 1) {
          pattern += escape$1(markers[0]);
        } else {
          pattern += "(?:";
          pattern += markers.map(escape$1).join("|");
          pattern += ")";
        }
        pattern += "?";
        pattern += createExceptionsPattern(exceptions);
        return new RegExp(pattern, "u");
      }
      function createNeverStylePattern(markers) {
        const pattern = `^(${ markers.map(escape$1).join("|") })?[ \t]+`;
        return new RegExp(pattern, "u");
      }
      exports$b$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "enforce consistent spacing after the `//` or `/*` in a comment",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/spaced-comment"
          },
          fixable: "whitespace",
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                exceptions: {
                  type: "array",
                  items: { type: "string" }
                },
                markers: {
                  type: "array",
                  items: { type: "string" }
                },
                line: {
                  type: "object",
                  properties: {
                    exceptions: {
                      type: "array",
                      items: { type: "string" }
                    },
                    markers: {
                      type: "array",
                      items: { type: "string" }
                    }
                  },
                  additionalProperties: false
                },
                block: {
                  type: "object",
                  properties: {
                    exceptions: {
                      type: "array",
                      items: { type: "string" }
                    },
                    markers: {
                      type: "array",
                      items: { type: "string" }
                    },
                    balanced: {
                      type: "boolean",
                      default: false
                    }
                  },
                  additionalProperties: false
                }
              },
              additionalProperties: false
            }
          ],
          messages: {
            unexpectedSpaceAfterMarker: "Unexpected space or tab after marker ({{refChar}}) in comment.",
            expectedExceptionAfter: "Expected exception block, space or tab after '{{refChar}}' in comment.",
            unexpectedSpaceBefore: "Unexpected space or tab before '*/' in comment.",
            unexpectedSpaceAfter: "Unexpected space or tab after '{{refChar}}' in comment.",
            expectedSpaceBefore: "Expected space or tab before '*/' in comment.",
            expectedSpaceAfter: "Expected space or tab after '{{refChar}}' in comment."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const requireSpace = context.options[0] !== "never";
          const config = context.options[1] || {};
          const balanced = config.block && config.block.balanced;
          const styleRules = [
            "block",
            "line"
          ].reduce((rule, type) => {
            const markers = parseMarkersOption(config[type] && config[type].markers || config.markers || []);
            const exceptions = config[type] && config[type].exceptions || config.exceptions || [];
            const endNeverPattern = "[ \t]+$";
            rule[type] = {
              beginRegex: requireSpace ? createAlwaysStylePattern(markers, exceptions) : createNeverStylePattern(markers),
              endRegex: balanced && requireSpace ? new RegExp(`${ createExceptionsPattern(exceptions) }$`, "u") : new RegExp(endNeverPattern, "u"),
              hasExceptions: exceptions.length > 0,
              captureMarker: new RegExp(`^(${ markers.map(escape$1).join("|") })`, "u"),
              markers: new Set(markers)
            };
            return rule;
          }, {});
          function reportBegin(node, messageId, match, refChar) {
            const type = node.type.toLowerCase(), commentIdentifier = type === "block" ? "/*" : "//";
            context.report({
              node,
              fix(fixer) {
                const start = node.range[0];
                let end = start + 2;
                if (requireSpace) {
                  if (match) {
                    end += match[0].length;
                  }
                  return fixer.insertTextAfterRange([
                    start,
                    end
                  ], " ");
                }
                end += match[0].length;
                return fixer.replaceTextRange([
                  start,
                  end
                ], commentIdentifier + (match[1] ? match[1] : ""));
              },
              messageId,
              data: { refChar }
            });
          }
          function reportEnd(node, messageId, match) {
            context.report({
              node,
              fix(fixer) {
                if (requireSpace) {
                  return fixer.insertTextAfterRange([
                    node.range[0],
                    node.range[1] - 2
                  ], " ");
                }
                const end = node.range[1] - 2, start = end - match[0].length;
                return fixer.replaceTextRange([
                  start,
                  end
                ], "");
              },
              messageId
            });
          }
          function checkCommentForSpace(node) {
            const type = node.type.toLowerCase(), rule = styleRules[type], commentIdentifier = type === "block" ? "/*" : "//";
            if (node.value.length === 0 || rule.markers.has(node.value)) {
              return;
            }
            const beginMatch = rule.beginRegex.exec(node.value);
            const endMatch = rule.endRegex.exec(node.value);
            if (requireSpace) {
              if (!beginMatch) {
                const hasMarker = rule.captureMarker.exec(node.value);
                const marker = hasMarker ? commentIdentifier + hasMarker[0] : commentIdentifier;
                if (rule.hasExceptions) {
                  reportBegin(node, "expectedExceptionAfter", hasMarker, marker);
                } else {
                  reportBegin(node, "expectedSpaceAfter", hasMarker, marker);
                }
              }
              if (balanced && type === "block" && !endMatch) {
                reportEnd(node, "expectedSpaceBefore");
              }
            } else {
              if (beginMatch) {
                if (!beginMatch[1]) {
                  reportBegin(node, "unexpectedSpaceAfter", beginMatch, commentIdentifier);
                } else {
                  reportBegin(node, "unexpectedSpaceAfterMarker", beginMatch, beginMatch[1]);
                }
              }
              if (balanced && type === "block" && endMatch) {
                reportEnd(node, "unexpectedSpaceBefore", endMatch);
              }
            }
          }
          return {
            Program() {
              const comments = sourceCode.getAllComments();
              comments.filter(token => token.type !== "Shebang").forEach(checkCommentForSpace);
            }
          };
        }
      };
      var _spacedComment = exports$b$1;
      var exports$a$1 = {};
      const astUtils$4 = _astUtils;
      function getUseStrictDirectives(statements) {
        const directives = [];
        for (let i = 0; i < statements.length; i++) {
          const statement = statements[i];
          if (statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && statement.expression.value === "use strict") {
            directives[i] = statement;
          } else {
            break;
          }
        }
        return directives;
      }
      function isSimpleParameter(node) {
        return node.type === "Identifier";
      }
      function isSimpleParameterList(params) {
        return params.every(isSimpleParameter);
      }
      exports$a$1 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow strict mode directives",
            category: "Strict Mode",
            recommended: false,
            url: "https://eslint.org/docs/rules/strict"
          },
          schema: [{
              enum: [
                "never",
                "global",
                "function",
                "safe"
              ]
            }],
          fixable: "code",
          messages: {
            function: "Use the function form of 'use strict'.",
            global: "Use the global form of 'use strict'.",
            multiple: "Multiple 'use strict' directives.",
            never: "Strict mode is not permitted.",
            unnecessary: "Unnecessary 'use strict' directive.",
            module: "'use strict' is unnecessary inside of modules.",
            implied: "'use strict' is unnecessary when implied strict mode is enabled.",
            unnecessaryInClasses: "'use strict' is unnecessary inside of classes.",
            nonSimpleParameterList: "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
            wrap: "Wrap {{name}} in a function with 'use strict' directive."
          }
        },
        create(context) {
          const ecmaFeatures = context.parserOptions.ecmaFeatures || {}, scopes = [], classScopes = [];
          let mode = context.options[0] || "safe";
          if (ecmaFeatures.impliedStrict) {
            mode = "implied";
          } else if (mode === "safe") {
            mode = ecmaFeatures.globalReturn ? "global" : "function";
          }
          function shouldFix(errorType) {
            return errorType === "multiple" || errorType === "unnecessary" || errorType === "module" || errorType === "implied" || errorType === "unnecessaryInClasses";
          }
          function getFixFunction(node) {
            return fixer => fixer.remove(node);
          }
          function reportSlice(nodes, start, end, messageId, fix) {
            nodes.slice(start, end).forEach(node => {
              context.report({
                node,
                messageId,
                fix: fix ? getFixFunction(node) : null
              });
            });
          }
          function reportAll(nodes, messageId, fix) {
            reportSlice(nodes, 0, nodes.length, messageId, fix);
          }
          function reportAllExceptFirst(nodes, messageId, fix) {
            reportSlice(nodes, 1, nodes.length, messageId, fix);
          }
          function enterFunctionInFunctionMode(node, useStrictDirectives) {
            const isInClass = classScopes.length > 0, isParentGlobal = scopes.length === 0 && classScopes.length === 0, isParentStrict = scopes.length > 0 && scopes[scopes.length - 1], isStrict = useStrictDirectives.length > 0;
            if (isStrict) {
              if (!isSimpleParameterList(node.params)) {
                context.report({
                  node: useStrictDirectives[0],
                  messageId: "nonSimpleParameterList"
                });
              } else if (isParentStrict) {
                context.report({
                  node: useStrictDirectives[0],
                  messageId: "unnecessary",
                  fix: getFixFunction(useStrictDirectives[0])
                });
              } else if (isInClass) {
                context.report({
                  node: useStrictDirectives[0],
                  messageId: "unnecessaryInClasses",
                  fix: getFixFunction(useStrictDirectives[0])
                });
              }
              reportAllExceptFirst(useStrictDirectives, "multiple", true);
            } else if (isParentGlobal) {
              if (isSimpleParameterList(node.params)) {
                context.report({
                  node,
                  messageId: "function"
                });
              } else {
                context.report({
                  node,
                  messageId: "wrap",
                  data: { name: astUtils$4.getFunctionNameWithKind(node) }
                });
              }
            }
            scopes.push(isParentStrict || isStrict);
          }
          function exitFunctionInFunctionMode() {
            scopes.pop();
          }
          function enterFunction(node) {
            const isBlock = node.body.type === "BlockStatement", useStrictDirectives = isBlock ? getUseStrictDirectives(node.body.body) : [];
            if (mode === "function") {
              enterFunctionInFunctionMode(node, useStrictDirectives);
            } else if (useStrictDirectives.length > 0) {
              if (isSimpleParameterList(node.params)) {
                reportAll(useStrictDirectives, mode, shouldFix(mode));
              } else {
                context.report({
                  node: useStrictDirectives[0],
                  messageId: "nonSimpleParameterList"
                });
                reportAllExceptFirst(useStrictDirectives, "multiple", true);
              }
            }
          }
          const rule = {
            Program(node) {
              const useStrictDirectives = getUseStrictDirectives(node.body);
              if (node.sourceType === "module") {
                mode = "module";
              }
              if (mode === "global") {
                if (node.body.length > 0 && useStrictDirectives.length === 0) {
                  context.report({
                    node,
                    messageId: "global"
                  });
                }
                reportAllExceptFirst(useStrictDirectives, "multiple", true);
              } else {
                reportAll(useStrictDirectives, mode, shouldFix(mode));
              }
            },
            FunctionDeclaration: enterFunction,
            FunctionExpression: enterFunction,
            ArrowFunctionExpression: enterFunction
          };
          if (mode === "function") {
            Object.assign(rule, {
              ClassBody() {
                classScopes.push(true);
              },
              "ClassBody:exit"() {
                classScopes.pop();
              },
              "FunctionDeclaration:exit": exitFunctionInFunctionMode,
              "FunctionExpression:exit": exitFunctionInFunctionMode,
              "ArrowFunctionExpression:exit": exitFunctionInFunctionMode
            });
          }
          return rule;
        }
      };
      var _strict = exports$a$1;
      var exports$9$1 = {};
      const astUtils$3 = _astUtils;
      exports$9$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "enforce spacing around colons of switch statements",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/switch-colon-spacing"
          },
          schema: [{
              type: "object",
              properties: {
                before: {
                  type: "boolean",
                  default: false
                },
                after: {
                  type: "boolean",
                  default: true
                }
              },
              additionalProperties: false
            }],
          fixable: "whitespace",
          messages: {
            expectedBefore: "Expected space(s) before this colon.",
            expectedAfter: "Expected space(s) after this colon.",
            unexpectedBefore: "Unexpected space(s) before this colon.",
            unexpectedAfter: "Unexpected space(s) after this colon."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const options = context.options[0] || {};
          const beforeSpacing = options.before === true;
          const afterSpacing = options.after !== false;
          function getColonToken(node) {
            if (node.test) {
              return sourceCode.getTokenAfter(node.test, astUtils$3.isColonToken);
            }
            return sourceCode.getFirstToken(node, 1);
          }
          function isValidSpacing(left, right, expected) {
            return astUtils$3.isClosingBraceToken(right) || !astUtils$3.isTokenOnSameLine(left, right) || sourceCode.isSpaceBetweenTokens(left, right) === expected;
          }
          function commentsExistBetween(left, right) {
            return sourceCode.getFirstTokenBetween(left, right, {
              includeComments: true,
              filter: astUtils$3.isCommentToken
            }) !== null;
          }
          function fix(fixer, left, right, spacing) {
            if (commentsExistBetween(left, right)) {
              return null;
            }
            if (spacing) {
              return fixer.insertTextAfter(left, " ");
            }
            return fixer.removeRange([
              left.range[1],
              right.range[0]
            ]);
          }
          return {
            SwitchCase(node) {
              const colonToken = getColonToken(node);
              const beforeToken = sourceCode.getTokenBefore(colonToken);
              const afterToken = sourceCode.getTokenAfter(colonToken);
              if (!isValidSpacing(beforeToken, colonToken, beforeSpacing)) {
                context.report({
                  node,
                  loc: colonToken.loc,
                  messageId: beforeSpacing ? "expectedBefore" : "unexpectedBefore",
                  fix: fixer => fix(fixer, beforeToken, colonToken, beforeSpacing)
                });
              }
              if (!isValidSpacing(colonToken, afterToken, afterSpacing)) {
                context.report({
                  node,
                  loc: colonToken.loc,
                  messageId: afterSpacing ? "expectedAfter" : "unexpectedAfter",
                  fix: fixer => fix(fixer, colonToken, afterToken, afterSpacing)
                });
              }
            }
          };
        }
      };
      var _switchColonSpacing = exports$9$1;
      var exports$8$1 = {};
      exports$8$1 = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow spacing between template tags and their literals",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/template-tag-spacing"
          },
          fixable: "whitespace",
          schema: [{
              enum: [
                "always",
                "never"
              ]
            }],
          messages: {
            unexpected: "Unexpected space between template tag and template literal.",
            missing: "Missing space between template tag and template literal."
          }
        },
        create(context) {
          const never = context.options[0] !== "always";
          const sourceCode = context.getSourceCode();
          function checkSpacing(node) {
            const tagToken = sourceCode.getTokenBefore(node.quasi);
            const literalToken = sourceCode.getFirstToken(node.quasi);
            const hasWhitespace = sourceCode.isSpaceBetweenTokens(tagToken, literalToken);
            if (never && hasWhitespace) {
              context.report({
                node,
                loc: {
                  start: tagToken.loc.end,
                  end: literalToken.loc.start
                },
                messageId: "unexpected",
                fix(fixer) {
                  const comments = sourceCode.getCommentsBefore(node.quasi);
                  if (comments.some(comment => comment.type === "Line")) {
                    return null;
                  }
                  return fixer.replaceTextRange([
                    tagToken.range[1],
                    literalToken.range[0]
                  ], comments.reduce((text, comment) => text + sourceCode.getText(comment), ""));
                }
              });
            } else if (!never && !hasWhitespace) {
              context.report({
                node,
                loc: {
                  start: node.loc.start,
                  end: literalToken.loc.start
                },
                messageId: "missing",
                fix(fixer) {
                  return fixer.insertTextAfter(tagToken, " ");
                }
              });
            }
          }
          return { TaggedTemplateExpression: checkSpacing };
        }
      };
      var _templateTagSpacing = exports$8$1;
      var exports$7$1 = {};
      const astUtils$2 = _astUtils;
      function isNaNIdentifier(node) {
        return Boolean(node) && (astUtils$2.isSpecificId(node, "NaN") || astUtils$2.isSpecificMemberAccess(node, "Number", "NaN"));
      }
      exports$7$1 = {
        meta: {
          type: "problem",
          docs: {
            description: "require calls to `isNaN()` when checking for `NaN`",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/use-isnan"
          },
          schema: [{
              type: "object",
              properties: {
                enforceForSwitchCase: {
                  type: "boolean",
                  default: true
                },
                enforceForIndexOf: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            comparisonWithNaN: "Use the isNaN function to compare with NaN.",
            switchNaN: "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
            caseNaN: "'case NaN' can never match. Use Number.isNaN before the switch.",
            indexOfNaN: "Array prototype method '{{ methodName }}' cannot find NaN."
          }
        },
        create(context) {
          const enforceForSwitchCase = !context.options[0] || context.options[0].enforceForSwitchCase;
          const enforceForIndexOf = context.options[0] && context.options[0].enforceForIndexOf;
          function checkBinaryExpression(node) {
            if (/^(?:[<>]|[!=]=)=?$/u.test(node.operator) && (isNaNIdentifier(node.left) || isNaNIdentifier(node.right))) {
              context.report({
                node,
                messageId: "comparisonWithNaN"
              });
            }
          }
          function checkSwitchStatement(node) {
            if (isNaNIdentifier(node.discriminant)) {
              context.report({
                node,
                messageId: "switchNaN"
              });
            }
            for (const switchCase of node.cases) {
              if (isNaNIdentifier(switchCase.test)) {
                context.report({
                  node: switchCase,
                  messageId: "caseNaN"
                });
              }
            }
          }
          function checkCallExpression(node) {
            const callee = astUtils$2.skipChainExpression(node.callee);
            if (callee.type === "MemberExpression") {
              const methodName = astUtils$2.getStaticPropertyName(callee);
              if ((methodName === "indexOf" || methodName === "lastIndexOf") && node.arguments.length === 1 && isNaNIdentifier(node.arguments[0])) {
                context.report({
                  node,
                  messageId: "indexOfNaN",
                  data: { methodName }
                });
              }
            }
          }
          const listeners = { BinaryExpression: checkBinaryExpression };
          if (enforceForSwitchCase) {
            listeners.SwitchStatement = checkSwitchStatement;
          }
          if (enforceForIndexOf) {
            listeners.CallExpression = checkCallExpression;
          }
          return listeners;
        }
      };
      var _useIsnan = exports$7$1;
      var exports$6$2 = {};
      exports$6$2 = {
        meta: {
          type: "problem",
          docs: {
            description: "enforce comparing `typeof` expressions against valid strings",
            category: "Possible Errors",
            recommended: true,
            url: "https://eslint.org/docs/rules/valid-typeof"
          },
          schema: [{
              type: "object",
              properties: {
                requireStringLiterals: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }],
          messages: {
            invalidValue: "Invalid typeof comparison value.",
            notString: "Typeof comparisons should be to string literals."
          }
        },
        create(context) {
          const VALID_TYPES = [
              "symbol",
              "undefined",
              "object",
              "boolean",
              "number",
              "string",
              "function",
              "bigint"
            ], OPERATORS = [
              "==",
              "===",
              "!=",
              "!=="
            ];
          const requireStringLiterals = context.options[0] && context.options[0].requireStringLiterals;
          function isTypeofExpression(node) {
            return node.type === "UnaryExpression" && node.operator === "typeof";
          }
          return {
            UnaryExpression(node) {
              if (isTypeofExpression(node)) {
                const parent = context.getAncestors().pop();
                if (parent.type === "BinaryExpression" && OPERATORS.indexOf(parent.operator) !== -1) {
                  const sibling = parent.left === node ? parent.right : parent.left;
                  if (sibling.type === "Literal" || sibling.type === "TemplateLiteral" && !sibling.expressions.length) {
                    const value = sibling.type === "Literal" ? sibling.value : sibling.quasis[0].value.cooked;
                    if (VALID_TYPES.indexOf(value) === -1) {
                      context.report({
                        node: sibling,
                        messageId: "invalidValue"
                      });
                    }
                  } else if (requireStringLiterals && !isTypeofExpression(sibling)) {
                    context.report({
                      node: sibling,
                      messageId: "notString"
                    });
                  }
                }
              }
            }
          };
        }
      };
      var _validTypeof = exports$6$2;
      var exports$5$2 = {};
      exports$5$2 = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require `var` declarations be placed at the top of their containing scope",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/vars-on-top"
          },
          schema: [],
          messages: { top: "All 'var' declarations must be at the top of the function scope." }
        },
        create(context) {
          function looksLikeDirective(node) {
            return node.type === "ExpressionStatement" && node.expression.type === "Literal" && typeof node.expression.value === "string";
          }
          function looksLikeImport(node) {
            return node.type === "ImportDeclaration" || node.type === "ImportSpecifier" || node.type === "ImportDefaultSpecifier" || node.type === "ImportNamespaceSpecifier";
          }
          function isVariableDeclaration(node) {
            return node.type === "VariableDeclaration" || node.type === "ExportNamedDeclaration" && node.declaration && node.declaration.type === "VariableDeclaration";
          }
          function isVarOnTop(node, statements) {
            const l = statements.length;
            let i = 0;
            for (; i < l; ++i) {
              if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {
                break;
              }
            }
            for (; i < l; ++i) {
              if (!isVariableDeclaration(statements[i])) {
                return false;
              }
              if (statements[i] === node) {
                return true;
              }
            }
            return false;
          }
          function globalVarCheck(node, parent) {
            if (!isVarOnTop(node, parent.body)) {
              context.report({
                node,
                messageId: "top"
              });
            }
          }
          function blockScopeVarCheck(node, parent, grandParent) {
            if (!(/Function/u.test(grandParent.type) && parent.type === "BlockStatement" && isVarOnTop(node, parent.body))) {
              context.report({
                node,
                messageId: "top"
              });
            }
          }
          return {
            "VariableDeclaration[kind='var']"(node) {
              if (node.parent.type === "ExportNamedDeclaration") {
                globalVarCheck(node.parent, node.parent.parent);
              } else if (node.parent.type === "Program") {
                globalVarCheck(node, node.parent);
              } else {
                blockScopeVarCheck(node, node.parent, node.parent.parent);
              }
            }
          };
        }
      };
      var _varsOnTop = exports$5$2;
      var _eslintUtils = "default" in _eslintUtils2 ? exports$4Q : _eslintUtils2;
      var exports$4$2 = {};
      const astUtils$1 = _astUtils;
      const eslintUtils = _eslintUtils;
      function isCalleeOfNewExpression(node) {
        const maybeCallee = node.parent.type === "ChainExpression" ? node.parent : node;
        return maybeCallee.parent.type === "NewExpression" && maybeCallee.parent.callee === maybeCallee;
      }
      exports$4$2 = {
        meta: {
          type: "layout",
          docs: {
            description: "require parentheses around immediate `function` invocations",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/wrap-iife"
          },
          schema: [
            {
              enum: [
                "outside",
                "inside",
                "any"
              ]
            },
            {
              type: "object",
              properties: {
                functionPrototypeMethods: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          fixable: "code",
          messages: {
            wrapInvocation: "Wrap an immediate function invocation in parentheses.",
            wrapExpression: "Wrap only the function expression in parens.",
            moveInvocation: "Move the invocation into the parens that contain the function."
          }
        },
        create(context) {
          const style = context.options[0] || "outside";
          const includeFunctionPrototypeMethods = context.options[1] && context.options[1].functionPrototypeMethods;
          const sourceCode = context.getSourceCode();
          function isWrappedInAnyParens(node) {
            return astUtils$1.isParenthesised(sourceCode, node);
          }
          function isWrappedInGroupingParens(node) {
            return eslintUtils.isParenthesized(1, node, sourceCode);
          }
          function getFunctionNodeFromIIFE(node) {
            const callee = astUtils$1.skipChainExpression(node.callee);
            if (callee.type === "FunctionExpression") {
              return callee;
            }
            if (includeFunctionPrototypeMethods && callee.type === "MemberExpression" && callee.object.type === "FunctionExpression" && (astUtils$1.getStaticPropertyName(callee) === "call" || astUtils$1.getStaticPropertyName(callee) === "apply")) {
              return callee.object;
            }
            return null;
          }
          return {
            CallExpression(node) {
              const innerNode = getFunctionNodeFromIIFE(node);
              if (!innerNode) {
                return;
              }
              const isCallExpressionWrapped = isWrappedInAnyParens(node), isFunctionExpressionWrapped = isWrappedInAnyParens(innerNode);
              if (!isCallExpressionWrapped && !isFunctionExpressionWrapped) {
                context.report({
                  node,
                  messageId: "wrapInvocation",
                  fix(fixer) {
                    const nodeToSurround = style === "inside" ? innerNode : node;
                    return fixer.replaceText(nodeToSurround, `(${ sourceCode.getText(nodeToSurround) })`);
                  }
                });
              } else if (style === "inside" && !isFunctionExpressionWrapped) {
                context.report({
                  node,
                  messageId: "wrapExpression",
                  fix(fixer) {
                    if (isWrappedInGroupingParens(node) && !isCalleeOfNewExpression(node)) {
                      const parenAfter = sourceCode.getTokenAfter(node);
                      return fixer.replaceTextRange([
                        innerNode.range[1],
                        parenAfter.range[1]
                      ], `)${ sourceCode.getText().slice(innerNode.range[1], parenAfter.range[0]) }`);
                    }
                    return fixer.replaceText(innerNode, `(${ sourceCode.getText(innerNode) })`);
                  }
                });
              } else if (style === "outside" && !isCallExpressionWrapped) {
                context.report({
                  node,
                  messageId: "moveInvocation",
                  fix(fixer) {
                    const parenAfter = sourceCode.getTokenAfter(innerNode);
                    return fixer.replaceTextRange([
                      parenAfter.range[0],
                      node.range[1]
                    ], `${ sourceCode.getText().slice(parenAfter.range[1], node.range[1]) })`);
                  }
                });
              }
            }
          };
        }
      };
      var _wrapIife = exports$4$2;
      var exports$3$5 = {};
      exports$3$5 = {
        meta: {
          type: "layout",
          docs: {
            description: "require parenthesis around regex literals",
            category: "Stylistic Issues",
            recommended: false,
            url: "https://eslint.org/docs/rules/wrap-regex"
          },
          schema: [],
          fixable: "code",
          messages: { requireParens: "Wrap the regexp literal in parens to disambiguate the slash." }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          return {
            Literal(node) {
              const token = sourceCode.getFirstToken(node), nodeType = token.type;
              if (nodeType === "RegularExpression") {
                const beforeToken = sourceCode.getTokenBefore(node);
                const afterToken = sourceCode.getTokenAfter(node);
                const ancestors = context.getAncestors();
                const grandparent = ancestors[ancestors.length - 1];
                if (grandparent.type === "MemberExpression" && grandparent.object === node && !(beforeToken && beforeToken.value === "(" && afterToken && afterToken.value === ")")) {
                  context.report({
                    node,
                    messageId: "requireParens",
                    fix: fixer => fixer.replaceText(node, `(${ sourceCode.getText(node) })`)
                  });
                }
              }
            }
          };
        }
      };
      var _wrapRegex = exports$3$5;
      var exports$2$6 = {};
      exports$2$6 = {
        meta: {
          type: "layout",
          docs: {
            description: "require or disallow spacing around the `*` in `yield*` expressions",
            category: "ECMAScript 6",
            recommended: false,
            url: "https://eslint.org/docs/rules/yield-star-spacing"
          },
          fixable: "whitespace",
          schema: [{
              oneOf: [
                {
                  enum: [
                    "before",
                    "after",
                    "both",
                    "neither"
                  ]
                },
                {
                  type: "object",
                  properties: {
                    before: { type: "boolean" },
                    after: { type: "boolean" }
                  },
                  additionalProperties: false
                }
              ]
            }],
          messages: {
            missingBefore: "Missing space before *.",
            missingAfter: "Missing space after *.",
            unexpectedBefore: "Unexpected space before *.",
            unexpectedAfter: "Unexpected space after *."
          }
        },
        create(context) {
          const sourceCode = context.getSourceCode();
          const mode = function (option) {
            if (!option || typeof option === "string") {
              return {
                before: {
                  before: true,
                  after: false
                },
                after: {
                  before: false,
                  after: true
                },
                both: {
                  before: true,
                  after: true
                },
                neither: {
                  before: false,
                  after: false
                }
              }[option || "after"];
            }
            return option;
          }(context.options[0]);
          function checkSpacing(side, leftToken, rightToken) {
            if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken) !== mode[side]) {
              const after = leftToken.value === "*";
              const spaceRequired = mode[side];
              const node = after ? leftToken : rightToken;
              let messageId = "";
              if (spaceRequired) {
                messageId = side === "before" ? "missingBefore" : "missingAfter";
              } else {
                messageId = side === "before" ? "unexpectedBefore" : "unexpectedAfter";
              }
              context.report({
                node,
                messageId,
                fix(fixer) {
                  if (spaceRequired) {
                    if (after) {
                      return fixer.insertTextAfter(node, " ");
                    }
                    return fixer.insertTextBefore(node, " ");
                  }
                  return fixer.removeRange([
                    leftToken.range[1],
                    rightToken.range[0]
                  ]);
                }
              });
            }
          }
          function checkExpression(node) {
            if (!node.delegate) {
              return;
            }
            const tokens = sourceCode.getFirstTokens(node, 3);
            const yieldToken = tokens[0];
            const starToken = tokens[1];
            const nextToken = tokens[2];
            checkSpacing("before", yieldToken, starToken);
            checkSpacing("after", starToken, nextToken);
          }
          return { YieldExpression: checkExpression };
        }
      };
      var _yieldStarSpacing = exports$2$6;
      var exports$1$h = {};
      const astUtils$11 = _astUtils;
      function isComparisonOperator(operator) {
        return /^(==|===|!=|!==|<|>|<=|>=)$/u.test(operator);
      }
      function isEqualityOperator(operator) {
        return /^(==|===)$/u.test(operator);
      }
      function isRangeTestOperator(operator) {
        return [
          "<",
          "<="
        ].indexOf(operator) >= 0;
      }
      function isNegativeNumericLiteral(node) {
        return node.type === "UnaryExpression" && node.operator === "-" && node.prefix && astUtils$11.isNumericLiteral(node.argument);
      }
      function isStaticTemplateLiteral(node) {
        return node.type === "TemplateLiteral" && node.expressions.length === 0;
      }
      function looksLikeLiteral(node) {
        return isNegativeNumericLiteral(node) || isStaticTemplateLiteral(node);
      }
      function getNormalizedLiteral(node) {
        if (node.type === "Literal") {
          return node;
        }
        if (isNegativeNumericLiteral(node)) {
          return {
            type: "Literal",
            value: -node.argument.value,
            raw: `-${ node.argument.value }`
          };
        }
        if (isStaticTemplateLiteral(node)) {
          return {
            type: "Literal",
            value: node.quasis[0].value.cooked,
            raw: node.quasis[0].value.raw
          };
        }
        return null;
      }
      exports$1$h = {
        meta: {
          type: "suggestion",
          docs: {
            description: "require or disallow \"Yoda\" conditions",
            category: "Best Practices",
            recommended: false,
            url: "https://eslint.org/docs/rules/yoda"
          },
          schema: [
            {
              enum: [
                "always",
                "never"
              ]
            },
            {
              type: "object",
              properties: {
                exceptRange: {
                  type: "boolean",
                  default: false
                },
                onlyEquality: {
                  type: "boolean",
                  default: false
                }
              },
              additionalProperties: false
            }
          ],
          fixable: "code",
          messages: { expected: "Expected literal to be on the {{expectedSide}} side of {{operator}}." }
        },
        create(context) {
          const always = context.options[0] === "always";
          const exceptRange = context.options[1] && context.options[1].exceptRange;
          const onlyEquality = context.options[1] && context.options[1].onlyEquality;
          const sourceCode = context.getSourceCode();
          function isRangeTest(node) {
            const left = node.left, right = node.right;
            function isBetweenTest() {
              if (node.operator === "&&" && astUtils$11.isSameReference(left.right, right.left)) {
                const leftLiteral = getNormalizedLiteral(left.left);
                const rightLiteral = getNormalizedLiteral(right.right);
                if (leftLiteral === null && rightLiteral === null) {
                  return false;
                }
                if (rightLiteral === null || leftLiteral === null) {
                  return true;
                }
                if (leftLiteral.value <= rightLiteral.value) {
                  return true;
                }
              }
              return false;
            }
            function isOutsideTest() {
              if (node.operator === "||" && astUtils$11.isSameReference(left.left, right.right)) {
                const leftLiteral = getNormalizedLiteral(left.right);
                const rightLiteral = getNormalizedLiteral(right.left);
                if (leftLiteral === null && rightLiteral === null) {
                  return false;
                }
                if (rightLiteral === null || leftLiteral === null) {
                  return true;
                }
                if (leftLiteral.value <= rightLiteral.value) {
                  return true;
                }
              }
              return false;
            }
            function isParenWrapped() {
              return astUtils$11.isParenthesised(sourceCode, node);
            }
            return node.type === "LogicalExpression" && left.type === "BinaryExpression" && right.type === "BinaryExpression" && isRangeTestOperator(left.operator) && isRangeTestOperator(right.operator) && (isBetweenTest() || isOutsideTest()) && isParenWrapped();
          }
          const OPERATOR_FLIP_MAP = {
            "===": "===",
            "!==": "!==",
            "==": "==",
            "!=": "!=",
            "<": ">",
            ">": "<",
            "<=": ">=",
            ">=": "<="
          };
          function getFlippedString(node) {
            const operatorToken = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);
            const lastLeftToken = sourceCode.getTokenBefore(operatorToken);
            const firstRightToken = sourceCode.getTokenAfter(operatorToken);
            const source = sourceCode.getText();
            const leftText = source.slice(node.range[0], lastLeftToken.range[1]);
            const textBeforeOperator = source.slice(lastLeftToken.range[1], operatorToken.range[0]);
            const textAfterOperator = source.slice(operatorToken.range[1], firstRightToken.range[0]);
            const rightText = source.slice(firstRightToken.range[0], node.range[1]);
            const tokenBefore = sourceCode.getTokenBefore(node);
            const tokenAfter = sourceCode.getTokenAfter(node);
            let prefix = "";
            let suffix = "";
            if (tokenBefore && tokenBefore.range[1] === node.range[0] && !astUtils$11.canTokensBeAdjacent(tokenBefore, firstRightToken)) {
              prefix = " ";
            }
            if (tokenAfter && node.range[1] === tokenAfter.range[0] && !astUtils$11.canTokensBeAdjacent(lastLeftToken, tokenAfter)) {
              suffix = " ";
            }
            return prefix + rightText + textBeforeOperator + OPERATOR_FLIP_MAP[operatorToken.value] + textAfterOperator + leftText + suffix;
          }
          return {
            BinaryExpression(node) {
              const expectedLiteral = always ? node.left : node.right;
              const expectedNonLiteral = always ? node.right : node.left;
              if ((expectedNonLiteral.type === "Literal" || looksLikeLiteral(expectedNonLiteral)) && !(expectedLiteral.type === "Literal" || looksLikeLiteral(expectedLiteral)) && !(!isEqualityOperator(node.operator) && onlyEquality) && isComparisonOperator(node.operator) && !(exceptRange && isRangeTest(context.getAncestors().pop()))) {
                context.report({
                  node,
                  messageId: "expected",
                  data: {
                    operator: node.operator,
                    expectedSide: always ? "left" : "right"
                  },
                  fix: fixer => fixer.replaceText(node, getFlippedString(node))
                });
              }
            }
          };
        }
      };
      var _yoda = exports$1$h;
      var exports$24 = {};
      const {LazyLoadingRuleMap} = _lazyLoadingRuleMap;
      exports$24 = new LazyLoadingRuleMap(Object.entries({
        "accessor-pairs": () => _accessorPairs,
        "array-bracket-newline": () => _arrayBracketNewline,
        "array-bracket-spacing": () => _arrayBracketSpacing,
        "array-callback-return": () => _arrayCallbackReturn,
        "array-element-newline": () => _arrayElementNewline,
        "arrow-body-style": () => _arrowBodyStyle,
        "arrow-parens": () => _arrowParens,
        "arrow-spacing": () => _arrowSpacing,
        "block-scoped-var": () => _blockScopedVar,
        "block-spacing": () => _blockSpacing,
        "brace-style": () => _braceStyle,
        "callback-return": () => _callbackReturn,
        camelcase: () => _camelcase,
        "capitalized-comments": () => _capitalizedComments,
        "class-methods-use-this": () => _classMethodsUseThis,
        "comma-dangle": () => _commaDangle,
        "comma-spacing": () => _commaSpacing,
        "comma-style": () => _commaStyle,
        complexity: () => _complexity,
        "computed-property-spacing": () => _computedPropertySpacing,
        "consistent-return": () => _consistentReturn,
        "consistent-this": () => _consistentThis,
        "constructor-super": () => _constructorSuper,
        curly: () => _curly,
        "default-case": () => _defaultCase,
        "default-case-last": () => _defaultCaseLast,
        "default-param-last": () => _defaultParamLast,
        "dot-location": () => _dotLocation,
        "dot-notation": () => _dotNotation,
        "eol-last": () => _eolLast,
        eqeqeq: () => _eqeqeq,
        "for-direction": () => _forDirection,
        "func-call-spacing": () => _funcCallSpacing,
        "func-name-matching": () => _funcNameMatching,
        "func-names": () => _funcNames,
        "func-style": () => _funcStyle,
        "function-call-argument-newline": () => _functionCallArgumentNewline,
        "function-paren-newline": () => _functionParenNewline,
        "generator-star-spacing": () => _generatorStarSpacing,
        "getter-return": () => _getterReturn,
        "global-require": () => _globalRequire,
        "grouped-accessor-pairs": () => _groupedAccessorPairs,
        "guard-for-in": () => _guardForIn,
        "handle-callback-err": () => _handleCallbackErr,
        "id-blacklist": () => _idBlacklist,
        "id-denylist": () => _idDenylist,
        "id-length": () => _idLength,
        "id-match": () => _idMatch,
        "implicit-arrow-linebreak": () => _implicitArrowLinebreak,
        indent: () => _indent,
        "indent-legacy": () => _indentLegacy,
        "init-declarations": () => _initDeclarations,
        "jsx-quotes": () => _jsxQuotes,
        "key-spacing": () => _keySpacing,
        "keyword-spacing": () => _keywordSpacing,
        "line-comment-position": () => _lineCommentPosition,
        "linebreak-style": () => _linebreakStyle,
        "lines-around-comment": () => _linesAroundComment,
        "lines-around-directive": () => _linesAroundDirective,
        "lines-between-class-members": () => _linesBetweenClassMembers,
        "max-classes-per-file": () => _maxClassesPerFile,
        "max-depth": () => _maxDepth,
        "max-len": () => _maxLen,
        "max-lines": () => _maxLines,
        "max-lines-per-function": () => _maxLinesPerFunction,
        "max-nested-callbacks": () => _maxNestedCallbacks,
        "max-params": () => _maxParams,
        "max-statements": () => _maxStatements,
        "max-statements-per-line": () => _maxStatementsPerLine,
        "multiline-comment-style": () => _multilineCommentStyle,
        "multiline-ternary": () => _multilineTernary,
        "new-cap": () => _newCap,
        "new-parens": () => _newParens,
        "newline-after-var": () => _newlineAfterVar,
        "newline-before-return": () => _newlineBeforeReturn,
        "newline-per-chained-call": () => _newlinePerChainedCall,
        "no-alert": () => _noAlert,
        "no-array-constructor": () => _noArrayConstructor,
        "no-async-promise-executor": () => _noAsyncPromiseExecutor,
        "no-await-in-loop": () => _noAwaitInLoop,
        "no-bitwise": () => _noBitwise,
        "no-buffer-constructor": () => _noBufferConstructor,
        "no-caller": () => _noCaller,
        "no-case-declarations": () => _noCaseDeclarations,
        "no-catch-shadow": () => _noCatchShadow,
        "no-class-assign": () => _noClassAssign,
        "no-compare-neg-zero": () => _noCompareNegZero,
        "no-cond-assign": () => _noCondAssign,
        "no-confusing-arrow": () => _noConfusingArrow,
        "no-console": () => _noConsole,
        "no-const-assign": () => _noConstAssign,
        "no-constant-condition": () => _noConstantCondition,
        "no-constructor-return": () => _noConstructorReturn,
        "no-continue": () => _noContinue,
        "no-control-regex": () => _noControlRegex,
        "no-debugger": () => _noDebugger,
        "no-delete-var": () => _noDeleteVar,
        "no-div-regex": () => _noDivRegex,
        "no-dupe-args": () => _noDupeArgs,
        "no-dupe-class-members": () => _noDupeClassMembers,
        "no-dupe-else-if": () => _noDupeElseIf,
        "no-dupe-keys": () => _noDupeKeys,
        "no-duplicate-case": () => _noDuplicateCase,
        "no-duplicate-imports": () => _noDuplicateImports,
        "no-else-return": () => _noElseReturn,
        "no-empty": () => _noEmpty,
        "no-empty-character-class": () => _noEmptyCharacterClass,
        "no-empty-function": () => _noEmptyFunction,
        "no-empty-pattern": () => _noEmptyPattern,
        "no-eq-null": () => _noEqNull,
        "no-eval": () => _noEval,
        "no-ex-assign": () => _noExAssign,
        "no-extend-native": () => _noExtendNative,
        "no-extra-bind": () => _noExtraBind,
        "no-extra-boolean-cast": () => _noExtraBooleanCast,
        "no-extra-label": () => _noExtraLabel,
        "no-extra-parens": () => _noExtraParens,
        "no-extra-semi": () => _noExtraSemi,
        "no-fallthrough": () => _noFallthrough,
        "no-floating-decimal": () => _noFloatingDecimal,
        "no-func-assign": () => _noFuncAssign,
        "no-global-assign": () => _noGlobalAssign,
        "no-implicit-coercion": () => _noImplicitCoercion,
        "no-implicit-globals": () => _noImplicitGlobals,
        "no-implied-eval": () => _noImpliedEval,
        "no-import-assign": () => _noImportAssign,
        "no-inline-comments": () => _noInlineComments,
        "no-inner-declarations": () => _noInnerDeclarations,
        "no-invalid-regexp": () => _noInvalidRegexp,
        "no-invalid-this": () => _noInvalidThis,
        "no-irregular-whitespace": () => _noIrregularWhitespace,
        "no-iterator": () => _noIterator,
        "no-label-var": () => _noLabelVar,
        "no-labels": () => _noLabels,
        "no-lone-blocks": () => _noLoneBlocks,
        "no-lonely-if": () => _noLonelyIf,
        "no-loop-func": () => _noLoopFunc,
        "no-loss-of-precision": () => _noLossOfPrecision,
        "no-magic-numbers": () => _noMagicNumbers,
        "no-misleading-character-class": () => _noMisleadingCharacterClass,
        "no-mixed-operators": () => _noMixedOperators,
        "no-mixed-requires": () => _noMixedRequires,
        "no-mixed-spaces-and-tabs": () => _noMixedSpacesAndTabs,
        "no-multi-assign": () => _noMultiAssign,
        "no-multi-spaces": () => _noMultiSpaces,
        "no-multi-str": () => _noMultiStr,
        "no-multiple-empty-lines": () => _noMultipleEmptyLines,
        "no-native-reassign": () => _noNativeReassign,
        "no-negated-condition": () => _noNegatedCondition,
        "no-negated-in-lhs": () => _noNegatedInLhs,
        "no-nested-ternary": () => _noNestedTernary,
        "no-new": () => _noNew,
        "no-new-func": () => _noNewFunc,
        "no-new-object": () => _noNewObject,
        "no-new-require": () => _noNewRequire,
        "no-new-symbol": () => _noNewSymbol,
        "no-new-wrappers": () => _noNewWrappers,
        "no-nonoctal-decimal-escape": () => _noNonoctalDecimalEscape,
        "no-obj-calls": () => _noObjCalls,
        "no-octal": () => _noOctal,
        "no-octal-escape": () => _noOctalEscape,
        "no-param-reassign": () => _noParamReassign,
        "no-path-concat": () => _noPathConcat,
        "no-plusplus": () => _noPlusplus,
        "no-process-env": () => _noProcessEnv,
        "no-process-exit": () => _noProcessExit,
        "no-promise-executor-return": () => _noPromiseExecutorReturn,
        "no-proto": () => _noProto,
        "no-prototype-builtins": () => _noPrototypeBuiltins,
        "no-redeclare": () => _noRedeclare,
        "no-regex-spaces": () => _noRegexSpaces,
        "no-restricted-exports": () => _noRestrictedExports,
        "no-restricted-globals": () => _noRestrictedGlobals,
        "no-restricted-imports": () => _noRestrictedImports,
        "no-restricted-modules": () => _noRestrictedModules,
        "no-restricted-properties": () => _noRestrictedProperties,
        "no-restricted-syntax": () => _noRestrictedSyntax,
        "no-return-assign": () => _noReturnAssign,
        "no-return-await": () => _noReturnAwait,
        "no-script-url": () => _noScriptUrl,
        "no-self-assign": () => _noSelfAssign,
        "no-self-compare": () => _noSelfCompare,
        "no-sequences": () => _noSequences,
        "no-setter-return": () => _noSetterReturn,
        "no-shadow": () => _noShadow,
        "no-shadow-restricted-names": () => _noShadowRestrictedNames,
        "no-spaced-func": () => _noSpacedFunc,
        "no-sparse-arrays": () => _noSparseArrays,
        "no-sync": () => _noSync,
        "no-tabs": () => _noTabs,
        "no-template-curly-in-string": () => _noTemplateCurlyInString,
        "no-ternary": () => _noTernary,
        "no-this-before-super": () => _noThisBeforeSuper,
        "no-throw-literal": () => _noThrowLiteral,
        "no-trailing-spaces": () => _noTrailingSpaces,
        "no-undef": () => _noUndef,
        "no-undef-init": () => _noUndefInit,
        "no-undefined": () => _noUndefined,
        "no-underscore-dangle": () => _noUnderscoreDangle,
        "no-unexpected-multiline": () => _noUnexpectedMultiline,
        "no-unmodified-loop-condition": () => _noUnmodifiedLoopCondition,
        "no-unneeded-ternary": () => _noUnneededTernary,
        "no-unreachable": () => _noUnreachable,
        "no-unreachable-loop": () => _noUnreachableLoop,
        "no-unsafe-finally": () => _noUnsafeFinally,
        "no-unsafe-negation": () => _noUnsafeNegation,
        "no-unsafe-optional-chaining": () => _noUnsafeOptionalChaining,
        "no-unused-expressions": () => _noUnusedExpressions,
        "no-unused-labels": () => _noUnusedLabels,
        "no-unused-vars": () => _noUnusedVars,
        "no-use-before-define": () => _noUseBeforeDefine,
        "no-useless-backreference": () => _noUselessBackreference,
        "no-useless-call": () => _noUselessCall,
        "no-useless-catch": () => _noUselessCatch,
        "no-useless-computed-key": () => _noUselessComputedKey,
        "no-useless-concat": () => _noUselessConcat,
        "no-useless-constructor": () => _noUselessConstructor,
        "no-useless-escape": () => _noUselessEscape,
        "no-useless-rename": () => _noUselessRename,
        "no-useless-return": () => _noUselessReturn,
        "no-var": () => _noVar,
        "no-void": () => _noVoid,
        "no-warning-comments": () => _noWarningComments,
        "no-whitespace-before-property": () => _noWhitespaceBeforeProperty,
        "no-with": () => _noWith,
        "nonblock-statement-body-position": () => _nonblockStatementBodyPosition,
        "object-curly-newline": () => _objectCurlyNewline,
        "object-curly-spacing": () => _objectCurlySpacing,
        "object-property-newline": () => _objectPropertyNewline,
        "object-shorthand": () => _objectShorthand,
        "one-var": () => _oneVar,
        "one-var-declaration-per-line": () => _oneVarDeclarationPerLine,
        "operator-assignment": () => _operatorAssignment,
        "operator-linebreak": () => _operatorLinebreak,
        "padded-blocks": () => _paddedBlocks,
        "padding-line-between-statements": () => _paddingLineBetweenStatements,
        "prefer-arrow-callback": () => _preferArrowCallback,
        "prefer-const": () => _preferConst,
        "prefer-destructuring": () => _preferDestructuring,
        "prefer-exponentiation-operator": () => _preferExponentiationOperator,
        "prefer-named-capture-group": () => _preferNamedCaptureGroup,
        "prefer-numeric-literals": () => _preferNumericLiterals,
        "prefer-object-spread": () => _preferObjectSpread,
        "prefer-promise-reject-errors": () => _preferPromiseRejectErrors,
        "prefer-reflect": () => _preferReflect,
        "prefer-regex-literals": () => _preferRegexLiterals,
        "prefer-rest-params": () => _preferRestParams,
        "prefer-spread": () => _preferSpread,
        "prefer-template": () => _preferTemplate,
        "quote-props": () => _quoteProps,
        quotes: () => _quotes,
        radix: () => _radix,
        "require-atomic-updates": () => _requireAtomicUpdates,
        "require-await": () => _requireAwait,
        "require-jsdoc": () => _requireJsdoc,
        "require-unicode-regexp": () => _requireUnicodeRegexp,
        "require-yield": () => _requireYield,
        "rest-spread-spacing": () => _restSpreadSpacing,
        semi: () => _semi,
        "semi-spacing": () => _semiSpacing,
        "semi-style": () => _semiStyle,
        "sort-imports": () => _sortImports,
        "sort-keys": () => _sortKeys,
        "sort-vars": () => _sortVars,
        "space-before-blocks": () => _spaceBeforeBlocks,
        "space-before-function-paren": () => _spaceBeforeFunctionParen,
        "space-in-parens": () => _spaceInParens,
        "space-infix-ops": () => _spaceInfixOps,
        "space-unary-ops": () => _spaceUnaryOps,
        "spaced-comment": () => _spacedComment,
        strict: () => _strict,
        "switch-colon-spacing": () => _switchColonSpacing,
        "symbol-description": () => _symbolDescription,
        "template-curly-spacing": () => _templateCurlySpacing,
        "template-tag-spacing": () => _templateTagSpacing,
        "unicode-bom": () => _unicodeBom,
        "use-isnan": () => _useIsnan,
        "valid-jsdoc": () => _validJsdoc,
        "valid-typeof": () => _validTypeof,
        "vars-on-top": () => _varsOnTop,
        "wrap-iife": () => _wrapIife,
        "wrap-regex": () => _wrapRegex,
        "yield-star-spacing": () => _yieldStarSpacing,
        yoda: () => _yoda
      }));
      var _rules$1 = exports$24;

      var exports$r = {};
      exports$r = () => {
        const listeners = Object.create(null);
        return Object.freeze({
          on(eventName, listener) {
            if (eventName in listeners) {
              listeners[eventName].push(listener);
            } else {
              listeners[eventName] = [listener];
            }
          },
          emit(eventName, ...args) {
            if (eventName in listeners) {
              listeners[eventName].forEach(listener => listener(...args));
            }
          },
          eventNames() {
            return Object.keys(listeners);
          }
        });
      };
      var _safeEmitter = exports$r;

      var _debug$3 = "default" in _debug2 ? _browser : _debug2;
      var exports$q = {};
      const debug$3 = _debug$3("eslint:source-code-fixer");
      const BOM = "\uFEFF";
      function compareMessagesByFixRange(a, b) {
        return a.fix.range[0] - b.fix.range[0] || a.fix.range[1] - b.fix.range[1];
      }
      function compareMessagesByLocation(a, b) {
        return a.line - b.line || a.column - b.column;
      }
      function SourceCodeFixer$3() {
        Object.freeze(this);
      }
      SourceCodeFixer$3.applyFixes = function (sourceText, messages, shouldFix) {
        debug$3("Applying fixes");
        if (shouldFix === false) {
          debug$3("shouldFix parameter was false, not attempting fixes");
          return {
            fixed: false,
            messages,
            output: sourceText
          };
        }
        const remainingMessages = [], fixes = [], bom = sourceText.startsWith(BOM) ? BOM : "", text = bom ? sourceText.slice(1) : sourceText;
        let lastPos = Number.NEGATIVE_INFINITY, output = bom;
        function attemptFix(problem) {
          const fix = problem.fix;
          const start = fix.range[0];
          const end = fix.range[1];
          if (lastPos >= start || start > end) {
            remainingMessages.push(problem);
            return false;
          }
          if (start < 0 && end >= 0 || start === 0 && fix.text.startsWith(BOM)) {
            output = "";
          }
          output += text.slice(Math.max(0, lastPos), Math.max(0, start));
          output += fix.text;
          lastPos = end;
          return true;
        }
        messages.forEach(problem => {
          if (Object.prototype.hasOwnProperty.call(problem, "fix")) {
            fixes.push(problem);
          } else {
            remainingMessages.push(problem);
          }
        });
        if (fixes.length) {
          debug$3("Found fixes to apply");
          let fixesWereApplied = false;
          for (const problem of fixes.sort(compareMessagesByFixRange)) {
            if (typeof shouldFix !== "function" || shouldFix(problem)) {
              attemptFix(problem);
              fixesWereApplied = true;
            } else {
              remainingMessages.push(problem);
            }
          }
          output += text.slice(Math.max(0, lastPos));
          return {
            fixed: fixesWereApplied,
            messages: remainingMessages.sort(compareMessagesByLocation),
            output
          };
        }
        debug$3("No fixes to apply");
        return {
          fixed: false,
          messages,
          output: bom + text
        };
      };
      exports$q = SourceCodeFixer$3;
      var _sourceCodeFixer = exports$q;

      var _replacements = {
        "rules": {
          "generator-star": ["generator-star-spacing"],
          "global-strict": ["strict"],
          "no-arrow-condition": [
            "no-confusing-arrow",
            "no-constant-condition"
          ],
          "no-comma-dangle": ["comma-dangle"],
          "no-empty-class": ["no-empty-character-class"],
          "no-empty-label": ["no-labels"],
          "no-extra-strict": ["strict"],
          "no-reserved-keys": ["quote-props"],
          "no-space-before-semi": ["semi-spacing"],
          "no-wrap-func": ["no-extra-parens"],
          "space-after-function-name": ["space-before-function-paren"],
          "space-after-keywords": ["keyword-spacing"],
          "space-before-function-parentheses": ["space-before-function-paren"],
          "space-before-keywords": ["keyword-spacing"],
          "space-in-brackets": [
            "object-curly-spacing",
            "array-bracket-spacing",
            "computed-property-spacing"
          ],
          "space-return-throw-case": ["keyword-spacing"],
          "space-unary-word-ops": ["space-unary-ops"],
          "spaced-line-comment": ["spaced-comment"]
        }
      };

      var exports$6$1 = {};

      function compareLocations(itemA, itemB) {
        return itemA.line - itemB.line || itemA.column - itemB.column;
      }

      function applyDirectives(options) {
        var problems = [];
        var nextDirectiveIndex = 0;
        var currentGlobalDisableDirective = null;
        var disabledRuleMap = new Map();
        var enabledRules = new Set();
        var usedDisableDirectives = new Set();

        var _iterator = _createForOfIteratorHelper(options.problems),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var problem = _step.value;

            while (nextDirectiveIndex < options.directives.length && compareLocations(options.directives[nextDirectiveIndex], problem) <= 0) {
              var directive = options.directives[nextDirectiveIndex++];

              switch (directive.type) {
                case "disable":
                  if (directive.ruleId === null) {
                    currentGlobalDisableDirective = directive;
                    disabledRuleMap.clear();
                    enabledRules.clear();
                  } else if (currentGlobalDisableDirective) {
                    enabledRules["delete"](directive.ruleId);
                    disabledRuleMap.set(directive.ruleId, directive);
                  } else {
                    disabledRuleMap.set(directive.ruleId, directive);
                  }

                  break;

                case "enable":
                  if (directive.ruleId === null) {
                    currentGlobalDisableDirective = null;
                    disabledRuleMap.clear();
                  } else if (currentGlobalDisableDirective) {
                    enabledRules.add(directive.ruleId);
                    disabledRuleMap["delete"](directive.ruleId);
                  } else {
                    disabledRuleMap["delete"](directive.ruleId);
                  }

                  break;
              }
            }

            if (disabledRuleMap.has(problem.ruleId)) {
              usedDisableDirectives.add(disabledRuleMap.get(problem.ruleId));
            } else if (currentGlobalDisableDirective && !enabledRules.has(problem.ruleId)) {
              usedDisableDirectives.add(currentGlobalDisableDirective);
            } else {
              problems.push(problem);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var unusedDisableDirectives = options.directives.filter(function (directive) {
          return directive.type === "disable" && !usedDisableDirectives.has(directive);
        }).map(function (directive) {
          return {
            ruleId: null,
            message: directive.ruleId ? "Unused eslint-disable directive (no problems were reported from '".concat(directive.ruleId, "').") : "Unused eslint-disable directive (no problems were reported).",
            line: directive.unprocessedDirective.line,
            column: directive.unprocessedDirective.column,
            severity: options.reportUnusedDisableDirectives === "warn" ? 1 : 2,
            nodeType: null
          };
        });
        return {
          problems: problems,
          unusedDisableDirectives: unusedDisableDirectives
        };
      }

      exports$6$1 = function exports$6(_ref) {
        var directives = _ref.directives,
            problems = _ref.problems,
            _ref$reportUnusedDisa = _ref.reportUnusedDisableDirectives,
            reportUnusedDisableDirectives = _ref$reportUnusedDisa === void 0 ? "off" : _ref$reportUnusedDisa;
        var blockDirectives = directives.filter(function (directive) {
          return directive.type === "disable" || directive.type === "enable";
        }).map(function (directive) {
          return Object.assign({}, directive, {
            unprocessedDirective: directive
          });
        }).sort(compareLocations);

        function flatMap(array, fn) {
          var _ref2;

          var mapped = array.map(fn);

          var flattened = (_ref2 = []).concat.apply(_ref2, _toConsumableArray(mapped));

          return flattened;
        }

        var lineDirectives = flatMap(directives, function (directive) {
          switch (directive.type) {
            case "disable":
            case "enable":
              return [];

            case "disable-line":
              return [{
                type: "disable",
                line: directive.line,
                column: 1,
                ruleId: directive.ruleId,
                unprocessedDirective: directive
              }, {
                type: "enable",
                line: directive.line + 1,
                column: 0,
                ruleId: directive.ruleId,
                unprocessedDirective: directive
              }];

            case "disable-next-line":
              return [{
                type: "disable",
                line: directive.line + 1,
                column: 1,
                ruleId: directive.ruleId,
                unprocessedDirective: directive
              }, {
                type: "enable",
                line: directive.line + 2,
                column: 0,
                ruleId: directive.ruleId,
                unprocessedDirective: directive
              }];

            default:
              throw new TypeError("Unrecognized directive type '".concat(directive.type, "'"));
          }
        }).sort(compareLocations);
        var blockDirectivesResult = applyDirectives({
          problems: problems,
          directives: blockDirectives,
          reportUnusedDisableDirectives: reportUnusedDisableDirectives
        });
        var lineDirectivesResult = applyDirectives({
          problems: blockDirectivesResult.problems,
          directives: lineDirectives,
          reportUnusedDisableDirectives: reportUnusedDisableDirectives
        });
        return reportUnusedDisableDirectives !== "off" ? lineDirectivesResult.problems.concat(blockDirectivesResult.unusedDisableDirectives).concat(lineDirectivesResult.unusedDisableDirectives).sort(compareLocations) : lineDirectivesResult.problems;
      };

      var _applyDisableDirectives = exports$6$1;

      var _levn = "default" in _levn2 ? exports$3$7 : _levn2;

      var _configOps$1 = "default" in _configOps2 ? _configOps$3 : _configOps2;

      var _debug$1$1 = "default" in _debug2 ? _browser : _debug2;

      var exports$5$1 = {};
      var levn = _levn,
          ConfigOps$1$1 = _configOps$1;

      var debug$1$1 = _debug$1$1("eslint:config-comment-parser");

      exports$5$1 = /*#__PURE__*/function () {
        function ConfigCommentParser() {
          _classCallCheck(this, ConfigCommentParser);
        }

        _createClass(ConfigCommentParser, [{
          key: "parseStringConfig",
          value: function parseStringConfig(string, comment) {
            debug$1$1("Parsing String config");
            var items = {};
            var trimmedString = string.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*([,:])[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*/g, "$1");
            trimmedString.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]|,+/).forEach(function (name) {
              if (!name) {
                return;
              }

              var _name$split = name.split(":"),
                  _name$split2 = _slicedToArray(_name$split, 2),
                  key = _name$split2[0],
                  _name$split2$ = _name$split2[1],
                  value = _name$split2$ === void 0 ? null : _name$split2$;

              items[key] = {
                value: value,
                comment: comment
              };
            });
            return items;
          }
        }, {
          key: "parseJsonConfig",
          value: function parseJsonConfig(string, location) {
            debug$1$1("Parsing JSON config");
            var items = {};

            try {
              items = levn.parse("Object", string) || {};

              if (ConfigOps$1$1.isEverySeverityValid(items)) {
                return {
                  success: true,
                  config: items
                };
              }
            } catch (_unused) {
              debug$1$1("Levn parsing failed; falling back to manual parsing.");
            }

            items = {};
            var normalizedString = string.replace(/([\x2D\/-9A-Za-z]+):/g, "\"$1\":").replace(/(\]|[0-9])[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+(?=")/, "$1,");

            try {
              items = JSON.parse("{".concat(normalizedString, "}"));
            } catch (ex) {
              debug$1$1("Manual parsing failed.");
              return {
                success: false,
                error: {
                  ruleId: null,
                  fatal: true,
                  severity: 2,
                  message: "Failed to parse JSON from '".concat(normalizedString, "': ").concat(ex.message),
                  line: location.start.line,
                  column: location.start.column + 1
                }
              };
            }

            return {
              success: true,
              config: items
            };
          }
        }, {
          key: "parseListConfig",
          value: function parseListConfig(string) {
            debug$1$1("Parsing list config");
            var items = {};
            string.replace(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*,[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*/g, ",").split(/,+/).forEach(function (name) {
              var trimmedName = name.trim();

              if (trimmedName) {
                items[trimmedName] = true;
              }
            });
            return items;
          }
        }]);

        return ConfigCommentParser;
      }();

      var _configCommentParser = exports$5$1;
      var exports$4$1 = {};

      exports$4$1 = function exports$4(text, data) {
        if (!data) {
          return text;
        }

        return text.replace(/\{\{((?:(?![\{\}])[\s\S])+?)\}\}/g, function (fullMatch, termWithWhitespace) {
          var term = termWithWhitespace.trim();

          if (term in data) {
            return data[term];
          }

          return fullMatch;
        });
      };

      var _interpolate = exports$4$1;

      var _assert$3 = "default" in _assert2 ? et : _assert2;

      var exports$3$4 = {};
      var assert$3 = _assert$3;
      var ruleFixer = _ruleFixer;
      var interpolate$2 = _interpolate;

      function normalizeMultiArgReportCall() {
        if (arguments.length === 1) {
          return Object.assign({}, arguments.length <= 0 ? undefined : arguments[0]);
        }

        if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === "string") {
          return {
            node: arguments.length <= 0 ? undefined : arguments[0],
            message: arguments.length <= 1 ? undefined : arguments[1],
            data: arguments.length <= 2 ? undefined : arguments[2],
            fix: arguments.length <= 3 ? undefined : arguments[3]
          };
        }

        return {
          node: arguments.length <= 0 ? undefined : arguments[0],
          loc: arguments.length <= 1 ? undefined : arguments[1],
          message: arguments.length <= 2 ? undefined : arguments[2],
          data: arguments.length <= 3 ? undefined : arguments[3],
          fix: arguments.length <= 4 ? undefined : arguments[4]
        };
      }

      function assertValidNodeInfo(descriptor) {
        if (descriptor.node) {
          assert$3(_typeof(descriptor.node) === "object", "Node must be an object");
        } else {
          assert$3(descriptor.loc, "Node must be provided when reporting error if location is not provided");
        }
      }

      function normalizeReportLoc(descriptor) {
        if (descriptor.loc) {
          if (descriptor.loc.start) {
            return descriptor.loc;
          }

          return {
            start: descriptor.loc,
            end: null
          };
        }

        return descriptor.node.loc;
      }

      function assertValidFix(fix) {
        if (fix) {
          assert$3(fix.range && typeof fix.range[0] === "number" && typeof fix.range[1] === "number", "Fix has invalid range: ".concat(JSON.stringify(fix, null, 2)));
        }
      }

      function compareFixesByRange(a, b) {
        return a.range[0] - b.range[0] || a.range[1] - b.range[1];
      }

      function mergeFixes(fixes, sourceCode) {
        var _iterator2 = _createForOfIteratorHelper(fixes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var fix = _step2.value;
            assertValidFix(fix);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (fixes.length === 0) {
          return null;
        }

        if (fixes.length === 1) {
          return fixes[0];
        }

        fixes.sort(compareFixesByRange);
        var originalText = sourceCode.text;
        var start = fixes[0].range[0];
        var end = fixes[fixes.length - 1].range[1];
        var text = "";
        var lastPos = Number.MIN_SAFE_INTEGER;

        var _iterator3 = _createForOfIteratorHelper(fixes),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _fix = _step3.value;
            assert$3(_fix.range[0] >= lastPos, "Fix objects must not be overlapped in a report.");

            if (_fix.range[0] >= 0) {
              text += originalText.slice(Math.max(0, start, lastPos), _fix.range[0]);
            }

            text += _fix.text;
            lastPos = _fix.range[1];
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        text += originalText.slice(Math.max(0, start, lastPos), end);
        return {
          range: [start, end],
          text: text
        };
      }

      function normalizeFixes(descriptor, sourceCode) {
        if (typeof descriptor.fix !== "function") {
          return null;
        }

        var fix = descriptor.fix(ruleFixer);

        if (fix && Symbol.iterator in fix) {
          return mergeFixes(Array.from(fix), sourceCode);
        }

        assertValidFix(fix);
        return fix;
      }

      function mapSuggestions(descriptor, sourceCode, messages) {
        if (!descriptor.suggest || !Array.isArray(descriptor.suggest)) {
          return [];
        }

        return descriptor.suggest.map(function (suggestInfo) {
          var computedDesc = suggestInfo.desc || messages[suggestInfo.messageId];
          return _objectSpread2(_objectSpread2({}, suggestInfo), {}, {
            desc: interpolate$2(computedDesc, suggestInfo.data),
            fix: normalizeFixes(suggestInfo, sourceCode)
          });
        }).filter(function (_ref3) {
          var fix = _ref3.fix;
          return fix;
        });
      }

      function createProblem(options) {
        var problem = {
          ruleId: options.ruleId,
          severity: options.severity,
          message: options.message,
          line: options.loc.start.line,
          column: options.loc.start.column + 1,
          nodeType: options.node && options.node.type || null
        };

        if (options.messageId) {
          problem.messageId = options.messageId;
        }

        if (options.loc.end) {
          problem.endLine = options.loc.end.line;
          problem.endColumn = options.loc.end.column + 1;
        }

        if (options.fix) {
          problem.fix = options.fix;
        }

        if (options.suggestions && options.suggestions.length > 0) {
          problem.suggestions = options.suggestions;
        }

        return problem;
      }

      function validateSuggestions(suggest, messages) {
        if (suggest && Array.isArray(suggest)) {
          suggest.forEach(function (suggestion) {
            if (suggestion.messageId) {
              var messageId = suggestion.messageId;

              if (!messages) {
                throw new TypeError("context.report() called with a suggest option with a messageId '".concat(messageId, "', but no messages were present in the rule metadata."));
              }

              if (!messages[messageId]) {
                throw new TypeError("context.report() called with a suggest option with a messageId '".concat(messageId, "' which is not present in the 'messages' config: ").concat(JSON.stringify(messages, null, 2)));
              }

              if (suggestion.desc) {
                throw new TypeError("context.report() called with a suggest option that defines both a 'messageId' and an 'desc'. Please only pass one.");
              }
            } else if (!suggestion.desc) {
              throw new TypeError("context.report() called with a suggest option that doesn't have either a `desc` or `messageId`");
            }

            if (typeof suggestion.fix !== "function") {
              throw new TypeError("context.report() called with a suggest option without a fix function. See: ".concat(suggestion));
            }
          });
        }
      }

      exports$3$4 = function createReportTranslator(metadata) {
        return function () {
          var descriptor = normalizeMultiArgReportCall.apply(void 0, arguments);
          var messages = metadata.messageIds;
          assertValidNodeInfo(descriptor);
          var computedMessage;

          if (descriptor.messageId) {
            if (!messages) {
              throw new TypeError("context.report() called with a messageId, but no messages were present in the rule metadata.");
            }

            var id = descriptor.messageId;

            if (descriptor.message) {
              throw new TypeError("context.report() called with a message and a messageId. Please only pass one.");
            }

            if (!messages || !Object.prototype.hasOwnProperty.call(messages, id)) {
              throw new TypeError("context.report() called with a messageId of '".concat(id, "' which is not present in the 'messages' config: ").concat(JSON.stringify(messages, null, 2)));
            }

            computedMessage = messages[id];
          } else if (descriptor.message) {
            computedMessage = descriptor.message;
          } else {
            throw new TypeError("Missing `message` property in report() call; add a message that describes the linting problem.");
          }

          validateSuggestions(descriptor.suggest, messages);
          return createProblem({
            ruleId: metadata.ruleId,
            severity: metadata.severity,
            node: descriptor.node,
            message: interpolate$2(computedMessage, descriptor.data),
            messageId: descriptor.messageId,
            loc: normalizeReportLoc(descriptor),
            fix: metadata.disableFixes ? null : normalizeFixes(descriptor, metadata.sourceCode),
            suggestions: metadata.disableFixes ? [] : mapSuggestions(descriptor, metadata.sourceCode, messages)
          });
        };
      };

      var _reportTranslator = exports$3$4;
      var exports$2$5 = {};

      function _nullRequire$4(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }

      var builtInRules$1 = _rules$1;

      function normalizeRule(rule) {
        return typeof rule === "function" ? Object.assign({
          create: rule
        }, rule) : rule;
      }

      var Rules$1 = /*#__PURE__*/function () {
        function Rules$1() {
          _classCallCheck(this, Rules$1);

          this._rules = Object.create(null);
        }

        _createClass(Rules$1, [{
          key: "define",
          value: function define(ruleId, ruleModule) {
            this._rules[ruleId] = normalizeRule(ruleModule);
          }
        }, {
          key: "get",
          value: function get(ruleId) {
            if (typeof this._rules[ruleId] === "string") {
              this.define(ruleId, _nullRequire$4(this._rules[ruleId]));
            }

            if (this._rules[ruleId]) {
              return this._rules[ruleId];
            }

            if (builtInRules$1.has(ruleId)) {
              return builtInRules$1.get(ruleId);
            }

            return null;
          }
        }, {
          key: Symbol.iterator,
          value: /*#__PURE__*/regeneratorRuntime.mark(function value() {
            var _i, _Object$keys, ruleId;

            return regeneratorRuntime.wrap(function value$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    return _context.delegateYield(builtInRules$1, "t0", 1);

                  case 1:
                    _i = 0, _Object$keys = Object.keys(this._rules);

                  case 2:
                    if (!(_i < _Object$keys.length)) {
                      _context.next = 9;
                      break;
                    }

                    ruleId = _Object$keys[_i];
                    _context.next = 6;
                    return [ruleId, this.get(ruleId)];

                  case 6:
                    _i++;
                    _context.next = 2;
                    break;

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, value, this);
          })
        }]);

        return Rules$1;
      }();

      exports$2$5 = Rules$1;
      var _rules = exports$2$5;
      var exports$1$g = {};
      var process$1$2 = process$g;

      function alignLeft(str, len, ch) {
        return str + new Array(len - str.length + 1).join(ch || " ");
      }

      function alignRight(str, len, ch) {
        return new Array(len - str.length + 1).join(ch || " ") + str;
      }

      var enabled = !!process$1$2.env.TIMING;
      var HEADERS = ["Rule", "Time (ms)", "Relative"];
      var ALIGN = [alignLeft, alignRight, alignRight];

      function getListSize() {
        var MINIMUM_SIZE = 10;

        if (typeof process$1$2.env.TIMING !== "string") {
          return MINIMUM_SIZE;
        }

        if (process$1$2.env.TIMING.toLowerCase() === "all") {
          return Number.POSITIVE_INFINITY;
        }

        var TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process$1$2.env.TIMING, 10);
        return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;
      }

      function display(data) {
        var total = 0;
        var rows = Object.keys(data).map(function (key) {
          var time = data[key];
          total += time;
          return [key, time];
        }).sort(function (a, b) {
          return b[1] - a[1];
        }).slice(0, getListSize());
        rows.forEach(function (row) {
          row.push("".concat((row[1] * 100 / total).toFixed(1), "%"));
          row[1] = row[1].toFixed(3);
        });
        rows.unshift(HEADERS);
        var widths = [];
        rows.forEach(function (row) {
          var len = row.length;

          for (var i = 0; i < len; i++) {
            var n = row[i].length;

            if (!widths[i] || n > widths[i]) {
              widths[i] = n;
            }
          }
        });
        var table = rows.map(function (row) {
          return row.map(function (cell, index) {
            return ALIGN[index](cell, widths[index]);
          }).join(" | ");
        });
        table.splice(1, 0, widths.map(function (width, index) {
          var extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;
          return ALIGN[index](":", width + extraAlignment, "-");
        }).join("|"));
        console.log(table.join("\n"));
      }

      exports$1$g = function () {
        var data = Object.create(null);

        function time(key, fn) {
          if (typeof data[key] === "undefined") {
            data[key] = 0;
          }

          return function () {
            var t = process$1$2.hrtime();
            fn.apply(void 0, arguments);
            t = process$1$2.hrtime(t);
            data[key] += t[0] * 1000 + t[1] / 1000000;
          };
        }

        if (enabled) {
          process$1$2.on("exit", function () {
            display(data);
          });
        }

        return {
          time: time,
          enabled: enabled,
          getListSize: getListSize
        };
      }();

      var _timing = exports$1$g;

      var _path$7 = "default" in _path2 ? exports$5S : _path2;

      var _eslintScope = "default" in _eslintScope2 ? exports$1$r : _eslintScope2;

      var _eslintVisitorKeys = "default" in _eslintVisitorKeys2 ? exports$1$q : _eslintVisitorKeys2;

      var _espree = "default" in _espree2 ? exports$4$7 : _espree2;

      var _lodash$1 = "default" in _lodash2 ? index$1 : _lodash2;

      var _environments$1 = "default" in _environments2 ? _environments$2 : _environments2;

      var _configOps$2 = "default" in _configOps2 ? _configOps$3 : _configOps2;

      var _configValidator$1 = "default" in _configValidator2 ? _configValidator$2 : _configValidator2;

      var _debug$2 = "default" in _debug2 ? _browser : _debug2;

      var exports$p = {};
      var process$8 = process$g;
      var path$8 = _path$7,
          eslintScope = _eslintScope,
          evk = _eslintVisitorKeys,
          espree = _espree,
          merge$1 = _lodash$1,
          BuiltInEnvironments$1 = _environments$1,
          pkg$2 = _package$5,
          astUtils = _astUtils$1,
          ConfigOps$2 = _configOps$2,
          ConfigValidator = _configValidator$1,
          Traverser$1 = _traverser,
          SourceCode$1 = _sourceCode.SourceCode,
          CodePathAnalyzer = _codePathAnalyzer,
          applyDisableDirectives = _applyDisableDirectives,
          ConfigCommentParser = _configCommentParser,
          NodeEventGenerator = _nodeEventGenerator,
          createReportTranslator = _reportTranslator,
          Rules = _rules,
          createEmitter = _safeEmitter,
          SourceCodeFixer$2 = _sourceCodeFixer,
          timing = _timing,
          ruleReplacements = _replacements;

      var debug$2 = _debug$2("eslint:linter");

      var MAX_AUTOFIX_PASSES = 10;
      var DEFAULT_PARSER_NAME = "espree";
      var DEFAULT_ECMA_VERSION = 5;
      var commentParser = new ConfigCommentParser();
      var DEFAULT_ERROR_LOC = {
        start: {
          line: 1,
          column: 0
        },
        end: {
          line: 1,
          column: 1
        }
      };
      var parserSymbol$1 = Symbol["for"]("eslint.RuleTester.parser");

      function addDeclaredGlobals(globalScope, configGlobals, _ref4) {
        var exportedVariables = _ref4.exportedVariables,
            enabledGlobals = _ref4.enabledGlobals;

        var _iterator4 = _createForOfIteratorHelper(new Set([].concat(_toConsumableArray(Object.keys(configGlobals)), _toConsumableArray(Object.keys(enabledGlobals))))),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var id = _step4.value;
            var configValue = configGlobals[id] === void 0 ? void 0 : ConfigOps$2.normalizeConfigGlobal(configGlobals[id]);
            var commentValue = enabledGlobals[id] && enabledGlobals[id].value;

            var _value = commentValue || configValue;

            var sourceComments = enabledGlobals[id] && enabledGlobals[id].comments;

            if (_value === "off") {
              continue;
            }

            var variable = globalScope.set.get(id);

            if (!variable) {
              variable = new eslintScope.Variable(id, globalScope);
              globalScope.variables.push(variable);
              globalScope.set.set(id, variable);
            }

            variable.eslintImplicitGlobalSetting = configValue;
            variable.eslintExplicitGlobal = sourceComments !== void 0;
            variable.eslintExplicitGlobalComments = sourceComments;
            variable.writeable = _value === "writable";
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        Object.keys(exportedVariables).forEach(function (name) {
          var variable = globalScope.set.get(name);

          if (variable) {
            variable.eslintUsed = true;
          }
        });
        globalScope.through = globalScope.through.filter(function (reference) {
          var name = reference.identifier.name;
          var variable = globalScope.set.get(name);

          if (variable) {
            reference.resolved = variable;
            variable.references.push(reference);
            return false;
          }

          return true;
        });
      }

      function createMissingRuleMessage(ruleId) {
        return Object.prototype.hasOwnProperty.call(ruleReplacements.rules, ruleId) ? "Rule '".concat(ruleId, "' was removed and replaced by: ").concat(ruleReplacements.rules[ruleId].join(", ")) : "Definition for rule '".concat(ruleId, "' was not found.");
      }

      function createLintingProblem(options) {
        var _options$ruleId = options.ruleId,
            ruleId = _options$ruleId === void 0 ? null : _options$ruleId,
            _options$loc = options.loc,
            loc = _options$loc === void 0 ? DEFAULT_ERROR_LOC : _options$loc,
            _options$message = options.message,
            message = _options$message === void 0 ? createMissingRuleMessage(options.ruleId) : _options$message,
            _options$severity = options.severity,
            severity = _options$severity === void 0 ? 2 : _options$severity;
        return {
          ruleId: ruleId,
          message: message,
          line: loc.start.line,
          column: loc.start.column + 1,
          endLine: loc.end.line,
          endColumn: loc.end.column + 1,
          severity: severity,
          nodeType: null
        };
      }

      function createDisableDirectives(options) {
        var type = options.type,
            loc = options.loc,
            value = options.value,
            ruleMapper = options.ruleMapper;
        var ruleIds = Object.keys(commentParser.parseListConfig(value));
        var directiveRules = ruleIds.length ? ruleIds : [null];
        var result = {
          directives: [],
          directiveProblems: []
        };

        var _iterator5 = _createForOfIteratorHelper(directiveRules),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var ruleId = _step5.value;

            if (ruleId === null || ruleMapper(ruleId) !== null) {
              result.directives.push({
                type: type,
                line: loc.start.line,
                column: loc.start.column + 1,
                ruleId: ruleId
              });
            } else {
              result.directiveProblems.push(createLintingProblem({
                ruleId: ruleId,
                loc: loc
              }));
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return result;
      }

      function stripDirectiveComment(value) {
        return value.split(/[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]\x2D{2,}[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/)[0].trim();
      }

      function getDirectiveComments(filename, ast, ruleMapper, warnInlineConfig) {
        var configuredRules = {};
        var enabledGlobals = Object.create(null);
        var exportedVariables = {};
        var problems = [];
        var disableDirectives = [];
        var validator = new ConfigValidator({
          builtInRules: Rules
        });
        ast.comments.filter(function (token) {
          return token.type !== "Shebang";
        }).forEach(function (comment) {
          var trimmedCommentText = stripDirectiveComment(comment.value);
          var match = /^(eslint(?:\x2Denv|\x2Denable|\x2Ddisable(?:(?:\x2Dnext)?\x2Dline)?)?|exported|globals?)(?:[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]|$)/.exec(trimmedCommentText);

          if (!match) {
            return;
          }

          var directiveText = match[1];
          var lineCommentSupported = /^eslint\x2Ddisable\x2D(next\x2D)?line$/.test(directiveText);

          if (comment.type === "Line" && !lineCommentSupported) {
            return;
          }

          if (warnInlineConfig) {
            var kind = comment.type === "Block" ? "/*".concat(directiveText, "*/") : "//".concat(directiveText);
            problems.push(createLintingProblem({
              ruleId: null,
              message: "'".concat(kind, "' has no effect because you have 'noInlineConfig' setting in ").concat(warnInlineConfig, "."),
              loc: comment.loc,
              severity: 1
            }));
            return;
          }

          if (lineCommentSupported && comment.loc.start.line !== comment.loc.end.line) {
            var message = "".concat(directiveText, " comment should not span multiple lines.");
            problems.push(createLintingProblem({
              ruleId: null,
              message: message,
              loc: comment.loc
            }));
            return;
          }

          var directiveValue = trimmedCommentText.slice(match.index + directiveText.length);

          switch (directiveText) {
            case "eslint-disable":
            case "eslint-enable":
            case "eslint-disable-next-line":
            case "eslint-disable-line":
              {
                var directiveType = directiveText.slice("eslint-".length);
                var options = {
                  type: directiveType,
                  loc: comment.loc,
                  value: directiveValue,
                  ruleMapper: ruleMapper
                };

                var _createDisableDirecti = createDisableDirectives(options),
                    directives = _createDisableDirecti.directives,
                    directiveProblems = _createDisableDirecti.directiveProblems;

                disableDirectives.push.apply(disableDirectives, _toConsumableArray(directives));
                problems.push.apply(problems, _toConsumableArray(directiveProblems));
                break;
              }

            case "exported":
              Object.assign(exportedVariables, commentParser.parseStringConfig(directiveValue, comment));
              break;

            case "globals":
            case "global":
              for (var _i2 = 0, _Object$entries = Object.entries(commentParser.parseStringConfig(directiveValue, comment)); _i2 < _Object$entries.length; _i2++) {
                var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
                    id = _Object$entries$_i[0],
                    _value2 = _Object$entries$_i[1].value;

                var normalizedValue = void 0;

                try {
                  normalizedValue = ConfigOps$2.normalizeConfigGlobal(_value2);
                } catch (err) {
                  problems.push(createLintingProblem({
                    ruleId: null,
                    loc: comment.loc,
                    message: err.message
                  }));
                  continue;
                }

                if (enabledGlobals[id]) {
                  enabledGlobals[id].comments.push(comment);
                  enabledGlobals[id].value = normalizedValue;
                } else {
                  enabledGlobals[id] = {
                    comments: [comment],
                    value: normalizedValue
                  };
                }
              }

              break;

            case "eslint":
              {
                var parseResult = commentParser.parseJsonConfig(directiveValue, comment.loc);

                if (parseResult.success) {
                  Object.keys(parseResult.config).forEach(function (name) {
                    var rule = ruleMapper(name);
                    var ruleValue = parseResult.config[name];

                    if (rule === null) {
                      problems.push(createLintingProblem({
                        ruleId: name,
                        loc: comment.loc
                      }));
                      return;
                    }

                    try {
                      validator.validateRuleOptions(rule, name, ruleValue);
                    } catch (err) {
                      problems.push(createLintingProblem({
                        ruleId: name,
                        message: err.message,
                        loc: comment.loc
                      }));
                      return;
                    }

                    configuredRules[name] = ruleValue;
                  });
                } else {
                  problems.push(parseResult.error);
                }

                break;
              }
          }
        });
        return {
          configuredRules: configuredRules,
          enabledGlobals: enabledGlobals,
          exportedVariables: exportedVariables,
          problems: problems,
          disableDirectives: disableDirectives
        };
      }

      function normalizeEcmaVersion(parser, ecmaVersion) {
        if ((parser[parserSymbol$1] || parser) === espree) {
          if (ecmaVersion === "latest") {
            return espree.latestEcmaVersion;
          }
        }

        return ecmaVersion >= 2015 ? ecmaVersion - 2009 : ecmaVersion;
      }

      var eslintEnvPattern = /\/\*[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*eslint\x2Denv[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]((?:[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+?)\*\//g;

      function findEslintEnv(text) {
        var match, retv;
        eslintEnvPattern.lastIndex = 0;

        while ((match = eslintEnvPattern.exec(text)) !== null) {
          retv = Object.assign(retv || {}, commentParser.parseListConfig(stripDirectiveComment(match[1])));
        }

        return retv;
      }

      function normalizeFilename(filename) {
        var parts = filename.split(path$8.sep);
        var index = parts.lastIndexOf("<text>");
        return index === -1 ? filename : parts.slice(index).join(path$8.sep);
      }

      function normalizeVerifyOptions(providedOptions, config) {
        var disableInlineConfig = config.noInlineConfig === true;
        var ignoreInlineConfig = providedOptions.allowInlineConfig === false;
        var configNameOfNoInlineConfig = config.configNameOfNoInlineConfig ? " (".concat(config.configNameOfNoInlineConfig, ")") : "";
        var reportUnusedDisableDirectives = providedOptions.reportUnusedDisableDirectives;

        if (typeof reportUnusedDisableDirectives === "boolean") {
          reportUnusedDisableDirectives = reportUnusedDisableDirectives ? "error" : "off";
        }

        if (typeof reportUnusedDisableDirectives !== "string") {
          reportUnusedDisableDirectives = config.reportUnusedDisableDirectives ? "warn" : "off";
        }

        return {
          filename: normalizeFilename(providedOptions.filename || "<input>"),
          allowInlineConfig: !ignoreInlineConfig,
          warnInlineConfig: disableInlineConfig && !ignoreInlineConfig ? "your config".concat(configNameOfNoInlineConfig) : null,
          reportUnusedDisableDirectives: reportUnusedDisableDirectives,
          disableFixes: Boolean(providedOptions.disableFixes)
        };
      }

      function resolveParserOptions(parser, providedOptions, enabledEnvironments) {
        var parserOptionsFromEnv = enabledEnvironments.filter(function (env) {
          return env.parserOptions;
        }).reduce(function (parserOptions, env) {
          return merge$1(parserOptions, env.parserOptions);
        }, {});
        var mergedParserOptions = merge$1(parserOptionsFromEnv, providedOptions || {});
        var isModule = mergedParserOptions.sourceType === "module";

        if (isModule) {
          mergedParserOptions.ecmaFeatures = Object.assign({}, mergedParserOptions.ecmaFeatures, {
            globalReturn: false
          });
        }

        mergedParserOptions.ecmaVersion = normalizeEcmaVersion(parser, mergedParserOptions.ecmaVersion);
        return mergedParserOptions;
      }

      function resolveGlobals(providedGlobals, enabledEnvironments) {
        return Object.assign.apply(Object, [{}].concat(_toConsumableArray(enabledEnvironments.filter(function (env) {
          return env.globals;
        }).map(function (env) {
          return env.globals;
        })), [providedGlobals]));
      }

      function stripUnicodeBOM(text) {
        if (text.charCodeAt(0) === 65279) {
          return text.slice(1);
        }

        return text;
      }

      function getRuleOptions(ruleConfig) {
        if (Array.isArray(ruleConfig)) {
          return ruleConfig.slice(1);
        }

        return [];
      }

      function analyzeScope(ast, parserOptions, visitorKeys) {
        var ecmaFeatures = parserOptions.ecmaFeatures || {};
        var ecmaVersion = parserOptions.ecmaVersion || DEFAULT_ECMA_VERSION;
        return eslintScope.analyze(ast, {
          ignoreEval: true,
          nodejsScope: ecmaFeatures.globalReturn,
          impliedStrict: ecmaFeatures.impliedStrict,
          ecmaVersion: ecmaVersion,
          sourceType: parserOptions.sourceType || "script",
          childVisitorKeys: visitorKeys || evk.KEYS,
          fallback: Traverser$1.getKeys
        });
      }

      function parse$2(text, parser, providedParserOptions, filePath) {
        var textToParse = stripUnicodeBOM(text).replace(astUtils.shebangPattern, function (match, captured) {
          return "//".concat(captured);
        });
        var parserOptions = Object.assign({}, providedParserOptions, {
          loc: true,
          range: true,
          raw: true,
          tokens: true,
          comment: true,
          eslintVisitorKeys: true,
          eslintScopeManager: true,
          filePath: filePath
        });

        try {
          var parseResult = typeof parser.parseForESLint === "function" ? parser.parseForESLint(textToParse, parserOptions) : {
            ast: parser.parse(textToParse, parserOptions)
          };
          var ast = parseResult.ast;
          var parserServices = parseResult.services || {};
          var visitorKeys = parseResult.visitorKeys || evk.KEYS;
          var scopeManager = parseResult.scopeManager || analyzeScope(ast, parserOptions, visitorKeys);
          return {
            success: true,
            sourceCode: new SourceCode$1({
              text: text,
              ast: ast,
              parserServices: parserServices,
              scopeManager: scopeManager,
              visitorKeys: visitorKeys
            })
          };
        } catch (ex) {
          var message = "Parsing error: ".concat(ex.message.replace(/^line [0-9]+:/i, "").trim());
          debug$2("%s\n%s", message, ex.stack);
          return {
            success: false,
            error: {
              ruleId: null,
              fatal: true,
              severity: 2,
              message: message,
              line: ex.lineNumber,
              column: ex.column
            }
          };
        }
      }

      function _getScope(scopeManager, currentNode) {
        var inner = currentNode.type !== "Program";

        for (var node = currentNode; node; node = node.parent) {
          var scope = scopeManager.acquire(node, inner);

          if (scope) {
            if (scope.type === "function-expression-name") {
              return scope.childScopes[0];
            }

            return scope;
          }
        }

        return scopeManager.scopes[0];
      }

      function _markVariableAsUsed(scopeManager, currentNode, parserOptions, name) {
        var hasGlobalReturn = parserOptions.ecmaFeatures && parserOptions.ecmaFeatures.globalReturn;
        var specialScope = hasGlobalReturn || parserOptions.sourceType === "module";

        var currentScope = _getScope(scopeManager, currentNode);

        var initialScope = currentScope.type === "global" && specialScope ? currentScope.childScopes[0] : currentScope;

        for (var scope = initialScope; scope; scope = scope.upper) {
          var variable = scope.variables.find(function (scopeVar) {
            return scopeVar.name === name;
          });

          if (variable) {
            variable.eslintUsed = true;
            return true;
          }
        }

        return false;
      }

      function createRuleListeners(rule, ruleContext) {
        try {
          return rule.create(ruleContext);
        } catch (ex) {
          ex.message = "Error while loading rule '".concat(ruleContext.id, "': ").concat(ex.message);
          throw ex;
        }
      }

      function _getAncestors(node) {
        var ancestorsStartingAtParent = [];

        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
          ancestorsStartingAtParent.push(ancestor);
        }

        return ancestorsStartingAtParent.reverse();
      }

      var DEPRECATED_SOURCECODE_PASSTHROUGHS = {
        getSource: "getText",
        getSourceLines: "getLines",
        getAllComments: "getAllComments",
        getNodeByRangeIndex: "getNodeByRangeIndex",
        getComments: "getComments",
        getCommentsBefore: "getCommentsBefore",
        getCommentsAfter: "getCommentsAfter",
        getCommentsInside: "getCommentsInside",
        getJSDocComment: "getJSDocComment",
        getFirstToken: "getFirstToken",
        getFirstTokens: "getFirstTokens",
        getLastToken: "getLastToken",
        getLastTokens: "getLastTokens",
        getTokenAfter: "getTokenAfter",
        getTokenBefore: "getTokenBefore",
        getTokenByRangeStart: "getTokenByRangeStart",
        getTokens: "getTokens",
        getTokensAfter: "getTokensAfter",
        getTokensBefore: "getTokensBefore",
        getTokensBetween: "getTokensBetween"
      };
      var BASE_TRAVERSAL_CONTEXT = Object.freeze(Object.keys(DEPRECATED_SOURCECODE_PASSTHROUGHS).reduce(function (contextInfo, methodName) {
        return Object.assign(contextInfo, _defineProperty({}, methodName, function () {
          var _this$getSourceCode;

          return (_this$getSourceCode = this.getSourceCode())[DEPRECATED_SOURCECODE_PASSTHROUGHS[methodName]].apply(_this$getSourceCode, arguments);
        }));
      }, {}));

      function runRules(sourceCode, configuredRules, ruleMapper, parserOptions, parserName, settings, filename, disableFixes, cwd, physicalFilename) {
        var emitter = createEmitter();
        var nodeQueue = [];
        var currentNode = sourceCode.ast;
        Traverser$1.traverse(sourceCode.ast, {
          enter: function enter(node, parent) {
            node.parent = parent;
            nodeQueue.push({
              isEntering: true,
              node: node
            });
          },
          leave: function leave(node) {
            nodeQueue.push({
              isEntering: false,
              node: node
            });
          },
          visitorKeys: sourceCode.visitorKeys
        });
        var sharedTraversalContext = Object.freeze(Object.assign(Object.create(BASE_TRAVERSAL_CONTEXT), {
          getAncestors: function getAncestors() {
            return _getAncestors(currentNode);
          },
          getDeclaredVariables: sourceCode.scopeManager.getDeclaredVariables.bind(sourceCode.scopeManager),
          getCwd: function getCwd() {
            return cwd;
          },
          getFilename: function getFilename() {
            return filename;
          },
          getPhysicalFilename: function getPhysicalFilename() {
            return physicalFilename || filename;
          },
          getScope: function getScope() {
            return _getScope(sourceCode.scopeManager, currentNode);
          },
          getSourceCode: function getSourceCode() {
            return sourceCode;
          },
          markVariableAsUsed: function markVariableAsUsed(name) {
            return _markVariableAsUsed(sourceCode.scopeManager, currentNode, parserOptions, name);
          },
          parserOptions: parserOptions,
          parserPath: parserName,
          parserServices: sourceCode.parserServices,
          settings: settings
        }));
        var lintingProblems = [];
        Object.keys(configuredRules).forEach(function (ruleId) {
          var severity = ConfigOps$2.getRuleSeverity(configuredRules[ruleId]);

          if (severity === 0) {
            return;
          }

          var rule = ruleMapper(ruleId);

          if (rule === null) {
            lintingProblems.push(createLintingProblem({
              ruleId: ruleId
            }));
            return;
          }

          var messageIds = rule.meta && rule.meta.messages;
          var reportTranslator = null;
          var ruleContext = Object.freeze(Object.assign(Object.create(sharedTraversalContext), {
            id: ruleId,
            options: getRuleOptions(configuredRules[ruleId]),
            report: function report() {
              if (reportTranslator === null) {
                reportTranslator = createReportTranslator({
                  ruleId: ruleId,
                  severity: severity,
                  sourceCode: sourceCode,
                  messageIds: messageIds,
                  disableFixes: disableFixes
                });
              }

              var problem = reportTranslator.apply(void 0, arguments);

              if (problem.fix && rule.meta && !rule.meta.fixable) {
                throw new Error("Fixable rules should export a `meta.fixable` property.");
              }

              lintingProblems.push(problem);
            }
          }));
          var ruleListeners = createRuleListeners(rule, ruleContext);
          Object.keys(ruleListeners).forEach(function (selector) {
            emitter.on(selector, timing.enabled ? timing.time(ruleId, ruleListeners[selector]) : ruleListeners[selector]);
          });
        });
        var eventGenerator = nodeQueue[0].node.type === "Program" ? new CodePathAnalyzer(new NodeEventGenerator(emitter, {
          visitorKeys: sourceCode.visitorKeys,
          fallback: Traverser$1.getKeys
        })) : new NodeEventGenerator(emitter, {
          visitorKeys: sourceCode.visitorKeys,
          fallback: Traverser$1.getKeys
        });
        nodeQueue.forEach(function (traversalInfo) {
          currentNode = traversalInfo.node;

          try {
            if (traversalInfo.isEntering) {
              eventGenerator.enterNode(currentNode);
            } else {
              eventGenerator.leaveNode(currentNode);
            }
          } catch (err) {
            err.currentNode = currentNode;
            throw err;
          }
        });
        return lintingProblems;
      }

      function ensureText(textOrSourceCode) {
        if (_typeof(textOrSourceCode) === "object") {
          var hasBOM = textOrSourceCode.hasBOM,
              text = textOrSourceCode.text;
          var bom = hasBOM ? "\uFEFF" : "";
          return bom + text;
        }

        return String(textOrSourceCode);
      }

      function getEnv(slots, envId) {
        return slots.lastConfigArray && slots.lastConfigArray.pluginEnvironments.get(envId) || BuiltInEnvironments$1.get(envId) || null;
      }

      function getRule$1(slots, ruleId) {
        return slots.lastConfigArray && slots.lastConfigArray.pluginRules.get(ruleId) || slots.ruleMap.get(ruleId);
      }

      function normalizeCwd(cwd) {
        if (cwd) {
          return cwd;
        }

        if (_typeof(process$8) === "object") {
          return process$8.cwd();
        }

        return undefined;
      }

      var internalSlotsMap$1 = new WeakMap();

      var Linter$4 = /*#__PURE__*/function () {
        function Linter() {
          var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              cwd = _ref5.cwd;

          _classCallCheck(this, Linter);

          internalSlotsMap$1.set(this, {
            cwd: normalizeCwd(cwd),
            lastConfigArray: null,
            lastSourceCode: null,
            parserMap: new Map([["espree", espree]]),
            ruleMap: new Rules()
          });
          this.version = pkg$2.version;
        }

        _createClass(Linter, [{
          key: "_verifyWithoutProcessors",
          value: function _verifyWithoutProcessors(textOrSourceCode, providedConfig, providedOptions) {
            var slots = internalSlotsMap$1.get(this);
            var config = providedConfig || {};
            var options = normalizeVerifyOptions(providedOptions, config);
            var text;

            if (typeof textOrSourceCode === "string") {
              slots.lastSourceCode = null;
              text = textOrSourceCode;
            } else {
              slots.lastSourceCode = textOrSourceCode;
              text = textOrSourceCode.text;
            }

            var parserName = DEFAULT_PARSER_NAME;
            var parser = espree;

            if (_typeof(config.parser) === "object" && config.parser !== null) {
              parserName = config.parser.filePath;
              parser = config.parser.definition;
            } else if (typeof config.parser === "string") {
              if (!slots.parserMap.has(config.parser)) {
                return [{
                  ruleId: null,
                  fatal: true,
                  severity: 2,
                  message: "Configured parser '".concat(config.parser, "' was not found."),
                  line: 0,
                  column: 0
                }];
              }

              parserName = config.parser;
              parser = slots.parserMap.get(config.parser);
            }

            var envInFile = options.allowInlineConfig && !options.warnInlineConfig ? findEslintEnv(text) : {};
            var resolvedEnvConfig = Object.assign({
              builtin: true
            }, config.env, envInFile);
            var enabledEnvs = Object.keys(resolvedEnvConfig).filter(function (envName) {
              return resolvedEnvConfig[envName];
            }).map(function (envName) {
              return getEnv(slots, envName);
            }).filter(function (env) {
              return env;
            });
            var parserOptions = resolveParserOptions(parser, config.parserOptions || {}, enabledEnvs);
            var configuredGlobals = resolveGlobals(config.globals || {}, enabledEnvs);
            var settings = config.settings || {};

            if (!slots.lastSourceCode) {
              var parseResult = parse$2(text, parser, parserOptions, options.filename);

              if (!parseResult.success) {
                return [parseResult.error];
              }

              slots.lastSourceCode = parseResult.sourceCode;
            } else {
              if (!slots.lastSourceCode.scopeManager) {
                slots.lastSourceCode = new SourceCode$1({
                  text: slots.lastSourceCode.text,
                  ast: slots.lastSourceCode.ast,
                  parserServices: slots.lastSourceCode.parserServices,
                  visitorKeys: slots.lastSourceCode.visitorKeys,
                  scopeManager: analyzeScope(slots.lastSourceCode.ast, parserOptions)
                });
              }
            }

            var sourceCode = slots.lastSourceCode;
            var commentDirectives = options.allowInlineConfig ? getDirectiveComments(options.filename, sourceCode.ast, function (ruleId) {
              return getRule$1(slots, ruleId);
            }, options.warnInlineConfig) : {
              configuredRules: {},
              enabledGlobals: {},
              exportedVariables: {},
              problems: [],
              disableDirectives: []
            };
            addDeclaredGlobals(sourceCode.scopeManager.scopes[0], configuredGlobals, {
              exportedVariables: commentDirectives.exportedVariables,
              enabledGlobals: commentDirectives.enabledGlobals
            });
            var configuredRules = Object.assign({}, config.rules, commentDirectives.configuredRules);
            var lintingProblems;

            try {
              lintingProblems = runRules(sourceCode, configuredRules, function (ruleId) {
                return getRule$1(slots, ruleId);
              }, parserOptions, parserName, settings, options.filename, options.disableFixes, slots.cwd, providedOptions.physicalFilename);
            } catch (err) {
              err.message += "\nOccurred while linting ".concat(options.filename);
              debug$2("An error occurred while traversing");
              debug$2("Filename:", options.filename);

              if (err.currentNode) {
                var line = err.currentNode.loc.start.line;
                debug$2("Line:", line);
                err.message += ":".concat(line);
              }

              debug$2("Parser Options:", parserOptions);
              debug$2("Parser Path:", parserName);
              debug$2("Settings:", settings);
              throw err;
            }

            return applyDisableDirectives({
              directives: commentDirectives.disableDirectives,
              problems: lintingProblems.concat(commentDirectives.problems).sort(function (problemA, problemB) {
                return problemA.line - problemB.line || problemA.column - problemB.column;
              }),
              reportUnusedDisableDirectives: options.reportUnusedDisableDirectives
            });
          }
        }, {
          key: "verify",
          value: function verify(textOrSourceCode, config, filenameOrOptions) {
            debug$2("Verify");
            var options = typeof filenameOrOptions === "string" ? {
              filename: filenameOrOptions
            } : filenameOrOptions || {};

            if (config && typeof config.extractConfig === "function") {
              return this._verifyWithConfigArray(textOrSourceCode, config, options);
            }

            if (options.preprocess || options.postprocess) {
              return this._verifyWithProcessor(textOrSourceCode, config, options);
            }

            return this._verifyWithoutProcessors(textOrSourceCode, config, options);
          }
        }, {
          key: "_verifyWithConfigArray",
          value: function _verifyWithConfigArray(textOrSourceCode, configArray, options) {
            debug$2("With ConfigArray: %s", options.filename);
            internalSlotsMap$1.get(this).lastConfigArray = configArray;
            var config = configArray.extractConfig(options.filename);
            var processor = config.processor && configArray.pluginProcessors.get(config.processor);

            if (processor) {
              debug$2("Apply the processor: %o", config.processor);
              var preprocess = processor.preprocess,
                  postprocess = processor.postprocess,
                  supportsAutofix = processor.supportsAutofix;
              var disableFixes = options.disableFixes || !supportsAutofix;
              return this._verifyWithProcessor(textOrSourceCode, config, _objectSpread2(_objectSpread2({}, options), {}, {
                disableFixes: disableFixes,
                postprocess: postprocess,
                preprocess: preprocess
              }), configArray);
            }

            return this._verifyWithoutProcessors(textOrSourceCode, config, options);
          }
        }, {
          key: "_verifyWithProcessor",
          value: function _verifyWithProcessor(textOrSourceCode, config, options, configForRecursive) {
            var _this = this;

            var filename = options.filename || "<input>";
            var filenameToExpose = normalizeFilename(filename);
            var physicalFilename = options.physicalFilename || filenameToExpose;
            var text = ensureText(textOrSourceCode);

            var preprocess = options.preprocess || function (rawText) {
              return [rawText];
            };

            var postprocess = options.postprocess || function (array) {
              var _ref6;

              return (_ref6 = []).concat.apply(_ref6, _toConsumableArray(array));
            };

            var filterCodeBlock = options.filterCodeBlock || function (blockFilename) {
              return blockFilename.endsWith(".js");
            };

            var originalExtname = path$8.extname(filename);
            var messageLists = preprocess(text, filenameToExpose).map(function (block, i) {
              debug$2("A code block was found: %o", block.filename || "(unnamed)");

              if (typeof block === "string") {
                return _this._verifyWithoutProcessors(block, config, options);
              }

              var blockText = block.text;
              var blockName = path$8.join(filename, "".concat(i, "_").concat(block.filename));

              if (!filterCodeBlock(blockName, blockText)) {
                debug$2("This code block was skipped.");
                return [];
              }

              if (configForRecursive && (text !== blockText || path$8.extname(blockName) !== originalExtname)) {
                debug$2("Resolving configuration again because the file content or extension was changed.");
                return _this._verifyWithConfigArray(blockText, configForRecursive, _objectSpread2(_objectSpread2({}, options), {}, {
                  filename: blockName,
                  physicalFilename: physicalFilename
                }));
              }

              return _this._verifyWithoutProcessors(blockText, config, _objectSpread2(_objectSpread2({}, options), {}, {
                filename: blockName,
                physicalFilename: physicalFilename
              }));
            });
            return postprocess(messageLists, filenameToExpose);
          }
        }, {
          key: "getSourceCode",
          value: function getSourceCode() {
            return internalSlotsMap$1.get(this).lastSourceCode;
          }
        }, {
          key: "defineRule",
          value: function defineRule(ruleId, ruleModule) {
            internalSlotsMap$1.get(this).ruleMap.define(ruleId, ruleModule);
          }
        }, {
          key: "defineRules",
          value: function defineRules(rulesToDefine) {
            var _this2 = this;

            Object.getOwnPropertyNames(rulesToDefine).forEach(function (ruleId) {
              _this2.defineRule(ruleId, rulesToDefine[ruleId]);
            });
          }
        }, {
          key: "getRules",
          value: function getRules() {
            var _internalSlotsMap$get = internalSlotsMap$1.get(this),
                lastConfigArray = _internalSlotsMap$get.lastConfigArray,
                ruleMap = _internalSlotsMap$get.ruleMap;

            return new Map( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              return regeneratorRuntime.wrap(function _callee$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      return _context2.delegateYield(ruleMap, "t0", 1);

                    case 1:
                      if (!lastConfigArray) {
                        _context2.next = 3;
                        break;
                      }

                      return _context2.delegateYield(lastConfigArray.pluginRules, "t1", 3);

                    case 3:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee);
            })());
          }
        }, {
          key: "defineParser",
          value: function defineParser(parserId, parserModule) {
            internalSlotsMap$1.get(this).parserMap.set(parserId, parserModule);
          }
        }, {
          key: "verifyAndFix",
          value: function verifyAndFix(text, config, options) {
            var messages = [],
                fixedResult,
                fixed = false,
                passNumber = 0,
                currentText = text;
            var debugTextDescription = options && options.filename || "".concat(text.slice(0, 10), "...");
            var shouldFix = options && typeof options.fix !== "undefined" ? options.fix : true;

            do {
              passNumber++;
              debug$2("Linting code for ".concat(debugTextDescription, " (pass ").concat(passNumber, ")"));
              messages = this.verify(currentText, config, options);
              debug$2("Generating fixed text for ".concat(debugTextDescription, " (pass ").concat(passNumber, ")"));
              fixedResult = SourceCodeFixer$2.applyFixes(currentText, messages, shouldFix);

              if (messages.length === 1 && messages[0].fatal) {
                break;
              }

              fixed = fixed || fixedResult.fixed;
              currentText = fixedResult.output;
            } while (fixedResult.fixed && passNumber < MAX_AUTOFIX_PASSES);

            if (fixedResult.fixed) {
              fixedResult.messages = this.verify(currentText, config, options);
            }

            fixedResult.fixed = fixed;
            fixedResult.output = currentText;
            return fixedResult;
          }
        }], [{
          key: "version",
          get: function get() {
            return pkg$2.version;
          }
        }]);

        return Linter;
      }();

      exports$p = {
        Linter: Linter$4,
        getLinterInternalSlots: function getLinterInternalSlots(instance) {
          return internalSlotsMap$1.get(instance);
        }
      };
      var _linter$1 = exports$p;
      exports$p.getLinterInternalSlots;
      exports$p.Linter;

      var exports$o = {};
      const {Linter: Linter$3} = _linter$1;
      const interpolate$1 = _interpolate;
      const SourceCodeFixer$1 = _sourceCodeFixer;
      exports$o = {
        Linter: Linter$3,
        SourceCodeFixer: SourceCodeFixer$1,
        interpolate: interpolate$1
      };
      var _linter = exports$o;
      exports$o.Linter; exports$o.SourceCodeFixer; exports$o.interpolate;

      var _fs$5 = "default" in _fs2 ? fs$b : _fs2;
      var _path$6 = "default" in _path2 ? exports$5S : _path2;
      var exports$n = {};
      function _nullRequire$3(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }
      const fs$7 = _fs$5, path$7 = _path$6;
      const rulesDirCache = {};
      exports$n = function (relativeRulesDir, cwd) {
        const rulesDir = path$7.resolve(cwd, relativeRulesDir);
        if (rulesDirCache[rulesDir]) {
          return rulesDirCache[rulesDir];
        }
        const rules = Object.create(null);
        fs$7.readdirSync(rulesDir).forEach(file => {
          if (path$7.extname(file) !== ".js") {
            return;
          }
          rules[file.slice(0, -3)] = _nullRequire$3(path$7.join(rulesDir, file));
        });
        rulesDirCache[rulesDir] = rules;
        return rules;
      };
      var _loadRules = exports$n;

      var _global$5 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$m = {};
      (function () {
        var cache;
        function MurmurHash3(key, seed) {
          var m = (this || _global$5) instanceof MurmurHash3 ? this || _global$5 : cache;
          m.reset(seed);
          if (typeof key === "string" && key.length > 0) {
            m.hash(key);
          }
          if (m !== (this || _global$5)) {
            return m;
          }
        }
        MurmurHash3.prototype.hash = function (key) {
          var h1, k1, i, top, len;
          len = key.length;
          (this || _global$5).len += len;
          k1 = (this || _global$5).k1;
          i = 0;
          switch ((this || _global$5).rem) {
          case 0:
            k1 ^= len > i ? key.charCodeAt(i++) & 65535 : 0;
          case 1:
            k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 8 : 0;
          case 2:
            k1 ^= len > i ? (key.charCodeAt(i++) & 65535) << 16 : 0;
          case 3:
            k1 ^= len > i ? (key.charCodeAt(i) & 255) << 24 : 0;
            k1 ^= len > i ? (key.charCodeAt(i++) & 65280) >> 8 : 0;
          }
          (this || _global$5).rem = len + (this || _global$5).rem & 3;
          len -= (this || _global$5).rem;
          if (len > 0) {
            h1 = (this || _global$5).h1;
            while (1) {
              k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
              k1 = k1 << 15 | k1 >>> 17;
              k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
              h1 ^= k1;
              h1 = h1 << 13 | h1 >>> 19;
              h1 = h1 * 5 + 3864292196 & 4294967295;
              if (i >= len) {
                break;
              }
              k1 = key.charCodeAt(i++) & 65535 ^ (key.charCodeAt(i++) & 65535) << 8 ^ (key.charCodeAt(i++) & 65535) << 16;
              top = key.charCodeAt(i++);
              k1 ^= (top & 255) << 24 ^ (top & 65280) >> 8;
            }
            k1 = 0;
            switch ((this || _global$5).rem) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 65535) << 16;
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 65535) << 8;
            case 1:
              k1 ^= key.charCodeAt(i) & 65535;
            }
            (this || _global$5).h1 = h1;
          }
          (this || _global$5).k1 = k1;
          return this || _global$5;
        };
        MurmurHash3.prototype.result = function () {
          var k1, h1;
          k1 = (this || _global$5).k1;
          h1 = (this || _global$5).h1;
          if (k1 > 0) {
            k1 = k1 * 11601 + (k1 & 65535) * 3432906752 & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = k1 * 13715 + (k1 & 65535) * 461832192 & 4294967295;
            h1 ^= k1;
          }
          h1 ^= (this || _global$5).len;
          h1 ^= h1 >>> 16;
          h1 = h1 * 51819 + (h1 & 65535) * 2246770688 & 4294967295;
          h1 ^= h1 >>> 13;
          h1 = h1 * 44597 + (h1 & 65535) * 3266445312 & 4294967295;
          h1 ^= h1 >>> 16;
          return h1 >>> 0;
        };
        MurmurHash3.prototype.reset = function (seed) {
          (this || _global$5).h1 = typeof seed === "number" ? seed : 0;
          (this || _global$5).rem = (this || _global$5).k1 = (this || _global$5).len = 0;
          return this || _global$5;
        };
        cache = new MurmurHash3();
        exports$m = MurmurHash3;
      }());
      var exports$1$f = exports$m;

      var _imurmurhash2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$f
      });

      var exports$l = {};
      var Buffer = exports$5T.Buffer;
      exports$l.stringify = function stringify(o) {
        if ("undefined" == typeof o)
          return o;
        if (o && Buffer.isBuffer(o))
          return JSON.stringify(":base64:" + o.toString("base64"));
        if (o && o.toJSON)
          o = o.toJSON();
        if (o && "object" === typeof o) {
          var s = "";
          var array = Array.isArray(o);
          s = array ? "[" : "{";
          var first = true;
          for (var k in o) {
            var ignore = "function" == typeof o[k] || !array && "undefined" === typeof o[k];
            if (Object.hasOwnProperty.call(o, k) && !ignore) {
              if (!first)
                s += ",";
              first = false;
              if (array) {
                if (o[k] == undefined)
                  s += "null";
                else
                  s += stringify(o[k]);
              } else if (o[k] !== void 0) {
                s += stringify(k) + ":" + stringify(o[k]);
              }
            }
          }
          s += array ? "]" : "}";
          return s;
        } else if ("string" === typeof o) {
          return JSON.stringify(/^:/.test(o) ? ":" + o : o);
        } else if ("undefined" === typeof o) {
          return "null";
        } else
          return JSON.stringify(o);
      };
      exports$l.parse = function (s) {
        return JSON.parse(s, function (key, value) {
          if ("string" === typeof value) {
            if (/^:base64:/.test(value))
              return Buffer.from(value.substring(8), "base64");
            else
              return /^:/.test(value) ? value.substring(1) : value;
          }
          return value;
        });
      };
      const stringify$2 = exports$l.stringify, parse$1 = exports$l.parse;

      var _jsonBuffer2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$l,
        parse: parse$1,
        stringify: stringify$2
      });

      var _events$1 = "default" in _events2 ? y$2 : _events2;
      var _jsonBuffer = "default" in _jsonBuffer2 ? exports$l : _jsonBuffer2;
      var exports$k = {};
      function _nullRequire$2(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }
      const EventEmitter = _events$1;
      const JSONB = _jsonBuffer;
      const loadStore = options => {
        const adapters = {
          redis: "@keyv/redis",
          rediss: "@keyv/redis",
          mongodb: "@keyv/mongo",
          mongo: "@keyv/mongo",
          sqlite: "@keyv/sqlite",
          postgresql: "@keyv/postgres",
          postgres: "@keyv/postgres",
          mysql: "@keyv/mysql",
          etcd: "@keyv/etcd",
          offline: "@keyv/offline",
          tiered: "@keyv/tiered"
        };
        if (options.adapter || options.uri) {
          const adapter = options.adapter || /^[^:+]*/.exec(options.uri)[0];
          return new (_nullRequire$2(adapters[adapter]))(options);
        }
        return new Map();
      };
      const iterableAdapters = [
        "sqlite",
        "postgres",
        "mysql",
        "mongo",
        "redis",
        "tiered"
      ];
      class Keyv$1 extends EventEmitter {
        constructor(uri, {emitErrors = true, ...options} = {}) {
          super();
          this.opts = {
            namespace: "keyv",
            serialize: JSONB.stringify,
            deserialize: JSONB.parse,
            ...typeof uri === "string" ? { uri } : uri,
            ...options
          };
          if (!this.opts.store) {
            const adapterOptions = { ...this.opts };
            this.opts.store = loadStore(adapterOptions);
          }
          if (this.opts.compression) {
            const compression = this.opts.compression;
            this.opts.serialize = compression.serialize.bind(compression);
            this.opts.deserialize = compression.deserialize.bind(compression);
          }
          if (typeof this.opts.store.on === "function" && emitErrors) {
            this.opts.store.on("error", error => this.emit("error", error));
          }
          this.opts.store.namespace = this.opts.namespace;
          const generateIterator = iterator => async function* () {
            for await (const [key, raw] of typeof iterator === "function" ? iterator(this.opts.store.namespace) : iterator) {
              const data = await this.opts.deserialize(raw);
              if (this.opts.store.namespace && !key.includes(this.opts.store.namespace)) {
                continue;
              }
              if (typeof data.expires === "number" && Date.now() > data.expires) {
                this.delete(key);
                continue;
              }
              yield [
                this._getKeyUnprefix(key),
                data.value
              ];
            }
          };
          if (typeof this.opts.store[Symbol.iterator] === "function" && this.opts.store instanceof Map) {
            this.iterator = generateIterator(this.opts.store);
          } else if (typeof this.opts.store.iterator === "function" && this.opts.store.opts && this._checkIterableAdaptar()) {
            this.iterator = generateIterator(this.opts.store.iterator.bind(this.opts.store));
          }
        }
        _checkIterableAdaptar() {
          return iterableAdapters.includes(this.opts.store.opts.dialect) || iterableAdapters.findIndex(element => this.opts.store.opts.url.includes(element)) >= 0;
        }
        _getKeyPrefix(key) {
          return `${ this.opts.namespace }:${ key }`;
        }
        _getKeyPrefixArray(keys) {
          return keys.map(key => `${ this.opts.namespace }:${ key }`);
        }
        _getKeyUnprefix(key) {
          return key.split(":").splice(1).join(":");
        }
        get(key, options) {
          const {store} = this.opts;
          const isArray = Array.isArray(key);
          const keyPrefixed = isArray ? this._getKeyPrefixArray(key) : this._getKeyPrefix(key);
          if (isArray && store.getMany === undefined) {
            const promises = [];
            for (const key of keyPrefixed) {
              promises.push(Promise.resolve().then(() => store.get(key)).then(data => typeof data === "string" ? this.opts.deserialize(data) : this.opts.compression ? this.opts.deserialize(data) : data).then(data => {
                if (data === undefined || data === null) {
                  return undefined;
                }
                if (typeof data.expires === "number" && Date.now() > data.expires) {
                  return this.delete(key).then(() => undefined);
                }
                return options && options.raw ? data : data.value;
              }));
            }
            return Promise.allSettled(promises).then(values => {
              const data = [];
              for (const value of values) {
                data.push(value.value);
              }
              return data;
            });
          }
          return Promise.resolve().then(() => isArray ? store.getMany(keyPrefixed) : store.get(keyPrefixed)).then(data => typeof data === "string" ? this.opts.deserialize(data) : this.opts.compression ? this.opts.deserialize(data) : data).then(data => {
            if (data === undefined || data === null) {
              return undefined;
            }
            if (isArray) {
              return data.map((row, index) => {
                if (typeof row === "string") {
                  row = this.opts.deserialize(row);
                }
                if (row === undefined || row === null) {
                  return undefined;
                }
                if (typeof row.expires === "number" && Date.now() > row.expires) {
                  this.delete(key[index]).then(() => undefined);
                  return undefined;
                }
                return options && options.raw ? row : row.value;
              });
            }
            if (typeof data.expires === "number" && Date.now() > data.expires) {
              return this.delete(key).then(() => undefined);
            }
            return options && options.raw ? data : data.value;
          });
        }
        set(key, value, ttl) {
          const keyPrefixed = this._getKeyPrefix(key);
          if (typeof ttl === "undefined") {
            ttl = this.opts.ttl;
          }
          if (ttl === 0) {
            ttl = undefined;
          }
          const {store} = this.opts;
          return Promise.resolve().then(() => {
            const expires = typeof ttl === "number" ? Date.now() + ttl : null;
            if (typeof value === "symbol") {
              this.emit("error", "symbol cannot be serialized");
            }
            value = {
              value,
              expires
            };
            return this.opts.serialize(value);
          }).then(value => store.set(keyPrefixed, value, ttl)).then(() => true);
        }
        delete(key) {
          const {store} = this.opts;
          if (Array.isArray(key)) {
            const keyPrefixed = this._getKeyPrefixArray(key);
            if (store.deleteMany === undefined) {
              const promises = [];
              for (const key of keyPrefixed) {
                promises.push(store.delete(key));
              }
              return Promise.allSettled(promises).then(values => values.every(x => x.value === true));
            }
            return Promise.resolve().then(() => store.deleteMany(keyPrefixed));
          }
          const keyPrefixed = this._getKeyPrefix(key);
          return Promise.resolve().then(() => store.delete(keyPrefixed));
        }
        clear() {
          const {store} = this.opts;
          return Promise.resolve().then(() => store.clear());
        }
        has(key) {
          const keyPrefixed = this._getKeyPrefix(key);
          const {store} = this.opts;
          return Promise.resolve().then(async () => {
            if (typeof store.has === "function") {
              return store.has(keyPrefixed);
            }
            const value = await store.get(keyPrefixed);
            return value !== undefined;
          });
        }
        disconnect() {
          const {store} = this.opts;
          if (typeof store.disconnect === "function") {
            return store.disconnect();
          }
        }
      }
      exports$k = Keyv$1;
      var exports$1$e = exports$k;

      var _keyv2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$e
      });

      var exports$j = {};
      const {
        parse: $parse,
        stringify: $stringify
      } = JSON;
      const {keys} = Object;
      const Primitive = String;
      const primitive = "string";
      const ignore = {};
      const object = "object";
      const noop$1 = (_, value) => value;
      const primitives = value => value instanceof Primitive ? Primitive(value) : value;
      const Primitives = (_, value) => typeof value === primitive ? new Primitive(value) : value;
      const revive = (input, parsed, output, $) => {
        const lazy = [];
        for (let ke = keys(output), {length} = ke, y = 0; y < length; y++) {
          const k = ke[y];
          const value = output[k];
          if (value instanceof Primitive) {
            const tmp = input[value];
            if (typeof tmp === object && !parsed.has(tmp)) {
              parsed.add(tmp);
              output[k] = ignore;
              lazy.push({
                k,
                a: [
                  input,
                  parsed,
                  tmp,
                  $
                ]
              });
            } else
              output[k] = $.call(output, k, tmp);
          } else if (output[k] !== ignore)
            output[k] = $.call(output, k, value);
        }
        for (let {length} = lazy, i = 0; i < length; i++) {
          const {k, a} = lazy[i];
          output[k] = $.call(output, k, revive.apply(null, a));
        }
        return output;
      };
      const set = (known, input, value) => {
        const index = Primitive(input.push(value) - 1);
        known.set(value, index);
        return index;
      };
      const parse = (text, reviver) => {
        const input = $parse(text, Primitives).map(primitives);
        const value = input[0];
        const $ = reviver || noop$1;
        const tmp = typeof value === object && value ? revive(input, new Set(), value, $) : value;
        return $.call({ "": tmp }, "", tmp);
      };
      exports$j.parse = parse;
      const stringify$1 = (value, replacer, space) => {
        const $ = replacer && typeof replacer === object ? (k, v) => k === "" || -1 < replacer.indexOf(k) ? v : void 0 : replacer || noop$1;
        const known = new Map();
        const input = [];
        const output = [];
        let i = +set(known, input, $.call({ "": value }, "", value));
        let firstRun = !i;
        while (i < input.length) {
          firstRun = true;
          output[i] = $stringify(input[i++], replace, space);
        }
        return "[" + output.join(",") + "]";
        function replace(key, value) {
          if (firstRun) {
            firstRun = !firstRun;
            return value;
          }
          const after = $.call(this, key, value);
          switch (typeof after) {
          case object:
            if (after === null)
              return after;
          case primitive:
            return known.get(after) || set(known, input, after);
          }
          return after;
        }
      };
      exports$j.stringify = stringify$1;
      const toJSON = any => $parse(stringify$1(any));
      exports$j.toJSON = toJSON;
      const fromJSON = any => parse($stringify(any));
      exports$j.fromJSON = fromJSON;
      const _parse = exports$j.parse, _stringify = exports$j.stringify, _toJSON = exports$j.toJSON, _fromJSON = exports$j.fromJSON;

      var _flatted2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$j,
        fromJSON: _fromJSON,
        parse: _parse,
        stringify: _stringify,
        toJSON: _toJSON
      });

      var exports$i = {};
      var process$7 = process$g;
      var pathModule = exports$5S;
      var isWindows$1 = process$7.platform === "win32";
      var fs$6 = fs$b;
      var DEBUG = process$7.env.NODE_DEBUG && /fs/.test(process$7.env.NODE_DEBUG);
      function rethrow() {
        var callback;
        if (DEBUG) {
          var backtrace = new Error();
          callback = debugCallback;
        } else
          callback = missingCallback;
        return callback;
        function debugCallback(err) {
          if (err) {
            backtrace.message = err.message;
            err = backtrace;
            missingCallback(err);
          }
        }
        function missingCallback(err) {
          if (err) {
            if (process$7.throwDeprecation)
              throw err;
            else if (!process$7.noDeprecation) {
              var msg = "fs: missing callback " + (err.stack || err.message);
              if (process$7.traceDeprecation)
                console.trace(msg);
              else
                console.error(msg);
            }
          }
        }
      }
      function maybeCallback(cb) {
        return typeof cb === "function" ? cb : rethrow();
      }
      pathModule.normalize;
      if (isWindows$1) {
        var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
      } else {
        var nextPartRe = /(.*?)(?:[\/]+|$)/g;
      }
      if (isWindows$1) {
        var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
      } else {
        var splitRootRe = /^[\/]*/;
      }
      exports$i.realpathSync = function realpathSync(p, cache) {
        p = pathModule.resolve(p);
        if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
          return cache[p];
        }
        var original = p, seenLinks = {}, knownHard = {};
        var pos;
        var current;
        var base;
        var previous;
        start();
        function start() {
          var m = splitRootRe.exec(p);
          pos = m[0].length;
          current = m[0];
          base = m[0];
          previous = "";
          if (isWindows$1 && !knownHard[base]) {
            fs$6.lstatSync(base);
            knownHard[base] = true;
          }
        }
        while (pos < p.length) {
          nextPartRe.lastIndex = pos;
          var result = nextPartRe.exec(p);
          previous = current;
          current += result[0];
          base = previous + result[1];
          pos = nextPartRe.lastIndex;
          if (knownHard[base] || cache && cache[base] === base) {
            continue;
          }
          var resolvedLink;
          if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
            resolvedLink = cache[base];
          } else {
            var stat = fs$6.lstatSync(base);
            if (!stat.isSymbolicLink()) {
              knownHard[base] = true;
              if (cache)
                cache[base] = base;
              continue;
            }
            var linkTarget = null;
            if (!isWindows$1) {
              var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
              if (seenLinks.hasOwnProperty(id)) {
                linkTarget = seenLinks[id];
              }
            }
            if (linkTarget === null) {
              fs$6.statSync(base);
              linkTarget = fs$6.readlinkSync(base);
            }
            resolvedLink = pathModule.resolve(previous, linkTarget);
            if (cache)
              cache[base] = resolvedLink;
            if (!isWindows$1)
              seenLinks[id] = linkTarget;
          }
          p = pathModule.resolve(resolvedLink, p.slice(pos));
          start();
        }
        if (cache)
          cache[original] = p;
        return p;
      };
      exports$i.realpath = function realpath(p, cache, cb) {
        if (typeof cb !== "function") {
          cb = maybeCallback(cache);
          cache = null;
        }
        p = pathModule.resolve(p);
        if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
          return process$7.nextTick(cb.bind(null, null, cache[p]));
        }
        var original = p, seenLinks = {}, knownHard = {};
        var pos;
        var current;
        var base;
        var previous;
        start();
        function start() {
          var m = splitRootRe.exec(p);
          pos = m[0].length;
          current = m[0];
          base = m[0];
          previous = "";
          if (isWindows$1 && !knownHard[base]) {
            fs$6.lstat(base, function (err) {
              if (err)
                return cb(err);
              knownHard[base] = true;
              LOOP();
            });
          } else {
            process$7.nextTick(LOOP);
          }
        }
        function LOOP() {
          if (pos >= p.length) {
            if (cache)
              cache[original] = p;
            return cb(null, p);
          }
          nextPartRe.lastIndex = pos;
          var result = nextPartRe.exec(p);
          previous = current;
          current += result[0];
          base = previous + result[1];
          pos = nextPartRe.lastIndex;
          if (knownHard[base] || cache && cache[base] === base) {
            return process$7.nextTick(LOOP);
          }
          if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
            return gotResolvedLink(cache[base]);
          }
          return fs$6.lstat(base, gotStat);
        }
        function gotStat(err, stat) {
          if (err)
            return cb(err);
          if (!stat.isSymbolicLink()) {
            knownHard[base] = true;
            if (cache)
              cache[base] = base;
            return process$7.nextTick(LOOP);
          }
          if (!isWindows$1) {
            var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
            if (seenLinks.hasOwnProperty(id)) {
              return gotTarget(null, seenLinks[id], base);
            }
          }
          fs$6.stat(base, function (err) {
            if (err)
              return cb(err);
            fs$6.readlink(base, function (err, target) {
              if (!isWindows$1)
                seenLinks[id] = target;
              gotTarget(err, target);
            });
          });
        }
        function gotTarget(err, target, base) {
          if (err)
            return cb(err);
          var resolvedLink = pathModule.resolve(previous, target);
          if (cache)
            cache[base] = resolvedLink;
          gotResolvedLink(resolvedLink);
        }
        function gotResolvedLink(resolvedLink) {
          p = pathModule.resolve(resolvedLink, p.slice(pos));
          start();
        }
      };
      exports$i.realpathSync; exports$i.realpath;

      var exports$h = {};
      var process$6 = process$g;
      exports$h = realpath;
      realpath.realpath = realpath;
      realpath.sync = realpathSync;
      realpath.realpathSync = realpathSync;
      realpath.monkeypatch = monkeypatch;
      realpath.unmonkeypatch = unmonkeypatch;
      var fs$5 = fs$b;
      var origRealpath = fs$5.realpath;
      var origRealpathSync = fs$5.realpathSync;
      var version$1 = process$6.version;
      var ok = /^v[0-5]\./.test(version$1);
      var old = exports$i;
      function newError(er) {
        return er && er.syscall === "realpath" && (er.code === "ELOOP" || er.code === "ENOMEM" || er.code === "ENAMETOOLONG");
      }
      function realpath(p, cache, cb) {
        if (ok) {
          return origRealpath(p, cache, cb);
        }
        if (typeof cache === "function") {
          cb = cache;
          cache = null;
        }
        origRealpath(p, cache, function (er, result) {
          if (newError(er)) {
            old.realpath(p, cache, cb);
          } else {
            cb(er, result);
          }
        });
      }
      function realpathSync(p, cache) {
        if (ok) {
          return origRealpathSync(p, cache);
        }
        try {
          return origRealpathSync(p, cache);
        } catch (er) {
          if (newError(er)) {
            return old.realpathSync(p, cache);
          } else {
            throw er;
          }
        }
      }
      function monkeypatch() {
        fs$5.realpath = realpath;
        fs$5.realpathSync = realpathSync;
      }
      function unmonkeypatch() {
        fs$5.realpath = origRealpath;
        fs$5.realpathSync = origRealpathSync;
      }
      var exports$1$d = exports$h;

      var _fs2$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$d
      });

      var exports$g = {};
      var process$5 = process$g;
      function posix(path) {
        return path.charAt(0) === "/";
      }
      function win32(path) {
        var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
        var result = splitDeviceRe.exec(path);
        var device = result[1] || "";
        var isUnc = Boolean(device && device.charAt(1) !== ":");
        return Boolean(result[2] || isUnc);
      }
      exports$g = process$5.platform === "win32" ? win32 : posix;
      exports$g.posix = posix;
      exports$g.win32 = win32;
      var exports$1$c = exports$g;
      const _posix = exports$g.posix, _win = exports$g.win32;

      var _pathIsAbsolute2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$c,
        posix: _posix,
        win32: _win
      });

      var _global$4 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$f = {};
      exports$f = wrappy$2;
      function wrappy$2(fn, cb) {
        if (fn && cb)
          return wrappy$2(fn)(cb);
        if (typeof fn !== "function")
          throw new TypeError("need wrapper function");
        Object.keys(fn).forEach(function (k) {
          wrapper[k] = fn[k];
        });
        return wrapper;
        function wrapper() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          var ret = fn.apply(this || _global$4, args);
          var cb = args[args.length - 1];
          if (typeof ret === "function" && ret !== cb) {
            Object.keys(cb).forEach(function (k) {
              ret[k] = cb[k];
            });
          }
          return ret;
        }
      }
      var exports$1$b = exports$f;

      var _global$3 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$e = {};
      var wrappy$1 = exports$1$b;
      exports$e = wrappy$1(once$1);
      exports$e.strict = wrappy$1(onceStrict);
      once$1.proto = once$1(function () {
        Object.defineProperty(Function.prototype, "once", {
          value: function () {
            return once$1(this || _global$3);
          },
          configurable: true
        });
        Object.defineProperty(Function.prototype, "onceStrict", {
          value: function () {
            return onceStrict(this || _global$3);
          },
          configurable: true
        });
      });
      function once$1(fn) {
        var f = function () {
          if (f.called)
            return f.value;
          f.called = true;
          return f.value = fn.apply(this || _global$3, arguments);
        };
        f.called = false;
        return f;
      }
      function onceStrict(fn) {
        var f = function () {
          if (f.called)
            throw new Error(f.onceError);
          f.called = true;
          return f.value = fn.apply(this || _global$3, arguments);
        };
        var name = fn.name || "Function wrapped with `once`";
        f.onceError = name + " shouldn't be called more than once";
        f.called = false;
        return f;
      }
      var exports$1$a = exports$e;
      const strict = exports$e.strict;

      var _once2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$a,
        strict: strict
      });

      var exports$d = {};
      var process$4 = process$g;
      var wrappy = exports$1$b;
      var reqs = Object.create(null);
      var once = exports$1$a;
      exports$d = wrappy(inflight);
      function inflight(key, cb) {
        if (reqs[key]) {
          reqs[key].push(cb);
          return null;
        } else {
          reqs[key] = [cb];
          return makeres(key);
        }
      }
      function makeres(key) {
        return once(function RES() {
          var cbs = reqs[key];
          var len = cbs.length;
          var args = slice(arguments);
          try {
            for (var i = 0; i < len; i++) {
              cbs[i].apply(null, args);
            }
          } finally {
            if (cbs.length > len) {
              cbs.splice(0, len);
              process$4.nextTick(function () {
                RES.apply(null, args);
              });
            } else {
              delete reqs[key];
            }
          }
        });
      }
      function slice(args) {
        var length = args.length;
        var array = [];
        for (var i = 0; i < length; i++)
          array[i] = args[i];
        return array;
      }
      var exports$1$9 = exports$d;

      var _inflight2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$9
      });

      var _fs$2$2 = "default" in _fs2 ? fs$b : _fs2;

      var _path$2$1 = "default" in _path2 ? exports$5S : _path2;

      var _minimatch$2 = "default" in _minimatch2 ? exports$1$F : _minimatch2;

      var _pathIsAbsolute$2 = "default" in _pathIsAbsolute2 ? exports$1$c : _pathIsAbsolute2;

      var exports$2$4 = {},
          _dewExec$2 = false;

      function dew$2() {
        if (_dewExec$2) return exports$2$4;
        _dewExec$2 = true;
        var process = process$g;
        exports$2$4.setopts = setopts;
        exports$2$4.ownProp = ownProp;
        exports$2$4.makeAbs = makeAbs;
        exports$2$4.finish = finish;
        exports$2$4.mark = mark;
        exports$2$4.isIgnored = isIgnored;
        exports$2$4.childrenIgnored = childrenIgnored;

        function ownProp(obj, field) {
          return Object.prototype.hasOwnProperty.call(obj, field);
        }

        var fs = _fs$2$2;
        var path = _path$2$1;
        var minimatch = _minimatch$2;
        var isAbsolute = _pathIsAbsolute$2;
        var Minimatch = minimatch.Minimatch;

        function alphasort(a, b) {
          return a.localeCompare(b, "en");
        }

        function setupIgnores(self, options) {
          self.ignore = options.ignore || [];
          if (!Array.isArray(self.ignore)) self.ignore = [self.ignore];

          if (self.ignore.length) {
            self.ignore = self.ignore.map(ignoreMap);
          }
        }

        function ignoreMap(pattern) {
          var gmatcher = null;

          if (pattern.slice(-3) === "/**") {
            var gpattern = pattern.replace(/(\/\*\*)+$/, "");
            gmatcher = new Minimatch(gpattern, {
              dot: true
            });
          }

          return {
            matcher: new Minimatch(pattern, {
              dot: true
            }),
            gmatcher: gmatcher
          };
        }

        function setopts(self, pattern, options) {
          if (!options) options = {};

          if (options.matchBase && -1 === pattern.indexOf("/")) {
            if (options.noglobstar) {
              throw new Error("base matching requires globstar");
            }

            pattern = "**/" + pattern;
          }

          self.silent = !!options.silent;
          self.pattern = pattern;
          self.strict = options.strict !== false;
          self.realpath = !!options.realpath;
          self.realpathCache = options.realpathCache || Object.create(null);
          self.follow = !!options.follow;
          self.dot = !!options.dot;
          self.mark = !!options.mark;
          self.nodir = !!options.nodir;
          if (self.nodir) self.mark = true;
          self.sync = !!options.sync;
          self.nounique = !!options.nounique;
          self.nonull = !!options.nonull;
          self.nosort = !!options.nosort;
          self.nocase = !!options.nocase;
          self.stat = !!options.stat;
          self.noprocess = !!options.noprocess;
          self.absolute = !!options.absolute;
          self.fs = options.fs || fs;
          self.maxLength = options.maxLength || Infinity;
          self.cache = options.cache || Object.create(null);
          self.statCache = options.statCache || Object.create(null);
          self.symlinks = options.symlinks || Object.create(null);
          setupIgnores(self, options);
          self.changedCwd = false;
          var cwd = process.cwd();
          if (!ownProp(options, "cwd")) self.cwd = cwd;else {
            self.cwd = path.resolve(options.cwd);
            self.changedCwd = self.cwd !== cwd;
          }
          self.root = options.root || path.resolve(self.cwd, "/");
          self.root = path.resolve(self.root);
          if (process.platform === "win32") self.root = self.root.replace(/\\/g, "/");
          self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);
          if (process.platform === "win32") self.cwdAbs = self.cwdAbs.replace(/\\/g, "/");
          self.nomount = !!options.nomount;
          options.nonegate = true;
          options.nocomment = true;
          options.allowWindowsEscape = false;
          self.minimatch = new Minimatch(pattern, options);
          self.options = self.minimatch.options;
        }

        function finish(self) {
          var nou = self.nounique;
          var all = nou ? [] : Object.create(null);

          for (var i = 0, l = self.matches.length; i < l; i++) {
            var matches = self.matches[i];

            if (!matches || Object.keys(matches).length === 0) {
              if (self.nonull) {
                var literal = self.minimatch.globSet[i];
                if (nou) all.push(literal);else all[literal] = true;
              }
            } else {
              var m = Object.keys(matches);
              if (nou) all.push.apply(all, m);else m.forEach(function (m) {
                all[m] = true;
              });
            }
          }

          if (!nou) all = Object.keys(all);
          if (!self.nosort) all = all.sort(alphasort);

          if (self.mark) {
            for (var i = 0; i < all.length; i++) {
              all[i] = self._mark(all[i]);
            }

            if (self.nodir) {
              all = all.filter(function (e) {
                var notDir = !/\/$/.test(e);
                var c = self.cache[e] || self.cache[makeAbs(self, e)];
                if (notDir && c) notDir = c !== "DIR" && !Array.isArray(c);
                return notDir;
              });
            }
          }

          if (self.ignore.length) all = all.filter(function (m) {
            return !isIgnored(self, m);
          });
          self.found = all;
        }

        function mark(self, p) {
          var abs = makeAbs(self, p);
          var c = self.cache[abs];
          var m = p;

          if (c) {
            var isDir = c === "DIR" || Array.isArray(c);
            var slash = p.slice(-1) === "/";
            if (isDir && !slash) m += "/";else if (!isDir && slash) m = m.slice(0, -1);

            if (m !== p) {
              var mabs = makeAbs(self, m);
              self.statCache[mabs] = self.statCache[abs];
              self.cache[mabs] = self.cache[abs];
            }
          }

          return m;
        }

        function makeAbs(self, f) {
          var abs = f;

          if (f.charAt(0) === "/") {
            abs = path.join(self.root, f);
          } else if (isAbsolute(f) || f === "") {
            abs = f;
          } else if (self.changedCwd) {
            abs = path.resolve(self.cwd, f);
          } else {
            abs = path.resolve(f);
          }

          if (process.platform === "win32") abs = abs.replace(/\\/g, "/");
          return abs;
        }

        function isIgnored(self, path) {
          if (!self.ignore.length) return false;
          return self.ignore.some(function (item) {
            return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path));
          });
        }

        function childrenIgnored(self, path) {
          if (!self.ignore.length) return false;
          return self.ignore.some(function (item) {
            return !!(item.gmatcher && item.gmatcher.match(path));
          });
        }

        return exports$2$4;
      }

      var _fs$1$2 = "default" in _fs2$1 ? exports$1$d : _fs2$1;

      var _minimatch$1 = "default" in _minimatch2 ? exports$1$F : _minimatch2;

      var _path$1$2 = "default" in _path2 ? exports$5S : _path2;

      var _assert$1$1 = "default" in _assert2 ? et : _assert2;

      var _pathIsAbsolute$1 = "default" in _pathIsAbsolute2 ? exports$1$c : _pathIsAbsolute2;

      var exports$1$8 = {},
          _dewExec$1 = false;

      var _global$1$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

      function dew$1() {
        if (_dewExec$1) return exports$1$8;
        _dewExec$1 = true;
        var process = process$g;
        exports$1$8 = globSync;
        globSync.GlobSync = GlobSync;
        var rp = _fs$1$2;
        var minimatch = _minimatch$1;
        minimatch.Minimatch;
        dew().Glob;
        var path = _path$1$2;
        var assert = _assert$1$1;
        var isAbsolute = _pathIsAbsolute$1;
        var common = dew$2();
        var setopts = common.setopts;
        var ownProp = common.ownProp;
        var childrenIgnored = common.childrenIgnored;
        var isIgnored = common.isIgnored;

        function globSync(pattern, options) {
          if (typeof options === "function" || arguments.length === 3) throw new TypeError("callback provided to sync glob\n" + "See: https://github.com/isaacs/node-glob/issues/167");
          return new GlobSync(pattern, options).found;
        }

        function GlobSync(pattern, options) {
          if (!pattern) throw new Error("must provide pattern");
          if (typeof options === "function" || arguments.length === 3) throw new TypeError("callback provided to sync glob\n" + "See: https://github.com/isaacs/node-glob/issues/167");
          if (!((this || _global$1$1) instanceof GlobSync)) return new GlobSync(pattern, options);
          setopts(this || _global$1$1, pattern, options);
          if ((this || _global$1$1).noprocess) return this || _global$1$1;
          var n = (this || _global$1$1).minimatch.set.length;
          (this || _global$1$1).matches = new Array(n);

          for (var i = 0; i < n; i++) {
            this._process((this || _global$1$1).minimatch.set[i], i, false);
          }

          this._finish();
        }

        GlobSync.prototype._finish = function () {
          assert.ok((this || _global$1$1) instanceof GlobSync);

          if ((this || _global$1$1).realpath) {
            var self = this || _global$1$1;

            (this || _global$1$1).matches.forEach(function (matchset, index) {
              var set = self.matches[index] = Object.create(null);

              for (var p in matchset) {
                try {
                  p = self._makeAbs(p);
                  var real = rp.realpathSync(p, self.realpathCache);
                  set[real] = true;
                } catch (er) {
                  if (er.syscall === "stat") set[self._makeAbs(p)] = true;else throw er;
                }
              }
            });
          }

          common.finish(this || _global$1$1);
        };

        GlobSync.prototype._process = function (pattern, index, inGlobStar) {
          assert.ok((this || _global$1$1) instanceof GlobSync);
          var n = 0;

          while (typeof pattern[n] === "string") {
            n++;
          }

          var prefix;

          switch (n) {
            case pattern.length:
              this._processSimple(pattern.join("/"), index);

              return;

            case 0:
              prefix = null;
              break;

            default:
              prefix = pattern.slice(0, n).join("/");
              break;
          }

          var remain = pattern.slice(n);
          var read;
          if (prefix === null) read = ".";else if (isAbsolute(prefix) || isAbsolute(pattern.map(function (p) {
            return typeof p === "string" ? p : "[*]";
          }).join("/"))) {
            if (!prefix || !isAbsolute(prefix)) prefix = "/" + prefix;
            read = prefix;
          } else read = prefix;

          var abs = this._makeAbs(read);

          if (childrenIgnored(this || _global$1$1, read)) return;
          var isGlobStar = remain[0] === minimatch.GLOBSTAR;
          if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);else this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
        };

        GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
          var entries = this._readdir(abs, inGlobStar);

          if (!entries) return;
          var pn = remain[0];
          var negate = !!(this || _global$1$1).minimatch.negate;
          var rawGlob = pn._glob;
          var dotOk = (this || _global$1$1).dot || rawGlob.charAt(0) === ".";
          var matchedEntries = [];

          for (var i = 0; i < entries.length; i++) {
            var e = entries[i];

            if (e.charAt(0) !== "." || dotOk) {
              var m;

              if (negate && !prefix) {
                m = !e.match(pn);
              } else {
                m = e.match(pn);
              }

              if (m) matchedEntries.push(e);
            }
          }

          var len = matchedEntries.length;
          if (len === 0) return;

          if (remain.length === 1 && !(this || _global$1$1).mark && !(this || _global$1$1).stat) {
            if (!(this || _global$1$1).matches[index]) (this || _global$1$1).matches[index] = Object.create(null);

            for (var i = 0; i < len; i++) {
              var e = matchedEntries[i];

              if (prefix) {
                if (prefix.slice(-1) !== "/") e = prefix + "/" + e;else e = prefix + e;
              }

              if (e.charAt(0) === "/" && !(this || _global$1$1).nomount) {
                e = path.join((this || _global$1$1).root, e);
              }

              this._emitMatch(index, e);
            }

            return;
          }

          remain.shift();

          for (var i = 0; i < len; i++) {
            var e = matchedEntries[i];
            var newPattern;
            if (prefix) newPattern = [prefix, e];else newPattern = [e];

            this._process(newPattern.concat(remain), index, inGlobStar);
          }
        };

        GlobSync.prototype._emitMatch = function (index, e) {
          if (isIgnored(this || _global$1$1, e)) return;

          var abs = this._makeAbs(e);

          if ((this || _global$1$1).mark) e = this._mark(e);

          if ((this || _global$1$1).absolute) {
            e = abs;
          }

          if ((this || _global$1$1).matches[index][e]) return;

          if ((this || _global$1$1).nodir) {
            var c = (this || _global$1$1).cache[abs];
            if (c === "DIR" || Array.isArray(c)) return;
          }

          (this || _global$1$1).matches[index][e] = true;
          if ((this || _global$1$1).stat) this._stat(e);
        };

        GlobSync.prototype._readdirInGlobStar = function (abs) {
          if ((this || _global$1$1).follow) return this._readdir(abs, false);
          var entries;
          var lstat;

          try {
            lstat = (this || _global$1$1).fs.lstatSync(abs);
          } catch (er) {
            if (er.code === "ENOENT") {
              return null;
            }
          }

          var isSym = lstat && lstat.isSymbolicLink();
          (this || _global$1$1).symlinks[abs] = isSym;
          if (!isSym && lstat && !lstat.isDirectory()) (this || _global$1$1).cache[abs] = "FILE";else entries = this._readdir(abs, false);
          return entries;
        };

        GlobSync.prototype._readdir = function (abs, inGlobStar) {
          if (inGlobStar && !ownProp((this || _global$1$1).symlinks, abs)) return this._readdirInGlobStar(abs);

          if (ownProp((this || _global$1$1).cache, abs)) {
            var c = (this || _global$1$1).cache[abs];
            if (!c || c === "FILE") return null;
            if (Array.isArray(c)) return c;
          }

          try {
            return this._readdirEntries(abs, (this || _global$1$1).fs.readdirSync(abs));
          } catch (er) {
            this._readdirError(abs, er);

            return null;
          }
        };

        GlobSync.prototype._readdirEntries = function (abs, entries) {
          if (!(this || _global$1$1).mark && !(this || _global$1$1).stat) {
            for (var i = 0; i < entries.length; i++) {
              var e = entries[i];
              if (abs === "/") e = abs + e;else e = abs + "/" + e;
              (this || _global$1$1).cache[e] = true;
            }
          }

          (this || _global$1$1).cache[abs] = entries;
          return entries;
        };

        GlobSync.prototype._readdirError = function (f, er) {
          switch (er.code) {
            case "ENOTSUP":
            case "ENOTDIR":
              var abs = this._makeAbs(f);

              (this || _global$1$1).cache[abs] = "FILE";

              if (abs === (this || _global$1$1).cwdAbs) {
                var error = new Error(er.code + " invalid cwd " + (this || _global$1$1).cwd);
                error.path = (this || _global$1$1).cwd;
                error.code = er.code;
                throw error;
              }

              break;

            case "ENOENT":
            case "ELOOP":
            case "ENAMETOOLONG":
            case "UNKNOWN":
              (this || _global$1$1).cache[this._makeAbs(f)] = false;
              break;

            default:
              (this || _global$1$1).cache[this._makeAbs(f)] = false;
              if ((this || _global$1$1).strict) throw er;
              if (!(this || _global$1$1).silent) console.error("glob error", er);
              break;
          }
        };

        GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {
          var entries = this._readdir(abs, inGlobStar);

          if (!entries) return;
          var remainWithoutGlobStar = remain.slice(1);
          var gspref = prefix ? [prefix] : [];
          var noGlobStar = gspref.concat(remainWithoutGlobStar);

          this._process(noGlobStar, index, false);

          var len = entries.length;
          var isSym = (this || _global$1$1).symlinks[abs];
          if (isSym && inGlobStar) return;

          for (var i = 0; i < len; i++) {
            var e = entries[i];
            if (e.charAt(0) === "." && !(this || _global$1$1).dot) continue;
            var instead = gspref.concat(entries[i], remainWithoutGlobStar);

            this._process(instead, index, true);

            var below = gspref.concat(entries[i], remain);

            this._process(below, index, true);
          }
        };

        GlobSync.prototype._processSimple = function (prefix, index) {
          var exists = this._stat(prefix);

          if (!(this || _global$1$1).matches[index]) (this || _global$1$1).matches[index] = Object.create(null);
          if (!exists) return;

          if (prefix && isAbsolute(prefix) && !(this || _global$1$1).nomount) {
            var trail = /[\/\\]$/.test(prefix);

            if (prefix.charAt(0) === "/") {
              prefix = path.join((this || _global$1$1).root, prefix);
            } else {
              prefix = path.resolve((this || _global$1$1).root, prefix);
              if (trail) prefix += "/";
            }
          }

          if (process.platform === "win32") prefix = prefix.replace(/\\/g, "/");

          this._emitMatch(index, prefix);
        };

        GlobSync.prototype._stat = function (f) {
          var abs = this._makeAbs(f);

          var needDir = f.slice(-1) === "/";
          if (f.length > (this || _global$1$1).maxLength) return false;

          if (!(this || _global$1$1).stat && ownProp((this || _global$1$1).cache, abs)) {
            var c = (this || _global$1$1).cache[abs];
            if (Array.isArray(c)) c = "DIR";
            if (!needDir || c === "DIR") return c;
            if (needDir && c === "FILE") return false;
          }
          var stat = (this || _global$1$1).statCache[abs];

          if (!stat) {
            var lstat;

            try {
              lstat = (this || _global$1$1).fs.lstatSync(abs);
            } catch (er) {
              if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
                (this || _global$1$1).statCache[abs] = false;
                return false;
              }
            }

            if (lstat && lstat.isSymbolicLink()) {
              try {
                stat = (this || _global$1$1).fs.statSync(abs);
              } catch (er) {
                stat = lstat;
              }
            } else {
              stat = lstat;
            }
          }

          (this || _global$1$1).statCache[abs] = stat;
          var c = true;
          if (stat) c = stat.isDirectory() ? "DIR" : "FILE";
          (this || _global$1$1).cache[abs] = (this || _global$1$1).cache[abs] || c;
          if (needDir && c === "FILE") return false;
          return c;
        };

        GlobSync.prototype._mark = function (p) {
          return common.mark(this || _global$1$1, p);
        };

        GlobSync.prototype._makeAbs = function (f) {
          return common.makeAbs(this || _global$1$1, f);
        };

        return exports$1$8;
      }

      var _fs$4 = "default" in _fs2$1 ? exports$1$d : _fs2$1;

      var _minimatch = "default" in _minimatch2 ? exports$1$F : _minimatch2;

      var _inherits = "default" in _inherits2 ? exports$1$_ : _inherits2;

      var _events = "default" in _events2 ? y$2 : _events2;

      var _path$5 = "default" in _path2 ? exports$5S : _path2;

      var _assert$2 = "default" in _assert2 ? et : _assert2;

      var _pathIsAbsolute = "default" in _pathIsAbsolute2 ? exports$1$c : _pathIsAbsolute2;

      var _inflight = "default" in _inflight2 ? exports$1$9 : _inflight2;

      var _once = "default" in _once2 ? exports$1$a : _once2;

      var exports$c = {},
          _dewExec = false;

      var _global$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;

      function dew() {
        if (_dewExec) return exports$c;
        _dewExec = true;
        var process = process$g;
        exports$c = glob;
        var rp = _fs$4;
        var minimatch = _minimatch;
        minimatch.Minimatch;
        var inherits = _inherits;
        var EE = _events.EventEmitter;
        var path = _path$5;
        var assert = _assert$2;
        var isAbsolute = _pathIsAbsolute;
        var globSync = dew$1();
        var common = dew$2();
        var setopts = common.setopts;
        var ownProp = common.ownProp;
        var inflight = _inflight;
        var childrenIgnored = common.childrenIgnored;
        var isIgnored = common.isIgnored;
        var once = _once;

        function glob(pattern, options, cb) {
          if (typeof options === "function") cb = options, options = {};
          if (!options) options = {};

          if (options.sync) {
            if (cb) throw new TypeError("callback provided to sync glob");
            return globSync(pattern, options);
          }

          return new Glob(pattern, options, cb);
        }

        glob.sync = globSync;
        var GlobSync = glob.GlobSync = globSync.GlobSync;
        glob.glob = glob;

        function extend(origin, add) {
          if (add === null || _typeof(add) !== "object") {
            return origin;
          }

          var keys = Object.keys(add);
          var i = keys.length;

          while (i--) {
            origin[keys[i]] = add[keys[i]];
          }

          return origin;
        }

        glob.hasMagic = function (pattern, options_) {
          var options = extend({}, options_);
          options.noprocess = true;
          var g = new Glob(pattern, options);
          var set = g.minimatch.set;
          if (!pattern) return false;
          if (set.length > 1) return true;

          for (var j = 0; j < set[0].length; j++) {
            if (typeof set[0][j] !== "string") return true;
          }

          return false;
        };

        glob.Glob = Glob;
        inherits(Glob, EE);

        function Glob(pattern, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }

          if (options && options.sync) {
            if (cb) throw new TypeError("callback provided to sync glob");
            return new GlobSync(pattern, options);
          }

          if (!((this || _global$2) instanceof Glob)) return new Glob(pattern, options, cb);
          setopts(this || _global$2, pattern, options);
          (this || _global$2)._didRealPath = false;
          var n = (this || _global$2).minimatch.set.length;
          (this || _global$2).matches = new Array(n);

          if (typeof cb === "function") {
            cb = once(cb);
            this.on("error", cb);
            this.on("end", function (matches) {
              cb(null, matches);
            });
          }

          var self = this || _global$2;
          (this || _global$2)._processing = 0;
          (this || _global$2)._emitQueue = [];
          (this || _global$2)._processQueue = [];
          (this || _global$2).paused = false;
          if ((this || _global$2).noprocess) return this || _global$2;
          if (n === 0) return done();
          var sync = true;

          for (var i = 0; i < n; i++) {
            this._process((this || _global$2).minimatch.set[i], i, false, done);
          }

          sync = false;

          function done() {
            --self._processing;

            if (self._processing <= 0) {
              if (sync) {
                process.nextTick(function () {
                  self._finish();
                });
              } else {
                self._finish();
              }
            }
          }
        }

        Glob.prototype._finish = function () {
          assert((this || _global$2) instanceof Glob);
          if ((this || _global$2).aborted) return;
          if ((this || _global$2).realpath && !(this || _global$2)._didRealpath) return this._realpath();
          common.finish(this || _global$2);
          this.emit("end", (this || _global$2).found);
        };

        Glob.prototype._realpath = function () {
          if ((this || _global$2)._didRealpath) return;
          (this || _global$2)._didRealpath = true;
          var n = (this || _global$2).matches.length;
          if (n === 0) return this._finish();
          var self = this || _global$2;

          for (var i = 0; i < (this || _global$2).matches.length; i++) {
            this._realpathSet(i, next);
          }

          function next() {
            if (--n === 0) self._finish();
          }
        };

        Glob.prototype._realpathSet = function (index, cb) {
          var matchset = (this || _global$2).matches[index];
          if (!matchset) return cb();
          var found = Object.keys(matchset);
          var self = this || _global$2;
          var n = found.length;
          if (n === 0) return cb();
          var set = (this || _global$2).matches[index] = Object.create(null);
          found.forEach(function (p, i) {
            p = self._makeAbs(p);
            rp.realpath(p, self.realpathCache, function (er, real) {
              if (!er) set[real] = true;else if (er.syscall === "stat") set[p] = true;else self.emit("error", er);

              if (--n === 0) {
                self.matches[index] = set;
                cb();
              }
            });
          });
        };

        Glob.prototype._mark = function (p) {
          return common.mark(this || _global$2, p);
        };

        Glob.prototype._makeAbs = function (f) {
          return common.makeAbs(this || _global$2, f);
        };

        Glob.prototype.abort = function () {
          (this || _global$2).aborted = true;
          this.emit("abort");
        };

        Glob.prototype.pause = function () {
          if (!(this || _global$2).paused) {
            (this || _global$2).paused = true;
            this.emit("pause");
          }
        };

        Glob.prototype.resume = function () {
          if ((this || _global$2).paused) {
            this.emit("resume");
            (this || _global$2).paused = false;

            if ((this || _global$2)._emitQueue.length) {
              var eq = (this || _global$2)._emitQueue.slice(0);

              (this || _global$2)._emitQueue.length = 0;

              for (var i = 0; i < eq.length; i++) {
                var e = eq[i];

                this._emitMatch(e[0], e[1]);
              }
            }

            if ((this || _global$2)._processQueue.length) {
              var pq = (this || _global$2)._processQueue.slice(0);

              (this || _global$2)._processQueue.length = 0;

              for (var i = 0; i < pq.length; i++) {
                var p = pq[i];
                (this || _global$2)._processing--;

                this._process(p[0], p[1], p[2], p[3]);
              }
            }
          }
        };

        Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
          assert((this || _global$2) instanceof Glob);
          assert(typeof cb === "function");
          if ((this || _global$2).aborted) return;
          (this || _global$2)._processing++;

          if ((this || _global$2).paused) {
            (this || _global$2)._processQueue.push([pattern, index, inGlobStar, cb]);

            return;
          }

          var n = 0;

          while (typeof pattern[n] === "string") {
            n++;
          }

          var prefix;

          switch (n) {
            case pattern.length:
              this._processSimple(pattern.join("/"), index, cb);

              return;

            case 0:
              prefix = null;
              break;

            default:
              prefix = pattern.slice(0, n).join("/");
              break;
          }

          var remain = pattern.slice(n);
          var read;
          if (prefix === null) read = ".";else if (isAbsolute(prefix) || isAbsolute(pattern.map(function (p) {
            return typeof p === "string" ? p : "[*]";
          }).join("/"))) {
            if (!prefix || !isAbsolute(prefix)) prefix = "/" + prefix;
            read = prefix;
          } else read = prefix;

          var abs = this._makeAbs(read);

          if (childrenIgnored(this || _global$2, read)) return cb();
          var isGlobStar = remain[0] === minimatch.GLOBSTAR;
          if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);else this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
        };

        Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
          var self = this || _global$2;

          this._readdir(abs, inGlobStar, function (er, entries) {
            return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
          });
        };

        Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
          if (!entries) return cb();
          var pn = remain[0];
          var negate = !!(this || _global$2).minimatch.negate;
          var rawGlob = pn._glob;
          var dotOk = (this || _global$2).dot || rawGlob.charAt(0) === ".";
          var matchedEntries = [];

          for (var i = 0; i < entries.length; i++) {
            var e = entries[i];

            if (e.charAt(0) !== "." || dotOk) {
              var m;

              if (negate && !prefix) {
                m = !e.match(pn);
              } else {
                m = e.match(pn);
              }

              if (m) matchedEntries.push(e);
            }
          }

          var len = matchedEntries.length;
          if (len === 0) return cb();

          if (remain.length === 1 && !(this || _global$2).mark && !(this || _global$2).stat) {
            if (!(this || _global$2).matches[index]) (this || _global$2).matches[index] = Object.create(null);

            for (var i = 0; i < len; i++) {
              var e = matchedEntries[i];

              if (prefix) {
                if (prefix !== "/") e = prefix + "/" + e;else e = prefix + e;
              }

              if (e.charAt(0) === "/" && !(this || _global$2).nomount) {
                e = path.join((this || _global$2).root, e);
              }

              this._emitMatch(index, e);
            }

            return cb();
          }

          remain.shift();

          for (var i = 0; i < len; i++) {
            var e = matchedEntries[i];

            if (prefix) {
              if (prefix !== "/") e = prefix + "/" + e;else e = prefix + e;
            }

            this._process([e].concat(remain), index, inGlobStar, cb);
          }

          cb();
        };

        Glob.prototype._emitMatch = function (index, e) {
          if ((this || _global$2).aborted) return;
          if (isIgnored(this || _global$2, e)) return;

          if ((this || _global$2).paused) {
            (this || _global$2)._emitQueue.push([index, e]);

            return;
          }

          var abs = isAbsolute(e) ? e : this._makeAbs(e);
          if ((this || _global$2).mark) e = this._mark(e);
          if ((this || _global$2).absolute) e = abs;
          if ((this || _global$2).matches[index][e]) return;

          if ((this || _global$2).nodir) {
            var c = (this || _global$2).cache[abs];
            if (c === "DIR" || Array.isArray(c)) return;
          }

          (this || _global$2).matches[index][e] = true;
          var st = (this || _global$2).statCache[abs];
          if (st) this.emit("stat", e, st);
          this.emit("match", e);
        };

        Glob.prototype._readdirInGlobStar = function (abs, cb) {
          if ((this || _global$2).aborted) return;
          if ((this || _global$2).follow) return this._readdir(abs, false, cb);
          var lstatkey = "lstat\0" + abs;
          var self = this || _global$2;
          var lstatcb = inflight(lstatkey, lstatcb_);
          if (lstatcb) self.fs.lstat(abs, lstatcb);

          function lstatcb_(er, lstat) {
            if (er && er.code === "ENOENT") return cb();
            var isSym = lstat && lstat.isSymbolicLink();
            self.symlinks[abs] = isSym;

            if (!isSym && lstat && !lstat.isDirectory()) {
              self.cache[abs] = "FILE";
              cb();
            } else self._readdir(abs, false, cb);
          }
        };

        Glob.prototype._readdir = function (abs, inGlobStar, cb) {
          if ((this || _global$2).aborted) return;
          cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
          if (!cb) return;
          if (inGlobStar && !ownProp((this || _global$2).symlinks, abs)) return this._readdirInGlobStar(abs, cb);

          if (ownProp((this || _global$2).cache, abs)) {
            var c = (this || _global$2).cache[abs];
            if (!c || c === "FILE") return cb();
            if (Array.isArray(c)) return cb(null, c);
          }

          var self = this || _global$2;
          self.fs.readdir(abs, readdirCb(this || _global$2, abs, cb));
        };

        function readdirCb(self, abs, cb) {
          return function (er, entries) {
            if (er) self._readdirError(abs, er, cb);else self._readdirEntries(abs, entries, cb);
          };
        }

        Glob.prototype._readdirEntries = function (abs, entries, cb) {
          if ((this || _global$2).aborted) return;

          if (!(this || _global$2).mark && !(this || _global$2).stat) {
            for (var i = 0; i < entries.length; i++) {
              var e = entries[i];
              if (abs === "/") e = abs + e;else e = abs + "/" + e;
              (this || _global$2).cache[e] = true;
            }
          }

          (this || _global$2).cache[abs] = entries;
          return cb(null, entries);
        };

        Glob.prototype._readdirError = function (f, er, cb) {
          if ((this || _global$2).aborted) return;

          switch (er.code) {
            case "ENOTSUP":
            case "ENOTDIR":
              var abs = this._makeAbs(f);

              (this || _global$2).cache[abs] = "FILE";

              if (abs === (this || _global$2).cwdAbs) {
                var error = new Error(er.code + " invalid cwd " + (this || _global$2).cwd);
                error.path = (this || _global$2).cwd;
                error.code = er.code;
                this.emit("error", error);
                this.abort();
              }

              break;

            case "ENOENT":
            case "ELOOP":
            case "ENAMETOOLONG":
            case "UNKNOWN":
              (this || _global$2).cache[this._makeAbs(f)] = false;
              break;

            default:
              (this || _global$2).cache[this._makeAbs(f)] = false;

              if ((this || _global$2).strict) {
                this.emit("error", er);
                this.abort();
              }

              if (!(this || _global$2).silent) console.error("glob error", er);
              break;
          }

          return cb();
        };

        Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
          var self = this || _global$2;

          this._readdir(abs, inGlobStar, function (er, entries) {
            self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
          });
        };

        Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
          if (!entries) return cb();
          var remainWithoutGlobStar = remain.slice(1);
          var gspref = prefix ? [prefix] : [];
          var noGlobStar = gspref.concat(remainWithoutGlobStar);

          this._process(noGlobStar, index, false, cb);

          var isSym = (this || _global$2).symlinks[abs];
          var len = entries.length;
          if (isSym && inGlobStar) return cb();

          for (var i = 0; i < len; i++) {
            var e = entries[i];
            if (e.charAt(0) === "." && !(this || _global$2).dot) continue;
            var instead = gspref.concat(entries[i], remainWithoutGlobStar);

            this._process(instead, index, true, cb);

            var below = gspref.concat(entries[i], remain);

            this._process(below, index, true, cb);
          }

          cb();
        };

        Glob.prototype._processSimple = function (prefix, index, cb) {
          var self = this || _global$2;

          this._stat(prefix, function (er, exists) {
            self._processSimple2(prefix, index, er, exists, cb);
          });
        };

        Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
          if (!(this || _global$2).matches[index]) (this || _global$2).matches[index] = Object.create(null);
          if (!exists) return cb();

          if (prefix && isAbsolute(prefix) && !(this || _global$2).nomount) {
            var trail = /[\/\\]$/.test(prefix);

            if (prefix.charAt(0) === "/") {
              prefix = path.join((this || _global$2).root, prefix);
            } else {
              prefix = path.resolve((this || _global$2).root, prefix);
              if (trail) prefix += "/";
            }
          }

          if (process.platform === "win32") prefix = prefix.replace(/\\/g, "/");

          this._emitMatch(index, prefix);

          cb();
        };

        Glob.prototype._stat = function (f, cb) {
          var abs = this._makeAbs(f);

          var needDir = f.slice(-1) === "/";
          if (f.length > (this || _global$2).maxLength) return cb();

          if (!(this || _global$2).stat && ownProp((this || _global$2).cache, abs)) {
            var c = (this || _global$2).cache[abs];
            if (Array.isArray(c)) c = "DIR";
            if (!needDir || c === "DIR") return cb(null, c);
            if (needDir && c === "FILE") return cb();
          }
          var stat = (this || _global$2).statCache[abs];

          if (stat !== undefined) {
            if (stat === false) return cb(null, stat);else {
              var type = stat.isDirectory() ? "DIR" : "FILE";
              if (needDir && type === "FILE") return cb();else return cb(null, type, stat);
            }
          }

          var self = this || _global$2;
          var statcb = inflight("stat\0" + abs, lstatcb_);
          if (statcb) self.fs.lstat(abs, statcb);

          function lstatcb_(er, lstat) {
            if (lstat && lstat.isSymbolicLink()) {
              return self.fs.stat(abs, function (er, stat) {
                if (er) self._stat2(f, abs, null, lstat, cb);else self._stat2(f, abs, er, stat, cb);
              });
            } else {
              self._stat2(f, abs, er, lstat, cb);
            }
          }
        };

        Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
          if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
            (this || _global$2).statCache[abs] = false;
            return cb();
          }

          var needDir = f.slice(-1) === "/";
          (this || _global$2).statCache[abs] = stat;
          if (abs.slice(-1) === "/" && stat && !stat.isDirectory()) return cb(null, false, stat);
          var c = true;
          if (stat) c = stat.isDirectory() ? "DIR" : "FILE";
          (this || _global$2).cache[abs] = (this || _global$2).cache[abs] || c;
          if (needDir && c === "FILE") return cb();
          return cb(null, c, stat);
        };

        return exports$c;
      }

      var glob$1 = dew();

      var exports$b = {};
      var process$3 = process$g;
      const assert$2 = et;
      const path$6 = exports$5S;
      const fs$4 = fs$b;
      let glob = undefined;
      try {
        glob = glob$1;
      } catch (_err) {
      }
      const defaultGlobOpts = {
        nosort: true,
        silent: true
      };
      let timeout = 0;
      const isWindows = process$3.platform === "win32";
      const defaults = options => {
        const methods = [
          "unlink",
          "chmod",
          "stat",
          "lstat",
          "rmdir",
          "readdir"
        ];
        methods.forEach(m => {
          options[m] = options[m] || fs$4[m];
          m = m + "Sync";
          options[m] = options[m] || fs$4[m];
        });
        options.maxBusyTries = options.maxBusyTries || 3;
        options.emfileWait = options.emfileWait || 1000;
        if (options.glob === false) {
          options.disableGlob = true;
        }
        if (options.disableGlob !== true && glob === undefined) {
          throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");
        }
        options.disableGlob = options.disableGlob || false;
        options.glob = options.glob || defaultGlobOpts;
      };
      const rimraf$1 = (p, options, cb) => {
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        assert$2(p, "rimraf: missing path");
        assert$2.equal(typeof p, "string", "rimraf: path should be a string");
        assert$2.equal(typeof cb, "function", "rimraf: callback function required");
        assert$2(options, "rimraf: invalid options argument provided");
        assert$2.equal(typeof options, "object", "rimraf: options should be object");
        defaults(options);
        let busyTries = 0;
        let errState = null;
        let n = 0;
        const next = er => {
          errState = errState || er;
          if (--n === 0)
            cb(errState);
        };
        const afterGlob = (er, results) => {
          if (er)
            return cb(er);
          n = results.length;
          if (n === 0)
            return cb();
          results.forEach(p => {
            const CB = er => {
              if (er) {
                if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
                  busyTries++;
                  return setTimeout(() => rimraf_(p, options, CB), busyTries * 100);
                }
                if (er.code === "EMFILE" && timeout < options.emfileWait) {
                  return setTimeout(() => rimraf_(p, options, CB), timeout++);
                }
                if (er.code === "ENOENT")
                  er = null;
              }
              timeout = 0;
              next(er);
            };
            rimraf_(p, options, CB);
          });
        };
        if (options.disableGlob || !glob.hasMagic(p))
          return afterGlob(null, [p]);
        options.lstat(p, (er, stat) => {
          if (!er)
            return afterGlob(null, [p]);
          glob(p, options.glob, afterGlob);
        });
      };
      const rimraf_ = (p, options, cb) => {
        assert$2(p);
        assert$2(options);
        assert$2(typeof cb === "function");
        options.lstat(p, (er, st) => {
          if (er && er.code === "ENOENT")
            return cb(null);
          if (er && er.code === "EPERM" && isWindows)
            fixWinEPERM(p, options, er, cb);
          if (st && st.isDirectory())
            return rmdir(p, options, er, cb);
          options.unlink(p, er => {
            if (er) {
              if (er.code === "ENOENT")
                return cb(null);
              if (er.code === "EPERM")
                return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
              if (er.code === "EISDIR")
                return rmdir(p, options, er, cb);
            }
            return cb(er);
          });
        });
      };
      const fixWinEPERM = (p, options, er, cb) => {
        assert$2(p);
        assert$2(options);
        assert$2(typeof cb === "function");
        options.chmod(p, 438, er2 => {
          if (er2)
            cb(er2.code === "ENOENT" ? null : er);
          else
            options.stat(p, (er3, stats) => {
              if (er3)
                cb(er3.code === "ENOENT" ? null : er);
              else if (stats.isDirectory())
                rmdir(p, options, er, cb);
              else
                options.unlink(p, cb);
            });
        });
      };
      const fixWinEPERMSync = (p, options, er) => {
        assert$2(p);
        assert$2(options);
        try {
          options.chmodSync(p, 438);
        } catch (er2) {
          if (er2.code === "ENOENT")
            return;
          else
            throw er;
        }
        let stats;
        try {
          stats = options.statSync(p);
        } catch (er3) {
          if (er3.code === "ENOENT")
            return;
          else
            throw er;
        }
        if (stats.isDirectory())
          rmdirSync(p, options, er);
        else
          options.unlinkSync(p);
      };
      const rmdir = (p, options, originalEr, cb) => {
        assert$2(p);
        assert$2(options);
        assert$2(typeof cb === "function");
        options.rmdir(p, er => {
          if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
            rmkids(p, options, cb);
          else if (er && er.code === "ENOTDIR")
            cb(originalEr);
          else
            cb(er);
        });
      };
      const rmkids = (p, options, cb) => {
        assert$2(p);
        assert$2(options);
        assert$2(typeof cb === "function");
        options.readdir(p, (er, files) => {
          if (er)
            return cb(er);
          let n = files.length;
          if (n === 0)
            return options.rmdir(p, cb);
          let errState;
          files.forEach(f => {
            rimraf$1(path$6.join(p, f), options, er => {
              if (errState)
                return;
              if (er)
                return cb(errState = er);
              if (--n === 0)
                options.rmdir(p, cb);
            });
          });
        });
      };
      const rimrafSync = (p, options) => {
        options = options || {};
        defaults(options);
        assert$2(p, "rimraf: missing path");
        assert$2.equal(typeof p, "string", "rimraf: path should be a string");
        assert$2(options, "rimraf: missing options");
        assert$2.equal(typeof options, "object", "rimraf: options should be object");
        let results;
        if (options.disableGlob || !glob.hasMagic(p)) {
          results = [p];
        } else {
          try {
            options.lstatSync(p);
            results = [p];
          } catch (er) {
            results = glob.sync(p, options.glob);
          }
        }
        if (!results.length)
          return;
        for (let i = 0; i < results.length; i++) {
          const p = results[i];
          let st;
          try {
            st = options.lstatSync(p);
          } catch (er) {
            if (er.code === "ENOENT")
              return;
            if (er.code === "EPERM" && isWindows)
              fixWinEPERMSync(p, options, er);
          }
          try {
            if (st && st.isDirectory())
              rmdirSync(p, options, null);
            else
              options.unlinkSync(p);
          } catch (er) {
            if (er.code === "ENOENT")
              return;
            if (er.code === "EPERM")
              return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
            if (er.code !== "EISDIR")
              throw er;
            rmdirSync(p, options, er);
          }
        }
      };
      const rmdirSync = (p, options, originalEr) => {
        assert$2(p);
        assert$2(options);
        try {
          options.rmdirSync(p);
        } catch (er) {
          if (er.code === "ENOENT")
            return;
          if (er.code === "ENOTDIR")
            throw originalEr;
          if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
            rmkidsSync(p, options);
        }
      };
      const rmkidsSync = (p, options) => {
        assert$2(p);
        assert$2(options);
        options.readdirSync(p).forEach(f => rimrafSync(path$6.join(p, f), options));
        const retries = isWindows ? 100 : 1;
        let i = 0;
        do {
          let threw = true;
          try {
            const ret = options.rmdirSync(p, options);
            threw = false;
            return ret;
          } finally {
            if (++i < retries && threw)
              continue;
          }
        } while (true);
      };
      exports$b = rimraf$1;
      rimraf$1.sync = rimrafSync;
      var _ = exports$b;

      var _rimraf2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': _
      });

      var _fs$2$1 = _fs2;
      try {
        if ("default" in _fs2)
          _fs$2$1 = fs$b;
      } catch (e) {
      }
      var _path$1$1 = _path2;
      try {
        if ("default" in _path2)
          _path$1$1 = exports$5S;
      } catch (e) {
      }
      var _flatted = _flatted2;
      try {
        if ("default" in _flatted2)
          _flatted = exports$j;
      } catch (e) {
      }
      var exports$3$3 = {};
      var fs$2$1 = _fs$2$1;
      var path$1$1 = _path$1$1;
      var flatted = _flatted;
      exports$3$3 = {
        tryParse: function (filePath, defaultValue) {
          var result;
          try {
            result = this.readJSON(filePath);
          } catch (ex) {
            result = defaultValue;
          }
          return result;
        },
        readJSON: function (filePath) {
          return flatted.parse(fs$2$1.readFileSync(filePath, { encoding: "utf8" }));
        },
        writeJSON: function (filePath, data) {
          fs$2$1.mkdirSync(path$1$1.dirname(filePath), { recursive: true });
          fs$2$1.writeFileSync(filePath, flatted.stringify(data));
        }
      };
      var _utils = exports$3$3;
      var _rimraf = _rimraf2;
      try {
        if ("default" in _rimraf2)
          _rimraf = _;
      } catch (e) {
      }
      var _fs$1$1 = _fs2;
      try {
        if ("default" in _fs2)
          _fs$1$1 = fs$b;
      } catch (e) {
      }
      var exports$2$3 = {};
      var rimraf = _rimraf.sync;
      var fs$1$1 = _fs$1$1;
      exports$2$3 = function del(file) {
        if (fs$1$1.existsSync(file)) {
          rimraf(file, { glob: false });
          return true;
        }
        return false;
      };
      var _del = exports$2$3;
      var _path$4 = _path2;
      try {
        if ("default" in _path2)
          _path$4 = exports$5S;
      } catch (e) {
      }
      var _fs$3 = _fs2;
      try {
        if ("default" in _fs2)
          _fs$3 = fs$b;
      } catch (e) {
      }
      var _keyv = _keyv2;
      try {
        if ("default" in _keyv2)
          _keyv = exports$1$e;
      } catch (e) {
      }
      var _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$a = {};
      var path$5 = _path$4;
      var fs$3 = _fs$3;
      var Keyv = _keyv;
      var utils = _utils;
      var del = _del;
      var writeJSON = utils.writeJSON;
      var cache = {
        load: function (docId, cacheDir) {
          var me = this || _global$1;
          me.keyv = new Keyv();
          me.__visited = {};
          me.__persisted = {};
          me._pathToFile = cacheDir ? path$5.resolve(cacheDir, docId) : path$5.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../.cache/", docId);
          if (fs$3.existsSync(me._pathToFile)) {
            me._persisted = utils.tryParse(me._pathToFile, {});
          }
        },
        get _persisted() {
          return (this || _global$1).__persisted;
        },
        set _persisted(value) {
          (this || _global$1).__persisted = value;
          (this || _global$1).keyv.set("persisted", value);
        },
        get _visited() {
          return (this || _global$1).__visited;
        },
        set _visited(value) {
          (this || _global$1).__visited = value;
          (this || _global$1).keyv.set("visited", value);
        },
        loadFile: function (pathToFile) {
          var me = this || _global$1;
          var dir = path$5.dirname(pathToFile);
          var fName = path$5.basename(pathToFile);
          me.load(fName, dir);
        },
        all: function () {
          return (this || _global$1)._persisted;
        },
        keys: function () {
          return Object.keys((this || _global$1)._persisted);
        },
        setKey: function (key, value) {
          (this || _global$1)._visited[key] = true;
          (this || _global$1)._persisted[key] = value;
        },
        removeKey: function (key) {
          delete (this || _global$1)._visited[key];
          delete (this || _global$1)._persisted[key];
        },
        getKey: function (key) {
          (this || _global$1)._visited[key] = true;
          return (this || _global$1)._persisted[key];
        },
        _prune: function () {
          var me = this || _global$1;
          var obj = {};
          var keys = Object.keys(me._visited);
          if (keys.length === 0) {
            return;
          }
          keys.forEach(function (key) {
            obj[key] = me._persisted[key];
          });
          me._visited = {};
          me._persisted = obj;
        },
        save: function (noPrune) {
          var me = this || _global$1;
          !noPrune && me._prune();
          writeJSON(me._pathToFile, me._persisted);
        },
        removeCacheFile: function () {
          return del((this || _global$1)._pathToFile);
        },
        destroy: function () {
          var me = this || _global$1;
          me._visited = {};
          me._persisted = {};
          me.removeCacheFile();
        }
      };
      exports$a = {
        load: function (docId, cacheDir) {
          return this.create(docId, cacheDir);
        },
        create: function (docId, cacheDir) {
          var obj = Object.create(cache);
          obj.load(docId, cacheDir);
          return obj;
        },
        createFromFile: function (filePath) {
          var obj = Object.create(cache);
          obj.loadFile(filePath);
          return obj;
        },
        clearCacheById: function (docId, cacheDir) {
          var filePath = cacheDir ? path$5.resolve(cacheDir, docId) : path$5.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../.cache/", docId);
          return del(filePath);
        },
        clearAll: function (cacheDir) {
          var filePath = cacheDir ? path$5.resolve(cacheDir) : path$5.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../.cache/");
          return del(filePath);
        }
      };
      var exports$1$7 = exports$a;
      exports$a.load;

      var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
      var exports$9 = {};
      var path$4 = exports$5S;
      var crypto = exports$5U;
      exports$9 = {
        createFromFile: function (filePath, useChecksum) {
          var fname = path$4.basename(filePath);
          var dir = path$4.dirname(filePath);
          return this.create(fname, dir, useChecksum);
        },
        create: function (cacheId, _path, useChecksum) {
          var fs = fs$b;
          var flatCache = exports$1$7;
          var cache = flatCache.load(cacheId, _path);
          var normalizedEntries = {};
          var removeNotFoundFiles = function removeNotFoundFiles() {
            const cachedEntries = cache.keys();
            cachedEntries.forEach(function remover(fPath) {
              try {
                fs.statSync(fPath);
              } catch (err) {
                if (err.code === "ENOENT") {
                  cache.removeKey(fPath);
                }
              }
            });
          };
          removeNotFoundFiles();
          return {
            cache: cache,
            getHash: function (buffer) {
              return crypto.createHash("md5").update(buffer).digest("hex");
            },
            hasFileChanged: function (file) {
              return this.getFileDescriptor(file).changed;
            },
            analyzeFiles: function (files) {
              var me = this || _global;
              files = files || [];
              var res = {
                changedFiles: [],
                notFoundFiles: [],
                notChangedFiles: []
              };
              me.normalizeEntries(files).forEach(function (entry) {
                if (entry.changed) {
                  res.changedFiles.push(entry.key);
                  return;
                }
                if (entry.notFound) {
                  res.notFoundFiles.push(entry.key);
                  return;
                }
                res.notChangedFiles.push(entry.key);
              });
              return res;
            },
            getFileDescriptor: function (file) {
              var fstat;
              try {
                fstat = fs.statSync(file);
              } catch (ex) {
                this.removeEntry(file);
                return {
                  key: file,
                  notFound: true,
                  err: ex
                };
              }
              if (useChecksum) {
                return this._getFileDescriptorUsingChecksum(file);
              }
              return this._getFileDescriptorUsingMtimeAndSize(file, fstat);
            },
            _getFileDescriptorUsingMtimeAndSize: function (file, fstat) {
              var meta = cache.getKey(file);
              var cacheExists = !!meta;
              var cSize = fstat.size;
              var cTime = fstat.mtime.getTime();
              var isDifferentDate;
              var isDifferentSize;
              if (!meta) {
                meta = {
                  size: cSize,
                  mtime: cTime
                };
              } else {
                isDifferentDate = cTime !== meta.mtime;
                isDifferentSize = cSize !== meta.size;
              }
              var nEntry = normalizedEntries[file] = {
                key: file,
                changed: !cacheExists || isDifferentDate || isDifferentSize,
                meta: meta
              };
              return nEntry;
            },
            _getFileDescriptorUsingChecksum: function (file) {
              var meta = cache.getKey(file);
              var cacheExists = !!meta;
              var contentBuffer;
              try {
                contentBuffer = fs.readFileSync(file);
              } catch (ex) {
                contentBuffer = "";
              }
              var isDifferent = true;
              var hash = this.getHash(contentBuffer);
              if (!meta) {
                meta = { hash: hash };
              } else {
                isDifferent = hash !== meta.hash;
              }
              var nEntry = normalizedEntries[file] = {
                key: file,
                changed: !cacheExists || isDifferent,
                meta: meta
              };
              return nEntry;
            },
            getUpdatedFiles: function (files) {
              var me = this || _global;
              files = files || [];
              return me.normalizeEntries(files).filter(function (entry) {
                return entry.changed;
              }).map(function (entry) {
                return entry.key;
              });
            },
            normalizeEntries: function (files) {
              files = files || [];
              var me = this || _global;
              var nEntries = files.map(function (file) {
                return me.getFileDescriptor(file);
              });
              return nEntries;
            },
            removeEntry: function (entryName) {
              delete normalizedEntries[entryName];
              cache.removeKey(entryName);
            },
            deleteCacheFile: function () {
              cache.removeCacheFile();
            },
            destroy: function () {
              normalizedEntries = {};
              cache.destroy();
            },
            _getMetaForFileUsingCheckSum: function (cacheEntry) {
              var contentBuffer = fs.readFileSync(cacheEntry.key);
              var hash = this.getHash(contentBuffer);
              var meta = Object.assign(cacheEntry.meta, { hash: hash });
              delete meta.size;
              delete meta.mtime;
              return meta;
            },
            _getMetaForFileUsingMtimeAndSize: function (cacheEntry) {
              var stat = fs.statSync(cacheEntry.key);
              var meta = Object.assign(cacheEntry.meta, {
                size: stat.size,
                mtime: stat.mtime.getTime()
              });
              delete meta.hash;
              return meta;
            },
            reconcile: function (noPrune) {
              removeNotFoundFiles();
              noPrune = typeof noPrune === "undefined" ? true : noPrune;
              var entries = normalizedEntries;
              var keys = Object.keys(entries);
              if (keys.length === 0) {
                return;
              }
              var me = this || _global;
              keys.forEach(function (entryName) {
                var cacheEntry = entries[entryName];
                try {
                  var meta = useChecksum ? me._getMetaForFileUsingCheckSum(cacheEntry) : me._getMetaForFileUsingMtimeAndSize(cacheEntry);
                  cache.setKey(entryName, meta);
                } catch (err) {
                  if (err.code !== "ENOENT") {
                    throw err;
                  }
                }
              });
              cache.save(noPrune);
            }
          };
        }
      };
      var exports$1$6 = exports$9;
      const createFromFile = exports$9.createFromFile;

      var _fileEntryCache2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$6,
        createFromFile: createFromFile
      });

      var exports$8 = {};
      exports$8 = function (obj, opts) {
        if (!opts)
          opts = {};
        if (typeof opts === "function")
          opts = { cmp: opts };
        var space = opts.space || "";
        if (typeof space === "number")
          space = Array(space + 1).join(" ");
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
        var replacer = opts.replacer || function (key, value) {
          return value;
        };
        var cmp = opts.cmp && function (f) {
          return function (node) {
            return function (a, b) {
              var aobj = {
                key: a,
                value: node[a]
              };
              var bobj = {
                key: b,
                value: node[b]
              };
              return f(aobj, bobj);
            };
          };
        }(opts.cmp);
        var seen = [];
        return function stringify(parent, key, node, level) {
          var indent = space ? "\n" + new Array(level + 1).join(space) : "";
          var colonSeparator = space ? ": " : ":";
          if (node && node.toJSON && typeof node.toJSON === "function") {
            node = node.toJSON();
          }
          node = replacer.call(parent, key, node);
          if (node === undefined) {
            return;
          }
          if (typeof node !== "object" || node === null) {
            return JSON.stringify(node);
          }
          if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
              var item = stringify(node, i, node[i], level + 1) || JSON.stringify(null);
              out.push(indent + space + item);
            }
            return "[" + out.join(",") + indent + "]";
          } else {
            if (seen.indexOf(node) !== -1) {
              if (cycles)
                return JSON.stringify("__cycle__");
              throw new TypeError("Converting circular structure to JSON");
            } else
              seen.push(node);
            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              var value = stringify(node, key, node[key], level + 1);
              if (!value)
                continue;
              var keyValue = JSON.stringify(key) + colonSeparator + value;
              out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return "{" + out.join(",") + indent + "}";
          }
        }({ "": obj }, "", obj, 0);
      };
      var isArray = Array.isArray || function (x) {
        return {}.toString.call(x) === "[object Array]";
      };
      var objectKeys = Object.keys || function (obj) {
        var has = Object.prototype.hasOwnProperty || function () {
          return true;
        };
        var keys = [];
        for (var key in obj) {
          if (has.call(obj, key))
            keys.push(key);
        }
        return keys;
      };
      var exports$1$5 = exports$8;

      var _jsonStableStringifyWithoutJsonify2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        'default': exports$1$5
      });

      var exports$3$2 = {};
      exports$3$2 = {
        configFile: null,
        baseConfig: false,
        rulePaths: [],
        useEslintrc: true,
        envs: [],
        globals: [],
        extensions: null,
        ignore: true,
        ignorePath: void 0,
        cache: false,
        cacheLocation: "",
        cacheFile: ".eslintcache",
        cacheStrategy: "metadata",
        fix: false,
        allowInlineConfig: true,
        reportUnusedDisableDirectives: void 0,
        globInputPaths: true
      };
      var _defaultCliOptions = exports$3$2;
      var _imurmurhash = "default" in _imurmurhash2 ? exports$1$f : _imurmurhash2;
      var exports$2$2 = {};
      const murmur = _imurmurhash;
      function hash$2(str) {
        return murmur(str).result().toString(36);
      }
      exports$2$2 = hash$2;
      var _hash = exports$2$2;
      var _assert$1 = "default" in _assert2 ? et : _assert2;
      var _fs$1 = "default" in _fs2 ? fs$b : _fs2;
      var _fileEntryCache = "default" in _fileEntryCache2 ? exports$1$6 : _fileEntryCache2;
      var _jsonStableStringifyWithoutJsonify = "default" in _jsonStableStringifyWithoutJsonify2 ? exports$1$5 : _jsonStableStringifyWithoutJsonify2;
      var _debug$1 = "default" in _debug2 ? _browser : _debug2;
      var exports$1$4 = {};
      var process$1$1 = process$g;
      const assert$1 = _assert$1;
      const fs$1 = _fs$1;
      const fileEntryCache = _fileEntryCache;
      const stringify = _jsonStableStringifyWithoutJsonify;
      const pkg$1 = _package$5;
      const hash$1 = _hash;
      const debug$1 = _debug$1("eslint:lint-result-cache");
      const configHashCache = new WeakMap();
      const nodeVersion = process$1$1 && process$1$1.version;
      const validCacheStrategies = [
        "metadata",
        "content"
      ];
      const invalidCacheStrategyErrorMessage = `Cache strategy must be one of: ${ validCacheStrategies.map(strategy => `"${ strategy }"`).join(", ") }`;
      function isValidCacheStrategy(cacheStrategy) {
        return validCacheStrategies.indexOf(cacheStrategy) !== -1;
      }
      function hashOfConfigFor(config) {
        if (!configHashCache.has(config)) {
          configHashCache.set(config, hash$1(`${ pkg$1.version }_${ nodeVersion }_${ stringify(config) }`));
        }
        return configHashCache.get(config);
      }
      class LintResultCache$1 {
        constructor(cacheFileLocation, cacheStrategy) {
          assert$1(cacheFileLocation, "Cache file location is required");
          assert$1(cacheStrategy, "Cache strategy is required");
          assert$1(isValidCacheStrategy(cacheStrategy), invalidCacheStrategyErrorMessage);
          debug$1(`Caching results to ${ cacheFileLocation }`);
          const useChecksum = cacheStrategy === "content";
          debug$1(`Using "${ cacheStrategy }" strategy to detect changes`);
          this.fileEntryCache = fileEntryCache.create(cacheFileLocation, void 0, useChecksum);
          this.cacheFileLocation = cacheFileLocation;
        }
        getCachedLintResults(filePath, config) {
          const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);
          const hashOfConfig = hashOfConfigFor(config);
          const changed = fileDescriptor.changed || fileDescriptor.meta.hashOfConfig !== hashOfConfig;
          if (fileDescriptor.notFound) {
            debug$1(`File not found on the file system: ${ filePath }`);
            return null;
          }
          if (changed) {
            debug$1(`Cache entry not found or no longer valid: ${ filePath }`);
            return null;
          }
          if (fileDescriptor.meta.results && fileDescriptor.meta.results.source === null) {
            debug$1(`Rereading cached result source from filesystem: ${ filePath }`);
            fileDescriptor.meta.results.source = fs$1.readFileSync(filePath, "utf-8");
          }
          return fileDescriptor.meta.results;
        }
        setCachedLintResults(filePath, config, result) {
          if (result && Object.prototype.hasOwnProperty.call(result, "output")) {
            return;
          }
          const fileDescriptor = this.fileEntryCache.getFileDescriptor(filePath);
          if (fileDescriptor && !fileDescriptor.notFound) {
            debug$1(`Updating cached result: ${ filePath }`);
            const resultToSerialize = Object.assign({}, result);
            if (Object.prototype.hasOwnProperty.call(resultToSerialize, "source")) {
              resultToSerialize.source = null;
            }
            fileDescriptor.meta.results = resultToSerialize;
            fileDescriptor.meta.hashOfConfig = hashOfConfigFor(config);
          }
        }
        reconcile() {
          debug$1(`Persisting cached results: ${ this.cacheFileLocation }`);
          this.fileEntryCache.reconcile();
        }
      }
      exports$1$4 = LintResultCache$1;
      var _lintResultCache = exports$1$4;
      var _fs$2 = "default" in _fs2 ? fs$b : _fs2;
      var _path$3 = "default" in _path2 ? exports$5S : _path2;
      var _eslintrc$1 = "default" in _eslintrc2 ? exports$1$w : _eslintrc2;
      var _debug = "default" in _debug2 ? _browser : _debug2;
      var exports$7 = {};
      function _nullRequire$1(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }
      var process$2 = process$g;
      const fs$2 = _fs$2;
      const path$3 = _path$3;
      const defaultOptions = _defaultCliOptions;
      const pkg = _package$5;
      const {
        Legacy: {ConfigOps: ConfigOps$1, naming, CascadingConfigArrayFactory, IgnorePattern, getUsedExtractedConfigs, ModuleResolver}
      } = _eslintrc$1;
      const {FileEnumerator} = _fileEnumerator;
      const {Linter: Linter$2} = _linter;
      const builtInRules = _rules$1;
      const loadRules = _loadRules;
      const hash = _hash;
      const LintResultCache = _lintResultCache;
      const debug = _debug("eslint:cli-engine");
      const validFixTypes = new Set([
        "problem",
        "suggestion",
        "layout"
      ]);
      const internalSlotsMap = new WeakMap();
      function validateFixTypes(fixTypes) {
        for (const fixType of fixTypes) {
          if (!validFixTypes.has(fixType)) {
            throw new Error(`Invalid fix type "${ fixType }" found.`);
          }
        }
      }
      function calculateStatsPerFile(messages) {
        return messages.reduce((stat, message) => {
          if (message.fatal || message.severity === 2) {
            stat.errorCount++;
            if (message.fatal) {
              stat.fatalErrorCount++;
            }
            if (message.fix) {
              stat.fixableErrorCount++;
            }
          } else {
            stat.warningCount++;
            if (message.fix) {
              stat.fixableWarningCount++;
            }
          }
          return stat;
        }, {
          errorCount: 0,
          fatalErrorCount: 0,
          warningCount: 0,
          fixableErrorCount: 0,
          fixableWarningCount: 0
        });
      }
      function calculateStatsPerRun(results) {
        return results.reduce((stat, result) => {
          stat.errorCount += result.errorCount;
          stat.fatalErrorCount += result.fatalErrorCount;
          stat.warningCount += result.warningCount;
          stat.fixableErrorCount += result.fixableErrorCount;
          stat.fixableWarningCount += result.fixableWarningCount;
          return stat;
        }, {
          errorCount: 0,
          fatalErrorCount: 0,
          warningCount: 0,
          fixableErrorCount: 0,
          fixableWarningCount: 0
        });
      }
      function verifyText({
        text,
        cwd,
        filePath: providedFilePath,
        config,
        fix,
        allowInlineConfig,
        reportUnusedDisableDirectives,
        fileEnumerator,
        linter
      }) {
        const filePath = providedFilePath || "<text>";
        debug(`Lint ${ filePath }`);
        const filePathToVerify = filePath === "<text>" ? path$3.join(cwd, filePath) : filePath;
        const {fixed, messages, output} = linter.verifyAndFix(text, config, {
          allowInlineConfig,
          filename: filePathToVerify,
          fix,
          reportUnusedDisableDirectives,
          filterCodeBlock(blockFilename) {
            return fileEnumerator.isTargetPath(blockFilename);
          }
        });
        const result = {
          filePath,
          messages,
          ...calculateStatsPerFile(messages)
        };
        if (fixed) {
          result.output = output;
        }
        if (result.errorCount + result.warningCount > 0 && typeof result.output === "undefined") {
          result.source = text;
        }
        return result;
      }
      function createIgnoreResult(filePath, baseDir) {
        let message;
        const isHidden = filePath.split(path$3.sep).find(segment => /^\./u.test(segment));
        const isInNodeModules = baseDir && path$3.relative(baseDir, filePath).startsWith("node_modules");
        if (isHidden) {
          message = "File ignored by default.  Use a negated ignore pattern (like \"--ignore-pattern '!<relative/path/to/filename>'\") to override.";
        } else if (isInNodeModules) {
          message = "File ignored by default. Use \"--ignore-pattern '!node_modules/*'\" to override.";
        } else {
          message = "File ignored because of a matching ignore pattern. Use \"--no-ignore\" to override.";
        }
        return {
          filePath: path$3.resolve(filePath),
          messages: [{
              fatal: false,
              severity: 1,
              message
            }],
          errorCount: 0,
          warningCount: 1,
          fixableErrorCount: 0,
          fixableWarningCount: 0
        };
      }
      function getRule(ruleId, configArrays) {
        for (const configArray of configArrays) {
          const rule = configArray.pluginRules.get(ruleId);
          if (rule) {
            return rule;
          }
        }
        return builtInRules.get(ruleId) || null;
      }
      function* iterateRuleDeprecationWarnings(usedConfigArrays) {
        const processedRuleIds = new Set();
        const configs = [].concat(...usedConfigArrays.map(getUsedExtractedConfigs));
        for (const config of configs) {
          for (const [ruleId, ruleConfig] of Object.entries(config.rules)) {
            if (processedRuleIds.has(ruleId)) {
              continue;
            }
            processedRuleIds.add(ruleId);
            if (!ConfigOps$1.getRuleSeverity(ruleConfig)) {
              continue;
            }
            const rule = getRule(ruleId, usedConfigArrays);
            if (!(rule && rule.meta && rule.meta.deprecated)) {
              continue;
            }
            yield {
              ruleId,
              replacedBy: rule.meta.replacedBy || []
            };
          }
        }
      }
      function isErrorMessage(message) {
        return message.severity === 2;
      }
      function getCacheFile(cacheFile, cwd) {
        const normalizedCacheFile = path$3.normalize(cacheFile);
        const resolvedCacheFile = path$3.resolve(cwd, normalizedCacheFile);
        const looksLikeADirectory = normalizedCacheFile.slice(-1) === path$3.sep;
        function getCacheFileForDirectory() {
          return path$3.join(resolvedCacheFile, `.cache_${ hash(cwd) }`);
        }
        let fileStats;
        try {
          fileStats = fs$2.lstatSync(resolvedCacheFile);
        } catch {
          fileStats = null;
        }
        if (fileStats) {
          if (fileStats.isDirectory() || looksLikeADirectory) {
            return getCacheFileForDirectory();
          }
          return resolvedCacheFile;
        }
        if (looksLikeADirectory) {
          return getCacheFileForDirectory();
        }
        return resolvedCacheFile;
      }
      function toBooleanMap(keys, defaultValue, displayName) {
        if (keys && !Array.isArray(keys)) {
          throw new Error(`${ displayName } must be an array.`);
        }
        if (keys && keys.length > 0) {
          return keys.reduce((map, def) => {
            const [key, value] = def.split(":");
            if (key !== "__proto__") {
              map[key] = value === void 0 ? defaultValue : value === "true";
            }
            return map;
          }, {});
        }
        return void 0;
      }
      function createConfigDataFromOptions(options) {
        const {ignorePattern, parser, parserOptions, plugins, rules} = options;
        const env = toBooleanMap(options.envs, true, "envs");
        const globals = toBooleanMap(options.globals, false, "globals");
        if (env === void 0 && globals === void 0 && (ignorePattern === void 0 || ignorePattern.length === 0) && parser === void 0 && parserOptions === void 0 && plugins === void 0 && rules === void 0) {
          return null;
        }
        return {
          env,
          globals,
          ignorePatterns: ignorePattern,
          parser,
          parserOptions,
          plugins,
          rules
        };
      }
      function directoryExists(resolvedPath) {
        try {
          return fs$2.statSync(resolvedPath).isDirectory();
        } catch (error) {
          if (error && (error.code === "ENOENT" || error.code === "ENOTDIR")) {
            return false;
          }
          throw error;
        }
      }
      class CLIEngine$3 {
        constructor(providedOptions) {
          const options = Object.assign(Object.create(null), defaultOptions, { cwd: process$2.cwd() }, providedOptions);
          if (options.fix === void 0) {
            options.fix = false;
          }
          const additionalPluginPool = new Map();
          const cacheFilePath = getCacheFile(options.cacheLocation || options.cacheFile, options.cwd);
          const configArrayFactory = new CascadingConfigArrayFactory({
            additionalPluginPool,
            baseConfig: options.baseConfig || null,
            cliConfig: createConfigDataFromOptions(options),
            cwd: options.cwd,
            ignorePath: options.ignorePath,
            resolvePluginsRelativeTo: options.resolvePluginsRelativeTo,
            rulePaths: options.rulePaths,
            specificConfigPath: options.configFile,
            useEslintrc: options.useEslintrc,
            builtInRules,
            loadRules,
            eslintRecommendedPath: path$3.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../../conf/eslint-recommended.js"),
            eslintAllPath: path$3.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "../../conf/eslint-all.js")
          });
          const fileEnumerator = new FileEnumerator({
            configArrayFactory,
            cwd: options.cwd,
            extensions: options.extensions,
            globInputPaths: options.globInputPaths,
            errorOnUnmatchedPattern: options.errorOnUnmatchedPattern,
            ignore: options.ignore
          });
          const lintResultCache = options.cache ? new LintResultCache(cacheFilePath, options.cacheStrategy) : null;
          const linter = new Linter$2({ cwd: options.cwd });
          const lastConfigArrays = [configArrayFactory.getConfigArrayForFile()];
          internalSlotsMap.set(this, {
            additionalPluginPool,
            cacheFilePath,
            configArrayFactory,
            defaultIgnores: IgnorePattern.createDefaultIgnore(options.cwd),
            fileEnumerator,
            lastConfigArrays,
            lintResultCache,
            linter,
            options
          });
          if (options.fix && options.fixTypes && options.fixTypes.length > 0) {
            debug(`Using fix types ${ options.fixTypes }`);
            validateFixTypes(options.fixTypes);
            const fixTypes = new Set(options.fixTypes);
            const originalFix = typeof options.fix === "function" ? options.fix : () => true;
            options.fix = message => {
              const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);
              const matches = rule && rule.meta && fixTypes.has(rule.meta.type);
              return matches && originalFix(message);
            };
          }
        }
        getRules() {
          const {lastConfigArrays} = internalSlotsMap.get(this);
          return new Map((function* () {
            yield* builtInRules;
            for (const configArray of lastConfigArrays) {
              yield* configArray.pluginRules;
            }
          }()));
        }
        static getErrorResults(results) {
          const filtered = [];
          results.forEach(result => {
            const filteredMessages = result.messages.filter(isErrorMessage);
            if (filteredMessages.length > 0) {
              filtered.push({
                ...result,
                messages: filteredMessages,
                errorCount: filteredMessages.length,
                warningCount: 0,
                fixableErrorCount: result.fixableErrorCount,
                fixableWarningCount: 0
              });
            }
          });
          return filtered;
        }
        static outputFixes(report) {
          report.results.filter(result => Object.prototype.hasOwnProperty.call(result, "output")).forEach(result => {
            fs$2.writeFileSync(result.filePath, result.output);
          });
        }
        addPlugin(name, pluginObject) {
          const {additionalPluginPool, configArrayFactory, lastConfigArrays} = internalSlotsMap.get(this);
          additionalPluginPool.set(name, pluginObject);
          configArrayFactory.clearCache();
          lastConfigArrays.length = 1;
          lastConfigArrays[0] = configArrayFactory.getConfigArrayForFile();
        }
        resolveFileGlobPatterns(patterns) {
          const {options} = internalSlotsMap.get(this);
          if (options.globInputPaths === false) {
            return patterns.filter(Boolean);
          }
          const extensions = (options.extensions || [".js"]).map(ext => ext.replace(/^\./u, ""));
          const dirSuffix = `/**/*.{${ extensions.join(",") }}`;
          return patterns.filter(Boolean).map(pathname => {
            const resolvedPath = path$3.resolve(options.cwd, pathname);
            const newPath = directoryExists(resolvedPath) ? pathname.replace(/[/\\]$/u, "") + dirSuffix : pathname;
            return path$3.normalize(newPath).replace(/\\/gu, "/");
          });
        }
        executeOnFiles(patterns) {
          const {
            cacheFilePath,
            fileEnumerator,
            lastConfigArrays,
            lintResultCache,
            linter,
            options: {allowInlineConfig, cache, cwd, fix, reportUnusedDisableDirectives}
          } = internalSlotsMap.get(this);
          const results = [];
          const startTime = Date.now();
          lastConfigArrays.length = 0;
          if (!cache) {
            try {
              fs$2.unlinkSync(cacheFilePath);
            } catch (error) {
              const errorCode = error && error.code;
              if (errorCode !== "ENOENT" && !(errorCode === "EROFS" && !fs$2.existsSync(cacheFilePath))) {
                throw error;
              }
            }
          }
          for (const {config, filePath, ignored} of fileEnumerator.iterateFiles(patterns)) {
            if (ignored) {
              results.push(createIgnoreResult(filePath, cwd));
              continue;
            }
            if (!lastConfigArrays.includes(config)) {
              lastConfigArrays.push(config);
            }
            if (lintResultCache) {
              const cachedResult = lintResultCache.getCachedLintResults(filePath, config);
              if (cachedResult) {
                const hadMessages = cachedResult.messages && cachedResult.messages.length > 0;
                if (hadMessages && fix) {
                  debug(`Reprocessing cached file to allow autofix: ${ filePath }`);
                } else {
                  debug(`Skipping file since it hasn't changed: ${ filePath }`);
                  results.push(cachedResult);
                  continue;
                }
              }
            }
            const result = verifyText({
              text: fs$2.readFileSync(filePath, "utf8"),
              filePath,
              config,
              cwd,
              fix,
              allowInlineConfig,
              reportUnusedDisableDirectives,
              fileEnumerator,
              linter
            });
            results.push(result);
            if (lintResultCache) {
              lintResultCache.setCachedLintResults(filePath, config, result);
            }
          }
          if (lintResultCache) {
            lintResultCache.reconcile();
          }
          debug(`Linting complete in: ${ Date.now() - startTime }ms`);
          let usedDeprecatedRules;
          return {
            results,
            ...calculateStatsPerRun(results),
            get usedDeprecatedRules() {
              if (!usedDeprecatedRules) {
                usedDeprecatedRules = Array.from(iterateRuleDeprecationWarnings(lastConfigArrays));
              }
              return usedDeprecatedRules;
            }
          };
        }
        executeOnText(text, filename, warnIgnored) {
          const {
            configArrayFactory,
            fileEnumerator,
            lastConfigArrays,
            linter,
            options: {allowInlineConfig, cwd, fix, reportUnusedDisableDirectives}
          } = internalSlotsMap.get(this);
          const results = [];
          const startTime = Date.now();
          const resolvedFilename = filename && path$3.resolve(cwd, filename);
          lastConfigArrays.length = 0;
          if (resolvedFilename && this.isPathIgnored(resolvedFilename)) {
            if (warnIgnored) {
              results.push(createIgnoreResult(resolvedFilename, cwd));
            }
          } else {
            const config = configArrayFactory.getConfigArrayForFile(resolvedFilename || "__placeholder__.js");
            lastConfigArrays.push(config);
            results.push(verifyText({
              text,
              filePath: resolvedFilename,
              config,
              cwd,
              fix,
              allowInlineConfig,
              reportUnusedDisableDirectives,
              fileEnumerator,
              linter
            }));
          }
          debug(`Linting complete in: ${ Date.now() - startTime }ms`);
          let usedDeprecatedRules;
          return {
            results,
            ...calculateStatsPerRun(results),
            get usedDeprecatedRules() {
              if (!usedDeprecatedRules) {
                usedDeprecatedRules = Array.from(iterateRuleDeprecationWarnings(lastConfigArrays));
              }
              return usedDeprecatedRules;
            }
          };
        }
        getConfigForFile(filePath) {
          const {configArrayFactory, options} = internalSlotsMap.get(this);
          const absolutePath = path$3.resolve(options.cwd, filePath);
          if (directoryExists(absolutePath)) {
            throw Object.assign(new Error("'filePath' should not be a directory path."), { messageTemplate: "print-config-with-directory-path" });
          }
          return configArrayFactory.getConfigArrayForFile(absolutePath).extractConfig(absolutePath).toCompatibleObjectAsConfigFileContent();
        }
        isPathIgnored(filePath) {
          const {
            configArrayFactory,
            defaultIgnores,
            options: {cwd, ignore}
          } = internalSlotsMap.get(this);
          const absolutePath = path$3.resolve(cwd, filePath);
          if (ignore) {
            const config = configArrayFactory.getConfigArrayForFile(absolutePath).extractConfig(absolutePath);
            const ignores = config.ignores || defaultIgnores;
            return ignores(absolutePath);
          }
          return defaultIgnores(absolutePath);
        }
        getFormatter(format) {
          const resolvedFormatName = format || "stylish";
          if (typeof resolvedFormatName === "string") {
            const normalizedFormatName = resolvedFormatName.replace(/\\/gu, "/");
            const slots = internalSlotsMap.get(this);
            const cwd = slots ? slots.options.cwd : process$2.cwd();
            const namespace = naming.getNamespaceFromTerm(normalizedFormatName);
            let formatterPath;
            if (!namespace && normalizedFormatName.indexOf("/") > -1) {
              formatterPath = path$3.resolve(cwd, normalizedFormatName);
            } else {
              try {
                const npmFormat = naming.normalizePackageName(normalizedFormatName, "eslint-formatter");
                formatterPath = ModuleResolver.resolve(npmFormat, path$3.join(cwd, "__placeholder__.js"));
              } catch {
                formatterPath = path$3.resolve(new URL(module.meta.url.slice(0, module.meta.url.lastIndexOf("/"))).pathname, "formatters", normalizedFormatName);
              }
            }
            try {
              return _nullRequire$1(formatterPath);
            } catch (ex) {
              ex.message = `There was a problem loading formatter: ${ formatterPath }\nError: ${ ex.message }`;
              throw ex;
            }
          } else {
            return null;
          }
        }
      }
      CLIEngine$3.version = pkg.version;
      CLIEngine$3.getFormatter = CLIEngine$3.prototype.getFormatter;
      exports$7 = {
        CLIEngine: CLIEngine$3,
        getCLIEngineInternalSlots(instance) {
          return internalSlotsMap.get(instance);
        }
      };
      var _cliEngine2 = exports$7;
      exports$7.getCLIEngineInternalSlots;
      exports$7.CLIEngine;

      var exports$6 = {};
      const {CLIEngine: CLIEngine$2} = _cliEngine2;
      exports$6 = { CLIEngine: CLIEngine$2 };
      var _cliEngine = exports$6;
      exports$6.CLIEngine;

      var _path$2 = "default" in _path2 ? exports$5S : _path2;
      var _fs = "default" in _fs2 ? fs$b : _fs2;
      var _util$2 = "default" in _util2 ? X : _util2;
      var _eslintrc = "default" in _eslintrc2 ? exports$1$w : _eslintrc2;
      var exports$1$3 = {};
      var process$1 = process$g;
      const path$2 = _path$2;
      const fs = _fs;
      const {promisify} = _util$2;
      const {CLIEngine: CLIEngine$1, getCLIEngineInternalSlots} = _cliEngine2;
      const BuiltinRules = _rules$1;
      const {
        Legacy: {
          ConfigOps: {getRuleSeverity}
        }
      } = _eslintrc;
      const {version} = _package$5;
      const writeFile = promisify(fs.writeFile);
      const privateMembersMap = new WeakMap();
      function isNonEmptyString(x) {
        return typeof x === "string" && x.trim() !== "";
      }
      function isArrayOfNonEmptyString(x) {
        return Array.isArray(x) && x.every(isNonEmptyString);
      }
      function isFixType(x) {
        return x === "problem" || x === "suggestion" || x === "layout";
      }
      function isFixTypeArray(x) {
        return Array.isArray(x) && x.every(isFixType);
      }
      class ESLintInvalidOptionsError extends Error {
        constructor(messages) {
          super(`Invalid Options:\n- ${ messages.join("\n- ") }`);
          this.code = "ESLINT_INVALID_OPTIONS";
          Error.captureStackTrace(this, ESLintInvalidOptionsError);
        }
      }
      function processOptions({allowInlineConfig = true, baseConfig = null, cache = false, cacheLocation = ".eslintcache", cacheStrategy = "metadata", cwd = process$1.cwd(), errorOnUnmatchedPattern = true, extensions = null, fix = false, fixTypes = null, globInputPaths = true, ignore = true, ignorePath = null, overrideConfig = null, overrideConfigFile = null, plugins = {}, reportUnusedDisableDirectives = null, resolvePluginsRelativeTo = null, rulePaths = [], useEslintrc = true, ...unknownOptions}) {
        const errors = [];
        const unknownOptionKeys = Object.keys(unknownOptions);
        if (unknownOptionKeys.length >= 1) {
          errors.push(`Unknown options: ${ unknownOptionKeys.join(", ") }`);
          if (unknownOptionKeys.includes("cacheFile")) {
            errors.push("'cacheFile' has been removed. Please use the 'cacheLocation' option instead.");
          }
          if (unknownOptionKeys.includes("configFile")) {
            errors.push("'configFile' has been removed. Please use the 'overrideConfigFile' option instead.");
          }
          if (unknownOptionKeys.includes("envs")) {
            errors.push("'envs' has been removed. Please use the 'overrideConfig.env' option instead.");
          }
          if (unknownOptionKeys.includes("globals")) {
            errors.push("'globals' has been removed. Please use the 'overrideConfig.globals' option instead.");
          }
          if (unknownOptionKeys.includes("ignorePattern")) {
            errors.push("'ignorePattern' has been removed. Please use the 'overrideConfig.ignorePatterns' option instead.");
          }
          if (unknownOptionKeys.includes("parser")) {
            errors.push("'parser' has been removed. Please use the 'overrideConfig.parser' option instead.");
          }
          if (unknownOptionKeys.includes("parserOptions")) {
            errors.push("'parserOptions' has been removed. Please use the 'overrideConfig.parserOptions' option instead.");
          }
          if (unknownOptionKeys.includes("rules")) {
            errors.push("'rules' has been removed. Please use the 'overrideConfig.rules' option instead.");
          }
        }
        if (typeof allowInlineConfig !== "boolean") {
          errors.push("'allowInlineConfig' must be a boolean.");
        }
        if (typeof baseConfig !== "object") {
          errors.push("'baseConfig' must be an object or null.");
        }
        if (typeof cache !== "boolean") {
          errors.push("'cache' must be a boolean.");
        }
        if (!isNonEmptyString(cacheLocation)) {
          errors.push("'cacheLocation' must be a non-empty string.");
        }
        if (cacheStrategy !== "metadata" && cacheStrategy !== "content") {
          errors.push("'cacheStrategy' must be any of \"metadata\", \"content\".");
        }
        if (!isNonEmptyString(cwd) || !path$2.isAbsolute(cwd)) {
          errors.push("'cwd' must be an absolute path.");
        }
        if (typeof errorOnUnmatchedPattern !== "boolean") {
          errors.push("'errorOnUnmatchedPattern' must be a boolean.");
        }
        if (!isArrayOfNonEmptyString(extensions) && extensions !== null) {
          errors.push("'extensions' must be an array of non-empty strings or null.");
        }
        if (typeof fix !== "boolean" && typeof fix !== "function") {
          errors.push("'fix' must be a boolean or a function.");
        }
        if (fixTypes !== null && !isFixTypeArray(fixTypes)) {
          errors.push("'fixTypes' must be an array of any of \"problem\", \"suggestion\", and \"layout\".");
        }
        if (typeof globInputPaths !== "boolean") {
          errors.push("'globInputPaths' must be a boolean.");
        }
        if (typeof ignore !== "boolean") {
          errors.push("'ignore' must be a boolean.");
        }
        if (!isNonEmptyString(ignorePath) && ignorePath !== null) {
          errors.push("'ignorePath' must be a non-empty string or null.");
        }
        if (typeof overrideConfig !== "object") {
          errors.push("'overrideConfig' must be an object or null.");
        }
        if (!isNonEmptyString(overrideConfigFile) && overrideConfigFile !== null) {
          errors.push("'overrideConfigFile' must be a non-empty string or null.");
        }
        if (typeof plugins !== "object") {
          errors.push("'plugins' must be an object or null.");
        } else if (plugins !== null && Object.keys(plugins).includes("")) {
          errors.push("'plugins' must not include an empty string.");
        }
        if (Array.isArray(plugins)) {
          errors.push("'plugins' doesn't add plugins to configuration to load. Please use the 'overrideConfig.plugins' option instead.");
        }
        if (reportUnusedDisableDirectives !== "error" && reportUnusedDisableDirectives !== "warn" && reportUnusedDisableDirectives !== "off" && reportUnusedDisableDirectives !== null) {
          errors.push("'reportUnusedDisableDirectives' must be any of \"error\", \"warn\", \"off\", and null.");
        }
        if (!isNonEmptyString(resolvePluginsRelativeTo) && resolvePluginsRelativeTo !== null) {
          errors.push("'resolvePluginsRelativeTo' must be a non-empty string or null.");
        }
        if (!isArrayOfNonEmptyString(rulePaths)) {
          errors.push("'rulePaths' must be an array of non-empty strings.");
        }
        if (typeof useEslintrc !== "boolean") {
          errors.push("'useEslintrc' must be a boolean.");
        }
        if (errors.length > 0) {
          throw new ESLintInvalidOptionsError(errors);
        }
        return {
          allowInlineConfig,
          baseConfig,
          cache,
          cacheLocation,
          cacheStrategy,
          configFile: overrideConfigFile,
          cwd,
          errorOnUnmatchedPattern,
          extensions,
          fix,
          fixTypes,
          globInputPaths,
          ignore,
          ignorePath,
          reportUnusedDisableDirectives,
          resolvePluginsRelativeTo,
          rulePaths,
          useEslintrc
        };
      }
      function hasDefinedProperty(obj) {
        if (typeof obj === "object" && obj !== null) {
          for (const key in obj) {
            if (typeof obj[key] !== "undefined") {
              return true;
            }
          }
        }
        return false;
      }
      function createRulesMeta(rules) {
        return Array.from(rules).reduce((retVal, [id, rule]) => {
          retVal[id] = rule.meta;
          return retVal;
        }, {});
      }
      const usedDeprecatedRulesCache = new WeakMap();
      function getOrFindUsedDeprecatedRules(cliEngine, maybeFilePath) {
        const {
          configArrayFactory,
          options: {cwd}
        } = getCLIEngineInternalSlots(cliEngine);
        const filePath = path$2.isAbsolute(maybeFilePath) ? maybeFilePath : path$2.join(cwd, "__placeholder__.js");
        const configArray = configArrayFactory.getConfigArrayForFile(filePath);
        const config = configArray.extractConfig(filePath);
        if (!usedDeprecatedRulesCache.has(config)) {
          const pluginRules = configArray.pluginRules;
          const retv = [];
          for (const [ruleId, ruleConf] of Object.entries(config.rules)) {
            if (getRuleSeverity(ruleConf) === 0) {
              continue;
            }
            const rule = pluginRules.get(ruleId) || BuiltinRules.get(ruleId);
            const meta = rule && rule.meta;
            if (meta && meta.deprecated) {
              retv.push({
                ruleId,
                replacedBy: meta.replacedBy || []
              });
            }
          }
          usedDeprecatedRulesCache.set(config, Object.freeze(retv));
        }
        return usedDeprecatedRulesCache.get(config);
      }
      function processCLIEngineLintReport(cliEngine, {results}) {
        const descriptor = {
          configurable: true,
          enumerable: true,
          get() {
            return getOrFindUsedDeprecatedRules(cliEngine, this.filePath);
          }
        };
        for (const result of results) {
          Object.defineProperty(result, "usedDeprecatedRules", descriptor);
        }
        return results;
      }
      function compareResultsByFilePath(a, b) {
        if (a.filePath < b.filePath) {
          return -1;
        }
        if (a.filePath > b.filePath) {
          return 1;
        }
        return 0;
      }
      class ESLint$1 {
        constructor(options = {}) {
          const processedOptions = processOptions(options);
          const cliEngine = new CLIEngine$1(processedOptions);
          const {additionalPluginPool, configArrayFactory, lastConfigArrays} = getCLIEngineInternalSlots(cliEngine);
          let updated = false;
          if (options.plugins) {
            for (const [id, plugin] of Object.entries(options.plugins)) {
              additionalPluginPool.set(id, plugin);
              updated = true;
            }
          }
          if (hasDefinedProperty(options.overrideConfig)) {
            configArrayFactory.setOverrideConfig(options.overrideConfig);
            updated = true;
          }
          if (updated) {
            configArrayFactory.clearCache();
            lastConfigArrays[0] = configArrayFactory.getConfigArrayForFile();
          }
          privateMembersMap.set(this, {
            cliEngine,
            options: processedOptions
          });
        }
        static get version() {
          return version;
        }
        static async outputFixes(results) {
          if (!Array.isArray(results)) {
            throw new Error("'results' must be an array");
          }
          await Promise.all(results.filter(result => {
            if (typeof result !== "object" || result === null) {
              throw new Error("'results' must include only objects");
            }
            return typeof result.output === "string" && path$2.isAbsolute(result.filePath);
          }).map(r => writeFile(r.filePath, r.output)));
        }
        static getErrorResults(results) {
          return CLIEngine$1.getErrorResults(results);
        }
        getRulesMetaForResults(results) {
          const resultRuleIds = new Set();
          for (const result of results) {
            for (const {ruleId} of result.messages) {
              resultRuleIds.add(ruleId);
            }
          }
          const {cliEngine} = privateMembersMap.get(this);
          const rules = cliEngine.getRules();
          const resultRules = new Map();
          for (const [ruleId, rule] of rules) {
            if (resultRuleIds.has(ruleId)) {
              resultRules.set(ruleId, rule);
            }
          }
          return createRulesMeta(resultRules);
        }
        async lintFiles(patterns) {
          if (!isNonEmptyString(patterns) && !isArrayOfNonEmptyString(patterns)) {
            throw new Error("'patterns' must be a non-empty string or an array of non-empty strings");
          }
          const {cliEngine} = privateMembersMap.get(this);
          return processCLIEngineLintReport(cliEngine, cliEngine.executeOnFiles(patterns));
        }
        async lintText(code, options = {}) {
          if (typeof code !== "string") {
            throw new Error("'code' must be a string");
          }
          if (typeof options !== "object") {
            throw new Error("'options' must be an object, null, or undefined");
          }
          const {filePath, warnIgnored = false, ...unknownOptions} = options || {};
          const unknownOptionKeys = Object.keys(unknownOptions);
          if (unknownOptionKeys.length > 0) {
            throw new Error(`'options' must not include the unknown option(s): ${ unknownOptionKeys.join(", ") }`);
          }
          if (filePath !== void 0 && !isNonEmptyString(filePath)) {
            throw new Error("'options.filePath' must be a non-empty string or undefined");
          }
          if (typeof warnIgnored !== "boolean") {
            throw new Error("'options.warnIgnored' must be a boolean or undefined");
          }
          const {cliEngine} = privateMembersMap.get(this);
          return processCLIEngineLintReport(cliEngine, cliEngine.executeOnText(code, filePath, warnIgnored));
        }
        async loadFormatter(name = "stylish") {
          if (typeof name !== "string") {
            throw new Error("'name' must be a string");
          }
          const {cliEngine} = privateMembersMap.get(this);
          const formatter = cliEngine.getFormatter(name);
          if (typeof formatter !== "function") {
            throw new Error(`Formatter must be a function, but got a ${ typeof formatter }.`);
          }
          return {
            format(results) {
              let rulesMeta = null;
              results.sort(compareResultsByFilePath);
              return formatter(results, {
                get rulesMeta() {
                  if (!rulesMeta) {
                    rulesMeta = createRulesMeta(cliEngine.getRules());
                  }
                  return rulesMeta;
                }
              });
            }
          };
        }
        async calculateConfigForFile(filePath) {
          if (!isNonEmptyString(filePath)) {
            throw new Error("'filePath' must be a non-empty string");
          }
          const {cliEngine} = privateMembersMap.get(this);
          return cliEngine.getConfigForFile(filePath);
        }
        async isPathIgnored(filePath) {
          if (!isNonEmptyString(filePath)) {
            throw new Error("'filePath' must be a non-empty string");
          }
          const {cliEngine} = privateMembersMap.get(this);
          return cliEngine.isPathIgnored(filePath);
        }
      }
      exports$1$3 = {
        ESLint: ESLint$1,
        getESLintPrivateMembers(instance) {
          return privateMembersMap.get(instance);
        }
      };
      var _eslint$1 = exports$1$3;
      var exports$5 = {};
      const {ESLint: ESLint$2} = _eslint$1;
      exports$5 = { ESLint: ESLint$2 };
      var _eslint = exports$5;
      exports$5.ESLint;

      var exports$3$1 = {};
      var baseConfigProperties = {
        $schema: {
          type: "string"
        },
        env: {
          type: "object"
        },
        "extends": {
          $ref: "#/definitions/stringOrStrings"
        },
        globals: {
          type: "object"
        },
        overrides: {
          type: "array",
          items: {
            $ref: "#/definitions/overrideConfig"
          },
          additionalItems: false
        },
        parser: {
          type: ["string", "null"]
        },
        parserOptions: {
          type: "object"
        },
        plugins: {
          type: "array"
        },
        processor: {
          type: "string"
        },
        rules: {
          type: "object"
        },
        settings: {
          type: "object"
        },
        noInlineConfig: {
          type: "boolean"
        },
        reportUnusedDisableDirectives: {
          type: "boolean"
        },
        ecmaFeatures: {
          type: "object"
        }
      };
      var configSchema$1 = {
        definitions: {
          stringOrStrings: {
            oneOf: [{
              type: "string"
            }, {
              type: "array",
              items: {
                type: "string"
              },
              additionalItems: false
            }]
          },
          stringOrStringsRequired: {
            oneOf: [{
              type: "string"
            }, {
              type: "array",
              items: {
                type: "string"
              },
              additionalItems: false,
              minItems: 1
            }]
          },
          objectConfig: {
            type: "object",
            properties: _objectSpread2({
              root: {
                type: "boolean"
              },
              ignorePatterns: {
                $ref: "#/definitions/stringOrStrings"
              }
            }, baseConfigProperties),
            additionalProperties: false
          },
          overrideConfig: {
            type: "object",
            properties: _objectSpread2({
              excludedFiles: {
                $ref: "#/definitions/stringOrStrings"
              },
              files: {
                $ref: "#/definitions/stringOrStringsRequired"
              }
            }, baseConfigProperties),
            required: ["files"],
            additionalProperties: false
          }
        },
        $ref: "#/definitions/objectConfig"
      };
      exports$3$1 = configSchema$1;
      var _configSchema = exports$3$1;

      var _path$1 = "default" in _path2 ? exports$5S : _path2;

      var exports$2$1 = {};
      var process = process$g;
      var path$1 = _path$1;
      var deprecationWarningMessages = {
        ESLINT_LEGACY_ECMAFEATURES: "The 'ecmaFeatures' config file property is deprecated and has no effect.",
        ESLINT_PERSONAL_CONFIG_LOAD: "'~/.eslintrc.*' config files have been deprecated. " + "Please use a config file per project or the '--config' option.",
        ESLINT_PERSONAL_CONFIG_SUPPRESS: "'~/.eslintrc.*' config files have been deprecated. " + "Please remove it or add 'root:true' to the config files in your " + "projects in order to avoid loading '~/.eslintrc.*' accidentally."
      };
      var sourceFileErrorCache = new Set();

      function emitDeprecationWarning$1(source, errorCode) {
        var cacheKey = JSON.stringify({
          source: source,
          errorCode: errorCode
        });

        if (sourceFileErrorCache.has(cacheKey)) {
          return;
        }

        sourceFileErrorCache.add(cacheKey);
        var rel = path$1.relative(process.cwd(), source);
        var message = deprecationWarningMessages[errorCode];
        process.emitWarning("".concat(message, " (found in \"").concat(rel, "\")"), "DeprecationWarning", errorCode);
      }

      exports$2$1 = {
        emitDeprecationWarning: emitDeprecationWarning$1
      };
      var _deprecationWarnings = exports$2$1;

      var _ajv = "default" in _ajv2 ? exports$B$1 : _ajv2;

      var _jsonSchemaDraft = "default" in _jsonSchemaDraft2 ? jsonSchemaDraft04 : _jsonSchemaDraft2;

      var exports$1$2 = {};
      var Ajv = _ajv,
          metaSchema = _jsonSchemaDraft;

      exports$1$2 = function exports$1() {
        var additionalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var ajv = new Ajv(_objectSpread2({
          meta: false,
          useDefaults: true,
          validateSchema: false,
          missingRefs: "ignore",
          verbose: true,
          schemaId: "auto"
        }, additionalOptions));
        ajv.addMetaSchema(metaSchema);
        ajv._opts.defaultMeta = metaSchema.id;
        return ajv;
      };

      var _ajv$1 = exports$1$2;

      var _util$1 = "default" in _util2 ? X : _util2;

      var _environments = "default" in _environments2 ? _environments$2 : _environments2;

      var _configOps = "default" in _configOps2 ? _configOps$3 : _configOps2;

      var exports$4 = {};
      var util$1 = _util$1,
          configSchema = _configSchema,
          BuiltInEnvironments = _environments,
          BuiltInRules = _rules$1,
          ConfigOps = _configOps,
          emitDeprecationWarning = _deprecationWarnings.emitDeprecationWarning;

      var ajv$1 = _ajv$1();

      var ruleValidators = new WeakMap();
      var noop = Function.prototype;
      var validateSchema;
      var severityMap = {
        error: 2,
        warn: 1,
        off: 0
      };

      function getRuleOptionsSchema$1(rule) {
        if (!rule) {
          return null;
        }

        var schema = rule.schema || rule.meta && rule.meta.schema;

        if (Array.isArray(schema)) {
          if (schema.length) {
            return {
              type: "array",
              items: schema,
              minItems: 0,
              maxItems: schema.length
            };
          }

          return {
            type: "array",
            minItems: 0,
            maxItems: 0
          };
        }

        return schema || null;
      }

      function validateRuleSeverity(options) {
        var severity = Array.isArray(options) ? options[0] : options;
        var normSeverity = typeof severity === "string" ? severityMap[severity.toLowerCase()] : severity;

        if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {
          return normSeverity;
        }

        throw new Error("\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '".concat(util$1.inspect(severity).replace(/'/g, "\"").replace(/\n/g, ""), "').\n"));
      }

      function validateRuleSchema(rule, localOptions) {
        if (!ruleValidators.has(rule)) {
          var schema = getRuleOptionsSchema$1(rule);

          if (schema) {
            ruleValidators.set(rule, ajv$1.compile(schema));
          }
        }

        var validateRule = ruleValidators.get(rule);

        if (validateRule) {
          validateRule(localOptions);

          if (validateRule.errors) {
            throw new Error(validateRule.errors.map(function (error) {
              return "\tValue ".concat(JSON.stringify(error.data), " ").concat(error.message, ".\n");
            }).join(""));
          }
        }
      }

      function validateRuleOptions(rule, ruleId, options) {
        var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        try {
          var severity = validateRuleSeverity(options);

          if (severity !== 0) {
            validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);
          }
        } catch (err) {
          var enhancedMessage = "Configuration for rule \"".concat(ruleId, "\" is invalid:\n").concat(err.message);

          if (typeof source === "string") {
            throw new Error("".concat(source, ":\n\t").concat(enhancedMessage));
          } else {
            throw new Error(enhancedMessage);
          }
        }
      }

      function validateEnvironment(environment, source) {
        var getAdditionalEnv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

        if (!environment) {
          return;
        }

        Object.keys(environment).forEach(function (id) {
          var env = getAdditionalEnv(id) || BuiltInEnvironments.get(id) || null;

          if (!env) {
            var message = "".concat(source, ":\n\tEnvironment key \"").concat(id, "\" is unknown\n");
            throw new Error(message);
          }
        });
      }

      function validateRules(rulesConfig, source) {
        var getAdditionalRule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;

        if (!rulesConfig) {
          return;
        }

        Object.keys(rulesConfig).forEach(function (id) {
          var rule = getAdditionalRule(id) || BuiltInRules.get(id) || null;
          validateRuleOptions(rule, id, rulesConfig[id], source);
        });
      }

      function validateGlobals(globalsConfig) {
        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (!globalsConfig) {
          return;
        }

        Object.entries(globalsConfig).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              configuredGlobal = _ref2[0],
              configuredValue = _ref2[1];

          try {
            ConfigOps.normalizeConfigGlobal(configuredValue);
          } catch (err) {
            throw new Error("ESLint configuration of global '".concat(configuredGlobal, "' in ").concat(source, " is invalid:\n").concat(err.message));
          }
        });
      }

      function validateProcessor(processorName, source, getProcessor) {
        if (processorName && !getProcessor(processorName)) {
          throw new Error("ESLint configuration of processor in '".concat(source, "' is invalid: '").concat(processorName, "' was not found."));
        }
      }

      function formatErrors(errors) {
        return errors.map(function (error) {
          if (error.keyword === "additionalProperties") {
            var formattedPropertyPath = error.dataPath.length ? "".concat(error.dataPath.slice(1), ".").concat(error.params.additionalProperty) : error.params.additionalProperty;
            return "Unexpected top-level property \"".concat(formattedPropertyPath, "\"");
          }

          if (error.keyword === "type") {
            var formattedField = error.dataPath.slice(1);
            var formattedExpectedType = Array.isArray(error.schema) ? error.schema.join("/") : error.schema;
            var formattedValue = JSON.stringify(error.data);
            return "Property \"".concat(formattedField, "\" is the wrong type (expected ").concat(formattedExpectedType, " but got `").concat(formattedValue, "`)");
          }

          var field = error.dataPath[0] === "." ? error.dataPath.slice(1) : error.dataPath;
          return "\"".concat(field, "\" ").concat(error.message, ". Value: ").concat(JSON.stringify(error.data));
        }).map(function (message) {
          return "\t- ".concat(message, ".\n");
        }).join("");
      }

      function validateConfigSchema(config) {
        var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        validateSchema = validateSchema || ajv$1.compile(configSchema);

        if (!validateSchema(config)) {
          throw new Error("ESLint configuration in ".concat(source, " is invalid:\n").concat(formatErrors(validateSchema.errors)));
        }

        if (Object.hasOwnProperty.call(config, "ecmaFeatures")) {
          emitDeprecationWarning(source, "ESLINT_LEGACY_ECMAFEATURES");
        }
      }

      function validate$1(config, source, getAdditionalRule, getAdditionalEnv) {
        validateConfigSchema(config, source);
        validateRules(config.rules, source, getAdditionalRule);
        validateEnvironment(config.env, source, getAdditionalEnv);
        validateGlobals(config.globals, source);

        var _iterator = _createForOfIteratorHelper(config.overrides || []),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var override = _step.value;
            validateRules(override.rules, source, getAdditionalRule);
            validateEnvironment(override.env, source, getAdditionalEnv);
            validateGlobals(config.globals, source);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var validated = new WeakSet();

      function validateConfigArray(configArray) {
        var getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);
        var getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);
        var getPluginRule = Map.prototype.get.bind(configArray.pluginRules);

        var _iterator2 = _createForOfIteratorHelper(configArray),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var element = _step2.value;

            if (validated.has(element)) {
              continue;
            }

            validated.add(element);
            validateEnvironment(element.env, element.name, getPluginEnv);
            validateGlobals(element.globals, element.name);
            validateProcessor(element.processor, element.name, getPluginProcessor);
            validateRules(element.rules, element.name, getPluginRule);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      exports$4 = {
        getRuleOptionsSchema: getRuleOptionsSchema$1,
        validate: validate$1,
        validateConfigArray: validateConfigArray,
        validateConfigSchema: validateConfigSchema,
        validateRuleOptions: validateRuleOptions
      };
      var _configValidator = exports$4;
      exports$4.getRuleOptionsSchema;
          exports$4.validate;
          exports$4.validateConfigArray;
          exports$4.validateConfigSchema;
          exports$4.validateRuleOptions;

      var _assert = "default" in _assert2 ? et : _assert2;
      var _path = "default" in _path2 ? exports$5S : _path2;
      var _util = "default" in _util2 ? X : _util2;
      var _lodash = "default" in _lodash2 ? index$1 : _lodash2;
      var _fastDeepEqual = "default" in _fastDeepEqual2 ? exports$1$X : _fastDeepEqual2;
      var exports$3 = {};
      function _nullRequire(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      }
      _nullRequire.resolve = _nullRequire;
      const assert = _assert, path = _path, util = _util, merge = _lodash, equal = _fastDeepEqual, Traverser = _traverser, {getRuleOptionsSchema, validate} = _configValidator, {Linter: Linter$1, SourceCodeFixer, interpolate} = _linter;
      const ajv = _ajv$1({ strictDefaults: true });
      const espreePath = "espree";
      const parserSymbol = Symbol.for("eslint.RuleTester.parser");
      const testerDefaultConfig = { rules: {} };
      let defaultConfig = { rules: {} };
      const RuleTesterParameters = [
        "code",
        "filename",
        "options",
        "errors",
        "output",
        "only"
      ];
      const errorObjectParameters = new Set([
        "message",
        "messageId",
        "data",
        "type",
        "line",
        "column",
        "endLine",
        "endColumn",
        "suggestions"
      ]);
      const friendlyErrorObjectParameterList = `[${ [...errorObjectParameters].map(key => `'${ key }'`).join(", ") }]`;
      const suggestionObjectParameters = new Set([
        "desc",
        "messageId",
        "data",
        "output"
      ]);
      const friendlySuggestionObjectParameterList = `[${ [...suggestionObjectParameters].map(key => `'${ key }'`).join(", ") }]`;
      const hasOwnProperty = Function.call.bind(Object.hasOwnProperty);
      function cloneDeeplyExcludesParent(x) {
        if (typeof x === "object" && x !== null) {
          if (Array.isArray(x)) {
            return x.map(cloneDeeplyExcludesParent);
          }
          const retv = {};
          for (const key in x) {
            if (key !== "parent" && hasOwnProperty(x, key)) {
              retv[key] = cloneDeeplyExcludesParent(x[key]);
            }
          }
          return retv;
        }
        return x;
      }
      function freezeDeeply(x) {
        if (typeof x === "object" && x !== null) {
          if (Array.isArray(x)) {
            x.forEach(freezeDeeply);
          } else {
            for (const key in x) {
              if (key !== "parent" && hasOwnProperty(x, key)) {
                freezeDeeply(x[key]);
              }
            }
          }
          Object.freeze(x);
        }
      }
      function sanitize(text) {
        return text.replace(/[\u0000-\u0009\u000b-\u001a]/gu, c => `\\u${ c.codePointAt(0).toString(16).padStart(4, "0") }`);
      }
      function defineStartEndAsError(objName, node) {
        Object.defineProperties(node, {
          start: {
            get() {
              throw new Error(`Use ${ objName }.range[0] instead of ${ objName }.start`);
            },
            configurable: true,
            enumerable: false
          },
          end: {
            get() {
              throw new Error(`Use ${ objName }.range[1] instead of ${ objName }.end`);
            },
            configurable: true,
            enumerable: false
          }
        });
      }
      function defineStartEndAsErrorInTree(ast, visitorKeys) {
        Traverser.traverse(ast, {
          visitorKeys,
          enter: defineStartEndAsError.bind(null, "node")
        });
        ast.tokens.forEach(defineStartEndAsError.bind(null, "token"));
        ast.comments.forEach(defineStartEndAsError.bind(null, "token"));
      }
      function wrapParser(parser) {
        if (typeof parser.parseForESLint === "function") {
          return {
            [parserSymbol]: parser,
            parseForESLint(...args) {
              const ret = parser.parseForESLint(...args);
              defineStartEndAsErrorInTree(ret.ast, ret.visitorKeys);
              return ret;
            }
          };
        }
        return {
          [parserSymbol]: parser,
          parse(...args) {
            const ast = parser.parse(...args);
            defineStartEndAsErrorInTree(ast);
            return ast;
          }
        };
      }
      const DESCRIBE = Symbol("describe");
      const IT = Symbol("it");
      const IT_ONLY = Symbol("itOnly");
      function itDefaultHandler(text, method) {
        try {
          return method.call(this);
        } catch (err) {
          if (err instanceof assert.AssertionError) {
            err.message += ` (${ util.inspect(err.actual) } ${ err.operator } ${ util.inspect(err.expected) })`;
          }
          throw err;
        }
      }
      function describeDefaultHandler(text, method) {
        return method.call(this);
      }
      class RuleTester$1 {
        constructor(testerConfig) {
          this.testerConfig = merge({}, defaultConfig, testerConfig, { rules: { "rule-tester/validate-ast": "error" } });
          this.rules = {};
          this.linter = new Linter$1();
        }
        static setDefaultConfig(config) {
          if (typeof config !== "object") {
            throw new TypeError("RuleTester.setDefaultConfig: config must be an object");
          }
          defaultConfig = config;
          defaultConfig.rules = defaultConfig.rules || {};
        }
        static getDefaultConfig() {
          return defaultConfig;
        }
        static resetDefaultConfig() {
          defaultConfig = merge({}, testerDefaultConfig);
        }
        static get describe() {
          return this[DESCRIBE] || (typeof describe === "function" ? describe : describeDefaultHandler);
        }
        static set describe(value) {
          this[DESCRIBE] = value;
        }
        static get it() {
          return this[IT] || (typeof it === "function" ? it : itDefaultHandler);
        }
        static set it(value) {
          this[IT] = value;
        }
        static only(item) {
          if (typeof item === "string") {
            return {
              code: item,
              only: true
            };
          }
          return {
            ...item,
            only: true
          };
        }
        static get itOnly() {
          if (typeof this[IT_ONLY] === "function") {
            return this[IT_ONLY];
          }
          if (typeof this[IT] === "function" && typeof this[IT].only === "function") {
            return Function.bind.call(this[IT].only, this[IT]);
          }
          if (typeof it === "function" && typeof it.only === "function") {
            return Function.bind.call(it.only, it);
          }
          if (typeof this[DESCRIBE] === "function" || typeof this[IT] === "function") {
            throw new Error("Set `RuleTester.itOnly` to use `only` with a custom test framework.\n" + "See https://eslint.org/docs/developer-guide/nodejs-api#customizing-ruletester for more.");
          }
          if (typeof it === "function") {
            throw new Error("The current test framework does not support exclusive tests with `only`.");
          }
          throw new Error("To use `only`, use RuleTester with a test framework that provides `it.only()` like Mocha.");
        }
        static set itOnly(value) {
          this[IT_ONLY] = value;
        }
        defineRule(name, rule) {
          this.rules[name] = rule;
        }
        run(ruleName, rule, test) {
          const testerConfig = this.testerConfig, requiredScenarios = [
              "valid",
              "invalid"
            ], scenarioErrors = [], linter = this.linter;
          if (!test || typeof test !== "object") {
            throw new TypeError(`Test Scenarios for rule ${ ruleName } : Could not find test scenario object`);
          }
          requiredScenarios.forEach(scenarioType => {
            if (!test[scenarioType]) {
              scenarioErrors.push(`Could not find any ${ scenarioType } test scenarios`);
            }
          });
          if (scenarioErrors.length > 0) {
            throw new Error([`Test Scenarios for rule ${ ruleName } is invalid:`].concat(scenarioErrors).join("\n"));
          }
          linter.defineRule(ruleName, Object.assign({}, rule, {
            create(context) {
              freezeDeeply(context.options);
              freezeDeeply(context.settings);
              freezeDeeply(context.parserOptions);
              return (typeof rule === "function" ? rule : rule.create)(context);
            }
          }));
          linter.defineRules(this.rules);
          function runRuleForItem(item) {
            let config = merge({}, testerConfig), code, filename, output, beforeAST, afterAST;
            if (typeof item === "string") {
              code = item;
            } else {
              code = item.code;
              const itemConfig = { ...item };
              for (const parameter of RuleTesterParameters) {
                delete itemConfig[parameter];
              }
              config = merge(config, itemConfig);
            }
            if (item.filename) {
              filename = item.filename;
            }
            if (hasOwnProperty(item, "options")) {
              assert(Array.isArray(item.options), "options must be an array");
              config.rules[ruleName] = [1].concat(item.options);
            } else {
              config.rules[ruleName] = 1;
            }
            const schema = getRuleOptionsSchema(rule);
            linter.defineRule("rule-tester/validate-ast", () => ({
              Program(node) {
                beforeAST = cloneDeeplyExcludesParent(node);
              },
              "Program:exit"(node) {
                afterAST = node;
              }
            }));
            if (typeof config.parser === "string") {
              assert(path.isAbsolute(config.parser), "Parsers provided as strings to RuleTester must be absolute paths");
            } else {
              config.parser = espreePath;
            }
            linter.defineParser(config.parser, wrapParser(_nullRequire(config.parser)));
            if (schema) {
              ajv.validateSchema(schema);
              if (ajv.errors) {
                const errors = ajv.errors.map(error => {
                  const field = error.dataPath[0] === "." ? error.dataPath.slice(1) : error.dataPath;
                  return `\t${ field }: ${ error.message }`;
                }).join("\n");
                throw new Error([
                  `Schema for rule ${ ruleName } is invalid:`,
                  errors
                ]);
              }
              try {
                ajv.compile(schema);
              } catch (err) {
                throw new Error(`Schema for rule ${ ruleName } is invalid: ${ err.message }`);
              }
            }
            validate(config, "rule-tester", id => id === ruleName ? rule : null);
            const messages = linter.verify(code, config, filename);
            const fatalErrorMessage = messages.find(m => m.fatal);
            assert(!fatalErrorMessage, `A fatal parsing error occurred: ${ fatalErrorMessage && fatalErrorMessage.message }`);
            if (messages.some(m => m.fix)) {
              output = SourceCodeFixer.applyFixes(code, messages).output;
              const errorMessageInFix = linter.verify(output, config, filename).find(m => m.fatal);
              assert(!errorMessageInFix, [
                "A fatal parsing error occurred in autofix.",
                `Error: ${ errorMessageInFix && errorMessageInFix.message }`,
                "Autofix output:",
                output
              ].join("\n"));
            } else {
              output = code;
            }
            return {
              messages,
              output,
              beforeAST,
              afterAST: cloneDeeplyExcludesParent(afterAST)
            };
          }
          function assertASTDidntChange(beforeAST, afterAST) {
            if (!equal(beforeAST, afterAST)) {
              assert.fail("Rule should not modify AST.");
            }
          }
          function testValidTemplate(item) {
            const result = runRuleForItem(item);
            const messages = result.messages;
            assert.strictEqual(messages.length, 0, util.format("Should have no errors but had %d: %s", messages.length, util.inspect(messages)));
            assertASTDidntChange(result.beforeAST, result.afterAST);
          }
          function assertMessageMatches(actual, expected) {
            if (expected instanceof RegExp) {
              assert.ok(expected.test(actual), `Expected '${ actual }' to match ${ expected }`);
            } else {
              assert.strictEqual(actual, expected);
            }
          }
          function testInvalidTemplate(item) {
            assert.ok(item.errors || item.errors === 0, `Did not specify errors for an invalid test of ${ ruleName }`);
            if (Array.isArray(item.errors) && item.errors.length === 0) {
              assert.fail("Invalid cases must have at least one error");
            }
            const ruleHasMetaMessages = hasOwnProperty(rule, "meta") && hasOwnProperty(rule.meta, "messages");
            const friendlyIDList = ruleHasMetaMessages ? `[${ Object.keys(rule.meta.messages).map(key => `'${ key }'`).join(", ") }]` : null;
            const result = runRuleForItem(item);
            const messages = result.messages;
            if (typeof item.errors === "number") {
              if (item.errors === 0) {
                assert.fail("Invalid cases must have 'error' value greater than 0");
              }
              assert.strictEqual(messages.length, item.errors, util.format("Should have %d error%s but had %d: %s", item.errors, item.errors === 1 ? "" : "s", messages.length, util.inspect(messages)));
            } else {
              assert.strictEqual(messages.length, item.errors.length, util.format("Should have %d error%s but had %d: %s", item.errors.length, item.errors.length === 1 ? "" : "s", messages.length, util.inspect(messages)));
              const hasMessageOfThisRule = messages.some(m => m.ruleId === ruleName);
              for (let i = 0, l = item.errors.length; i < l; i++) {
                const error = item.errors[i];
                const message = messages[i];
                assert(hasMessageOfThisRule, "Error rule name should be the same as the name of the rule being tested");
                if (typeof error === "string" || error instanceof RegExp) {
                  assertMessageMatches(message.message, error);
                } else if (typeof error === "object" && error !== null) {
                  Object.keys(error).forEach(propertyName => {
                    assert.ok(errorObjectParameters.has(propertyName), `Invalid error property name '${ propertyName }'. Expected one of ${ friendlyErrorObjectParameterList }.`);
                  });
                  if (hasOwnProperty(error, "message")) {
                    assert.ok(!hasOwnProperty(error, "messageId"), "Error should not specify both 'message' and a 'messageId'.");
                    assert.ok(!hasOwnProperty(error, "data"), "Error should not specify both 'data' and 'message'.");
                    assertMessageMatches(message.message, error.message);
                  } else if (hasOwnProperty(error, "messageId")) {
                    assert.ok(ruleHasMetaMessages, "Error can not use 'messageId' if rule under test doesn't define 'meta.messages'.");
                    if (!hasOwnProperty(rule.meta.messages, error.messageId)) {
                      assert(false, `Invalid messageId '${ error.messageId }'. Expected one of ${ friendlyIDList }.`);
                    }
                    assert.strictEqual(message.messageId, error.messageId, `messageId '${ message.messageId }' does not match expected messageId '${ error.messageId }'.`);
                    if (hasOwnProperty(error, "data")) {
                      const unformattedOriginalMessage = rule.meta.messages[error.messageId];
                      const rehydratedMessage = interpolate(unformattedOriginalMessage, error.data);
                      assert.strictEqual(message.message, rehydratedMessage, `Hydrated message "${ rehydratedMessage }" does not match "${ message.message }"`);
                    }
                  }
                  assert.ok(hasOwnProperty(error, "data") ? hasOwnProperty(error, "messageId") : true, "Error must specify 'messageId' if 'data' is used.");
                  if (error.type) {
                    assert.strictEqual(message.nodeType, error.type, `Error type should be ${ error.type }, found ${ message.nodeType }`);
                  }
                  if (hasOwnProperty(error, "line")) {
                    assert.strictEqual(message.line, error.line, `Error line should be ${ error.line }`);
                  }
                  if (hasOwnProperty(error, "column")) {
                    assert.strictEqual(message.column, error.column, `Error column should be ${ error.column }`);
                  }
                  if (hasOwnProperty(error, "endLine")) {
                    assert.strictEqual(message.endLine, error.endLine, `Error endLine should be ${ error.endLine }`);
                  }
                  if (hasOwnProperty(error, "endColumn")) {
                    assert.strictEqual(message.endColumn, error.endColumn, `Error endColumn should be ${ error.endColumn }`);
                  }
                  if (hasOwnProperty(error, "suggestions")) {
                    if (!error.suggestions || Array.isArray(error.suggestions) && error.suggestions.length === 0) {
                      if (Array.isArray(message.suggestions) && message.suggestions.length > 0) {
                        assert.fail(`Error should have no suggestions on error with message: "${ message.message }"`);
                      }
                    } else {
                      assert.strictEqual(Array.isArray(message.suggestions), true, `Error should have an array of suggestions. Instead received "${ message.suggestions }" on error with message: "${ message.message }"`);
                      assert.strictEqual(message.suggestions.length, error.suggestions.length, `Error should have ${ error.suggestions.length } suggestions. Instead found ${ message.suggestions.length } suggestions`);
                      error.suggestions.forEach((expectedSuggestion, index) => {
                        assert.ok(typeof expectedSuggestion === "object" && expectedSuggestion !== null, "Test suggestion in 'suggestions' array must be an object.");
                        Object.keys(expectedSuggestion).forEach(propertyName => {
                          assert.ok(suggestionObjectParameters.has(propertyName), `Invalid suggestion property name '${ propertyName }'. Expected one of ${ friendlySuggestionObjectParameterList }.`);
                        });
                        const actualSuggestion = message.suggestions[index];
                        const suggestionPrefix = `Error Suggestion at index ${ index } :`;
                        if (hasOwnProperty(expectedSuggestion, "desc")) {
                          assert.ok(!hasOwnProperty(expectedSuggestion, "data"), `${ suggestionPrefix } Test should not specify both 'desc' and 'data'.`);
                          assert.strictEqual(actualSuggestion.desc, expectedSuggestion.desc, `${ suggestionPrefix } desc should be "${ expectedSuggestion.desc }" but got "${ actualSuggestion.desc }" instead.`);
                        }
                        if (hasOwnProperty(expectedSuggestion, "messageId")) {
                          assert.ok(ruleHasMetaMessages, `${ suggestionPrefix } Test can not use 'messageId' if rule under test doesn't define 'meta.messages'.`);
                          assert.ok(hasOwnProperty(rule.meta.messages, expectedSuggestion.messageId), `${ suggestionPrefix } Test has invalid messageId '${ expectedSuggestion.messageId }', the rule under test allows only one of ${ friendlyIDList }.`);
                          assert.strictEqual(actualSuggestion.messageId, expectedSuggestion.messageId, `${ suggestionPrefix } messageId should be '${ expectedSuggestion.messageId }' but got '${ actualSuggestion.messageId }' instead.`);
                          if (hasOwnProperty(expectedSuggestion, "data")) {
                            const unformattedMetaMessage = rule.meta.messages[expectedSuggestion.messageId];
                            const rehydratedDesc = interpolate(unformattedMetaMessage, expectedSuggestion.data);
                            assert.strictEqual(actualSuggestion.desc, rehydratedDesc, `${ suggestionPrefix } Hydrated test desc "${ rehydratedDesc }" does not match received desc "${ actualSuggestion.desc }".`);
                          }
                        } else {
                          assert.ok(!hasOwnProperty(expectedSuggestion, "data"), `${ suggestionPrefix } Test must specify 'messageId' if 'data' is used.`);
                        }
                        if (hasOwnProperty(expectedSuggestion, "output")) {
                          const codeWithAppliedSuggestion = SourceCodeFixer.applyFixes(item.code, [actualSuggestion]).output;
                          assert.strictEqual(codeWithAppliedSuggestion, expectedSuggestion.output, `Expected the applied suggestion fix to match the test suggestion output for suggestion at index: ${ index } on error with message: "${ message.message }"`);
                        }
                      });
                    }
                  }
                } else {
                  assert.fail(`Error should be a string, object, or RegExp, but found (${ util.inspect(message) })`);
                }
              }
            }
            if (hasOwnProperty(item, "output")) {
              if (item.output === null) {
                assert.strictEqual(result.output, item.code, "Expected no autofixes to be suggested");
              } else {
                assert.strictEqual(result.output, item.output, "Output is incorrect.");
              }
            } else {
              assert.strictEqual(result.output, item.code, "The rule fixed the code. Please add 'output' property.");
            }
            if (result.output !== item.code) {
              assert.ok(hasOwnProperty(rule, "meta"), "Fixable rules should export a `meta.fixable` property.");
            }
            assertASTDidntChange(result.beforeAST, result.afterAST);
          }
          RuleTester$1.describe(ruleName, () => {
            RuleTester$1.describe("valid", () => {
              test.valid.forEach(valid => {
                RuleTester$1[valid.only ? "itOnly" : "it"](sanitize(typeof valid === "object" ? valid.code : valid), () => {
                  testValidTemplate(valid);
                });
              });
            });
            RuleTester$1.describe("invalid", () => {
              test.invalid.forEach(invalid => {
                RuleTester$1[invalid.only ? "itOnly" : "it"](sanitize(invalid.code), () => {
                  testInvalidTemplate(invalid);
                });
              });
            });
          });
        }
      }
      RuleTester$1[DESCRIBE] = RuleTester$1[IT] = RuleTester$1[IT_ONLY] = null;
      exports$3 = RuleTester$1;
      var _ruleTester$1 = exports$3;

      var exports$2 = {};
      exports$2 = { RuleTester: _ruleTester$1 };
      var _ruleTester = exports$2;
      exports$2.RuleTester;

      var exports$1 = {};
      const {CLIEngine} = _cliEngine;
      const {ESLint} = _eslint;
      const {Linter} = _linter;
      const {RuleTester} = _ruleTester;
      const {SourceCode} = _sourceCode;
      exports$1 = {
        Linter,
        CLIEngine,
        ESLint,
        RuleTester,
        SourceCode
      };
      let deprecatedLinterInstance = null;
      Object.defineProperty(exports$1, "linter", {
        enumerable: false,
        get() {
          if (!deprecatedLinterInstance) {
            deprecatedLinterInstance = new Linter();
          }
          return deprecatedLinterInstance;
        }
      });
      var exports$1$1 = exports$1;
      exports$1.Linter; exports$1.CLIEngine; exports$1.ESLint; exports$1.RuleTester; exports$1.SourceCode;

      var __varRecorder__ = (lively.FreezerRuntime || lively.frozenModules).recorderFor("lively.ide/js/linter.js", __contextModule__);
      var __moduleMeta__ = {
        pathInPackage: function pathInPackage() {
          return "./js/linter.js";
        },
        unsubscribeFromToplevelDefinitionChanges: function unsubscribeFromToplevelDefinitionChanges() {
          return function () {};
        },
        subscribeToToplevelDefinitionChanges: function subscribeToToplevelDefinitionChanges() {
          return function () {};
        },
        "package": function _package() {
          return {
            name: "lively.ide",
            version: "0.1.0"
          };
        }
      };

      var lint = exports('l', __varRecorder__["lively.ide/js/linter.js__define__"]("lint", "function", function (code) {
        var customRules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var linter = new exports$1$1.Linter();
        var linterOutput = linter.verifyAndFix(code, Object.assign({}, eslintrc, {
          rules: Object.assign({}, eslintrc.rules, {}, customRules)
        }));
        return [linterOutput.output, linterOutput.messages];
      }, __moduleMeta__));

      __varRecorder__.lint = lint;

      var installLinter = exports('i', __varRecorder__["lively.ide/js/linter.js__define__"]("installLinter", "function", function (System) {
        System.lint = __varRecorder__.lint;
      }, __moduleMeta__));

      __varRecorder__.installLinter = installLinter;
      __varRecorder__.rules = {
        curly: ["warn", "multi-line"],
        eqeqeq: ["warn", "smart"],
        "no-extra-bind": "warn",
        "no-extra-boolean-cast": "warn",
        "no-regex-spaces": "warn",
        "no-undef-init": "warn",
        "no-unneeded-ternary": ["warn", {
          defaultAssignment: false
        }],
        "no-useless-computed-key": "warn",
        "no-useless-rename": "warn",
        "no-useless-return": "warn",
        "no-var": "warn",
        "one-var": ["warn", {
          initialized: "never"
        }],
        "quote-props": ["warn", "as-needed"],
        "spaced-comment": ["warn", "always", {
          line: {
            markers: ["*package", "!", "/", ",", "="]
          },
          block: {
            balanced: true,
            markers: ["*package", "!", ",", ":", "::", "flow-include"],
            exceptions: ["*"]
          }
        }],
        yoda: ["warn", "never"],
        "array-bracket-spacing": ["warn", "never"],
        "arrow-spacing": ["warn", {
          before: true,
          after: true
        }],
        "block-spacing": ["warn", "always"],
        "brace-style": ["warn", "1tbs", {
          allowSingleLine: true
        }],
        "comma-dangle": ["warn", {
          arrays: "never",
          objects: "never",
          imports: "never",
          exports: "never",
          functions: "never"
        }],
        "comma-spacing": ["warn", {
          before: false,
          after: true
        }],
        "comma-style": ["warn", "last"],
        "computed-property-spacing": ["warn", "never", {
          enforceForClassMembers: true
        }],
        "dot-location": ["warn", "property"],
        "eol-last": "warn",
        "func-call-spacing": ["warn", "never"],
        "generator-star-spacing": ["warn", {
          before: true,
          after: true
        }],
        indent: ["warn", 2, {
          SwitchCase: 1,
          VariableDeclarator: 1,
          outerIIFEBody: 1,
          MemberExpression: 1,
          FunctionDeclaration: {
            parameters: 1,
            body: 1
          },
          FunctionExpression: {
            parameters: 1,
            body: 1
          },
          CallExpression: {
            arguments: 1
          },
          ArrayExpression: 1,
          ObjectExpression: 1,
          ImportDeclaration: 1,
          flatTernaryExpressions: false,
          ignoreComments: false,
          ignoredNodes: ["TemplateLiteral *", "JSXElement", "JSXElement > *", "JSXAttribute", "JSXIdentifier", "JSXNamespacedName", "JSXMemberExpression", "JSXSpreadAttribute", "JSXExpressionContainer", "JSXOpeningElement", "JSXClosingElement", "JSXFragment", "JSXOpeningFragment", "JSXClosingFragment", "JSXText", "JSXEmptyExpression", "JSXSpreadChild"],
          offsetTernaryExpressions: true
        }],
        "key-spacing": ["warn", {
          beforeColon: false,
          afterColon: true
        }],
        "keyword-spacing": ["warn", {
          before: true,
          after: true
        }],
        "lines-between-class-members": ["warn", "always", {
          exceptAfterSingleLine: true
        }],
        "linebreak-style": ["warn", "unix"],
        "multiline-ternary": ["warn", "always-multiline"],
        "new-parens": "warn",
        "no-multi-spaces": "warn",
        "no-multiple-empty-lines": ["warn", {
          max: 1,
          maxEOF: 0
        }],
        "no-whitespace-before-property": "warn",
        "object-curly-newline": ["warn", {
          multiline: true,
          consistent: true
        }],
        "object-curly-spacing": ["warn", "always"],
        "object-property-newline": ["warn", {
          allowMultiplePropertiesPerLine: true
        }],
        "operator-linebreak": ["warn", "after", {
          overrides: {
            "?": "before",
            ":": "before",
            "|>": "before"
          }
        }],
        "padded-blocks": ["warn", {
          blocks: "never",
          switches: "never",
          classes: "never"
        }],
        quotes: ["warn", "single", {
          avoidEscape: true,
          allowTemplateLiterals: false
        }],
        "rest-spread-spacing": ["warn", "never"],
        "semi-spacing": ["warn", {
          before: false,
          after: true
        }],
        "space-before-blocks": ["warn", "always"],
        "space-before-function-paren": ["warn", "always"],
        "space-in-parens": ["warn", "never"],
        "space-infix-ops": "warn",
        "space-unary-ops": ["warn", {
          words: true,
          nonwords: false
        }],
        semi: ["warn", "always"],
        "no-extra-semi": "warn",
        "prefer-const": "off",
        "no-trailing-spaces": ["warn", {
          ignoreComments: false
        }],
        "no-debugger": "warn",
        "no-unreachable": "warn",
        "no-const-assign": "warn",
        "no-unused-vars": "warn",
        "no-use-before-define": ["error", {
          functions: true,
          classes: true,
          variables: true
        }],
        "no-constructor-return": "warn",
        "no-console": "warn"
      };
      eslintrc.rules = __varRecorder__.rules;
      __varRecorder__.installLinter = installLinter;
      __varRecorder__["default"] = lint;

    })
  };
}));
